#define JUCE_DRIVER 1
#define SOUNDFILE 1
/* ------------------------------------------------------------
name: "GaitSoni"
Code generated with Faust 2.22.5 (https://faust.grame.fr)
Compilation options: -lang cpp -scal -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

/************************************************************************
 ************************************************************************
 FAUST API Architecture File
 Copyright (C) 2016 GRAME, Romain Michon, CCRMA - Stanford University
 Copyright (C) 2014-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------

 This is sample code. This file is provided as an example of minimal
 FAUST architecture file. Redistribution and use in source and binary
 forms, with or without modification, in part or in full are permitted.
 In particular you can create a derived work of this FAUST architecture
 and distribute that work under terms of your choice.

 This sample code is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 ************************************************************************
 ************************************************************************/

#include <cmath>
#include <cstring>

/************************** BEGIN misc.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __misc__
#define __misc__

#include <algorithm>
#include <map>
#include <cstdlib>
#include <string.h>
#include <fstream>
#include <string>

/************************** BEGIN meta.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __meta__
#define __meta__

struct Meta
{
    virtual ~Meta() {};
    virtual void declare(const char* key, const char* value) = 0;
    
};

#endif
/**************************  END  meta.h **************************/

using std::max;
using std::min;

struct XXXX_Meta : std::map<const char*, const char*>
{
    void declare(const char* key, const char* value) { (*this)[key] = value; }
};

struct MY_Meta : Meta, std::map<const char*, const char*>
{
    void declare(const char* key, const char* value) { (*this)[key] = value; }
};

static int lsr(int x, int n) { return int(((unsigned int)x) >> n); }

static int int2pow2(int x) { int r = 0; while ((1<<r) < x) r++; return r; }

static long lopt(char* argv[], const char* name, long def)
{
    for (int i = 0; argv[i]; i++) if (!strcmp(argv[i], name)) return std::atoi(argv[i+1]);
    return def;
}

static long lopt1(int argc, char* argv[], const char* longname, const char* shortname, long def)
{
    for (int i = 2; i < argc; i++) {
        if (strcmp(argv[i-1], shortname) == 0 || strcmp(argv[i-1], longname) == 0) {
            return atoi(argv[i]);
        }
    }
    return def;
}

static const char* lopts(char* argv[], const char* name, const char* def)
{
    for (int i = 0; argv[i]; i++) if (!strcmp(argv[i], name)) return argv[i+1];
    return def;
}

static const char* lopts1(int argc, char* argv[], const char* longname, const char* shortname, const char* def)
{
    for (int i = 2; i < argc; i++) {
        if (strcmp(argv[i-1], shortname) == 0 || strcmp(argv[i-1], longname) == 0) {
            return argv[i];
        }
    }
    return def;
}

static bool isopt(char* argv[], const char* name)
{
    for (int i = 0; argv[i]; i++) if (!strcmp(argv[i], name)) return true;
    return false;
}

static std::string pathToContent(const std::string& path)
{
    std::ifstream file(path.c_str(), std::ifstream::binary);
    
    file.seekg(0, file.end);
    int size = int(file.tellg());
    file.seekg(0, file.beg);
    
    // And allocate buffer to that a single line can be read...
    char* buffer = new char[size + 1];
    file.read(buffer, size);
    
    // Terminate the string
    buffer[size] = 0;
    std::string result = buffer;
    file.close();
    delete [] buffer;
    return result;
}

#endif

/**************************  END  misc.h **************************/
/************************** BEGIN UI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2020 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __UI_H__
#define __UI_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif

/*******************************************************************************
 * UI : Faust DSP User Interface
 * User Interface as expected by the buildUserInterface() method of a DSP.
 * This abstract class contains only the method that the Faust compiler can
 * generate to describe a DSP user interface.
 ******************************************************************************/

struct Soundfile;

template <typename REAL>
struct UIReal
{
    UIReal() {}
    virtual ~UIReal() {}
    
    // -- widget's layouts
    
    virtual void openTabBox(const char* label) = 0;
    virtual void openHorizontalBox(const char* label) = 0;
    virtual void openVerticalBox(const char* label) = 0;
    virtual void closeBox() = 0;
    
    // -- active widgets
    
    virtual void addButton(const char* label, REAL* zone) = 0;
    virtual void addCheckButton(const char* label, REAL* zone) = 0;
    virtual void addVerticalSlider(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step) = 0;
    virtual void addHorizontalSlider(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step) = 0;
    virtual void addNumEntry(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step) = 0;
    
    // -- passive widgets
    
    virtual void addHorizontalBargraph(const char* label, REAL* zone, REAL min, REAL max) = 0;
    virtual void addVerticalBargraph(const char* label, REAL* zone, REAL min, REAL max) = 0;
    
    // -- soundfiles
    
    virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) = 0;
    
    // -- metadata declarations
    
    virtual void declare(REAL* zone, const char* key, const char* val) {}
};

struct UI : public UIReal<FAUSTFLOAT>
{
    UI() {}
    virtual ~UI() {}
};

#endif
/**************************  END  UI.h **************************/
/************************** BEGIN JSONUIDecoder.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __JSONUIDecoder__
#define __JSONUIDecoder__

#include <vector>
#include <map>
#include <utility>
#include <cstdlib>
#include <sstream>
#include <functional>

/************************** BEGIN CGlue.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2018 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef CGLUE_H
#define CGLUE_H

/************************** BEGIN CInterface.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2018 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef CINTERFACE_H
#define CINTERFACE_H

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif
    
struct Soundfile;

/*******************************************************************************
 * UI, Meta and MemoryManager structures for C code.
 ******************************************************************************/

// -- widget's layouts

typedef void (* openTabBoxFun) (void* ui_interface, const char* label);
typedef void (* openHorizontalBoxFun) (void* ui_interface, const char* label);
typedef void (* openVerticalBoxFun) (void* ui_interface, const char* label);
typedef void (* closeBoxFun) (void* ui_interface);

// -- active widgets

typedef void (* addButtonFun) (void* ui_interface, const char* label, FAUSTFLOAT* zone);
typedef void (* addCheckButtonFun) (void* ui_interface, const char* label, FAUSTFLOAT* zone);
typedef void (* addVerticalSliderFun) (void* ui_interface, const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step);
typedef void (* addHorizontalSliderFun) (void* ui_interface, const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step);
typedef void (* addNumEntryFun) (void* ui_interface, const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step);

// -- passive widgets

typedef void (* addHorizontalBargraphFun) (void* ui_interface, const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max);
typedef void (* addVerticalBargraphFun) (void* ui_interface, const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max);

// -- soundfiles
    
typedef void (* addSoundfileFun) (void* ui_interface, const char* label, const char* url, struct Soundfile** sf_zone);

typedef void (* declareFun) (void* ui_interface, FAUSTFLOAT* zone, const char* key, const char* value);

typedef struct {

    void* uiInterface;

    openTabBoxFun openTabBox;
    openHorizontalBoxFun openHorizontalBox;
    openVerticalBoxFun openVerticalBox;
    closeBoxFun closeBox;
    addButtonFun addButton;
    addCheckButtonFun addCheckButton;
    addVerticalSliderFun addVerticalSlider;
    addHorizontalSliderFun addHorizontalSlider;
    addNumEntryFun addNumEntry;
    addHorizontalBargraphFun addHorizontalBargraph;
    addVerticalBargraphFun addVerticalBargraph;
    addSoundfileFun addSoundfile;
    declareFun declare;

} UIGlue;

typedef void (* metaDeclareFun) (void* ui_interface, const char* key, const char* value);

typedef struct {

    void* metaInterface;
    
    metaDeclareFun declare;

} MetaGlue;

/***************************************
 *  Interface for the DSP object
 ***************************************/

typedef char dsp_imp;
    
typedef dsp_imp* (* newDspFun) ();
typedef void (* destroyDspFun) (dsp_imp* dsp);
typedef int (* getNumInputsFun) (dsp_imp* dsp);
typedef int (* getNumOutputsFun) (dsp_imp* dsp);
typedef void (* buildUserInterfaceFun) (dsp_imp* dsp, UIGlue* ui);
typedef int (* getSampleRateFun) (dsp_imp* dsp);
typedef void (* initFun) (dsp_imp* dsp, int sample_rate);
typedef void (* classInitFun) (int sample_rate);
typedef void (* instanceInitFun) (dsp_imp* dsp, int sample_rate);
typedef void (* instanceConstantsFun) (dsp_imp* dsp, int sample_rate);
typedef void (* instanceResetUserInterfaceFun) (dsp_imp* dsp);
typedef void (* instanceClearFun) (dsp_imp* dsp);
typedef void (* computeFun) (dsp_imp* dsp, int len, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs);
typedef void (* metadataFun) (MetaGlue* meta);
    
/***************************************
 * DSP memory manager functions
 ***************************************/

typedef void* (* allocateFun) (void* manager_interface, size_t size);
typedef void (* destroyFun) (void* manager_interface, void* ptr);

typedef struct {
    
    void* managerInterface;
    
    allocateFun allocate;
    destroyFun destroy;
    
} MemoryManagerGlue;

#ifdef __cplusplus
}
#endif

#endif
/**************************  END  CInterface.h **************************/
/************************** BEGIN dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __dsp__
#define __dsp__

#include <string>
#include <vector>

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif

struct UI;
struct Meta;

/**
 * DSP memory manager.
 */

struct dsp_memory_manager {
    
    virtual ~dsp_memory_manager() {}
    
    virtual void* allocate(size_t size) = 0;
    virtual void destroy(void* ptr) = 0;
    
};

/**
* Signal processor definition.
*/

class dsp {

    public:

        dsp() {}
        virtual ~dsp() {}

        /* Return instance number of audio inputs */
        virtual int getNumInputs() = 0;
    
        /* Return instance number of audio outputs */
        virtual int getNumOutputs() = 0;
    
        /**
         * Trigger the ui_interface parameter with instance specific calls
         * to 'addBtton', 'addVerticalSlider'... in order to build the UI.
         *
         * @param ui_interface - the user interface builder
         */
        virtual void buildUserInterface(UI* ui_interface) = 0;
    
        /* Returns the sample rate currently used by the instance */
        virtual int getSampleRate() = 0;
    
        /**
         * Global init, calls the following methods:
         * - static class 'classInit': static tables initialization
         * - 'instanceInit': constants and instance state initialization
         *
         * @param sample_rate - the sampling rate in Hertz
         */
        virtual void init(int sample_rate) = 0;

        /**
         * Init instance state
         *
         * @param sample_rate - the sampling rate in Hertz
         */
        virtual void instanceInit(int sample_rate) = 0;

        /**
         * Init instance constant state
         *
         * @param sample_rate - the sampling rate in Hertz
         */
        virtual void instanceConstants(int sample_rate) = 0;
    
        /* Init default control parameters values */
        virtual void instanceResetUserInterface() = 0;
    
        /* Init instance state (delay lines...) */
        virtual void instanceClear() = 0;
 
        /**
         * Return a clone of the instance.
         *
         * @return a copy of the instance on success, otherwise a null pointer.
         */
        virtual dsp* clone() = 0;
    
        /**
         * Trigger the Meta* parameter with instance specific calls to 'declare' (key, value) metadata.
         *
         * @param m - the Meta* meta user
         */
        virtual void metadata(Meta* m) = 0;
    
        /**
         * DSP instance computation, to be called with successive in/out audio buffers.
         *
         * @param count - the number of frames to compute
         * @param inputs - the input audio buffers as an array of non-interleaved FAUSTFLOAT samples (eiher float, double or quad)
         * @param outputs - the output audio buffers as an array of non-interleaved FAUSTFLOAT samples (eiher float, double or quad)
         *
         */
        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) = 0;
    
        /**
         * DSP instance computation: alternative method to be used by subclasses.
         *
         * @param date_usec - the timestamp in microsec given by audio driver.
         * @param count - the number of frames to compute
         * @param inputs - the input audio buffers as an array of non-interleaved FAUSTFLOAT samples (either float, double or quad)
         * @param outputs - the output audio buffers as an array of non-interleaved FAUSTFLOAT samples (either float, double or quad)
         *
         */
        virtual void compute(double /*date_usec*/, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { compute(count, inputs, outputs); }
       
};

/**
 * Generic DSP decorator.
 */

class decorator_dsp : public dsp {

    protected:

        dsp* fDSP;

    public:

        decorator_dsp(dsp* dsp = nullptr):fDSP(dsp) {}
        virtual ~decorator_dsp() { delete fDSP; }

        virtual int getNumInputs() { return fDSP->getNumInputs(); }
        virtual int getNumOutputs() { return fDSP->getNumOutputs(); }
        virtual void buildUserInterface(UI* ui_interface) { fDSP->buildUserInterface(ui_interface); }
        virtual int getSampleRate() { return fDSP->getSampleRate(); }
        virtual void init(int sample_rate) { fDSP->init(sample_rate); }
        virtual void instanceInit(int sample_rate) { fDSP->instanceInit(sample_rate); }
        virtual void instanceConstants(int sample_rate) { fDSP->instanceConstants(sample_rate); }
        virtual void instanceResetUserInterface() { fDSP->instanceResetUserInterface(); }
        virtual void instanceClear() { fDSP->instanceClear(); }
        virtual decorator_dsp* clone() { return new decorator_dsp(fDSP->clone()); }
        virtual void metadata(Meta* m) { fDSP->metadata(m); }
        // Beware: subclasses usually have to overload the two 'compute' methods
        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { fDSP->compute(count, inputs, outputs); }
        virtual void compute(double date_usec, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { fDSP->compute(date_usec, count, inputs, outputs); }
    
};

/**
 * DSP factory class.
 */

class dsp_factory {
    
    protected:
    
        // So that to force sub-classes to use deleteDSPFactory(dsp_factory* factory);
        virtual ~dsp_factory() {}
    
    public:
    
        virtual std::string getName() = 0;
        virtual std::string getSHAKey() = 0;
        virtual std::string getDSPCode() = 0;
        virtual std::string getCompileOptions() = 0;
        virtual std::vector<std::string> getLibraryList() = 0;
        virtual std::vector<std::string> getIncludePathnames() = 0;
    
        virtual dsp* createDSPInstance() = 0;
    
        virtual void setMemoryManager(dsp_memory_manager* manager) = 0;
        virtual dsp_memory_manager* getMemoryManager() = 0;
    
};

/**
 * On Intel set FZ (Flush to Zero) and DAZ (Denormals Are Zero)
 * flags to avoid costly denormals.
 */

#ifdef __SSE__
    #include <xmmintrin.h>
    #ifdef __SSE2__
        #define AVOIDDENORMALS _mm_setcsr(_mm_getcsr() | 0x8040)
    #else
        #define AVOIDDENORMALS _mm_setcsr(_mm_getcsr() | 0x8000)
    #endif
#else
    #define AVOIDDENORMALS
#endif

#endif
/**************************  END  dsp.h **************************/

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 * UI glue code
 ******************************************************************************/
 
class UIFloat
{

    public:

        UIFloat() {}

        virtual ~UIFloat() {}

        // -- widget's layouts

        virtual void openTabBox(const char* label) = 0;
        virtual void openHorizontalBox(const char* label) = 0;
        virtual void openVerticalBox(const char* label) = 0;
        virtual void closeBox() = 0;

        // -- active widgets

        virtual void addButton(const char* label, float* zone) = 0;
        virtual void addCheckButton(const char* label, float* zone) = 0;
        virtual void addVerticalSlider(const char* label, float* zone, float init, float min, float max, float step) = 0;
        virtual void addHorizontalSlider(const char* label, float* zone, float init, float min, float max, float step) = 0;
        virtual void addNumEntry(const char* label, float* zone, float init, float min, float max, float step) = 0;

        // -- passive widgets

        virtual void addHorizontalBargraph(const char* label, float* zone, float min, float max) = 0;
        virtual void addVerticalBargraph(const char* label, float* zone, float min, float max) = 0;
    
        // -- soundfiles
    
        virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) = 0;

        // -- metadata declarations

        virtual void declare(float* zone, const char* key, const char* val) {}
};

static void openTabBoxGlueFloat(void* cpp_interface, const char* label)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->openTabBox(label);
}

static void openHorizontalBoxGlueFloat(void* cpp_interface, const char* label)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->openHorizontalBox(label);
}

static void openVerticalBoxGlueFloat(void* cpp_interface, const char* label)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->openVerticalBox(label);
}

static void closeBoxGlueFloat(void* cpp_interface)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->closeBox();
}

static void addButtonGlueFloat(void* cpp_interface, const char* label, float* zone)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->addButton(label, zone);
}

static void addCheckButtonGlueFloat(void* cpp_interface, const char* label, float* zone)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->addCheckButton(label, zone);
}

static void addVerticalSliderGlueFloat(void* cpp_interface, const char* label, float* zone, float init, float min, float max, float step)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->addVerticalSlider(label, zone, init, min, max, step);
}

static void addHorizontalSliderGlueFloat(void* cpp_interface, const char* label, float* zone, float init, float min, float max, float step)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->addHorizontalSlider(label, zone, init, min, max, step);
}

static void addNumEntryGlueFloat(void* cpp_interface, const char* label, float* zone, float init, float min, float max, float step)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->addNumEntry(label, zone, init, min, max, step);
}

static void addHorizontalBargraphGlueFloat(void* cpp_interface, const char* label, float* zone, float min, float max)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->addHorizontalBargraph(label, zone, min, max);
}

static void addVerticalBargraphGlueFloat(void* cpp_interface, const char* label, float* zone, float min, float max)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->addVerticalBargraph(label, zone, min, max);
}
    
static void addSoundfileGlueFloat(void* cpp_interface, const char* label, const char* url, Soundfile** sf_zone)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->addSoundfile(label, url, sf_zone);
}

static void declareGlueFloat(void* cpp_interface, float* zone, const char* key, const char* value)
{
    UIFloat* ui_interface = static_cast<UIFloat*>(cpp_interface);
    ui_interface->declare(zone, key, value);
}

class UIDouble
{

    public:

        UIDouble() {}

        virtual ~UIDouble() {}

        // -- widget's layouts

        virtual void openTabBox(const char* label) = 0;
        virtual void openHorizontalBox(const char* label) = 0;
        virtual void openVerticalBox(const char* label) = 0;
        virtual void closeBox() = 0;

        // -- active widgets

        virtual void addButton(const char* label, double* zone) = 0;
        virtual void addCheckButton(const char* label, double* zone) = 0;
        virtual void addVerticalSlider(const char* label, double* zone, double init, double min, double max, double step) = 0;
        virtual void addHorizontalSlider(const char* label, double* zone, double init, double min, double max, double step) = 0;
        virtual void addNumEntry(const char* label, double* zone, double init, double min, double max, double step) = 0;

        // -- passive widgets

        virtual void addHorizontalBargraph(const char* label, double* zone, double min, double max) = 0;
        virtual void addVerticalBargraph(const char* label, double* zone, double min, double max) = 0;
    
        // -- soundfiles
    
        virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) = 0;

        // -- metadata declarations

        virtual void declare(double* zone, const char* key, const char* val) {}
};

static void openTabBoxGlueDouble(void* cpp_interface, const char* label)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->openTabBox(label);
}

static void openHorizontalBoxGlueDouble(void* cpp_interface, const char* label)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->openHorizontalBox(label);
}

static void openVerticalBoxGlueDouble(void* cpp_interface, const char* label)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->openVerticalBox(label);
}

static void closeBoxGlueDouble(void* cpp_interface)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->closeBox();
}

static void addButtonGlueDouble(void* cpp_interface, const char* label, double* zone)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->addButton(label, zone);
}

static void addCheckButtonGlueDouble(void* cpp_interface, const char* label, double* zone)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->addCheckButton(label, zone);
}

static void addVerticalSliderGlueDouble(void* cpp_interface, const char* label, double* zone, double init, double min, double max, double step)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->addVerticalSlider(label, zone, init, min, max, step);
}

static void addHorizontalSliderGlueDouble(void* cpp_interface, const char* label, double* zone, double init, double min, double max, double step)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->addHorizontalSlider(label, zone, init, min, max, step);
}

static void addNumEntryGlueDouble(void* cpp_interface, const char* label, double* zone, double init, double min, double max, double step)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->addNumEntry(label, zone, init, min, max, step);
}

static void addHorizontalBargraphGlueDouble(void* cpp_interface, const char* label, double* zone, double min, double max)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->addHorizontalBargraph(label, zone, min, max);
}

static void addVerticalBargraphGlueDouble(void* cpp_interface, const char* label, double* zone, double min, double max)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->addVerticalBargraph(label, zone, min, max);
}
    
static void addSoundfileGlueDouble(void* cpp_interface, const char* label, const char* url, Soundfile** sf_zone)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->addSoundfile(label, url, sf_zone);
}

static void declareGlueDouble(void* cpp_interface, double* zone, const char* key, const char* value)
{
    UIDouble* ui_interface = static_cast<UIDouble*>(cpp_interface);
    ui_interface->declare(zone, key, value);
}

static void buildUIGlue(UIGlue* glue, UI* ui_interface, bool is_double)
{
    glue->uiInterface = ui_interface;
    
    if (is_double) {
        glue->openTabBox = reinterpret_cast<openTabBoxFun>(openTabBoxGlueDouble);
        glue->openHorizontalBox = reinterpret_cast<openHorizontalBoxFun>(openHorizontalBoxGlueDouble);
        glue->openVerticalBox = reinterpret_cast<openVerticalBoxFun>(openVerticalBoxGlueDouble);
        glue->closeBox = reinterpret_cast<closeBoxFun>(closeBoxGlueDouble);
        glue->addButton = reinterpret_cast<addButtonFun>(addButtonGlueDouble);
        glue->addCheckButton = reinterpret_cast<addCheckButtonFun>(addCheckButtonGlueDouble);
        glue->addVerticalSlider = reinterpret_cast<addVerticalSliderFun>(addVerticalSliderGlueDouble);
        glue->addHorizontalSlider = reinterpret_cast<addHorizontalSliderFun>(addHorizontalSliderGlueDouble);
        glue->addNumEntry = reinterpret_cast<addNumEntryFun>(addNumEntryGlueDouble);
        glue->addHorizontalBargraph = reinterpret_cast<addHorizontalBargraphFun>(addHorizontalBargraphGlueDouble);
        glue->addVerticalBargraph = reinterpret_cast<addVerticalBargraphFun>(addVerticalBargraphGlueDouble);
        glue->addSoundfile = reinterpret_cast<addSoundfileFun>(addSoundfileGlueDouble);
        glue->declare = reinterpret_cast<declareFun>(declareGlueDouble);
    } else {
        glue->openTabBox = reinterpret_cast<openTabBoxFun>(openTabBoxGlueFloat);
        glue->openHorizontalBox = reinterpret_cast<openHorizontalBoxFun>(openHorizontalBoxGlueFloat);
        glue->openVerticalBox = reinterpret_cast<openVerticalBoxFun>(openVerticalBoxGlueFloat);
        glue->closeBox = reinterpret_cast<closeBoxFun>(closeBoxGlueFloat);
        glue->addButton = reinterpret_cast<addButtonFun>(addButtonGlueFloat);
        glue->addCheckButton = reinterpret_cast<addCheckButtonFun>(addCheckButtonGlueFloat);
        glue->addVerticalSlider = reinterpret_cast<addVerticalSliderFun>(addVerticalSliderGlueFloat);
        glue->addHorizontalSlider = reinterpret_cast<addHorizontalSliderFun>(addHorizontalSliderGlueFloat);
        glue->addNumEntry = reinterpret_cast<addNumEntryFun>(addNumEntryGlueFloat);
        glue->addHorizontalBargraph = reinterpret_cast<addHorizontalBargraphFun>(addHorizontalBargraphGlueFloat);
        glue->addVerticalBargraph = reinterpret_cast<addVerticalBargraphFun>(addVerticalBargraphGlueFloat);
        glue->addSoundfile = reinterpret_cast<addSoundfileFun>(addSoundfileGlueFloat);
        glue->declare = reinterpret_cast<declareFun>(declareGlueFloat);
    }
}
    
class UITemplate
{
    
    private:
        
        void* fCPPInterface;
        
    public:
        
        UITemplate(void* cpp_interface):fCPPInterface(cpp_interface)
        {}
        
        virtual ~UITemplate() {}
        
        // -- widget's layouts
        
        virtual void openTabBox(const char* label)
        {
            openTabBoxGlueFloat(fCPPInterface, label);
        }
        virtual void openHorizontalBox(const char* label)
        {
            openHorizontalBoxGlueFloat(fCPPInterface, label);
        }
        virtual void openVerticalBox(const char* label)
        {
            openVerticalBoxGlueFloat(fCPPInterface, label);
        }
        virtual void closeBox()
        {
            closeBoxGlueFloat(fCPPInterface);
        }
        
        // float version
        
        // -- active widgets
        
        virtual void addButton(const char* label, float* zone)
        {
            addButtonGlueFloat(fCPPInterface, label, zone);
        }
        virtual void addCheckButton(const char* label, float* zone)
        {
            addCheckButtonGlueFloat(fCPPInterface, label, zone);
        }
        
        virtual void addVerticalSlider(const char* label, float* zone, float init, float min, float max, float step)
        {
            addVerticalSliderGlueFloat(fCPPInterface, label, zone, init, min, max, step);
        }
        
        virtual void addHorizontalSlider(const char* label, float* zone, float init, float min, float max, float step)
        {
            addHorizontalSliderGlueFloat(fCPPInterface, label, zone, init, min, max, step);
        }
        
        virtual void addNumEntry(const char* label, float* zone, float init, float min, float max, float step)
        {
            addNumEntryGlueFloat(fCPPInterface, label, zone, init, min, max, step);
        }
        
        // -- passive widgets
        
        virtual void addHorizontalBargraph(const char* label, float* zone, float min, float max)
        {
            addHorizontalBargraphGlueFloat(fCPPInterface, label, zone, min, max);
        }
        
        virtual void addVerticalBargraph(const char* label, float* zone, float min, float max)
        {
            addVerticalBargraphGlueFloat(fCPPInterface, label, zone, min, max);
        }
    
        // -- metadata declarations
        
        virtual void declare(float* zone, const char* key, const char* val)
        {
            declareGlueFloat(fCPPInterface, zone, key, val);
        }
        
        // double version
        
        virtual void addButton(const char* label, double* zone)
        {
            addButtonGlueDouble(fCPPInterface, label, zone);
        }
        virtual void addCheckButton(const char* label, double* zone)
        {
            addCheckButtonGlueDouble(fCPPInterface, label, zone);
        }
        
        virtual void addVerticalSlider(const char* label, double* zone, double init, double min, double max, double step)
        {
            addVerticalSliderGlueDouble(fCPPInterface, label, zone, init, min, max, step);
        }
        
        virtual void addHorizontalSlider(const char* label, double* zone, double init, double min, double max, double step)
        {
            addHorizontalSliderGlueDouble(fCPPInterface, label, zone, init, min, max, step);
        }
        
        virtual void addNumEntry(const char* label, double* zone, double init, double min, double max, double step)
        {
            addNumEntryGlueDouble(fCPPInterface, label, zone, init, min, max, step);
        }
    
        // -- soundfiles
        
        virtual void addSoundfile(const char* label, const char* url, Soundfile** sf_zone)
        {
            addSoundfileGlueFloat(fCPPInterface, label, url, sf_zone);
        }
    
        // -- passive widgets
        
        virtual void addHorizontalBargraph(const char* label, double* zone, double min, double max)
        {
            addHorizontalBargraphGlueDouble(fCPPInterface, label, zone, min, max);
        }
        
        virtual void addVerticalBargraph(const char* label, double* zone, double min, double max)
        {
            addVerticalBargraphGlueDouble(fCPPInterface, label, zone, min, max);
        }
    
        // -- metadata declarations
        
        virtual void declare(double* zone, const char* key, const char* val)
        {
            declareGlueDouble(fCPPInterface, zone, key, val);
        }

};

/*******************************************************************************
 * Meta glue code
 ******************************************************************************/

static void declareMetaGlue(void* cpp_interface, const char* key, const char* value)
{
    Meta* meta_interface = static_cast<Meta*>(cpp_interface);
    meta_interface->declare(key, value);
}

static void buildMetaGlue(MetaGlue* glue, Meta* meta)
{
    glue->metaInterface = meta;
    glue->declare = declareMetaGlue;
}
    
/*******************************************************************************
 * Memory manager glue code
 ******************************************************************************/

static void* allocateMemoryManagerGlue(void* cpp_interface, size_t size)
{
    dsp_memory_manager* manager_interface = static_cast<dsp_memory_manager*>(cpp_interface);
    return manager_interface->allocate(size);
}
    
static void destroyMemoryManagerGlue(void* cpp_interface, void* ptr)
{
    dsp_memory_manager* manager_interface = static_cast<dsp_memory_manager*>(cpp_interface);
    manager_interface->destroy(ptr);
}

static void buildManagerGlue(MemoryManagerGlue* glue, dsp_memory_manager* manager)
{
    glue->managerInterface = manager;
    glue->allocate = allocateMemoryManagerGlue;
    glue->destroy = destroyMemoryManagerGlue;
}

#ifdef __cplusplus
}
#endif

#endif
/**************************  END  CGlue.h **************************/
/************************** BEGIN SimpleParser.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef SIMPLEPARSER_H
#define SIMPLEPARSER_H

// ---------------------------------------------------------------------
//                          Simple Parser
// A parser returns true if it was able to parse what it is
// supposed to parse and advance the pointer. Otherwise it returns false
// and the pointer is not advanced so that another parser can be tried.
// ---------------------------------------------------------------------

#include <vector>
#include <map>
#include <string>
#include <fstream>
#include <sstream>
#include <iostream>
#include <ctype.h>

#ifndef _WIN32
# pragma GCC diagnostic ignored "-Wunused-function"
#endif

struct itemInfo {
    std::string type;
    std::string label;
    std::string url;
    std::string address;
    int index;
    double init;
    double min;
    double max;
    double step;
    std::vector<std::pair<std::string, std::string> > meta;
    
    itemInfo():index(0), init(0.), min(0.), max(0.), step(0.)
    {}
};

// ---------------------------------------------------------------------
//                          Elementary parsers
// ---------------------------------------------------------------------

// Report a parsing error
static bool parseError(const char*& p, const char* errmsg)
{
    std::cerr << "Parse error : " << errmsg << " here : " << p << std::endl;
    return true;
}

/**
 * @brief skipBlank : advance pointer p to the first non blank character
 * @param p the string to parse, then the remaining string
 */
static void skipBlank(const char*& p)
{
    while (isspace(*p)) { p++; }
}

// Parse character x, but don't report error if fails
static bool tryChar(const char*& p, char x)
{
    skipBlank(p);
    if (x == *p) {
        p++;
        return true;
    } else {
        return false;
    }
}

/**
 * @brief parseChar : parse a specific character x
 * @param p the string to parse, then the remaining string
 * @param x the character to recognize
 * @return true if x was found at the begin of p
 */
static bool parseChar(const char*& p, char x)
{
    skipBlank(p);
    if (x == *p) {
        p++;
        return true;
    } else {
        return false;
    }
}

/**
 * @brief parseWord : parse a specific string w
 * @param p the string to parse, then the remaining string
 * @param w the string to recognize
 * @return true if string w was found at the begin of p
 */
static bool parseWord(const char*& p, const char* w)
{
    skipBlank(p);
    const char* saved = p;  // to restore position if we fail
    while ((*w == *p) && (*w)) {++w; ++p;}
    if (*w) {
        p = saved;
        return false;
    } else {
        return true;
    }
}

/**
 * @brief parseDouble : parse number [s]dddd[.dddd] and store the result in x
 * @param p the string to parse, then the remaining string
 * @param x the float number found if any
 * @return true if a float number was found at the begin of p
 */
static bool parseDouble(const char*& p, double& x)
{
    std::stringstream reader(p);
    std::streambuf* pbuf = reader.rdbuf();
    
    // Keep position before parsing
    std::streamsize size1 = pbuf->in_avail();
    
    // Parse the number
    reader >> x;
    
    // Keep position after parsing
    std::streamsize size2 = pbuf->in_avail();
    
    // Move from the actual size
    p += (size1 - size2);
    
    // True if the number contains at least one digit
    return (size1 > size2);
}

/**
 * @brief parseString, parse an arbitrary quoted string q...q and store the result in s
 * @param p the string to parse, then the remaining string
 * @param quote the character used to quote the string
 * @param s the (unquoted) string found if any
 * @return true if a string was found at the begin of p
 */
static bool parseString(const char*& p, char quote, std::string& s)
{
    std::string str;
    skipBlank(p);
    
    const char* saved = p;  // to restore position if we fail
    if (*p++ == quote) {
        while ((*p != 0) && (*p != quote)) {
            str += *p++;
        }
        if (*p++ == quote) {
            s = str;
            return true;
        }
    }
    p = saved;
    return false;
}

/**
 * @brief parseSQString, parse a single quoted string '...' and store the result in s
 * @param p the string to parse, then the remaining string
 * @param s the (unquoted) string found if any
 * @return true if a string was found at the begin of p
 */
static bool parseSQString(const char*& p, std::string& s)
{
    return parseString(p, '\'', s);
}

/**
 * @brief parseDQString, parse a double quoted string "..." and store the result in s
 * @param p the string to parse, then the remaining string
 * @param s the (unquoted) string found if any
 * @return true if a string was found at the begin of p
 */
static bool parseDQString(const char*& p, std::string& s)
{
    return parseString(p, '"', s);
}

// ---------------------------------------------------------------------
//
//                          IMPLEMENTATION
// 
// ---------------------------------------------------------------------

/**
 * @brief parseMenuItem, parse a menu item ...'low':440.0...
 * @param p the string to parse, then the remaining string
 * @param name the name found
 * @param value the value found
 * @return true if a nemu item was found
 */
static bool parseMenuItem(const char*& p, std::string& name, double& value)
{
    const char* saved = p;  // to restore position if we fail
    if (parseSQString(p, name) && parseChar(p, ':') && parseDouble(p, value)) {
        return true;
    } else {
        p = saved;
        return false;
    }
}

static bool parseMenuItem2(const char*& p, std::string& name)
{
    const char* saved = p;  // to restore position if we fail
    // single quoted
    if (parseSQString(p, name)) {
        return true;
    } else {
        p = saved;
        return false;
    }
}

/**
 * @brief parseMenuList, parse a menu list {'low' : 440.0; 'mid' : 880.0; 'hi' : 1760.0}...
 * @param p the string to parse, then the remaining string
 * @param names the vector of names found
 * @param values the vector of values found
 * @return true if a menu list was found
 */
static bool parseMenuList(const char*& p, std::vector<std::string>& names, std::vector<double>& values)
{
    std::vector<std::string> tmpnames;
    std::vector<double> tmpvalues;
    const char* saved = p; // to restore position if we fail

    if (parseChar(p, '{')) {
        do {
            std::string n;
            double v;
            if (parseMenuItem(p, n, v)) {
                tmpnames.push_back(n);
                tmpvalues.push_back(v);
            } else {
                p = saved;
                return false;
            }
        } while (parseChar(p, ';'));
        if (parseChar(p, '}')) {
            // we suceeded
            names = tmpnames;
            values = tmpvalues;
            return true;
        }
    }
    p = saved;
    return false;
}

static bool parseMenuList2(const char*& p, std::vector<std::string>& names, bool debug)
{
    std::vector<std::string> tmpnames;
    const char* saved = p;  // to restore position if we fail
    
    if (parseChar(p, '{')) {
        do {
            std::string n;
            if (parseMenuItem2(p, n)) {
                tmpnames.push_back(n);
            } else {
                goto error;
            }
        } while (parseChar(p, ';'));
        if (parseChar(p, '}')) {
            // we suceeded
            names = tmpnames;
            return true;
        }
    }
    
error:
    if (debug) { std::cerr << "parseMenuList2 : (" << saved << ") is not a valid list !\n"; }
    p = saved;
    return false;
}

/// ---------------------------------------------------------------------
// Parse list of strings
/// ---------------------------------------------------------------------
static bool parseList(const char*& p, std::vector<std::string>& items)
{
    const char* saved = p;  // to restore position if we fail
    if (parseChar(p, '[')) {
        do {
            std::string item;
            if (!parseDQString(p, item)) {
                p = saved;
                return false;
            }
            items.push_back(item);
        } while (tryChar(p, ','));
        return parseChar(p, ']');
    } else {
        p = saved;
        return false;
    }
}

static bool parseMetaData(const char*& p, std::map<std::string, std::string>& metadatas)
{
    const char* saved = p; // to restore position if we fail
    std::string metaKey, metaValue;
    if (parseChar(p, ':') && parseChar(p, '[')) {
        do { 
            if (parseChar(p, '{') && parseDQString(p, metaKey) && parseChar(p, ':') && parseDQString(p, metaValue) && parseChar(p, '}')) {
                metadatas[metaKey] = metaValue;
            }
        } while (tryChar(p, ','));
        return parseChar(p, ']');
    } else {
        p = saved;
        return false;
    }
}

static bool parseItemMetaData(const char*& p, std::vector<std::pair<std::string, std::string> >& metadatas)
{
    const char* saved = p; // to restore position if we fail
    std::string metaKey, metaValue;
    if (parseChar(p, ':') && parseChar(p, '[')) {
        do { 
            if (parseChar(p, '{') && parseDQString(p, metaKey) && parseChar(p, ':') && parseDQString(p, metaValue) && parseChar(p, '}')) {
                metadatas.push_back(std::make_pair(metaKey, metaValue));
            }
        } while (tryChar(p, ','));
        return parseChar(p, ']');
    } else {
        p = saved;
        return false;
    }
}

// ---------------------------------------------------------------------
// Parse metadatas of the interface:
// "name" : "...", "inputs" : "...", "outputs" : "...", ...
// and store the result as key/value
/// ---------------------------------------------------------------------
static bool parseGlobalMetaData(const char*& p, std::string& key, std::string& value, double& dbl, std::map<std::string, std::string>& metadatas, std::vector<std::string>& items)
{
    const char* saved = p; // to restore position if we fail
    if (parseDQString(p, key)) {
        if (key == "meta") {
            return parseMetaData(p, metadatas);
        } else {
            return parseChar(p, ':') && (parseDQString(p, value) || parseList(p, items) || parseDouble(p, dbl));
        }
    } else {
        p = saved;
        return false;
    }
}

// ---------------------------------------------------------------------
// Parse gui:
// "type" : "...", "label" : "...", "address" : "...", ...
// and store the result in uiItems Vector
/// ---------------------------------------------------------------------
static bool parseUI(const char*& p, std::vector<itemInfo>& uiItems, int& numItems)
{
    const char* saved = p; // to restore position if we fail
    if (parseChar(p, '{')) {
   
        std::string label;
        std::string value;
        double dbl = 0;
        
        do {
            if (parseDQString(p, label)) {
                if (label == "type") {
                    if (uiItems.size() != 0) {
                        numItems++;
                    }
                    if (parseChar(p, ':') && parseDQString(p, value)) {   
                        itemInfo item;
                        item.type = value;
                        uiItems.push_back(item);
                    }
                }
                
                else if (label == "label") {
                    if (parseChar(p, ':') && parseDQString(p, value)) {
                        uiItems[numItems].label = value;
                    }
                }
                
                else if (label == "url") {
                    if (parseChar(p, ':') && parseDQString(p, value)) {
                        uiItems[numItems].url = value;
                    }
                }
                
                else if (label == "address") {
                    if (parseChar(p, ':') && parseDQString(p, value)) {
                        uiItems[numItems].address = value;
                    }
                }
                
                else if (label == "index") {
                    if (parseChar(p, ':') && parseDouble(p, dbl)) {
                        uiItems[numItems].index = int(dbl);
                    }
                }
                
                else if (label == "meta") {
                    if (!parseItemMetaData(p, uiItems[numItems].meta)) {
                        return false;
                    }
                }
                
                else if (label == "init") {
                    if (parseChar(p, ':') && parseDouble(p, dbl)) {
                        uiItems[numItems].init = dbl;
                    }
                }
                
                else if (label == "min") {
                    if (parseChar(p, ':') && parseDouble(p, dbl)) {
                        uiItems[numItems].min = dbl;
                    }
                }
                
                else if (label == "max") {
                    if (parseChar(p, ':') && parseDouble(p, dbl)) {
                        uiItems[numItems].max = dbl;
                    }
                }
                
                else if (label == "step") {
                    if (parseChar(p, ':') && parseDouble(p, dbl)) {
                        uiItems[numItems].step = dbl;
                    }
                }
                
                else if (label == "items") {
                    if (parseChar(p, ':') && parseChar(p, '[')) {
                        do {
                            if (!parseUI(p, uiItems, numItems)) {
                                p = saved;
                                return false;
                            }
                        } while (tryChar(p, ','));
                        if (parseChar(p, ']')) {
                            itemInfo item;
                            item.type = "close";
                            uiItems.push_back(item);
                            numItems++;
                        }
                    }
                }
            } else {
                p = saved;
                return false;
            }
            
        } while (tryChar(p, ','));
    
        return parseChar(p, '}');
    } else {
        return true; // "items": [] is valid
    }
}

// ---------------------------------------------------------------------
// Parse full JSON record describing a JSON/Faust interface :
// {"metadatas": "...", "ui": [{ "type": "...", "label": "...", "items": [...], "address": "...","init": "...", "min": "...", "max": "...","step": "..."}]}
//
// and store the result in map Metadatas and vector containing the items of the interface. Returns true if parsing was successfull.
/// ---------------------------------------------------------------------
static bool parseJson(const char*& p,
                      std::map<std::string, std::pair<std::string, double> >& metaDatas0,
                      std::map<std::string, std::string>& metaDatas1,
                      std::map<std::string, std::vector<std::string> >& metaDatas2,
                      std::vector<itemInfo>& uiItems)
{
    parseChar(p, '{');
    
    do {
        std::string key;
        std::string value;
        double dbl = 0;
        std::vector<std::string> items;
        if (parseGlobalMetaData(p, key, value, dbl, metaDatas1, items)) {
            if (key != "meta") {
                // keep "name", "inputs", "outputs" key/value pairs
                if (items.size() > 0) {
                    metaDatas2[key] = items;
                    items.clear();
                } else if (value != "") {
                    metaDatas0[key].first = value;
                } else {
                    metaDatas0[key].second = dbl;
                }
            }
        } else if (key == "ui") {
            int numItems = 0;
            parseChar(p, '[') && parseUI(p, uiItems, numItems);
        }
    } while (tryChar(p, ','));
    
    return parseChar(p, '}');
}

#endif // SIMPLEPARSER_H
/**************************  END  SimpleParser.h **************************/

#ifdef _WIN32
#include <windows.h>
#define snprintf _snprintf
#endif

//-------------------------------------------------------------------
//  Decode a dsp JSON description and implement 'buildUserInterface'
//-------------------------------------------------------------------

#define REAL_UI(ui_interface) reinterpret_cast<UIReal<REAL>*>(ui_interface)
#define REAL_ADR(offset)      reinterpret_cast<REAL*>(&memory_block[offset])
#define REAL_EXT_ADR(offset)  reinterpret_cast<FAUSTFLOAT*>(&memory_block[offset])
#define SOUNDFILE_ADR(offset) reinterpret_cast<Soundfile**>(&memory_block[offset])

typedef std::function<void(double)> ReflectFunction;
typedef std::function<double()> ModifyFunction;

struct ExtZoneParam {

    virtual void reflectZone() = 0;
    virtual void modifyZone() = 0;
    
    virtual void setReflectZoneFun(ReflectFunction reflect) = 0;
    virtual void setModifyZoneFun(ModifyFunction modify) = 0;
    
    virtual ~ExtZoneParam()
    {}
    
};

template <typename REAL>
struct JSONUIDecoderAux {
    
    struct ZoneParam : public ExtZoneParam {
        
        REAL fZone;
        int fIndex;
        ReflectFunction fReflect;
        ModifyFunction fModify;
        
    #if defined(TARGET_OS_IPHONE) || defined(WIN32)
        ZoneParam(int index, ReflectFunction reflect = nullptr, ModifyFunction modify = nullptr)
        :fIndex(index), fReflect(reflect), fModify(modify)
        {}
        void reflectZone() { if (fReflect) fReflect(fZone); }
        void modifyZone() { if (fModify) fZone = fModify(); }
    #else
        ZoneParam(int index, ReflectFunction reflect = [](REAL value) {}, ModifyFunction modify = []() { return REAL(-1); })
        :fIndex(index), fReflect(reflect), fModify(modify)
        {}
        void reflectZone() { fReflect(fZone); }
        void modifyZone() { fZone = fModify(); }
    #endif
        
        void setReflectZoneFun(ReflectFunction reflect) { fReflect = reflect; }
        void setModifyZoneFun(ModifyFunction modify) { fModify = modify; }
        
    };

    typedef std::vector<ExtZoneParam*> controlMap;
  
    std::string fName;
    std::string fFileName;
    std::string fJSON;
    std::string fVersion;
    std::string fCompileOptions;
    
    std::map<std::string, std::string> fMetadata;
    std::vector<itemInfo> fUiItems;
    
    std::vector<std::string> fLibraryList;
    std::vector<std::string> fIncludePathnames;
    
    Soundfile** fSoundfiles;
    
    int fNumInputs, fNumOutputs, fSRIndex;
    int fSoundfileItems;
    int fDSPSize;
    
    controlMap fPathInputTable;     // [path, ZoneParam]
    controlMap fPathOutputTable;    // [path, ZoneParam]

    bool isInput(const std::string& type)
    {
        return (type == "vslider" || type == "hslider" || type == "nentry" || type == "button" || type == "checkbox");
    }
    bool isOutput(const std::string& type) { return (type == "hbargraph" || type == "vbargraph"); }
    bool isSoundfile(const std::string& type) { return (type == "soundfile"); }
    
    std::string getString(std::map<std::string, std::pair<std::string, double> >& map, const std::string& key)
    {
        return (map.find(key) != map.end()) ? map[key].first : "";
    }
    
    int getInt(std::map<std::string, std::pair<std::string, double> >& map, const std::string& key)
    {
        return (map.find(key) != map.end()) ? int(map[key].second) : -1;
    }
    
    void setReflectZoneFun(int index, ReflectFunction fun)
    {
        fPathInputTable[index]->setReflectZoneFun(fun);
    }
    
    void setModifyZoneFun(int index, ModifyFunction fun)
    {
        fPathOutputTable[index]->setModifyZoneFun(fun);
    }

    JSONUIDecoderAux(const std::string& json)
    {
        fJSON = json;
        const char* p = fJSON.c_str();
        std::map<std::string, std::pair<std::string, double> > meta_data1;
        std::map<std::string, std::vector<std::string> > meta_data2;
        parseJson(p, meta_data1, fMetadata, meta_data2, fUiItems);
        
        // meta_data1 contains <name : val>, <inputs : val>, <ouputs : val> pairs etc...
        fName = getString(meta_data1, "name");
        fFileName = getString(meta_data1, "filename");
        fVersion = getString(meta_data1, "version");
        fCompileOptions = getString(meta_data1, "compile_options");
        
        if (meta_data2.find("library_list") != meta_data2.end()) {
            fLibraryList = meta_data2["library_list"];
        }
        if (meta_data2.find("include_pathnames") != meta_data2.end()) {
            fIncludePathnames = meta_data2["include_pathnames"];
        }
        
        fDSPSize = getInt(meta_data1, "size");
        fNumInputs = getInt(meta_data1, "inputs");
        fNumOutputs = getInt(meta_data1, "outputs");
        fSRIndex = getInt(meta_data1, "sr_index");
       
        fSoundfileItems = 0;
        for (auto& it : fUiItems) {
            std::string type = it.type;
            if (isSoundfile(type)) {
                fSoundfileItems++;
            }
        }
        
        fSoundfiles = new Soundfile*[fSoundfileItems];
        
        // Prepare the fPathTable and init zone
        for (auto& it : fUiItems) {
            std::string type = it.type;
            // Meta data declaration for input items
            if (isInput(type)) {
                ZoneParam* param = new ZoneParam(it.index);
                fPathInputTable.push_back(param);
                param->fZone = it.init;
            }
            // Meta data declaration for output items
            else if (isOutput(type)) {
                ZoneParam* param = new ZoneParam(it.index);
                fPathOutputTable.push_back(param);
                param->fZone = REAL(0);
            }
        }
    }
    
    virtual ~JSONUIDecoderAux()
    {
        delete [] fSoundfiles;
    }
    
    void metadata(Meta* m)
    {
        for (auto& it : fMetadata) {
            m->declare(it.first.c_str(), it.second.c_str());
        }
    }
    
    void metadata(MetaGlue* m)
    {
        for (auto& it : fMetadata) {
            m->declare(m->metaInterface, it.first.c_str(), it.second.c_str());
        }
    }
    
    void resetUserInterface()
    {
        int item = 0;
        for (auto& it : fUiItems) {
            if (isInput(it.type)) {
                static_cast<ZoneParam*>(fPathInputTable[item++])->fZone = it.init;
            }
        }
    }
    
    void resetUserInterface(char* memory_block, Soundfile* defaultsound = nullptr)
    {
        for (auto& it : fUiItems) {
            int offset = it.index;
            if (isInput(it.type)) {
                *REAL_ADR(offset) = it.init;
            } else if (isSoundfile(it.type)) {
                if (*SOUNDFILE_ADR(offset) == nullptr) {
                    *SOUNDFILE_ADR(offset) = defaultsound;
                }
            }
        }
    }
    
    int getSampleRate(char* memory_block)
    {
        return *reinterpret_cast<int*>(&memory_block[fSRIndex]);
    }
   
    void buildUserInterface(UI* ui_interface)
    {
        // MANDATORY: to be sure floats or double are correctly parsed
        char* tmp_local = setlocale(LC_ALL, nullptr);
        if (tmp_local != NULL) {
            tmp_local = strdup(tmp_local);
        }
        setlocale(LC_ALL, "C");
        
        int countIn = 0;
        int countOut = 0;
        int countSound = 0;
        
        for (auto& it : fUiItems) {
            
            std::string type = it.type;
            REAL init = REAL(it.init);
            REAL min = REAL(it.min);
            REAL max = REAL(it.max);
            REAL step = REAL(it.step);
            
            // Meta data declaration for input items
            if (isInput(type)) {
                for (size_t i = 0; i < it.meta.size(); i++) {
                    REAL_UI(ui_interface)->declare(&static_cast<ZoneParam*>(fPathInputTable[countIn])->fZone, it.meta[i].first.c_str(), it.meta[i].second.c_str());
                }
            }
            // Meta data declaration for output items
            else if (isOutput(type)) {
                for (size_t i = 0; i < it.meta.size(); i++) {
                    REAL_UI(ui_interface)->declare(&static_cast<ZoneParam*>(fPathOutputTable[countOut])->fZone, it.meta[i].first.c_str(), it.meta[i].second.c_str());
                }
            }
            // Meta data declaration for group opening or closing
            else {
                for (size_t i = 0; i < it.meta.size(); i++) {
                    REAL_UI(ui_interface)->declare(0, it.meta[i].first.c_str(), it.meta[i].second.c_str());
                }
            }
            
            if (type == "hgroup") {
                REAL_UI(ui_interface)->openHorizontalBox(it.label.c_str());
            } else if (type == "vgroup") { 
                REAL_UI(ui_interface)->openVerticalBox(it.label.c_str());
            } else if (type == "tgroup") {
                REAL_UI(ui_interface)->openTabBox(it.label.c_str());
            } else if (type == "vslider") {
                REAL_UI(ui_interface)->addVerticalSlider(it.label.c_str(), &static_cast<ZoneParam*>(fPathInputTable[countIn])->fZone, init, min, max, step);
            } else if (type == "hslider") {
                REAL_UI(ui_interface)->addHorizontalSlider(it.label.c_str(), &static_cast<ZoneParam*>(fPathInputTable[countIn])->fZone, init, min, max, step);
            } else if (type == "checkbox") {
                REAL_UI(ui_interface)->addCheckButton(it.label.c_str(), &static_cast<ZoneParam*>(fPathInputTable[countIn])->fZone);
            } else if (type == "soundfile") {
                REAL_UI(ui_interface)->addSoundfile(it.label.c_str(), it.url.c_str(), &fSoundfiles[countSound]);
            } else if (type == "hbargraph") {
                REAL_UI(ui_interface)->addHorizontalBargraph(it.label.c_str(), &static_cast<ZoneParam*>(fPathOutputTable[countOut])->fZone, min, max);
            } else if (type == "vbargraph") {
                REAL_UI(ui_interface)->addVerticalBargraph(it.label.c_str(), &static_cast<ZoneParam*>(fPathOutputTable[countOut])->fZone, min, max);
            } else if (type == "nentry") {
                REAL_UI(ui_interface)->addNumEntry(it.label.c_str(), &static_cast<ZoneParam*>(fPathInputTable[countIn])->fZone, init, min, max, step);
            } else if (type == "button") {
                REAL_UI(ui_interface)->addButton(it.label.c_str(), &static_cast<ZoneParam*>(fPathInputTable[countIn])->fZone);
            } else if (type == "close") {
                REAL_UI(ui_interface)->closeBox();
            }
            
            if (isInput(type)) {
                countIn++;
            } else if (isOutput(type)) {
                countOut++;
            } else if (isSoundfile(type)) {
                countSound++;
            }
        }
        
        if (tmp_local != NULL) {
            setlocale(LC_ALL, tmp_local);
            free(tmp_local);
        }
    }
    
    void buildUserInterface(UI* ui_interface, char* memory_block)
    {
        // MANDATORY: to be sure floats or double are correctly parsed
        char* tmp_local = setlocale(LC_ALL, nullptr);
        if (tmp_local != NULL) {
            tmp_local = strdup(tmp_local);
        }
        setlocale(LC_ALL, "C");
        
        for (auto& it : fUiItems) {
            
            std::string type = it.type;
            int offset = it.index;
            REAL init = REAL(it.init);
            REAL min = REAL(it.min);
            REAL max = REAL(it.max);
            REAL step = REAL(it.step);
            
            // Meta data declaration for input items
            if (isInput(type)) {
                for (size_t i = 0; i < it.meta.size(); i++) {
                    REAL_UI(ui_interface)->declare(REAL_ADR(offset), it.meta[i].first.c_str(), it.meta[i].second.c_str());
                }
            }
            // Meta data declaration for output items
            else if (isOutput(type)) {
                for (size_t i = 0; i < it.meta.size(); i++) {
                    REAL_UI(ui_interface)->declare(REAL_ADR(offset), it.meta[i].first.c_str(), it.meta[i].second.c_str());
                }
            }
            // Meta data declaration for group opening or closing
            else {
                for (size_t i = 0; i < it.meta.size(); i++) {
                    REAL_UI(ui_interface)->declare(0, it.meta[i].first.c_str(), it.meta[i].second.c_str());
                }
            }
            
            if (type == "hgroup") {
                REAL_UI(ui_interface)->openHorizontalBox(it.label.c_str());
            } else if (type == "vgroup") {
                REAL_UI(ui_interface)->openVerticalBox(it.label.c_str());
            } else if (type == "tgroup") {
                REAL_UI(ui_interface)->openTabBox(it.label.c_str());
            } else if (type == "vslider") {
                REAL_UI(ui_interface)->addVerticalSlider(it.label.c_str(), REAL_ADR(offset), init, min, max, step);
            } else if (type == "hslider") {
                REAL_UI(ui_interface)->addHorizontalSlider(it.label.c_str(), REAL_ADR(offset), init, min, max, step);
            } else if (type == "checkbox") {
                REAL_UI(ui_interface)->addCheckButton(it.label.c_str(), REAL_ADR(offset));
            } else if (type == "soundfile") {
                REAL_UI(ui_interface)->addSoundfile(it.label.c_str(), it.url.c_str(), SOUNDFILE_ADR(offset));
            } else if (type == "hbargraph") {
                REAL_UI(ui_interface)->addHorizontalBargraph(it.label.c_str(), REAL_ADR(offset), min, max);
            } else if (type == "vbargraph") {
                REAL_UI(ui_interface)->addVerticalBargraph(it.label.c_str(), REAL_ADR(offset), min, max);
            } else if (type == "nentry") {
                REAL_UI(ui_interface)->addNumEntry(it.label.c_str(), REAL_ADR(offset), init, min, max, step);
            } else if (type == "button") {
                REAL_UI(ui_interface)->addButton(it.label.c_str(), REAL_ADR(offset));
            } else if (type == "close") {
                REAL_UI(ui_interface)->closeBox();
            }
        }
        
        if (tmp_local != NULL) {
            setlocale(LC_ALL, tmp_local);
            free(tmp_local);
        }
    }
    
    void buildUserInterface(UIGlue* ui_interface, char* memory_block)
    {
        // MANDATORY: to be sure floats or double are correctly parsed
        char* tmp_local = setlocale(LC_ALL, nullptr);
        if (tmp_local != NULL) {
            tmp_local = strdup(tmp_local);
        }
        setlocale(LC_ALL, "C");
        
        for (auto& it : fUiItems) {
            
            std::string type = it.type;
            int offset = it.index;
            REAL init = REAL(it.init);
            REAL min = REAL(it.min);
            REAL max = REAL(it.max);
            REAL step = REAL(it.step);
            
            // Meta data declaration for input items
            if (isInput(type)) {
                for (size_t i = 0; i < it.meta.size(); i++) {
                    ui_interface->declare(ui_interface->uiInterface, REAL_EXT_ADR(offset), it.meta[i].first.c_str(), it.meta[i].second.c_str());
                }
            }
            // Meta data declaration for output items
            else if (isOutput(type)) {
                for (size_t i = 0; i < it.meta.size(); i++) {
                    ui_interface->declare(ui_interface->uiInterface, REAL_EXT_ADR(offset), it.meta[i].first.c_str(), it.meta[i].second.c_str());
                }
            }
            // Meta data declaration for group opening or closing
            else {
                for (size_t i = 0; i < it.meta.size(); i++) {
                    ui_interface->declare(ui_interface->uiInterface, 0, it.meta[i].first.c_str(), it.meta[i].second.c_str());
                }
            }
            
            if (type == "hgroup") {
                ui_interface->openHorizontalBox(ui_interface->uiInterface, it.label.c_str());
            } else if (type == "vgroup") {
                ui_interface->openVerticalBox(ui_interface->uiInterface, it.label.c_str());
            } else if (type == "tgroup") {
                ui_interface->openTabBox(ui_interface->uiInterface, it.label.c_str());
            } else if (type == "vslider") {
                ui_interface->addVerticalSlider(ui_interface->uiInterface, it.label.c_str(), REAL_EXT_ADR(offset), init, min, max, step);
            } else if (type == "hslider") {
                ui_interface->addHorizontalSlider(ui_interface->uiInterface, it.label.c_str(), REAL_EXT_ADR(offset), init, min, max, step);
            } else if (type == "checkbox") {
                ui_interface->addCheckButton(ui_interface->uiInterface, it.label.c_str(), REAL_EXT_ADR(offset));
            } else if (type == "soundfile") {
                ui_interface->addSoundfile(ui_interface->uiInterface, it.label.c_str(), it.url.c_str(), SOUNDFILE_ADR(offset));
            } else if (type == "hbargraph") {
                ui_interface->addHorizontalBargraph(ui_interface->uiInterface, it.label.c_str(), REAL_EXT_ADR(offset), min, max);
            } else if (type == "vbargraph") {
                ui_interface->addVerticalBargraph(ui_interface->uiInterface, it.label.c_str(), REAL_EXT_ADR(offset), min, max);
            } else if (type == "nentry") {
                ui_interface->addNumEntry(ui_interface->uiInterface, it.label.c_str(), REAL_EXT_ADR(offset), init, min, max, step);
            } else if (type == "button") {
                ui_interface->addButton(ui_interface->uiInterface, it.label.c_str(), REAL_EXT_ADR(offset));
            } else if (type == "close") {
                ui_interface->closeBox(ui_interface->uiInterface);
            }
        }
        
        if (tmp_local != NULL) {
            setlocale(LC_ALL, tmp_local);
            free(tmp_local);
        }
    }
    
    bool hasCompileOption(const std::string& option)
    {
        std::istringstream iss(fCompileOptions);
        std::string token;
        while (std::getline(iss, token, ' ')) {
            if (token == option) return true;
        }
        return false;
    }
    
};

// Templated decoder

struct JSONUITemplatedDecoder
{

    virtual ~JSONUITemplatedDecoder()
    {}
    
    virtual void metadata(Meta* m) = 0;
    virtual void metadata(MetaGlue* glue) = 0;
    virtual int getDSPSize() = 0;
    virtual std::string getName() = 0;
    virtual std::string getLibVersion() = 0;
    virtual std::string getCompileOptions() = 0;
    virtual std::vector<std::string> getLibraryList() = 0;
    virtual std::vector<std::string> getIncludePathnames() = 0;
    virtual int getNumInputs() = 0;
    virtual int getNumOutputs() = 0;
    virtual int getSampleRate(char* memory_block) = 0;
    virtual void setReflectZoneFun(int index, ReflectFunction fun) = 0;
    virtual void setModifyZoneFun(int index, ModifyFunction fun) = 0;
    virtual std::vector<ExtZoneParam*>& getInputControls() = 0;
    virtual std::vector<ExtZoneParam*>& getOutputControls() = 0;
    virtual void resetUserInterface(char* memory_block, Soundfile* defaultsound = nullptr) = 0;
    virtual void buildUserInterface(UI* ui_interface) = 0;
    virtual void buildUserInterface(UI* ui_interface, char* memory_block) = 0;
    virtual void buildUserInterface(UIGlue* ui_interface, char* memory_block) = 0;
    virtual bool hasCompileOption(const std::string& option) = 0;
};

struct JSONUIFloatDecoder : public JSONUIDecoderAux<float>, public JSONUITemplatedDecoder
{
    JSONUIFloatDecoder(const std::string& json):JSONUIDecoderAux<float>(json)
    {}
    
    void metadata(Meta* m) { JSONUIDecoderAux<float>::metadata(m); }
    void metadata(MetaGlue* glue) { JSONUIDecoderAux<float>::metadata(glue); }
    int getDSPSize() { return fDSPSize; }
    std::string getName() { return fName; }
    std::string getLibVersion() { return fVersion; }
    std::string getCompileOptions() { return fCompileOptions; }
    std::vector<std::string> getLibraryList() { return fLibraryList; }
    std::vector<std::string> getIncludePathnames() { return fIncludePathnames; }
    int getNumInputs() { return fNumInputs; }
    int getNumOutputs() { return fNumOutputs; }
    int getSampleRate(char* memory_block)  { return JSONUIDecoderAux<float>::getSampleRate(memory_block); }
    void setReflectZoneFun(int index, ReflectFunction fun)
    {
        JSONUIDecoderAux<float>::setReflectZoneFun(index, fun);
    }
    void setModifyZoneFun(int index, ModifyFunction fun)
    {
        JSONUIDecoderAux<float>::setModifyZoneFun(index, fun);
    }
    std::vector<ExtZoneParam*>& getInputControls()
    {
        return fPathInputTable;
    }
    std::vector<ExtZoneParam*>& getOutputControls()
    {
        return fPathOutputTable;
    }
    void resetUserInterface(char* memory_block, Soundfile* defaultsound = nullptr)
    {
        JSONUIDecoderAux<float>::resetUserInterface(memory_block, defaultsound);
    }
    void buildUserInterface(UI* ui_interface)
    {
        JSONUIDecoderAux<float>::buildUserInterface(ui_interface);
    }
    void buildUserInterface(UI* ui_interface, char* memory_block)
    {
        JSONUIDecoderAux<float>::buildUserInterface(ui_interface, memory_block);
    }
    void buildUserInterface(UIGlue* ui_interface, char* memory_block)
    {
        JSONUIDecoderAux<float>::buildUserInterface(ui_interface, memory_block);
    }
    bool hasCompileOption(const std::string& option) { return JSONUIDecoderAux<float>::hasCompileOption(option); }
};

struct JSONUIDoubleDecoder : public JSONUIDecoderAux<double>, public JSONUITemplatedDecoder
{
    JSONUIDoubleDecoder(const std::string& json):JSONUIDecoderAux<double>(json)
    {}
    
    void metadata(Meta* m) { JSONUIDecoderAux<double>::metadata(m); }
    void metadata(MetaGlue* glue) { JSONUIDecoderAux<double>::metadata(glue); }
    int getDSPSize() { return fDSPSize; }
    std::string getName() { return fName; }
    std::string getLibVersion() { return fVersion; }
    std::string getCompileOptions() { return fCompileOptions; }
    std::vector<std::string> getLibraryList() { return fLibraryList; }
    std::vector<std::string> getIncludePathnames() { return fIncludePathnames; }
    int getNumInputs() { return fNumInputs; }
    int getNumOutputs() { return fNumOutputs; }
    int getSampleRate(char* memory_block) { return JSONUIDecoderAux<double>::getSampleRate(memory_block); }
    void setReflectZoneFun(int index, ReflectFunction fun)
    {
        JSONUIDecoderAux<double>::setReflectZoneFun(index, fun);
    }
    void setModifyZoneFun(int index, ModifyFunction fun)
    {
        JSONUIDecoderAux<double>::setModifyZoneFun(index, fun);
    }
    std::vector<ExtZoneParam*>& getInputControls()
    {
        return fPathInputTable;
    }
    std::vector<ExtZoneParam*>& getOutputControls()
    {
        return fPathOutputTable;
    }
    void resetUserInterface(char* memory_block, Soundfile* defaultsound = nullptr)
    {
        JSONUIDecoderAux<double>::resetUserInterface(memory_block, defaultsound);
    }
    void buildUserInterface(UI* ui_interface)
    {
        JSONUIDecoderAux<double>::buildUserInterface(ui_interface);
    }
    void buildUserInterface(UI* ui_interface, char* memory_block)
    {
        JSONUIDecoderAux<double>::buildUserInterface(ui_interface, memory_block);
    }
    void buildUserInterface(UIGlue* ui_interface, char* memory_block)
    {
        JSONUIDecoderAux<double>::buildUserInterface(ui_interface, memory_block);
    }
    bool hasCompileOption(const std::string& option) { return JSONUIDecoderAux<double>::hasCompileOption(option); }
};

// FAUSTFLOAT decoder

struct JSONUIDecoder : public JSONUIDecoderAux<FAUSTFLOAT>
{
    JSONUIDecoder(const std::string& json):JSONUIDecoderAux<FAUSTFLOAT>(json)
    {}
};

static JSONUITemplatedDecoder* createJSONUIDecoder(const std::string& json)
{
    JSONUIDecoder decoder(json);
    if (decoder.hasCompileOption("-double")) {
        return new JSONUIDoubleDecoder(json);
    } else {
        return new JSONUIFloatDecoder(json);
    }
}

#endif
/**************************  END  JSONUIDecoder.h **************************/
/************************** BEGIN dsp-adapter.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2020 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __dsp_adapter__
#define __dsp_adapter__

#include <string.h>
#include <iostream>
#include <cmath>


// Adapts a DSP for a different number of inputs/outputs
class dsp_adapter : public decorator_dsp {
    
    private:
        
        FAUSTFLOAT** fAdaptedInputs;
        FAUSTFLOAT** fAdaptedOutputs;
        int fHardwareInputs;
        int fHardwareOutputs;
        
        void adaptBuffers(FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            for (int i = 0; i < fHardwareInputs; i++) {
                fAdaptedInputs[i] = inputs[i];
            }
            for (int i = 0; i < fHardwareOutputs; i++) {
                fAdaptedOutputs[i] = outputs[i];
            }
        }
        
    public:
        
        dsp_adapter(dsp* dsp, int hardware_inputs, int hardware_outputs, int buffer_size):decorator_dsp(dsp)
        {
            fHardwareInputs = hardware_inputs;
            fHardwareOutputs = hardware_outputs;
             
            fAdaptedInputs = new FAUSTFLOAT*[dsp->getNumInputs()];
            for (int i = 0; i < dsp->getNumInputs() - fHardwareInputs; i++) {
                fAdaptedInputs[i + fHardwareInputs] = new FAUSTFLOAT[buffer_size];
                memset(fAdaptedInputs[i + fHardwareInputs], 0, sizeof(FAUSTFLOAT) * buffer_size);
            }
            
            fAdaptedOutputs = new FAUSTFLOAT*[dsp->getNumOutputs()];
            for (int i = 0; i < dsp->getNumOutputs() - fHardwareOutputs; i++) {
                fAdaptedOutputs[i + fHardwareOutputs] = new FAUSTFLOAT[buffer_size];
                memset(fAdaptedOutputs[i + fHardwareOutputs], 0, sizeof(FAUSTFLOAT) * buffer_size);
            }
        }
        
        virtual ~dsp_adapter()
        {
            for (int i = 0; i < fDSP->getNumInputs() - fHardwareInputs; i++) {
                delete [] fAdaptedInputs[i + fHardwareInputs];
            }
            delete [] fAdaptedInputs;
            
            for (int i = 0; i < fDSP->getNumOutputs() - fHardwareOutputs; i++) {
                delete [] fAdaptedOutputs[i + fHardwareOutputs];
            }
            delete [] fAdaptedOutputs;
        }
    
        virtual int getNumInputs() { return fHardwareInputs; }
        virtual int getNumOutputs() { return fHardwareOutputs; }
    
        virtual void compute(double date_usec, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            adaptBuffers(inputs, outputs);
            fDSP->compute(date_usec, count, fAdaptedInputs, fAdaptedOutputs);
        }
        
        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            adaptBuffers(inputs, outputs);
            fDSP->compute(count, fAdaptedInputs, fAdaptedOutputs);
        }
};

// Adapts a DSP for a different sample size
template <typename TYPE_INT, typename TYPE_EXT>
class dsp_sample_adapter : public decorator_dsp {
    
    protected:
    
        TYPE_INT** fAdaptedInputs;
        TYPE_INT** fAdaptedOutputs;
    
        void adaptInputBuffers(int count, FAUSTFLOAT** inputs)
        {
            for (int chan = 0; chan < fDSP->getNumInputs(); chan++) {
                for (int frame = 0; frame < count; frame++) {
                    fAdaptedInputs[chan][frame] = TYPE_INT(reinterpret_cast<TYPE_EXT**>(inputs)[chan][frame]);
                }
            }
        }
    
        void adaptOutputsBuffers(int count, FAUSTFLOAT** outputs)
        {
            for (int chan = 0; chan < fDSP->getNumOutputs(); chan++) {
                for (int frame = 0; frame < count; frame++) {
                    reinterpret_cast<TYPE_EXT**>(outputs)[chan][frame] = TYPE_EXT(fAdaptedOutputs[chan][frame]);
                }
            }
        }
    
    public:
    
        dsp_sample_adapter(dsp* dsp):decorator_dsp(dsp)
        {
            fAdaptedInputs = new TYPE_INT*[dsp->getNumInputs()];
            for (int i = 0; i < dsp->getNumInputs(); i++) {
                fAdaptedInputs[i] = new TYPE_INT[4096];
            }
            
            fAdaptedOutputs = new TYPE_INT*[dsp->getNumOutputs()];
            for (int i = 0; i < dsp->getNumOutputs(); i++) {
                fAdaptedOutputs[i] = new TYPE_INT[4096];
            }
        }
    
        virtual ~dsp_sample_adapter()
        {
            for (int i = 0; i < fDSP->getNumInputs(); i++) {
                delete [] fAdaptedInputs[i];
            }
            delete [] fAdaptedInputs;
            
            for (int i = 0; i < fDSP->getNumOutputs(); i++) {
                delete [] fAdaptedOutputs[i];
            }
            delete [] fAdaptedOutputs;
        }
    
        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            adaptInputBuffers(count, inputs);
            // DSP base class uses FAUSTFLOAT** type, so reinterpret_cast has to be used even if the real DSP uses TYPE_INT
            fDSP->compute(count, reinterpret_cast<FAUSTFLOAT**>(fAdaptedInputs), reinterpret_cast<FAUSTFLOAT**>(fAdaptedOutputs));
            adaptOutputsBuffers(count, outputs);
        }
    
        virtual void compute(double date_usec, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            adaptInputBuffers(count, inputs);
            // DSP base class uses FAUSTFLOAT** type, so reinterpret_cast has to be used even if the real DSP uses TYPE_INT
            fDSP->compute(date_usec, count, reinterpret_cast<FAUSTFLOAT**>(fAdaptedInputs), reinterpret_cast<FAUSTFLOAT**>(fAdaptedOutputs));
            adaptOutputsBuffers(count, outputs);
       }
};

// Template used to specialize double parameters expressed as NUM/DENOM
template <int NUM, int DENOM>
struct Double {
    static constexpr double value() { return double(NUM)/double(DENOM); }
};

// Base class for filters
template <class fVslider0, int fVslider1>
struct Filter {
    inline int getFactor() { return fVslider1; }
};

// Generated with process = fi.lowpass(3, ma.SR*vslider("FCFactor", 0.4, 0.4, 0.5, 0.01)/vslider("Factor", 2, 2, 8, 1));
template <class fVslider0, int fVslider1, typename REAL>
struct LowPass3 : public Filter<fVslider0, fVslider1> {

    REAL fVec0[2];
    REAL fRec1[2];
    REAL fRec0[3];

    inline REAL mydsp_faustpower2_f(REAL value)
    {
        return (value * value);
    }

    LowPass3()
    {
        for (int l0 = 0; (l0 < 2); l0 = (l0 + 1)) {
            fVec0[l0] = 0.0;
        }
        for (int l1 = 0; (l1 < 2); l1 = (l1 + 1)) {
            fRec1[l1] = 0.0;
        }
        for (int l2 = 0; (l2 < 3); l2 = (l2 + 1)) {
            fRec0[l2] = 0.0;
        }
    }

    inline void compute(int count, FAUSTFLOAT* input0, FAUSTFLOAT* output0)
    {
        // Computed at template specialization time
        REAL fSlow0 = std::tan((3.1415926535897931 * (REAL(fVslider0::value()) / REAL(fVslider1))));
        REAL fSlow1 = (1.0 / fSlow0);
        REAL fSlow2 = (1.0 / (((fSlow1 + 1.0000000000000002) / fSlow0) + 1.0));
        REAL fSlow3 = (1.0 / (fSlow1 + 1.0));
        REAL fSlow4 = (1.0 - fSlow1);
        REAL fSlow5 = (((fSlow1 + -1.0000000000000002) / fSlow0) + 1.0);
        REAL fSlow6 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(fSlow0))));
        // Computed at runtime
        for (int i = 0; (i < count); i = (i + 1)) {
            REAL fTemp0 = REAL(input0[i]);
            fVec0[0] = fTemp0;
            fRec1[0] = (0.0 - (fSlow3 * ((fSlow4 * fRec1[1]) - (fTemp0 + fVec0[1]))));
            fRec0[0] = (fRec1[0] - (fSlow2 * ((fSlow5 * fRec0[2]) + (fSlow6 * fRec0[1]))));
            output0[i] = FAUSTFLOAT((fSlow2 * (fRec0[2] + (fRec0[0] + (2.0 * fRec0[1])))));
            fVec0[1] = fVec0[0];
            fRec1[1] = fRec1[0];
            fRec0[2] = fRec0[1];
            fRec0[1] = fRec0[0];
        }
    }
};

// Generated with process = fi.lowpass(4, ma.SR*vslider("FCFactor", 0.4, 0.4, 0.5, 0.01)/vslider("Factor", 2, 2, 8, 1));
template <class fVslider0, int fVslider1, typename REAL>
struct LowPass4 : public Filter<fVslider0, fVslider1> {
    
    REAL fRec1[3];
    REAL fRec0[3];
    
    inline REAL mydsp_faustpower2_f(REAL value)
    {
        return (value * value);
    }
    
    LowPass4()
    {
        for (int l0 = 0; (l0 < 3); l0 = (l0 + 1)) {
            fRec1[l0] = 0.0f;
        }
        for (int l1 = 0; (l1 < 3); l1 = (l1 + 1)) {
            fRec0[l1] = 0.0f;
        }
    }
    
    inline void compute(int count, FAUSTFLOAT* input0, FAUSTFLOAT* output0)
    {
        // Computed at template specialization time
        REAL fSlow0 = std::tan((3.1415926535897931 * (REAL(fVslider0::value()) / REAL(fVslider1))));
        REAL fSlow1 = (1.0 / fSlow0);
        REAL fSlow2 = (1.0 / (((fSlow1 + 0.76536686473017945) / fSlow0) + 1.0));
        REAL fSlow3 = (1.0 / (((fSlow1 + 1.8477590650225735) / fSlow0) + 1.0));
        REAL fSlow4 = (((fSlow1 + -1.8477590650225735) / fSlow0) + 1.0);
        REAL fSlow5 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(fSlow0))));
        REAL fSlow6 = (((fSlow1 + -0.76536686473017945) / fSlow0) + 1.0);
        // Computed at runtime
        for (int i = 0; (i < count); i = (i + 1)) {
            fRec1[0] = (REAL(input0[i]) - (fSlow3 * ((fSlow4 * fRec1[2]) + (fSlow5 * fRec1[1]))));
            fRec0[0] = ((fSlow3 * (fRec1[2] + (fRec1[0] + (2.0 * fRec1[1])))) - (fSlow2 * ((fSlow6 * fRec0[2]) + (fSlow5 * fRec0[1]))));
            output0[i] = FAUSTFLOAT((fSlow2 * (fRec0[2] + (fRec0[0] + (2.0 * fRec0[1])))));
            fRec1[2] = fRec1[1];
            fRec1[1] = fRec1[0];
            fRec0[2] = fRec0[1];
            fRec0[1] = fRec0[0];
        }
    }
};

// Generated with process = fi.lowpass3e(ma.SR*vslider("FCFactor", 0.4, 0.4, 0.5, 0.01)/vslider("Factor", 2, 2, 8, 1));
template <class fVslider0, int fVslider1, typename REAL>
struct LowPass3e : public Filter<fVslider0, fVslider1> {

    REAL fRec1[3];
    REAL fVec0[2];
    REAL fRec0[2];
    
    inline REAL mydsp_faustpower2_f(REAL value)
    {
        return (value * value);
    }
    
    LowPass3e()
    {
        for (int l0 = 0; (l0 < 3); l0 = (l0 + 1)) {
            fRec1[l0] = 0.0;
        }
        for (int l1 = 0; (l1 < 2); l1 = (l1 + 1)) {
            fVec0[l1] = 0.0;
        }
        for (int l2 = 0; (l2 < 2); l2 = (l2 + 1)) {
            fRec0[l2] = 0.0;
        }
    }
    
    inline void compute(int count, FAUSTFLOAT* input0, FAUSTFLOAT* output0)
    {
        // Computed at template specialization time
        REAL fSlow0 = std::tan((3.1415926535897931 * (REAL(fVslider0::value()) / REAL(fVslider1))));
        REAL fSlow1 = (1.0 / fSlow0);
        REAL fSlow2 = (1.0 / (fSlow1 + 0.82244590899881598));
        REAL fSlow3 = (0.82244590899881598 - fSlow1);
        REAL fSlow4 = (1.0 / (((fSlow1 + 0.80263676416103003) / fSlow0) + 1.4122708937742039));
        REAL fSlow5 = mydsp_faustpower2_f(fSlow0);
        REAL fSlow6 = (0.019809144837788999 / fSlow5);
        REAL fSlow7 = (fSlow6 + 1.1615164189826961);
        REAL fSlow8 = (((fSlow1 + -0.80263676416103003) / fSlow0) + 1.4122708937742039);
        REAL fSlow9 = (2.0 * (1.4122708937742039 - (1.0 / fSlow5)));
        REAL fSlow10 = (2.0 * (1.1615164189826961 - fSlow6));
        // Computed at runtime
        for (int i = 0; (i < count); i = (i + 1)) {
            fRec1[0] = (REAL(input0[i]) - (fSlow4 * ((fSlow8 * fRec1[2]) + (fSlow9 * fRec1[1]))));
            REAL fTemp0 = (fSlow4 * (((fSlow7 * fRec1[0]) + (fSlow10 * fRec1[1])) + (fSlow7 * fRec1[2])));
            fVec0[0] = fTemp0;
            fRec0[0] = (0.0 - (fSlow2 * ((fSlow3 * fRec0[1]) - (fTemp0 + fVec0[1]))));
            output0[i] = FAUSTFLOAT(fRec0[0]);
            fRec1[2] = fRec1[1];
            fRec1[1] = fRec1[0];
            fVec0[1] = fVec0[0];
            fRec0[1] = fRec0[0];
        }
    }
};

// Generated with process = fi.lowpass6e(ma.SR*vslider("FCFactor", 0.4, 0.4, 0.5, 0.01)/vslider("Factor", 2, 2, 8, 1));
template <class fVslider0, int fVslider1, typename REAL>
struct LowPass6e : public Filter<fVslider0, fVslider1> {

    REAL fRec2[3];
    REAL fRec1[3];
    REAL fRec0[3];
    
    inline REAL mydsp_faustpower2_f(REAL value)
    {
        return (value * value);
    }
    
    LowPass6e()
    {
        for (int l0 = 0; (l0 < 3); l0 = (l0 + 1)) {
            fRec2[l0] = 0.0;
        }
        for (int l1 = 0; (l1 < 3); l1 = (l1 + 1)) {
            fRec1[l1] = 0.0;
        }
        for (int l2 = 0; (l2 < 3); l2 = (l2 + 1)) {
            fRec0[l2] = 0.0;
        }
    }
    
    inline void compute(int count, FAUSTFLOAT* input0, FAUSTFLOAT* output0)
    {
        // Computed at template specialization time
        REAL fSlow0 = std::tan((3.1415926535897931 * (REAL(fVslider0::value()) / REAL(fVslider1))));
        REAL fSlow1 = (1.0 / fSlow0);
        REAL fSlow2 = (1.0 / (((fSlow1 + 0.16840487111358901) / fSlow0) + 1.0693584077073119));
        REAL fSlow3 = mydsp_faustpower2_f(fSlow0);
        REAL fSlow4 = (1.0 / fSlow3);
        REAL fSlow5 = (fSlow4 + 53.536152954556727);
        REAL fSlow6 = (1.0 / (((fSlow1 + 0.51247864188914105) / fSlow0) + 0.68962136448467504));
        REAL fSlow7 = (fSlow4 + 7.6217312988706034);
        REAL fSlow8 = (1.0 / (((fSlow1 + 0.78241304682164503) / fSlow0) + 0.24529150870616001));
        REAL fSlow9 = (9.9999997054999994e-05 / fSlow3);
        REAL fSlow10 = (fSlow9 + 0.00043322720055500002);
        REAL fSlow11 = (((fSlow1 + -0.78241304682164503) / fSlow0) + 0.24529150870616001);
        REAL fSlow12 = (2.0 * (0.24529150870616001 - fSlow4));
        REAL fSlow13 = (2.0 * (0.00043322720055500002 - fSlow9));
        REAL fSlow14 = (((fSlow1 + -0.51247864188914105) / fSlow0) + 0.68962136448467504);
        REAL fSlow15 = (2.0 * (0.68962136448467504 - fSlow4));
        REAL fSlow16 = (2.0 * (7.6217312988706034 - fSlow4));
        REAL fSlow17 = (((fSlow1 + -0.16840487111358901) / fSlow0) + 1.0693584077073119);
        REAL fSlow18 = (2.0 * (1.0693584077073119 - fSlow4));
        REAL fSlow19 = (2.0 * (53.536152954556727 - fSlow4));
        // Computed at runtime
        for (int i = 0; (i < count); i = (i + 1)) {
            fRec2[0] = (REAL(input0[i]) - (fSlow8 * ((fSlow11 * fRec2[2]) + (fSlow12 * fRec2[1]))));
            fRec1[0] = ((fSlow8 * (((fSlow10 * fRec2[0]) + (fSlow13 * fRec2[1])) + (fSlow10 * fRec2[2]))) - (fSlow6 * ((fSlow14 * fRec1[2]) + (fSlow15 * fRec1[1]))));
            fRec0[0] = ((fSlow6 * (((fSlow7 * fRec1[0]) + (fSlow16 * fRec1[1])) + (fSlow7 * fRec1[2]))) - (fSlow2 * ((fSlow17 * fRec0[2]) + (fSlow18 * fRec0[1]))));
            output0[i] = FAUSTFLOAT((fSlow2 * (((fSlow5 * fRec0[0]) + (fSlow19 * fRec0[1])) + (fSlow5 * fRec0[2]))));
            fRec2[2] = fRec2[1];
            fRec2[1] = fRec2[0];
            fRec1[2] = fRec1[1];
            fRec1[1] = fRec1[0];
            fRec0[2] = fRec0[1];
            fRec0[1] = fRec0[0];
        }
    }
};

// A "si.bus(N)" like hard-coded class
struct dsp_bus : public dsp {
    
    int fChannels;
    int fSampleRate;
    
    dsp_bus(int channels):fChannels(channels), fSampleRate(-1)
    {}
    
    virtual int getNumInputs() { return fChannels; }
    virtual int getNumOutputs() { return fChannels; }
    
    virtual int getSampleRate() { return fSampleRate; }
    
    virtual void buildUserInterface(UI* ui_interface) {}
    virtual void init(int sample_rate)
    {
        //classInit(sample_rate);
        instanceInit(sample_rate);
    }
    
    virtual void instanceInit(int sample_rate)
    {
        fSampleRate = sample_rate;
        instanceConstants(sample_rate);
        instanceResetUserInterface();
        instanceClear();
    }
    
    virtual void instanceConstants(int sample_rate) {}
    virtual void instanceResetUserInterface() {}
    virtual void instanceClear() {}
    
    virtual dsp* clone() { return new dsp_bus(fChannels); }
    
    virtual void metadata(Meta* m) {}
    
    virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
    {
        for (int chan = 0; chan < fChannels; chan++) {
            memcpy(outputs[chan], inputs[chan], sizeof(FAUSTFLOAT) * count);
        }
    }
    
    virtual void compute(double /*date_usec*/, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
    {
        compute(count, inputs, outputs);
    }
    
};

// Base class for sample-rate adapter
template <typename FILTER>
class sr_sampler : public decorator_dsp {

    protected:
    
        std::vector<FILTER> fInputLowPass;
        std::vector<FILTER> fOutputLowPass;
    
        inline int getFactor() { return this->fOutputLowPass[0].getFactor(); }
    
    public:
    
        sr_sampler(dsp* dsp):decorator_dsp(dsp)
        {
            for (int chan = 0; chan < fDSP->getNumInputs(); chan++) {
                fInputLowPass.push_back(FILTER());
            }
            for (int chan = 0; chan < fDSP->getNumOutputs(); chan++) {
                fOutputLowPass.push_back(FILTER());
            }
        }
 };

// Down sample-rate adapter
template <typename FILTER>
class dsp_down_sampler : public sr_sampler<FILTER> {
    
    public:
    
        dsp_down_sampler(dsp* dsp):sr_sampler<FILTER>(dsp)
        {}
    
        virtual void init(int sample_rate)
        {
            this->fDSP->init(sample_rate / this->getFactor());
        }
    
        virtual void instanceInit(int sample_rate)
        {
            this->fDSP->instanceInit(sample_rate / this->getFactor());
        }
    
        virtual void instanceConstants(int sample_rate)
        {
            this->fDSP->instanceConstants(sample_rate / this->getFactor());
        }
    
        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            int real_count = count / this->getFactor();
           
            // Adapt inputs
            FAUSTFLOAT* fInputs[this->fDSP->getNumInputs()];
            for (int chan = 0; chan < this->fDSP->getNumInputs(); chan++) {
                // Lowpass filtering in place on 'inputs'
                this->fInputLowPass[chan].compute(count, inputs[chan], inputs[chan]);
                // Allocate fInputs with 'real_count' frames
                fInputs[chan] = (FAUSTFLOAT*)alloca(sizeof(FAUSTFLOAT) * real_count);
                // Decimate
                for (int frame = 0; frame < real_count; frame++) {
                    fInputs[chan][frame] = inputs[chan][frame * this->getFactor()];
                }
            }
            
            // Allocate fOutputs with 'real_count' frames
            FAUSTFLOAT* fOutputs[this->fDSP->getNumOutputs()];
            for (int chan = 0; chan < this->fDSP->getNumOutputs(); chan++) {
                fOutputs[chan] = (FAUSTFLOAT*)alloca(sizeof(FAUSTFLOAT) * real_count);
            }
            
            // Compute at lower rate
            this->fDSP->compute(real_count, fInputs, fOutputs);
            
            // Adapt outputs
            for (int chan = 0; chan < this->fDSP->getNumOutputs(); chan++) {
                // Puts zeros
                memset(outputs[chan], 0, sizeof(FAUSTFLOAT) * count);
                for (int frame = 0; frame < real_count; frame++) {
                    // Copy one sample every 'DownFactor'
                    outputs[chan][frame * this->getFactor()] = fOutputs[chan][frame] * this->getFactor();
                    //outputs[chan][frame * this->getFactor()] = fOutputs[chan][frame];
                }
                // Lowpass filtering in place on 'outputs'
                this->fOutputLowPass[chan].compute(count, outputs[chan], outputs[chan]);
            }
        }
    
        virtual void compute(double /*date_usec*/, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { compute(count, inputs, outputs); }
};

// Up sample-rate adapter
template <typename FILTER>
class dsp_up_sampler : public sr_sampler<FILTER> {
    
    public:
    
        dsp_up_sampler(dsp* dsp):sr_sampler<FILTER>(dsp)
        {}
    
        virtual void init(int sample_rate)
        {
            this->fDSP->init(sample_rate * this->getFactor());
        }
    
        virtual void instanceInit(int sample_rate)
        {
            this->fDSP->instanceInit(sample_rate * this->getFactor());
        }
    
        virtual void instanceConstants(int sample_rate)
        {
            this->fDSP->instanceConstants(sample_rate * this->getFactor());
        }
    
        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            int real_count = count * this->getFactor();
            
            // Adapt inputs
            FAUSTFLOAT* fInputs[this->fDSP->getNumInputs()];
            
            for (int chan = 0; chan < this->fDSP->getNumInputs(); chan++) {
                // Allocate fInputs with 'real_count' frames
                fInputs[chan] = (FAUSTFLOAT*)alloca(sizeof(FAUSTFLOAT) * real_count);
                // Puts zeros
                memset(fInputs[chan], 0, sizeof(FAUSTFLOAT) * real_count);
                for (int frame = 0; frame < count; frame++) {
                    // Copy one sample every 'UpFactor'
                    fInputs[chan][frame * this->getFactor()] = inputs[chan][frame];
                }
                // Lowpass filtering in place on 'fInputs'
                this->fInputLowPass[chan].compute(real_count, fInputs[chan], fInputs[chan]);
            }
            
            // Allocate fOutputs with 'real_count' frames
            FAUSTFLOAT* fOutputs[this->fDSP->getNumOutputs()];
            for (int chan = 0; chan < this->fDSP->getNumOutputs(); chan++) {
                fOutputs[chan] = (FAUSTFLOAT*)alloca(sizeof(FAUSTFLOAT) * real_count);
            }
            
            // Compute at upper rate
            this->fDSP->compute(real_count, fInputs, fOutputs);
            
            // Adapt outputs
            for (int chan = 0; chan < this->fDSP->getNumOutputs(); chan++) {
                // Lowpass filtering in place on 'fOutputs'
                this->fOutputLowPass[chan].compute(real_count, fOutputs[chan], fOutputs[chan]);
                // Decimate
                for (int frame = 0; frame < count; frame++) {
                    outputs[chan][frame] = fOutputs[chan][frame * this->getFactor()] * this->getFactor();
                    //outputs[chan][frame] = fOutputs[chan][frame * this->getFactor()];
                }
            }
        }
    
        virtual void compute(double /*date_usec*/, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { compute(count, inputs, outputs); }
};

#endif
/**************************  END  dsp-adapter.h **************************/

//**************************************************************
// Soundfile handling
//**************************************************************

// Must be done before <<includeclass>> otherwise the 'Soundfile' type is not known

#if SOUNDFILE
// So that the code uses JUCE audio file loading code
#if JUCE_DRIVER
#define JUCE_64BIT 1
#endif
/************************** BEGIN SoundUI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2018 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/
 
#ifndef __SoundUI_H__
#define __SoundUI_H__

#include <map>
#include <vector>
#include <string>
#include <iostream>

/************************** BEGIN DecoratorUI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef Decorator_UI_H
#define Decorator_UI_H


//----------------------------------------------------------------
//  Generic UI empty implementation
//----------------------------------------------------------------

class GenericUI : public UI
{
    
    public:
        
        GenericUI() {}
        virtual ~GenericUI() {}
        
        // -- widget's layouts
        virtual void openTabBox(const char* label) {}
        virtual void openHorizontalBox(const char* label) {}
        virtual void openVerticalBox(const char* label) {}
        virtual void closeBox() {}
        
        // -- active widgets
        virtual void addButton(const char* label, FAUSTFLOAT* zone) {}
        virtual void addCheckButton(const char* label, FAUSTFLOAT* zone) {}
        virtual void addVerticalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) {}
        virtual void addHorizontalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) {}
        virtual void addNumEntry(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) {}
    
        // -- passive widgets
        virtual void addHorizontalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max) {}
        virtual void addVerticalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max) {}
    
        // -- soundfiles
        virtual void addSoundfile(const char* label, const char* soundpath, Soundfile** sf_zone) {}
    
        virtual void declare(FAUSTFLOAT* zone, const char* key, const char* val) {}
    
};

//----------------------------------------------------------------
//  Generic UI decorator
//----------------------------------------------------------------

class DecoratorUI : public UI
{
    
    protected:
        
        UI* fUI;
        
    public:
        
        DecoratorUI(UI* ui = 0):fUI(ui) {}
        virtual ~DecoratorUI() { delete fUI; }
        
        // -- widget's layouts
        virtual void openTabBox(const char* label)          { fUI->openTabBox(label); }
        virtual void openHorizontalBox(const char* label)   { fUI->openHorizontalBox(label); }
        virtual void openVerticalBox(const char* label)     { fUI->openVerticalBox(label); }
        virtual void closeBox()                             { fUI->closeBox(); }
        
        // -- active widgets
        virtual void addButton(const char* label, FAUSTFLOAT* zone)         { fUI->addButton(label, zone); }
        virtual void addCheckButton(const char* label, FAUSTFLOAT* zone)    { fUI->addCheckButton(label, zone); }
        virtual void addVerticalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        { fUI->addVerticalSlider(label, zone, init, min, max, step); }
        virtual void addHorizontalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        { fUI->addHorizontalSlider(label, zone, init, min, max, step); }
        virtual void addNumEntry(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        { fUI->addNumEntry(label, zone, init, min, max, step); }
        
        // -- passive widgets
        virtual void addHorizontalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max)
        { fUI->addHorizontalBargraph(label, zone, min, max); }
        virtual void addVerticalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max)
        { fUI->addVerticalBargraph(label, zone, min, max); }
    
        // -- soundfiles
        virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) { fUI->addSoundfile(label, filename, sf_zone); }
    
        virtual void declare(FAUSTFLOAT* zone, const char* key, const char* val) { fUI->declare(zone, key, val); }
    
};

#endif
/**************************  END  DecoratorUI.h **************************/

#ifdef __APPLE__
#include <CoreFoundation/CFBundle.h>
#endif

// Always included otherwise -i mode later on will not always include it (with the conditional includes)
/************************** BEGIN Soundfile.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.

 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __Soundfile__
#define __Soundfile__

#include <iostream>
#include <string.h>

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif

#define BUFFER_SIZE 16384
#define SAMPLE_RATE 44100
#define MAX_CHAN 64
#define MAX_SOUNDFILE_PARTS 256

#ifdef _MSC_VER
#define PRE_PACKED_STRUCTURE __pragma(pack(push, 1))
#define POST_PACKED_STRUCTURE \
    ;                         \
    __pragma(pack(pop))
#else
#define PRE_PACKED_STRUCTURE
#define POST_PACKED_STRUCTURE __attribute__((__packed__))
#endif

/*
 The soundfile structure to be used by the DSP code. Soundfile has a MAX_SOUNDFILE_PARTS parts 
 (even a single soundfile or an empty soundfile). 
 fLength, fOffset and fSR fields are filled accordingly by repeating
 the actual parts if needed.
 
 It has to be 'packed' to that the LLVM backend can correctly access it.

 Index computation:
    - p is the current part number [0..MAX_SOUNDFILE_PARTS-1] (must be proved by the type system)
    - i is the current position in the part. It will be constrained between [0..length]
    - idx(p,i) = fOffset[p] + max(0, min(i, fLength[p]));
*/

PRE_PACKED_STRUCTURE
struct Soundfile {
    FAUSTFLOAT** fBuffers;
    int* fLength;   // length of each part
    int* fSR;       // sample rate of each part
    int* fOffset;   // offset of each part in the global buffer
    int fChannels;  // max number of channels of all concatenated files

    Soundfile()
    {
        fBuffers  = NULL;
        fChannels = -1;
        fLength   = new int[MAX_SOUNDFILE_PARTS];
        fSR       = new int[MAX_SOUNDFILE_PARTS];
        fOffset   = new int[MAX_SOUNDFILE_PARTS];
    }

    ~Soundfile()
    {
        // Free the real channels only
        for (int chan = 0; chan < fChannels; chan++) {
            delete fBuffers[chan];
        }
        delete[] fBuffers;
        delete[] fLength;
        delete[] fSR;
        delete[] fOffset;
    }

} POST_PACKED_STRUCTURE;

/*
 The generic soundfile reader.
 */

class SoundfileReader {
    
   protected:
    
    int fDriverSR;
    
    void emptyFile(Soundfile* soundfile, int part, int& offset)
    {
        soundfile->fLength[part] = BUFFER_SIZE;
        soundfile->fSR[part] = SAMPLE_RATE;
        soundfile->fOffset[part] = offset;
        // Update offset
        offset += soundfile->fLength[part];
    }

    Soundfile* createSoundfile(int cur_chan, int length, int max_chan)
    {
        Soundfile* soundfile = new Soundfile();
        if (!soundfile) {
            throw std::bad_alloc();
        }
        
        soundfile->fBuffers = new FAUSTFLOAT*[max_chan];
        if (!soundfile->fBuffers) {
            throw std::bad_alloc();
        }
        
        for (int chan = 0; chan < cur_chan; chan++) {
            soundfile->fBuffers[chan] = new FAUSTFLOAT[length];
            if (!soundfile->fBuffers[chan]) {
                throw std::bad_alloc();
            }
            memset(soundfile->fBuffers[chan], 0, sizeof(FAUSTFLOAT) * length);
        }
        
        soundfile->fChannels = cur_chan;
        return soundfile;
    }

    void getBuffersOffset(Soundfile* soundfile, FAUSTFLOAT** buffers, int offset)
    {
        for (int chan = 0; chan < soundfile->fChannels; chan++) {
            buffers[chan] = &soundfile->fBuffers[chan][offset];
        }
    }
    
    // Check if a soundfile exists and return its real path_name
    std::string checkFile(const std::vector<std::string>& sound_directories, const std::string& file_name)
    {
        if (checkFile(file_name)) {
            return file_name;
        } else {
            for (size_t i = 0; i < sound_directories.size(); i++) {
                std::string path_name = sound_directories[i] + "/" + file_name;
                if (checkFile(path_name)) { return path_name; }
            }
            return "";
        }
    }
    
    bool isResampling(int sample_rate) { return (fDriverSR > 0 && fDriverSR != sample_rate); }
 
    // To be implemented by subclasses

    /**
     * Check the availability of a sound resource.
     *
     * @param path_name - the name of the file, or sound resource identified this way
     *
     * @return true if the sound resource is available, false otherwise.
     */
    virtual bool checkFile(const std::string& path_name) = 0;
    
    /**
     * Check the availability of a sound resource.
     *
     * @param buffer - the sound buffer
     * @param buffer - the sound buffer length
     *
     * @return true if the sound resource is available, false otherwise.
     */

    virtual bool checkFile(unsigned char* buffer, size_t length) { return true; }

    /**
     * Get the channels and length values of the given sound resource.
     *
     * @param path_name - the name of the file, or sound resource identified this way
     * @param channels - the channels value to be filled with the sound resource number of channels
     * @param length - the length value to be filled with the sound resource length in frames
     *
     */
    virtual void getParamsFile(const std::string& path_name, int& channels, int& length) = 0;
    
    /**
     * Get the channels and length values of the given sound resource.
     *
     * @param buffer - the sound buffer
     * @param buffer - the sound buffer length
     * @param channels - the channels value to be filled with the sound resource number of channels
     * @param length - the length value to be filled with the sound resource length in frames
     *
     */
    virtual void getParamsFile(unsigned char* buffer, size_t size, int& channels, int& length) {}

    /**
     * Read one sound resource and fill the 'soundfile' structure accordingly
     *
     * @param path_name - the name of the file, or sound resource identified this way
     * @param part - the part number to be filled in the soundfile
     * @param offset - the offset value to be incremented with the actual sound resource length in frames
     * @param max_chan - the maximum number of mono channels to fill
     *
     */
    virtual void readFile(Soundfile* soundfile, const std::string& path_name, int part, int& offset, int max_chan) = 0;
    
    /**
     * Read one sound resource and fill the 'soundfile' structure accordingly
     *
     * @param buffer - the sound buffer
     * @param buffer - the sound buffer length
     * @param part - the part number to be filled in the soundfile
     * @param offset - the offset value to be incremented with the actual sound resource length in frames
     * @param max_chan - the maximum number of mono channels to fill
     *
     */
    virtual void readFile(Soundfile* soundfile, unsigned char* buffer, size_t length, int part, int& offset, int max_chan) {}

  public:
    
    virtual ~SoundfileReader() {}
    
    void setSampleRate(int sample_rate) { fDriverSR = sample_rate; }
   
    Soundfile* createSoundfile(const std::vector<std::string>& path_name_list, int max_chan)
    {
        try {
            int cur_chan = 1; // At least one buffer
            int total_length = 0;
            
            // Compute total length and channels max of all files
            for (int i = 0; i < int(path_name_list.size()); i++) {
                int chan, length;
                if (path_name_list[i] == "__empty_sound__") {
                    length = BUFFER_SIZE;
                    chan = 1;
                } else {
                    getParamsFile(path_name_list[i], chan, length);
                }
                cur_chan = std::max<int>(cur_chan, chan);
                total_length += length;
            }
           
            // Complete with empty parts
            total_length += (MAX_SOUNDFILE_PARTS - path_name_list.size()) * BUFFER_SIZE;
            
            // Create the soundfile
            Soundfile* soundfile = createSoundfile(cur_chan, total_length, max_chan);
            
            // Init offset
            int offset = 0;
            
            // Read all files
            for (int i = 0; i < int(path_name_list.size()); i++) {
                if (path_name_list[i] == "__empty_sound__") {
                    emptyFile(soundfile, i, offset);
                } else {
                    readFile(soundfile, path_name_list[i], i, offset, max_chan);
                }
            }
            
            // Complete with empty parts
            for (int i = int(path_name_list.size()); i < MAX_SOUNDFILE_PARTS; i++) {
                emptyFile(soundfile, i, offset);
            }
            
            // Share the same buffers for all other channels so that we have max_chan channels available
            for (int chan = cur_chan; chan < max_chan; chan++) {
                soundfile->fBuffers[chan] = soundfile->fBuffers[chan % cur_chan];
            }
            
            return soundfile;
            
        } catch (...) {
            return NULL;
        }
    }

    // Check if all soundfiles exist and return their real path_name
    std::vector<std::string> checkFiles(const std::vector<std::string>& sound_directories,
                                        const std::vector<std::string>& file_name_list)
    {
        std::vector<std::string> path_name_list;
        for (size_t i = 0; i < file_name_list.size(); i++) {
            std::string path_name = checkFile(sound_directories, file_name_list[i]);
            // If 'path_name' is not found, it is replaced by an empty sound (= silence)
            path_name_list.push_back((path_name == "") ? "__empty_sound__" : path_name);
        }
        return path_name_list;
    }

};

#endif
/**************************  END  Soundfile.h **************************/

#if defined(JUCE_32BIT) || defined(JUCE_64BIT)
/************************** BEGIN JuceReader.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2018 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __JuceReader__
#define __JuceReader__

#include <assert.h>

#include "../JuceLibraryCode/JuceHeader.h"


struct JuceReader : public SoundfileReader {
    
    AudioFormatManager fFormatManager;
    
    JuceReader() { fFormatManager.registerBasicFormats(); }
    virtual ~JuceReader()
    {}
    
    bool checkFile(const std::string& path_name)
    {
        File file(path_name);
        if (file.existsAsFile()) {
            return true;
        } else {
            std::cerr << "ERROR : cannot open '" << path_name << "'" << std::endl;
            return false;
        }
    }
    
    void getParamsFile(const std::string& path_name, int& channels, int& length)
    {
        std::unique_ptr<AudioFormatReader> formatReader (fFormatManager.createReaderFor (File (path_name)));
        channels = int(formatReader->numChannels);
        length = int(formatReader->lengthInSamples);
    }
    
    void readFile(Soundfile* soundfile, const std::string& path_name, int part, int& offset, int max_chan)
    {
        std::unique_ptr<AudioFormatReader> formatReader (fFormatManager.createReaderFor (File (path_name)));
        
        soundfile->fLength[part] = int(formatReader->lengthInSamples);
        soundfile->fSR[part] = int(formatReader->sampleRate);
        soundfile->fOffset[part] = offset;
        
        FAUSTFLOAT** buffers = static_cast<FAUSTFLOAT**>(alloca(soundfile->fChannels * sizeof(FAUSTFLOAT*)));
                                                             
        getBuffersOffset(soundfile, buffers, offset);
        
        if (formatReader->read(reinterpret_cast<int *const *>(buffers), int(formatReader->numChannels), 0, int(formatReader->lengthInSamples), false)) {
            
            // Possibly concert samples
            if (!formatReader->usesFloatingPointData) {
                for (int chan = 0; chan < int(formatReader->numChannels); ++chan) {
                    FAUSTFLOAT* buffer = &soundfile->fBuffers[chan][soundfile->fOffset[part]];
                    FloatVectorOperations::convertFixedToFloat(buffer, reinterpret_cast<const int*>(buffer), 1.0f/0x7fffffff, int(formatReader->lengthInSamples));
                }
            }
            
        } else {
            std::cerr << "Error reading the file : " << path_name << std::endl;
        }
            
        // Update offset
        offset += soundfile->fLength[part];
    }
    
};

#endif
/**************************  END  JuceReader.h **************************/
JuceReader gReader;
#elif defined(MEMORY_READER)
/************************** BEGIN MemoryReader.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2018 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __MemoryReader__
#define __MemoryReader__


/*
 A 'MemoryReader' object can be used to prepare a set of sound resources in memory, to be used by SoundUI::addSoundfile.
 
 A Soundfile* object will have to be filled with a list of sound resources: the fLength, fOffset, fSampleRate and fBuffers fields 
 have to be completed with the appropriate values, and will be accessed in the DSP object while running.
 *
 */

// To adapt for a real case use

#define SOUND_CHAN      2
#define SOUND_LENGTH    4096
#define SOUND_SR        40100

struct MemoryReader : public SoundfileReader {
    
    MemoryReader()
    {}
    
    /**
     * Check the availability of a sound resource.
     *
     * @param path_name - the name of the file, or sound resource identified this way
     *
     * @return true if the sound resource is available, false otherwise.
     */
    virtual bool checkFile(const std::string& path_name) { return true; }
    
    /**
     * Get the channels and length values of the given sound resource.
     *
     * @param path_name - the name of the file, or sound resource identified this way
     * @param channels - the channels value to be filled with the sound resource number of channels
     * @param length - the length value to be filled with the sound resource length in frames
     *
     */
    virtual void getParamsFile(const std::string& path_name, int& channels, int& length)
    {
        channels = SOUND_CHAN;
        length = SOUND_LENGTH;
    }
    
    /**
     * Read one sound resource and fill the 'soundfile' structure accordingly
     *
     * @param path_name - the name of the file, or sound resource identified this way
     * @param part - the part number to be filled in the soundfile
     * @param offset - the offset value to be incremented with the actual sound resource length in frames
     * @param max_chan - the maximum number of mono channels to fill
     *
     */
    virtual void readFile(Soundfile* soundfile, const std::string& path_name, int part, int& offset, int max_chan)
    {
        soundfile->fLength[part] = SOUND_LENGTH;
        soundfile->fSR[part] = SOUND_SR;
        soundfile->fOffset[part] = offset;
        
        // Audio frames have to be written for each chan
        for (int sample = 0; sample < SOUND_LENGTH; sample++) {
            for (int chan = 0; chan < SOUND_CHAN; chan++) {
                soundfile->fBuffers[chan][offset + sample] = 0.f;
            }
        }
        
        // Update offset
        offset += SOUND_LENGTH;
    }
    
};

#endif
/**************************  END  MemoryReader.h **************************/
MemoryReader gReader;
#else
/************************** BEGIN LibsndfileReader.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2018 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __LibsndfileReader__
#define __LibsndfileReader__

#ifdef SAMPLERATE
#include <samplerate.h>
#endif
#include <sndfile.h>
#include <string.h>
#include <assert.h>
#include <iostream>


struct VFLibsndfile {
    
    #define SIGNED_SIZEOF(x) ((int)sizeof(x))
    
    unsigned char* fBuffer;
    size_t fLength;
    size_t fOffset;
    SF_VIRTUAL_IO fVIO;
    
    VFLibsndfile(unsigned char* buffer, size_t length):fBuffer(buffer), fLength(length), fOffset(0)
    {
        fVIO.get_filelen = vfget_filelen;
        fVIO.seek = vfseek;
        fVIO.read = vfread;
        fVIO.write = vfwrite;
        fVIO.tell = vftell;
    }
    
    static sf_count_t vfget_filelen(void* user_data)
    {
        VFLibsndfile* vf = static_cast<VFLibsndfile*>(user_data);
        return vf->fLength;
    }
  
    static sf_count_t vfseek(sf_count_t offset, int whence, void* user_data)
    {
        VFLibsndfile* vf = static_cast<VFLibsndfile*>(user_data);
        switch (whence) {
            case SEEK_SET:
                vf->fOffset = offset;
                break;
                
            case SEEK_CUR:
                vf->fOffset = vf->fOffset + offset;
                break;
                
            case SEEK_END:
                vf->fOffset = vf->fLength + offset;
                break;
                
            default:
                break;
        };
        
        return vf->fOffset;
    }
    
    static sf_count_t vfread(void* ptr, sf_count_t count, void* user_data)
    {
        VFLibsndfile* vf = static_cast<VFLibsndfile*>(user_data);
        
        /*
         **	This will break badly for files over 2Gig in length, but
         **	is sufficient for testing.
         */
        if (vf->fOffset + count > vf->fLength) {
            count = vf->fLength - vf->fOffset;
        }
        
        memcpy(ptr, vf->fBuffer + vf->fOffset, count);
        vf->fOffset += count;
        
        return count;
    }
    
    static sf_count_t vfwrite(const void* ptr, sf_count_t count, void* user_data)
    {
        VFLibsndfile* vf = static_cast<VFLibsndfile*>(user_data);
        
        /*
         **	This will break badly for files over 2Gig in length, but
         **	is sufficient for testing.
         */
        if (vf->fOffset >= SIGNED_SIZEOF(vf->fBuffer)) {
            return 0;
        }
        
        if (vf->fOffset + count > SIGNED_SIZEOF(vf->fBuffer)) {
            count = sizeof (vf->fBuffer) - vf->fOffset;
        }
        
        memcpy(vf->fBuffer + vf->fOffset, ptr, (size_t)count);
        vf->fOffset += count;
        
        if (vf->fOffset > vf->fLength) {
            vf->fLength = vf->fOffset;
        }
        
        return count;
    }
    
    static sf_count_t vftell(void* user_data)
    {
        VFLibsndfile* vf = static_cast<VFLibsndfile*>(user_data);
        return vf->fOffset;
    }
 
};

struct LibsndfileReader : public SoundfileReader {
	
    LibsndfileReader() {}
	
    typedef sf_count_t (* sample_read)(SNDFILE* sndfile, FAUSTFLOAT* ptr, sf_count_t frames);
	
    // Check file
    bool checkFile(const std::string& path_name)
    {
        SF_INFO snd_info;
        snd_info.format = 0;
        SNDFILE* snd_file = sf_open(path_name.c_str(), SFM_READ, &snd_info);
        return checkFileAux(snd_file, path_name);
    }
    
    bool checkFile(unsigned char* buffer, size_t length)
    {
        SF_INFO snd_info;
        snd_info.format = 0;
        VFLibsndfile vio(buffer, length);
        SNDFILE* snd_file = sf_open_virtual(&vio.fVIO, SFM_READ, &snd_info, &vio);
        return checkFileAux(snd_file, "virtual file");
    }
    
    bool checkFileAux(SNDFILE* snd_file, const std::string& path_name)
    {
        if (snd_file) {
            sf_close(snd_file);
            return true;
        } else {
            std::cerr << "ERROR : cannot open '" << path_name << "' (" << sf_strerror(NULL) << ")" << std::endl;
            return false;
        }
    }

    // Open the file and returns its length and channels
    void getParamsFile(const std::string& path_name, int& channels, int& length)
    {
        SF_INFO	snd_info;
        snd_info.format = 0;
        SNDFILE* snd_file = sf_open(path_name.c_str(), SFM_READ, &snd_info);
        getParamsFileAux(snd_file, snd_info, channels, length);
    }
    
    void getParamsFile(unsigned char* buffer, size_t size, int& channels, int& length)
    {
        SF_INFO	snd_info;
        snd_info.format = 0;
        VFLibsndfile vio(buffer, size);
        SNDFILE* snd_file = sf_open_virtual(&vio.fVIO, SFM_READ, &snd_info, &vio);
        getParamsFileAux(snd_file, snd_info, channels, length);
    }
    
    void getParamsFileAux(SNDFILE* snd_file, const SF_INFO& snd_info, int& channels, int& length)
    {
        assert(snd_file);
        channels = int(snd_info.channels);
    #ifdef SAMPLERATE
        length = (isResampling(snd_info.samplerate)) ? ((double(snd_info.frames) * double(fDriverSR) / double(snd_info.samplerate)) + BUFFER_SIZE) : int(snd_info.frames);
    #else
        length = int(snd_info.frames);
    #endif
        sf_close(snd_file);
    }
    
    // Read the file
    void copyToOut(Soundfile* soundfile, int size, int channels, int max_channels, int offset, FAUSTFLOAT* buffer)
    {
        for (int sample = 0; sample < size; sample++) {
            for (int chan = 0; chan < channels; chan++) {
                soundfile->fBuffers[chan][offset + sample] = buffer[sample * max_channels + chan];
            }
        }
    }
    
    void readFile(Soundfile* soundfile, const std::string& path_name, int part, int& offset, int max_chan)
    {
        SF_INFO	snd_info;
        snd_info.format = 0;
        SNDFILE* snd_file = sf_open(path_name.c_str(), SFM_READ, &snd_info);
        readFileAux(soundfile, snd_file, snd_info, part, offset, max_chan);
    }
    
    void readFile(Soundfile* soundfile, unsigned char* buffer, size_t length, int part, int& offset, int max_chan)
    {
        SF_INFO	snd_info;
        snd_info.format = 0;
        VFLibsndfile vio(buffer, length);
        SNDFILE* snd_file = sf_open_virtual(&vio.fVIO, SFM_READ, &snd_info, &vio);
        readFileAux(soundfile, snd_file, snd_info, part, offset, max_chan);
    }
	
    // Will be called to fill all parts from 0 to MAX_SOUNDFILE_PARTS-1
    void readFileAux(Soundfile* soundfile, SNDFILE* snd_file, const SF_INFO& snd_info, int part, int& offset, int max_chan)
    {
        assert(snd_file);
        int channels = std::min<int>(max_chan, snd_info.channels);
    #ifdef SAMPLERATE
        if (isResampling(snd_info.samplerate)) {
            soundfile->fLength[part] = int(double(snd_info.frames) * double(fDriverSR) / double(snd_info.samplerate));
            soundfile->fSR[part] = fDriverSR;
        } else {
            soundfile->fLength[part] = int(snd_info.frames);
            soundfile->fSR[part] = snd_info.samplerate;
        }
    #else
        soundfile->fLength[part] = int(snd_info.frames);
        soundfile->fSR[part] = snd_info.samplerate;
    #endif
        soundfile->fOffset[part] = offset;
		
        // Read and fill snd_info.channels number of channels
        sf_count_t nbf;
        FAUSTFLOAT* buffer_in = (FAUSTFLOAT*)alloca(BUFFER_SIZE * sizeof(FAUSTFLOAT) * snd_info.channels);
        sample_read reader;
        
        if (sizeof(FAUSTFLOAT) == 4) {
            reader = reinterpret_cast<sample_read>(sf_readf_float);
        } else {
            reader = reinterpret_cast<sample_read>(sf_readf_double);
        }
        
    #ifdef SAMPLERATE
        // Resampling
        SRC_STATE* resampler = nullptr;
        FAUSTFLOAT* buffer_out = nullptr;
        if  (isResampling(snd_info.samplerate)) {
            int error;
            resampler = src_new(SRC_SINC_FASTEST, channels, &error);
            if (error != 0) {
                std::cerr << "ERROR : src_new " << src_strerror(error) << std::endl;
                throw -1;
            }
            buffer_out = (FAUSTFLOAT*)alloca(BUFFER_SIZE * sizeof(FAUSTFLOAT) * snd_info.channels);
        }
    #endif
        
        do {
            nbf = reader(snd_file, buffer_in, BUFFER_SIZE);
        #ifdef SAMPLERATE
            // Resampling
            if  (isResampling(snd_info.samplerate)) {
                int in_offset = 0;
                SRC_DATA src_data;
                src_data.src_ratio = double(fDriverSR)/double(snd_info.samplerate);
                do {
                    src_data.data_in = &buffer_in[in_offset * snd_info.channels];
                    src_data.data_out = buffer_out;
                    src_data.input_frames = nbf - in_offset;
                    src_data.output_frames = BUFFER_SIZE;
                    src_data.end_of_input = (nbf < BUFFER_SIZE);
                    int res = src_process(resampler, &src_data);
                    if (res != 0) {
                        std::cerr << "ERROR : src_process " << src_strerror(res) << std::endl;
                        throw -1;
                    }
                    copyToOut(soundfile, src_data.output_frames_gen, channels, snd_info.channels, offset, buffer_out);
                    in_offset += src_data.input_frames_used;
                    // Update offset
                    offset += src_data.output_frames_gen;
                } while (in_offset < nbf);
            } else {
                copyToOut(soundfile, nbf, channels, snd_info.channels, offset, buffer_in);
                // Update offset
                offset += nbf;
            }
        #else
            copyToOut(soundfile, nbf, channels, snd_info.channels, offset, buffer_in);
            // Update offset
            offset += nbf;
        #endif
        } while (nbf == BUFFER_SIZE);
		
        sf_close(snd_file);
    #ifdef SAMPLERATE
        if (resampler) src_delete(resampler);
    #endif
    }

};

#endif
/**************************  END  LibsndfileReader.h **************************/
LibsndfileReader gReader;
#endif

// To be used by DSP code if no SoundUI is used
std::vector<std::string> path_name_list;
Soundfile* defaultsound = gReader.createSoundfile(path_name_list, MAX_CHAN);

class SoundUI : public GenericUI
{
		
    private:
    
        std::vector<std::string> fSoundfileDir;             // The soundfile directories
        std::map<std::string, Soundfile*> fSoundfileMap;    // Map to share loaded soundfiles
        SoundfileReader* fSoundReader;

     public:
    
        SoundUI(const std::string& sound_directory = "", int sample_rate = -1, SoundfileReader* reader = nullptr)
        {
            fSoundfileDir.push_back(sound_directory);
            fSoundReader = (reader) ? reader : &gReader;
            fSoundReader->setSampleRate(sample_rate);
        }
    
        SoundUI(const std::vector<std::string>& sound_directories, int sample_rate = -1, SoundfileReader* reader = nullptr)
        :fSoundfileDir(sound_directories)
        {
            fSoundReader = (reader) ? reader : &gReader;
            fSoundReader->setSampleRate(sample_rate);
        }
    
        virtual ~SoundUI()
        {   
            // Delete all soundfiles
            std::map<std::string, Soundfile*>::iterator it;
            for (it = fSoundfileMap.begin(); it != fSoundfileMap.end(); it++) {
                delete (*it).second;
            }
        }

        // -- soundfiles
        virtual void addSoundfile(const char* label, const char* url, Soundfile** sf_zone)
        {
            const char* saved_url = url; // 'url' is consumed by parseMenuList2
            std::vector<std::string> file_name_list;
            
            bool menu = parseMenuList2(url, file_name_list, true);
            // If not a list, we have as single file
            if (!menu) { file_name_list.push_back(saved_url); }
            
            // Parse the possible list
            if (fSoundfileMap.find(saved_url) == fSoundfileMap.end()) {
                // Check all files and get their complete path
                std::vector<std::string> path_name_list = fSoundReader->checkFiles(fSoundfileDir, file_name_list);
                // Read them and create the Soundfile
                Soundfile* sound_file = fSoundReader->createSoundfile(path_name_list, MAX_CHAN);
                if (sound_file) {
                    fSoundfileMap[saved_url] = sound_file;
                } else {
                    // If failure, use 'defaultsound'
                    std::cerr << "addSoundfile : soundfile for " << saved_url << " cannot be created !" << std::endl;
                    *sf_zone = defaultsound;
                    return;
                }
            }
            
            // Get the soundfile
            *sf_zone = fSoundfileMap[saved_url];
        }
    
        static std::string getBinaryPath(std::string folder = "")
        {
            std::string bundle_path_str;
        #ifdef __APPLE__
            CFURLRef bundle_ref = CFBundleCopyBundleURL(CFBundleGetMainBundle());
            if (!bundle_ref) { std::cerr << "getBinaryPath CFBundleCopyBundleURL error '" << folder << "'" << std::endl; return ""; }
      
            UInt8 bundle_path[1024];
            if (CFURLGetFileSystemRepresentation(bundle_ref, true, bundle_path, 1024)) {
                bundle_path_str = std::string((char*)bundle_path) + folder;
            } else {
                std::cerr << "getBinaryPath CFURLGetFileSystemRepresentation error\n";
            }
        #endif
        #ifdef ANDROID_DRIVER
            bundle_path_str = "/data/data/__CURRENT_ANDROID_PACKAGE__/files";
        #endif
            return bundle_path_str;
        }
        
        static std::string getBinaryPathFrom(const std::string& path)
        {
            std::string bundle_path_str;
        #ifdef __APPLE__
            CFBundleRef bundle = CFBundleGetBundleWithIdentifier(CFStringCreateWithCString(kCFAllocatorDefault, path.c_str(), CFStringGetSystemEncoding()));
            if (!bundle) { std::cerr << "getBinaryPathFrom CFBundleGetBundleWithIdentifier error '" << path << "'" << std::endl; return ""; }
         
            CFURLRef bundle_ref = CFBundleCopyBundleURL(bundle);
            if (!bundle_ref) { std::cerr << "getBinaryPathFrom CFBundleCopyBundleURL error\n"; return ""; }
            
            UInt8 bundle_path[1024];
            if (CFURLGetFileSystemRepresentation(bundle_ref, true, bundle_path, 1024)) {
                bundle_path_str = std::string((char*)bundle_path);
            } else {
                std::cerr << "getBinaryPathFrom CFURLGetFileSystemRepresentation error\n";
            }
        #endif
        #ifdef ANDROID_DRIVER
            bundle_path_str = "/data/data/__CURRENT_ANDROID_PACKAGE__/files";
        #endif
            return bundle_path_str;
        }
};

#endif
/**************************  END  SoundUI.h **************************/
#endif

//**************************************************************
// OSC configuration (hardcoded for now...)
//**************************************************************

#define OSC_IP_ADDRESS  "192.168.1.112"
#define OSC_IN_PORT     "5510"
#define OSC_OUT_PORT    "5511"

//**************************************************************
// Intrinsic
//**************************************************************


#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <math.h>

const static float fmydspSIG0Wave0[7] = {-0.100000001f,0.330000013f,0.660000026f,0.800000012f,0.899999976f,0.949999988f,1.10000002f};
class mydspSIG0 {
	
  private:
	
	int fmydspSIG0Wave0_idx;
	
  public:
	
	int getNumInputsmydspSIG0() {
		return 0;
	}
	int getNumOutputsmydspSIG0() {
		return 1;
	}
	int getInputRatemydspSIG0(int channel) {
		int rate;
		switch ((channel)) {
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	int getOutputRatemydspSIG0(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 0;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	
	void instanceInitmydspSIG0(int sample_rate) {
		fmydspSIG0Wave0_idx = 0;
	}
	
	void fillmydspSIG0(int count, float* table) {
		for (int i = 0; (i < count); i = (i + 1)) {
			table[i] = fmydspSIG0Wave0[fmydspSIG0Wave0_idx];
			fmydspSIG0Wave0_idx = ((1 + fmydspSIG0Wave0_idx) % 7);
		}
	}

};

static mydspSIG0* newmydspSIG0() { return (mydspSIG0*)new mydspSIG0(); }
static void deletemydspSIG0(mydspSIG0* dsp) { delete dsp; }

const static int imydspSIG1Wave0[48] = {1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,1};
class mydspSIG1 {
	
  private:
	
	int imydspSIG1Wave0_idx;
	
  public:
	
	int getNumInputsmydspSIG1() {
		return 0;
	}
	int getNumOutputsmydspSIG1() {
		return 1;
	}
	int getInputRatemydspSIG1(int channel) {
		int rate;
		switch ((channel)) {
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	int getOutputRatemydspSIG1(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 0;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	
	void instanceInitmydspSIG1(int sample_rate) {
		imydspSIG1Wave0_idx = 0;
	}
	
	void fillmydspSIG1(int count, int* table) {
		for (int i = 0; (i < count); i = (i + 1)) {
			table[i] = imydspSIG1Wave0[imydspSIG1Wave0_idx];
			imydspSIG1Wave0_idx = ((1 + imydspSIG1Wave0_idx) % 48);
		}
	}

};

static mydspSIG1* newmydspSIG1() { return (mydspSIG1*)new mydspSIG1(); }
static void deletemydspSIG1(mydspSIG1* dsp) { delete dsp; }

class mydspSIG2 {
	
  private:
	
	int iRec22[2];
	
  public:
	
	int getNumInputsmydspSIG2() {
		return 0;
	}
	int getNumOutputsmydspSIG2() {
		return 1;
	}
	int getInputRatemydspSIG2(int channel) {
		int rate;
		switch ((channel)) {
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	int getOutputRatemydspSIG2(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 0;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	
	void instanceInitmydspSIG2(int sample_rate) {
		for (int l20 = 0; (l20 < 2); l20 = (l20 + 1)) {
			iRec22[l20] = 0;
		}
	}
	
	void fillmydspSIG2(int count, float* table) {
		for (int i = 0; (i < count); i = (i + 1)) {
			iRec22[0] = (iRec22[1] + 1);
			table[i] = std::sin((9.58738019e-05f * float((iRec22[0] + -1))));
			iRec22[1] = iRec22[0];
		}
	}

};

static mydspSIG2* newmydspSIG2() { return (mydspSIG2*)new mydspSIG2(); }
static void deletemydspSIG2(mydspSIG2* dsp) { delete dsp; }

const static float fmydspSIG3Wave0[250] = {1.0f,0.776724994f,0.625723004f,0.855223f,0.760159016f,0.69837302f,0.768010974f,0.64112699f,0.244034007f,0.707754016f,0.634012997f,0.247527003f,0.660848975f,0.450396001f,0.567782998f,0.106361002f,0.716813982f,0.663919985f,0.291207999f,0.310598999f,0.801495016f,0.635291994f,0.307435006f,0.874123991f,0.497667998f,0.487087995f,0.459114999f,0.733455002f,0.541818023f,0.441318005f,0.313919991f,0.40309f,0.685352981f,0.603139997f,0.400552005f,0.453511f,0.634386003f,0.291547f,0.131604999f,0.368506998f,0.839906991f,0.602159977f,0.288296014f,0.579670012f,0.0242493004f,0.262746006f,0.368588001f,0.890284002f,0.408962995f,0.556071997f,0.884427011f,0.832109988f,0.612015009f,0.757175982f,0.919476986f,1.0f,0.827962995f,0.89240998f,0.0357408002f,0.480789006f,0.75287199f,0.0546301007f,0.235936999f,0.362937987f,0.444471985f,0.101751f,0.703418016f,0.453135997f,0.316628993f,0.490393996f,0.982508004f,0.551621974f,0.602008998f,0.666957021f,0.776830018f,0.905662f,0.0987197012f,0.402967989f,0.829451978f,0.307644993f,0.640479982f,0.983971f,0.584204972f,0.650364995f,0.334446996f,0.583570004f,0.540190995f,0.672533989f,0.245711997f,0.687298f,0.883058012f,0.792949975f,0.600619018f,0.572682023f,0.122612f,0.388247997f,0.290657997f,0.380255014f,0.290966988f,0.567818999f,0.0737721026f,0.42098999f,0.0786577985f,0.393994987f,0.268983006f,0.260614008f,0.494085997f,0.238025993f,0.0987823978f,0.277879f,0.440562993f,0.0770211965f,0.450590998f,0.128137007f,0.0368275009f,0.128699005f,0.329605013f,0.374511987f,0.363590002f,0.272594005f,0.379052013f,0.305240989f,0.0741128996f,0.34572801f,0.299349993f,0.221284002f,0.0261390992f,0.293202013f,0.361885011f,0.114330001f,0.239004999f,0.434156001f,0.329582989f,0.219459996f,0.284175009f,0.198554993f,0.431975991f,0.302985013f,1.0f,0.146220997f,0.140700996f,0.264243007f,0.185996994f,0.426322013f,0.304780006f,0.343989998f,0.195429996f,0.386954993f,0.187600002f,0.172812f,0.0434115008f,0.303761005f,0.0694539994f,0.453943014f,0.832450986f,0.317817003f,0.940600991f,1.0f,0.180657998f,0.737921f,0.832297027f,0.402352005f,0.126785994f,0.594398022f,0.485455006f,0.324470013f,0.365101993f,0.777921975f,0.588271976f,0.401353002f,0.610734999f,0.158693001f,0.0746072009f,0.825098991f,0.925459027f,0.65377003f,0.260791987f,0.719384015f,0.559907973f,0.372590005f,0.360035002f,0.622938991f,0.210271001f,0.444595009f,0.311286002f,0.464309007f,0.557231009f,0.524079978f,0.0701055974f,0.320749015f,0.194460005f,0.727608979f,0.522062004f,0.394003987f,0.235035002f,0.395646006f,0.494796008f,0.51731801f,0.109751999f,0.69284898f,0.00632009003f,0.0207582992f,0.00306107011f,0.0637191013f,0.0816610008f,0.0351100005f,0.127813995f,0.202294007f,0.0764145032f,0.263126999f,0.400198996f,0.267277986f,0.633385003f,1.0f,0.73990202f,0.413762987f,0.418110013f,0.612715006f,0.67237401f,0.339673996f,0.211720005f,0.459645003f,0.102499999f,0.325890005f,0.148154005f,0.265442014f,0.0974304974f,0.286437988f,0.275213003f,0.109111004f,0.575088978f,0.370283008f,0.29411f,0.259826005f,0.0648718998f,0.583418012f,0.282662988f,0.182004005f,0.117421001f,0.417726994f,0.169650003f,0.24853f,0.122818999f,0.185486004f,0.0433618017f,0.373849005f,0.25276801f,0.195103005f,0.0927835032f,0.166543007f};
class mydspSIG3 {
	
  private:
	
	int fmydspSIG3Wave0_idx;
	
  public:
	
	int getNumInputsmydspSIG3() {
		return 0;
	}
	int getNumOutputsmydspSIG3() {
		return 1;
	}
	int getInputRatemydspSIG3(int channel) {
		int rate;
		switch ((channel)) {
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	int getOutputRatemydspSIG3(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 0;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	
	void instanceInitmydspSIG3(int sample_rate) {
		fmydspSIG3Wave0_idx = 0;
	}
	
	void fillmydspSIG3(int count, float* table) {
		for (int i = 0; (i < count); i = (i + 1)) {
			table[i] = fmydspSIG3Wave0[fmydspSIG3Wave0_idx];
			fmydspSIG3Wave0_idx = ((1 + fmydspSIG3Wave0_idx) % 250);
		}
	}

};

static mydspSIG3* newmydspSIG3() { return (mydspSIG3*)new mydspSIG3(); }
static void deletemydspSIG3(mydspSIG3* dsp) { delete dsp; }

const static float fmydspSIG4Wave0[350] = {0.525285006f,0.814173996f,0.483260989f,0.296745002f,0.975055993f,0.472243994f,0.409500986f,0.425363988f,0.687559009f,0.28838101f,0.309285015f,0.123053998f,0.286332995f,0.576705992f,0.908321977f,0.626973987f,0.0801851973f,0.309834987f,0.451429993f,0.132844999f,0.470634997f,0.417008013f,0.265112013f,0.075280197f,0.463470012f,0.471810013f,0.275323987f,0.547026992f,0.512519002f,0.394077986f,0.595404029f,0.941305995f,0.392500997f,0.381435007f,0.391232014f,0.118923999f,0.339495003f,0.101420999f,0.241754994f,0.0873254985f,0.37894401f,0.637705028f,0.171946004f,0.149858996f,0.233290002f,0.541809976f,1.0f,0.115553997f,0.244172007f,0.574329019f,0.606171012f,0.93839699f,0.392554998f,0.277359009f,0.86857003f,0.432489008f,0.408856004f,0.407932013f,0.299814999f,0.256659001f,0.549571991f,0.406347007f,0.312330991f,0.62757802f,0.670167029f,0.524648011f,0.406926006f,0.637524009f,0.555836976f,1.0f,0.818979025f,0.705347002f,0.678140998f,0.427381992f,0.674404025f,0.636105001f,0.643634975f,0.699136019f,0.836201012f,0.613084972f,0.31901899f,0.725259006f,0.545518994f,0.479860991f,0.498360008f,0.488653988f,0.861671984f,0.314287007f,0.671051979f,0.531904995f,0.421781003f,0.81506598f,0.772032022f,0.488721997f,0.0896674022f,0.291285992f,0.65872997f,0.635631979f,0.679356992f,0.459497005f,0.360240012f,0.58228898f,0.650605023f,0.490949988f,0.381909996f,0.157260999f,0.479624003f,0.477490991f,0.174435005f,0.0130939996f,0.879113019f,0.608069003f,0.268877f,0.604479015f,0.245130002f,0.170506999f,0.292887986f,0.545849025f,0.476646006f,0.922316015f,0.669192016f,0.578094006f,0.578796983f,0.311396003f,0.601209998f,0.54995501f,1.0f,0.66573f,0.980114996f,0.537847996f,0.0740531012f,0.252472013f,0.25575f,0.223974004f,0.0865103006f,0.138209f,0.198623002f,0.0453034006f,0.432453007f,0.292407006f,0.394410014f,0.857658982f,0.271667987f,0.201545f,0.583993971f,0.0602377988f,0.190617993f,0.849505007f,0.975542009f,0.173140004f,0.206471995f,0.344792992f,0.761011004f,0.558125019f,0.117245004f,0.0338485017f,0.337597013f,0.336645991f,0.174253002f,0.230169997f,0.934872985f,0.593647003f,0.393225014f,0.683704019f,0.056609299f,0.0405011997f,0.148972005f,0.338721991f,0.283419013f,0.394006997f,0.237474993f,0.26996401f,0.428312987f,0.177498996f,0.462585002f,0.443962991f,0.981792986f,0.408239007f,0.676527023f,0.402864993f,0.0163302999f,0.0515113994f,0.341390014f,0.311134994f,0.613276005f,0.805884004f,0.953289986f,0.406091005f,0.578705013f,0.386785001f,0.434103012f,0.775259972f,1.0f,0.635909021f,0.78205198f,0.0137182996f,0.0387725011f,0.618964016f,0.857070982f,0.131522f,0.184988007f,0.299495012f,0.789211988f,0.603114009f,0.0704988986f,0.0129338996f,0.252481014f,0.254121006f,0.189206004f,0.357713014f,0.950308025f,0.552573025f,0.466453999f,0.777360022f,0.0307886004f,0.0251943003f,0.378886014f,0.740186989f,0.247637004f,0.235201001f,0.493045002f,0.517849982f,0.883953989f,0.429473013f,0.409433007f,0.415266007f,0.940198004f,0.282334f,0.437889993f,0.375384986f,0.0157366004f,0.0171763003f,0.485554993f,0.461014986f,0.858958006f,0.907990992f,0.935190976f,0.375510007f,1.0f,0.585493028f,0.269980997f,0.423052996f,0.666067004f,0.435090005f,0.79025197f,0.00889586005f,0.0208844002f,0.449734986f,0.790808022f,0.159856007f,0.0895989984f,0.161546007f,0.528168023f,0.380641997f,0.0206275992f,0.0072642602f,0.0315352008f,0.0315840989f,0.197649002f,0.475057006f,0.517232001f,0.360922009f,0.421204001f,0.631340027f,0.00952139031f,0.0161049999f,0.499615014f,0.922958016f,0.214983001f,0.0655141026f,0.503970027f,0.514847994f,1.0f,0.483619004f,0.254027009f,0.228371993f,0.436105013f,0.233125001f,0.152242005f,0.279513001f,0.00906739011f,0.0132331997f,0.45125699f,0.388565987f,0.737226009f,0.479378015f,0.233036995f,0.103767f,0.845609009f,0.644127011f,0.261359006f,0.371457011f,0.527229011f,0.381372988f,0.334491998f,0.00833749026f,0.00861981977f,0.255919009f,0.254197001f,0.0872332975f,0.0461511984f,0.113017999f,0.345986009f,0.236343995f,0.0107800001f,0.00816505961f,0.405180991f,0.387180001f,0.343681008f,0.816492975f,0.25908199f,0.211906001f,0.432455003f,0.696886003f,0.00576223992f,0.0131310001f,0.455969006f,0.81160903f,0.426544011f,0.128489003f,0.215937003f,0.233934f,0.723070025f,0.351622999f,0.394230992f,0.323765993f,0.168803006f,0.276932001f,0.264683992f,0.227703005f,0.0068093501f,0.0170703009f,0.603017986f,0.476460993f,0.585924983f,0.716960013f,1.0f,0.576526999f,0.475524008f,0.447322011f,0.356902003f,0.597572982f,0.697246015f,0.505333006f,0.285421014f,0.0147193f,0.0141618f,0.136188f,0.0336536989f,0.216436997f};
class mydspSIG4 {
	
  private:
	
	int fmydspSIG4Wave0_idx;
	
  public:
	
	int getNumInputsmydspSIG4() {
		return 0;
	}
	int getNumOutputsmydspSIG4() {
		return 1;
	}
	int getInputRatemydspSIG4(int channel) {
		int rate;
		switch ((channel)) {
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	int getOutputRatemydspSIG4(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 0;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	
	void instanceInitmydspSIG4(int sample_rate) {
		fmydspSIG4Wave0_idx = 0;
	}
	
	void fillmydspSIG4(int count, float* table) {
		for (int i = 0; (i < count); i = (i + 1)) {
			table[i] = fmydspSIG4Wave0[fmydspSIG4Wave0_idx];
			fmydspSIG4Wave0_idx = ((1 + fmydspSIG4Wave0_idx) % 350);
		}
	}

};

static mydspSIG4* newmydspSIG4() { return (mydspSIG4*)new mydspSIG4(); }
static void deletemydspSIG4(mydspSIG4* dsp) { delete dsp; }

static float ftbl0mydspSIG0[7];
static float mydsp_faustpower2_f(float value) {
	return (value * value);
}
static int itbl1mydspSIG1[48];
static float mydsp_faustpower6_f(float value) {
	return (((((value * value) * value) * value) * value) * value);
}
static float ftbl2mydspSIG2[65536];
static float mydsp_faustpower3_f(float value) {
	return ((value * value) * value);
}
static float mydsp_faustpower4_f(float value) {
	return (((value * value) * value) * value);
}
static float ftbl3mydspSIG3[250];
static float ftbl4mydspSIG4[350];

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

class mydsp : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	int iVec0[2];
	FAUSTFLOAT fVslider0;
	FAUSTFLOAT fHslider1;
	float fConst0;
	float fConst1;
	float fConst2;
	float fConst3;
	float fConst4;
	float fConst5;
	float fConst6;
	FAUSTFLOAT fHslider2;
	float fRec0[2];
	FAUSTFLOAT fHslider3;
	int fSampleRate;
	float fConst7;
	float fConst8;
	FAUSTFLOAT fHslider4;
	FAUSTFLOAT fHslider5;
	FAUSTFLOAT fHslider6;
	float fRec5[2];
	FAUSTFLOAT fHslider7;
	FAUSTFLOAT fHslider8;
	float fRec6[2];
	FAUSTFLOAT fHslider9;
	FAUSTFLOAT fCheckbox0;
	FAUSTFLOAT fHslider10;
	FAUSTFLOAT fHslider11;
	float fRec8[2];
	FAUSTFLOAT fHslider12;
	FAUSTFLOAT fHslider13;
	FAUSTFLOAT fEntry0;
	float fConst9;
	float fConst10;
	float fConst11;
	float fConst12;
	FAUSTFLOAT fHslider14;
	FAUSTFLOAT fHslider15;
	float fVec1[2];
	float fVec2[2];
	int iVec3[2];
	int iRec13[2];
	float fConst13;
	FAUSTFLOAT fVslider1;
	FAUSTFLOAT fVslider2;
	float fRec12[2];
	FAUSTFLOAT fHslider16;
	FAUSTFLOAT fHslider17;
	FAUSTFLOAT fHslider18;
	int iRec15[2];
	float fConst14;
	float fConst15;
	float fConst16;
	FAUSTFLOAT fHslider19;
	float fConst17;
	float fRec17[2];
	float fRec16[2];
	float fRec14[3];
	float fConst18;
	float fConst19;
	int iRec20[2];
	float fVec4[2];
	int iVec5[2];
	int iRec19[2];
	float fConst20;
	float fConst21;
	int iRec21[2];
	float fRec18[2];
	float fConst22;
	float fConst23;
	float fRec24[2];
	float fConst24;
	float fConst25;
	float fVec6[2];
	float fRec26[2];
	float fVec7[2];
	int IOTA;
	float fVec8[4096];
	float fConst26;
	float fRec25[2];
	float fRec23[2];
	float fRec27[2];
	float fRec28[2];
	float fRec29[2];
	FAUSTFLOAT fHslider20;
	float fVec9[2];
	float fVec10[2];
	int iVec11[2];
	int iRec31[2];
	float fRec30[2];
	FAUSTFLOAT fHslider21;
	int iRec33[2];
	FAUSTFLOAT fHslider22;
	float fRec35[2];
	float fRec34[2];
	float fRec32[3];
	int iRec38[2];
	float fVec12[2];
	int iVec13[2];
	int iRec37[2];
	int iRec39[2];
	float fRec36[2];
	float fRec41[2];
	float fVec14[2];
	float fRec43[2];
	float fVec15[2];
	float fVec16[4096];
	float fRec42[2];
	float fRec40[2];
	float fRec44[2];
	float fRec45[2];
	float fRec46[2];
	FAUSTFLOAT fHslider23;
	float fVec17[2];
	float fVec18[2];
	int iVec19[2];
	int iRec48[2];
	float fRec47[2];
	FAUSTFLOAT fHslider24;
	int iRec50[2];
	FAUSTFLOAT fHslider25;
	float fRec52[2];
	float fRec51[2];
	float fRec49[3];
	int iRec55[2];
	float fVec20[2];
	int iVec21[2];
	int iRec54[2];
	int iRec56[2];
	float fRec53[2];
	float fRec58[2];
	float fVec22[2];
	float fRec60[2];
	float fVec23[2];
	float fVec24[4096];
	float fRec59[2];
	float fRec57[2];
	float fRec61[2];
	float fRec62[2];
	float fRec63[2];
	FAUSTFLOAT fHslider26;
	float fVec25[2];
	float fVec26[2];
	int iVec27[2];
	int iRec65[2];
	float fRec64[2];
	FAUSTFLOAT fHslider27;
	int iRec67[2];
	FAUSTFLOAT fHslider28;
	float fRec69[2];
	float fRec68[2];
	float fRec66[3];
	int iRec72[2];
	float fVec28[2];
	int iVec29[2];
	int iRec71[2];
	int iRec73[2];
	float fRec70[2];
	float fRec75[2];
	float fVec30[2];
	float fRec77[2];
	float fVec31[2];
	float fVec32[4096];
	float fRec76[2];
	float fRec74[2];
	float fRec78[2];
	float fRec79[2];
	float fRec80[2];
	float fConst27;
	float fConst28;
	FAUSTFLOAT fHslider29;
	FAUSTFLOAT fHslider30;
	FAUSTFLOAT fHslider31;
	float fRec83[2];
	float fRec82[2];
	FAUSTFLOAT fHslider32;
	float fRec81[2];
	FAUSTFLOAT fHslider33;
	FAUSTFLOAT fHslider34;
	float fRec84[3];
	FAUSTFLOAT fHslider35;
	FAUSTFLOAT fHslider36;
	float fConst29;
	float fRec11[3];
	FAUSTFLOAT fHslider37;
	FAUSTFLOAT fHslider38;
	float fRec10[3];
	float fRec9[3];
	FAUSTFLOAT fHslider39;
	FAUSTFLOAT fCheckbox1;
	FAUSTFLOAT fHslider40;
	FAUSTFLOAT fHslider41;
	float fRec85[2];
	FAUSTFLOAT fHslider42;
	FAUSTFLOAT fHslider43;
	FAUSTFLOAT fHslider44;
	float fVec33[2];
	float fVec34[2];
	int iVec35[2];
	float fRec89[2];
	FAUSTFLOAT fEntry1;
	int iRec91[2];
	float fRec90[2];
	FAUSTFLOAT fHslider45;
	float fConst30;
	float fRec96[2];
	float fRec95[2];
	float fRec94[2];
	float fRec93[2];
	float fRec92[2];
	float fConst31;
	float fConst32;
	float fConst33;
	float fConst34;
	float fConst35;
	float fVec36[2];
	int iRec99[2];
	int iConst36;
	float fRec98[2];
	float fRec97[2];
	float fRec101[2];
	float fVec37[2];
	float fRec103[2];
	float fVec38[2];
	float fVec39[4096];
	float fRec102[2];
	float fRec100[2];
	float fConst37;
	float fConst38;
	float fConst39;
	float fConst40;
	float fConst41;
	float fVec40[2];
	int iRec106[2];
	int iConst42;
	float fRec105[2];
	float fRec104[2];
	float fVec41[2];
	float fRec109[2];
	float fVec42[2];
	float fVec43[4096];
	float fRec108[2];
	float fRec107[2];
	FAUSTFLOAT fHslider46;
	FAUSTFLOAT fHslider47;
	FAUSTFLOAT fHslider48;
	float fRec112[2];
	float fRec111[2];
	FAUSTFLOAT fHslider49;
	float fRec110[2];
	FAUSTFLOAT fHslider50;
	FAUSTFLOAT fHslider51;
	float fRec113[3];
	FAUSTFLOAT fHslider52;
	FAUSTFLOAT fHslider53;
	float fRec88[3];
	FAUSTFLOAT fHslider54;
	FAUSTFLOAT fHslider55;
	float fRec87[3];
	float fRec86[3];
	FAUSTFLOAT fHslider56;
	FAUSTFLOAT fCheckbox2;
	FAUSTFLOAT fHslider57;
	FAUSTFLOAT fHslider58;
	float fRec114[2];
	FAUSTFLOAT fHslider59;
	FAUSTFLOAT fHslider60;
	float fConst43;
	float fConst44;
	float fConst45;
	float fConst46;
	float fConst47;
	float fConst48;
	float fConst49;
	float fConst50;
	float fConst51;
	float fConst52;
	float fConst53;
	float fConst54;
	float fConst55;
	float fConst56;
	float fConst57;
	float fConst58;
	float fConst59;
	float fConst60;
	float fConst61;
	float fConst62;
	float fConst63;
	float fConst64;
	float fConst65;
	float fConst66;
	float fConst67;
	float fConst68;
	float fConst69;
	float fConst70;
	float fConst71;
	float fConst72;
	float fRec119[5];
	FAUSTFLOAT fHslider61;
	float fVec44[2];
	float fVec45[2];
	int iVec46[2];
	float fRec120[2];
	FAUSTFLOAT fEntry2;
	float fConst73;
	float fConst74;
	float fConst75;
	FAUSTFLOAT fHslider62;
	float fConst76;
	float fRec123[2];
	float fRec122[2];
	float fConst77;
	float fRec125[2];
	float fRec124[2];
	float fRec127[2];
	int iRec130[2];
	float fRec129[2];
	float fRec126[3];
	float fRec131[3];
	float fRec132[3];
	float fRec133[3];
	float fRec134[3];
	float fConst78;
	float fConst79;
	int iRec135[2];
	float fConst80;
	float fConst81;
	float fConst82;
	float fRec121[3];
	float fVec47[2];
	int iVec48[2];
	int iRec137[2];
	int iRec138[2];
	float fRec136[2];
	float fRec140[2];
	float fVec49[2];
	float fRec142[2];
	float fVec50[2];
	float fVec51[4096];
	float fRec141[2];
	float fRec139[2];
	float fConst83;
	float fConst84;
	float fConst85;
	float fVec52[2];
	int iRec145[2];
	int iConst86;
	float fRec144[2];
	float fRec143[2];
	float fVec53[2];
	float fRec148[2];
	float fVec54[2];
	float fVec55[4096];
	float fRec147[2];
	float fRec146[2];
	float fRec118[131072];
	FAUSTFLOAT fHslider63;
	FAUSTFLOAT fHslider64;
	FAUSTFLOAT fHslider65;
	float fRec151[2];
	float fRec150[2];
	FAUSTFLOAT fHslider66;
	float fRec149[2];
	FAUSTFLOAT fHslider67;
	FAUSTFLOAT fHslider68;
	float fRec152[3];
	FAUSTFLOAT fHslider69;
	FAUSTFLOAT fHslider70;
	float fRec117[3];
	FAUSTFLOAT fHslider71;
	FAUSTFLOAT fHslider72;
	float fRec116[3];
	float fRec115[3];
	FAUSTFLOAT fHslider73;
	FAUSTFLOAT fCheckbox3;
	FAUSTFLOAT fHslider74;
	FAUSTFLOAT fHslider75;
	float fRec153[2];
	FAUSTFLOAT fHslider76;
	FAUSTFLOAT fHslider77;
	float fConst87;
	float fRec158[5];
	float fConst88;
	FAUSTFLOAT fEntry3;
	int iRec160[2];
	FAUSTFLOAT fHslider78;
	float fVec56[2];
	float fVec57[2];
	int iVec58[2];
	int iRec161[2];
	float fConst89;
	FAUSTFLOAT fHslider79;
	float fVec59[2];
	float fRec159[2048];
	float fVec60[2];
	float fRec163[2];
	float fVec61[2];
	float fVec62[4096];
	float fRec162[2];
	float fRec164[2];
	float fVec63[8192];
	float fConst90;
	FAUSTFLOAT fHslider80;
	float fVec64[2];
	float fRec166[2048];
	float fVec65[2];
	float fRec168[2];
	float fVec66[2];
	float fVec67[4096];
	float fRec167[2];
	float fRec169[2];
	float fVec68[8192];
	float fConst91;
	FAUSTFLOAT fHslider81;
	float fVec69[2];
	float fRec171[2048];
	float fVec70[2];
	float fRec173[2];
	float fVec71[2];
	float fVec72[4096];
	float fRec172[2];
	float fRec174[2];
	float fVec73[4096];
	FAUSTFLOAT fHslider82;
	float fVec74[2];
	float fRec176[2048];
	float fVec75[2];
	float fRec178[2];
	float fVec76[2];
	float fVec77[4096];
	float fRec177[2];
	float fRec179[2];
	float fConst92;
	float fRec157[131072];
	FAUSTFLOAT fHslider83;
	FAUSTFLOAT fHslider84;
	FAUSTFLOAT fHslider85;
	float fRec183[2];
	float fRec182[2];
	FAUSTFLOAT fHslider86;
	float fRec181[2];
	FAUSTFLOAT fHslider87;
	FAUSTFLOAT fHslider88;
	float fRec184[3];
	FAUSTFLOAT fHslider89;
	FAUSTFLOAT fHslider90;
	float fRec156[3];
	FAUSTFLOAT fHslider91;
	FAUSTFLOAT fHslider92;
	float fRec155[3];
	float fRec154[3];
	float fConst93;
	float fConst94;
	float fConst95;
	float fConst96;
	float fConst97;
	float fConst98;
	float fConst99;
	float fConst100;
	float fConst101;
	float fConst102;
	float fConst103;
	float fConst104;
	float fConst105;
	float fConst106;
	float fConst107;
	float fConst108;
	float fRec197[2];
	float fRec196[2];
	float fVec78[32768];
	float fConst109;
	int iConst110;
	int iRec202[2];
	float fRec201[3];
	float fRec204[2];
	float fVec79[2];
	float fRec206[2];
	float fVec80[2];
	float fVec81[4096];
	float fRec205[2];
	float fRec203[2];
	float fRec207[2];
	int iRec209[2];
	float fRec208[3];
	float fRec211[2];
	float fVec82[2];
	float fRec213[2];
	float fVec83[2];
	float fVec84[4096];
	float fRec212[2];
	float fRec210[2];
	float fRec214[2];
	int iRec216[2];
	float fRec215[3];
	float fRec218[2];
	float fVec85[2];
	float fRec220[2];
	float fVec86[2];
	float fVec87[4096];
	float fRec219[2];
	float fRec217[2];
	float fRec221[2];
	int iRec223[2];
	float fRec222[3];
	float fRec225[2];
	float fVec88[2];
	float fRec227[2];
	float fVec89[2];
	float fVec90[4096];
	float fRec226[2];
	float fRec224[2];
	float fRec228[2];
	float fRec231[2];
	float fRec230[2];
	float fRec229[2];
	float fRec232[3];
	float fRec200[3];
	float fRec199[3];
	float fRec198[3];
	float fRec237[5];
	float fVec91[2];
	float fRec238[2048];
	float fVec92[2];
	float fRec240[2];
	float fVec93[2];
	float fVec94[4096];
	float fRec239[2];
	float fRec241[2];
	float fVec95[8192];
	float fVec96[2];
	float fRec243[2048];
	float fVec97[2];
	float fRec245[2];
	float fVec98[2];
	float fVec99[4096];
	float fRec244[2];
	float fRec246[2];
	float fVec100[8192];
	float fVec101[2];
	float fRec248[2048];
	float fVec102[2];
	float fRec250[2];
	float fVec103[2];
	float fVec104[4096];
	float fRec249[2];
	float fRec251[2];
	float fVec105[4096];
	float fVec106[2];
	float fRec253[2048];
	float fVec107[2];
	float fRec255[2];
	float fVec108[2];
	float fVec109[4096];
	float fRec254[2];
	float fRec256[2];
	float fRec236[131072];
	float fRec260[2];
	float fRec259[2];
	float fRec258[2];
	float fRec261[3];
	float fRec235[3];
	float fRec234[3];
	float fRec233[3];
	FAUSTFLOAT fHslider93;
	FAUSTFLOAT fCheckbox4;
	float fRec262[2];
	float fRec263[2];
	FAUSTFLOAT fHslider94;
	FAUSTFLOAT fHslider95;
	FAUSTFLOAT fHslider96;
	FAUSTFLOAT fHslider97;
	FAUSTFLOAT fEntry4;
	FAUSTFLOAT fHslider98;
	FAUSTFLOAT fHslider99;
	float fVec110[2];
	float fVec111[2];
	int iRec268[2];
	int iVec112[2];
	int iRec269[2];
	Soundfile* fSoundfile0;
	Soundfile* fSoundfile1;
	Soundfile* fSoundfile2;
	float fRec270[2];
	FAUSTFLOAT fHslider100;
	FAUSTFLOAT fHslider101;
	FAUSTFLOAT fHslider102;
	float fRec273[2];
	float fRec272[2];
	FAUSTFLOAT fHslider103;
	float fRec271[2];
	FAUSTFLOAT fHslider104;
	FAUSTFLOAT fHslider105;
	float fRec274[3];
	FAUSTFLOAT fHslider106;
	FAUSTFLOAT fHslider107;
	float fRec267[3];
	FAUSTFLOAT fHslider108;
	FAUSTFLOAT fHslider109;
	float fRec266[3];
	float fRec265[3];
	float fVec113[262144];
	float fConst111;
	float fRec275[2];
	float fConst112;
	float fRec264[3];
	FAUSTFLOAT fHslider110;
	FAUSTFLOAT fCheckbox5;
	float fRec276[2];
	FAUSTFLOAT fHslider111;
	FAUSTFLOAT fHslider112;
	FAUSTFLOAT fHslider113;
	FAUSTFLOAT fHslider114;
	FAUSTFLOAT fEntry5;
	FAUSTFLOAT fHslider115;
	float fVec114[2];
	float fVec115[2];
	int iVec116[2];
	int iRec281[2];
	int iRec282[2];
	Soundfile* fSoundfile3;
	Soundfile* fSoundfile4;
	int iRec283[2];
	float fConst113;
	float fConst114;
	float fConst115;
	float fConst116;
	float fConst117;
	float fConst118;
	float fConst119;
	float fConst120;
	float fRec287[2];
	float fVec117[128];
	float fConst121;
	int iConst122;
	int iConst123;
	float fConst124;
	float fConst125;
	int iConst126;
	float fConst127;
	int iConst128;
	float fConst129;
	float fConst130;
	int iConst131;
	float fConst132;
	int iConst133;
	float fRec285[2];
	float fRec288[2];
	float fConst134;
	float fConst135;
	float fConst136;
	float fConst137;
	float fConst138;
	float fConst139;
	float fConst140;
	float fConst141;
	float fConst142;
	float fConst143;
	float fRec291[3];
	float fConst144;
	float fConst145;
	float fConst146;
	float fRec290[3];
	float fConst147;
	int iRec292[2];
	float fConst148;
	float fConst149;
	float fConst150;
	float fRec289[3];
	float fConst151;
	float fConst152;
	float fConst153;
	float fConst154;
	float fConst155;
	float fRec293[3];
	float fConst156;
	float fConst157;
	float fConst158;
	float fConst159;
	float fRec294[3];
	float fConst160;
	float fConst161;
	float fConst162;
	float fConst163;
	float fRec295[3];
	float fConst164;
	float fConst165;
	float fConst166;
	float fConst167;
	float fRec296[3];
	float fConst168;
	float fConst169;
	float fConst170;
	float fConst171;
	float fRec297[3];
	float fConst172;
	float fConst173;
	float fConst174;
	float fConst175;
	float fRec298[3];
	float fConst176;
	float fConst177;
	float fConst178;
	float fConst179;
	float fRec299[3];
	float fConst180;
	float fConst181;
	float fConst182;
	float fConst183;
	float fRec300[3];
	float fConst184;
	float fConst185;
	float fConst186;
	float fConst187;
	float fRec301[3];
	float fConst188;
	float fConst189;
	float fConst190;
	float fConst191;
	float fRec302[3];
	float fConst192;
	float fConst193;
	float fConst194;
	float fConst195;
	float fRec303[3];
	float fConst196;
	float fConst197;
	float fConst198;
	float fConst199;
	float fRec304[3];
	float fConst200;
	float fConst201;
	float fConst202;
	float fConst203;
	float fRec305[3];
	float fConst204;
	float fConst205;
	float fConst206;
	float fConst207;
	float fRec306[3];
	float fConst208;
	float fConst209;
	float fConst210;
	float fConst211;
	float fRec307[3];
	float fConst212;
	float fConst213;
	float fConst214;
	float fConst215;
	float fRec308[3];
	float fConst216;
	float fConst217;
	float fConst218;
	float fConst219;
	float fRec309[3];
	float fConst220;
	float fConst221;
	float fConst222;
	float fConst223;
	float fRec310[3];
	float fConst224;
	float fConst225;
	float fConst226;
	float fConst227;
	float fRec311[3];
	float fConst228;
	float fConst229;
	float fConst230;
	float fConst231;
	float fRec312[3];
	float fConst232;
	float fConst233;
	float fConst234;
	float fConst235;
	float fRec313[3];
	float fConst236;
	float fConst237;
	float fConst238;
	float fConst239;
	float fRec314[3];
	float fConst240;
	float fConst241;
	float fConst242;
	float fConst243;
	float fRec315[3];
	float fConst244;
	float fConst245;
	float fConst246;
	float fConst247;
	float fRec316[3];
	float fConst248;
	float fConst249;
	float fConst250;
	float fConst251;
	float fRec317[3];
	float fConst252;
	float fConst253;
	float fConst254;
	float fConst255;
	float fRec318[3];
	float fConst256;
	float fConst257;
	float fConst258;
	float fConst259;
	float fRec319[3];
	float fConst260;
	float fConst261;
	float fConst262;
	float fConst263;
	float fRec320[3];
	float fConst264;
	float fConst265;
	float fConst266;
	float fConst267;
	float fRec321[3];
	float fConst268;
	float fConst269;
	float fConst270;
	float fConst271;
	float fRec322[3];
	float fConst272;
	float fConst273;
	float fConst274;
	float fConst275;
	float fRec323[3];
	float fConst276;
	float fConst277;
	float fConst278;
	float fConst279;
	float fRec324[3];
	float fConst280;
	float fConst281;
	float fConst282;
	float fConst283;
	float fRec325[3];
	float fConst284;
	float fConst285;
	float fConst286;
	float fConst287;
	float fRec326[3];
	float fConst288;
	float fConst289;
	float fConst290;
	float fConst291;
	float fRec327[3];
	float fConst292;
	float fConst293;
	float fConst294;
	float fConst295;
	float fRec328[3];
	float fConst296;
	float fConst297;
	float fConst298;
	float fConst299;
	float fRec329[3];
	float fConst300;
	float fConst301;
	float fConst302;
	float fConst303;
	float fRec330[3];
	float fConst304;
	float fConst305;
	float fConst306;
	float fConst307;
	float fRec331[3];
	float fConst308;
	float fConst309;
	float fConst310;
	float fConst311;
	float fRec332[3];
	float fConst312;
	float fConst313;
	float fConst314;
	float fConst315;
	float fRec333[3];
	float fConst316;
	float fConst317;
	float fConst318;
	float fConst319;
	float fRec334[3];
	float fConst320;
	float fConst321;
	float fConst322;
	float fConst323;
	float fRec335[3];
	float fConst324;
	float fConst325;
	float fConst326;
	float fConst327;
	float fRec336[3];
	float fConst328;
	float fConst329;
	float fConst330;
	float fConst331;
	float fRec337[3];
	float fConst332;
	float fConst333;
	float fConst334;
	float fConst335;
	float fRec338[3];
	float fConst336;
	float fConst337;
	float fConst338;
	float fConst339;
	float fRec339[3];
	float fConst340;
	float fConst341;
	float fConst342;
	float fConst343;
	float fRec340[3];
	float fConst344;
	float fConst345;
	float fConst346;
	float fConst347;
	float fRec341[3];
	float fConst348;
	float fVec118[2];
	float fVec119[128];
	float fRec286[2];
	float fRec342[2];
	FAUSTFLOAT fHslider116;
	FAUSTFLOAT fHslider117;
	FAUSTFLOAT fHslider118;
	float fRec345[2];
	float fRec344[2];
	FAUSTFLOAT fHslider119;
	float fRec343[2];
	FAUSTFLOAT fHslider120;
	FAUSTFLOAT fHslider121;
	float fRec346[3];
	FAUSTFLOAT fHslider122;
	FAUSTFLOAT fHslider123;
	float fRec280[3];
	FAUSTFLOAT fHslider124;
	FAUSTFLOAT fHslider125;
	float fRec279[3];
	float fRec278[3];
	float fVec120[262144];
	float fRec277[3];
	float fConst349;
	float fRec351[5];
	float fRec352[2];
	float fRec353[2];
	float fRec350[131072];
	float fRec356[2];
	float fRec355[2];
	float fRec354[2];
	float fRec357[3];
	float fRec349[3];
	float fRec348[3];
	float fRec347[3];
	float fVec121[2048];
	int iConst350;
	float fVec122[2048];
	int iConst351;
	float fRec194[2];
	float fConst352;
	float fConst353;
	float fConst354;
	float fRec361[2];
	float fRec360[2];
	float fVec123[32768];
	float fConst355;
	int iConst356;
	float fVec124[4096];
	int iConst357;
	float fRec358[2];
	float fConst358;
	float fConst359;
	float fConst360;
	float fRec365[2];
	float fRec364[2];
	float fVec125[16384];
	float fConst361;
	int iConst362;
	float fVec126[4096];
	int iConst363;
	float fRec362[2];
	float fConst364;
	float fConst365;
	float fConst366;
	float fRec369[2];
	float fRec368[2];
	float fVec127[32768];
	float fConst367;
	int iConst368;
	float fVec128[4096];
	int iConst369;
	float fRec366[2];
	float fConst370;
	float fConst371;
	float fConst372;
	float fRec373[2];
	float fRec372[2];
	float fVec129[16384];
	float fConst373;
	int iConst374;
	float fRec374[3];
	float fVec130[262144];
	float fRec375[3];
	float fRec380[5];
	float fRec381[2];
	float fRec382[2];
	float fRec379[131072];
	float fRec385[2];
	float fRec384[2];
	float fRec383[2];
	float fRec386[3];
	float fRec378[3];
	float fRec377[3];
	float fRec376[3];
	float fVec131[2048];
	float fVec132[2048];
	int iConst375;
	float fRec370[2];
	float fConst376;
	float fConst377;
	float fConst378;
	float fRec390[2];
	float fRec389[2];
	float fVec133[16384];
	float fConst379;
	int iConst380;
	float fVec134[4096];
	int iConst381;
	float fRec387[2];
	float fConst382;
	float fConst383;
	float fConst384;
	float fRec394[2];
	float fRec393[2];
	float fVec135[16384];
	float fConst385;
	int iConst386;
	float fVec136[4096];
	int iConst387;
	float fRec391[2];
	float fConst388;
	float fConst389;
	float fConst390;
	float fRec398[2];
	float fRec397[2];
	float fVec137[16384];
	float fConst391;
	int iConst392;
	float fVec138[2048];
	int iConst393;
	float fRec395[2];
	float fRec186[3];
	float fRec187[3];
	float fRec188[3];
	float fRec189[3];
	float fRec190[3];
	float fRec191[3];
	float fRec192[3];
	float fRec193[3];
	float fConst394;
	float fConst395;
	float fConst396;
	float fRec185[3];
	float fConst397;
	FAUSTFLOAT fHslider126;
	float fRec399[2];
	float fConst398;
	float fRec7[3];
	float fRec412[2];
	float fRec411[2];
	float fVec139[32768];
	float fRec417[5];
	float fRec418[2];
	float fRec419[2];
	float fRec416[131072];
	float fRec422[2];
	float fRec421[2];
	float fRec420[2];
	float fRec423[3];
	float fRec415[3];
	float fRec414[3];
	float fRec413[3];
	float fVec140[2048];
	float fVec141[2048];
	float fRec409[2];
	float fRec427[2];
	float fRec426[2];
	float fVec142[32768];
	float fVec143[4096];
	float fRec424[2];
	float fRec431[2];
	float fRec430[2];
	float fVec144[16384];
	float fVec145[4096];
	float fRec428[2];
	float fRec435[2];
	float fRec434[2];
	float fVec146[32768];
	float fVec147[4096];
	float fRec432[2];
	float fRec439[2];
	float fRec438[2];
	float fVec148[16384];
	float fRec444[5];
	float fRec445[2];
	float fRec446[2];
	float fRec443[131072];
	float fRec449[2];
	float fRec448[2];
	float fRec447[2];
	float fRec450[3];
	float fRec442[3];
	float fRec441[3];
	float fRec440[3];
	float fVec149[2048];
	float fVec150[2048];
	float fRec436[2];
	float fRec454[2];
	float fRec453[2];
	float fVec151[16384];
	float fVec152[4096];
	float fRec451[2];
	float fRec458[2];
	float fRec457[2];
	float fVec153[16384];
	float fVec154[4096];
	float fRec455[2];
	float fRec462[2];
	float fRec461[2];
	float fVec155[16384];
	float fVec156[2048];
	float fRec459[2];
	float fRec401[3];
	float fRec402[3];
	float fRec403[3];
	float fRec404[3];
	float fRec405[3];
	float fRec406[3];
	float fRec407[3];
	float fRec408[3];
	float fRec400[3];
	FAUSTFLOAT fHslider127;
	FAUSTFLOAT fCheckbox6;
	FAUSTFLOAT fHslider128;
	FAUSTFLOAT fHslider129;
	float fRec463[2];
	FAUSTFLOAT fHslider130;
	FAUSTFLOAT fHslider131;
	FAUSTFLOAT fEntry6;
	int iVec157[2];
	FAUSTFLOAT fHslider132;
	float fVec158[2];
	float fVec159[2];
	int iRec467[2];
	Soundfile* fSoundfile5;
	float fRec468[2];
	FAUSTFLOAT fHslider133;
	FAUSTFLOAT fHslider134;
	FAUSTFLOAT fHslider135;
	float fRec471[2];
	float fRec470[2];
	FAUSTFLOAT fHslider136;
	float fRec469[2];
	FAUSTFLOAT fHslider137;
	FAUSTFLOAT fHslider138;
	float fRec472[3];
	FAUSTFLOAT fHslider139;
	FAUSTFLOAT fHslider140;
	float fRec466[3];
	FAUSTFLOAT fHslider141;
	FAUSTFLOAT fHslider142;
	float fRec465[3];
	float fRec464[3];
	FAUSTFLOAT fHslider143;
	FAUSTFLOAT fCheckbox7;
	float fRec473[2];
	FAUSTFLOAT fHslider144;
	FAUSTFLOAT fHslider145;
	FAUSTFLOAT fHslider146;
	FAUSTFLOAT fHslider147;
	FAUSTFLOAT fEntry7;
	FAUSTFLOAT fHslider148;
	float fVec160[2];
	float fVec161[2];
	int iRec478[2];
	Soundfile* fSoundfile6;
	float fRec479[2];
	FAUSTFLOAT fHslider149;
	FAUSTFLOAT fHslider150;
	FAUSTFLOAT fHslider151;
	float fRec482[2];
	float fRec481[2];
	FAUSTFLOAT fHslider152;
	float fRec480[2];
	FAUSTFLOAT fHslider153;
	FAUSTFLOAT fHslider154;
	float fRec483[3];
	FAUSTFLOAT fHslider155;
	FAUSTFLOAT fHslider156;
	float fRec477[3];
	FAUSTFLOAT fHslider157;
	FAUSTFLOAT fHslider158;
	float fRec476[3];
	float fRec475[3];
	float fVec162[262144];
	float fRec474[3];
	FAUSTFLOAT fVslider3;
	float fRec484[2];
	float fRec485[2];
	float fRec487[2];
	float fConst399;
	float fConst400;
	float fConst401;
	float fConst402;
	float fConst403;
	float fRec489[3];
	float fRec488[3];
	float fConst404;
	float fRec492[2];
	float fVec163[2];
	float fRec491[2];
	float fVec164[2];
	float fVec165[256];
	float fRec490[2];
	float fRec493[2];
	float fConst405;
	float fConst406;
	float fConst407;
	float fConst408;
	float fConst409;
	float fConst410;
	float fRec495[3];
	float fConst411;
	FAUSTFLOAT fHslider159;
	float fVec166[2];
	int iVec167[2];
	int iRec496[2];
	float fConst412;
	float fConst413;
	float fConst414;
	float fRec494[3];
	float fConst415;
	float fConst416;
	float fConst417;
	float fConst418;
	float fRec497[3];
	float fConst419;
	float fConst420;
	float fConst421;
	float fConst422;
	float fRec498[3];
	float fConst423;
	float fConst424;
	float fConst425;
	float fConst426;
	float fRec499[3];
	float fConst427;
	float fConst428;
	float fConst429;
	float fConst430;
	float fRec500[3];
	float fConst431;
	float fConst432;
	float fConst433;
	float fConst434;
	float fRec501[3];
	float fConst435;
	float fConst436;
	float fConst437;
	float fConst438;
	float fRec502[3];
	float fConst439;
	float fConst440;
	float fConst441;
	float fConst442;
	float fRec503[3];
	float fConst443;
	float fConst444;
	float fConst445;
	float fConst446;
	float fRec504[3];
	float fConst447;
	float fConst448;
	float fConst449;
	float fConst450;
	float fRec505[3];
	float fConst451;
	float fConst452;
	float fConst453;
	float fConst454;
	float fRec506[3];
	float fConst455;
	float fConst456;
	float fConst457;
	float fConst458;
	float fRec507[3];
	float fConst459;
	float fConst460;
	float fConst461;
	float fConst462;
	float fRec508[3];
	float fConst463;
	float fConst464;
	float fConst465;
	float fConst466;
	float fRec509[3];
	float fConst467;
	float fConst468;
	float fConst469;
	float fConst470;
	float fRec510[3];
	float fConst471;
	float fConst472;
	float fConst473;
	float fConst474;
	float fRec511[3];
	float fConst475;
	float fConst476;
	float fConst477;
	float fConst478;
	float fRec512[3];
	float fConst479;
	float fConst480;
	float fConst481;
	float fConst482;
	float fRec513[3];
	float fConst483;
	float fConst484;
	float fConst485;
	float fConst486;
	float fRec514[3];
	float fConst487;
	float fConst488;
	float fConst489;
	float fConst490;
	float fRec515[3];
	float fConst491;
	float fConst492;
	float fConst493;
	float fConst494;
	float fRec516[3];
	float fConst495;
	float fConst496;
	float fConst497;
	float fConst498;
	float fRec517[3];
	float fConst499;
	float fConst500;
	float fConst501;
	float fConst502;
	float fRec518[3];
	float fConst503;
	float fConst504;
	float fConst505;
	float fConst506;
	float fRec519[3];
	float fConst507;
	float fConst508;
	float fConst509;
	float fConst510;
	float fRec520[3];
	float fConst511;
	float fConst512;
	float fConst513;
	float fConst514;
	float fRec521[3];
	float fConst515;
	float fConst516;
	float fConst517;
	float fConst518;
	float fRec522[3];
	float fConst519;
	float fConst520;
	float fConst521;
	float fConst522;
	float fRec523[3];
	float fConst523;
	float fConst524;
	float fConst525;
	float fConst526;
	float fRec524[3];
	float fConst527;
	float fConst528;
	float fConst529;
	float fConst530;
	float fRec525[3];
	float fConst531;
	float fConst532;
	float fConst533;
	float fConst534;
	float fRec526[3];
	float fConst535;
	float fConst536;
	float fConst537;
	float fConst538;
	float fRec527[3];
	float fConst539;
	float fConst540;
	float fConst541;
	float fConst542;
	float fRec528[3];
	float fConst543;
	float fConst544;
	float fConst545;
	float fConst546;
	float fRec529[3];
	float fConst547;
	float fConst548;
	float fConst549;
	float fConst550;
	float fRec530[3];
	float fConst551;
	float fConst552;
	float fConst553;
	float fConst554;
	float fRec531[3];
	float fConst555;
	float fConst556;
	float fConst557;
	float fConst558;
	float fRec532[3];
	float fConst559;
	float fConst560;
	float fConst561;
	float fConst562;
	float fRec533[3];
	float fConst563;
	float fConst564;
	float fConst565;
	float fConst566;
	float fRec534[3];
	float fConst567;
	float fConst568;
	float fConst569;
	float fConst570;
	float fRec535[3];
	float fConst571;
	float fConst572;
	float fConst573;
	float fConst574;
	float fRec536[3];
	float fConst575;
	float fConst576;
	float fConst577;
	float fConst578;
	float fRec537[3];
	float fConst579;
	float fConst580;
	float fConst581;
	float fConst582;
	float fRec538[3];
	float fConst583;
	float fConst584;
	float fConst585;
	float fConst586;
	float fRec539[3];
	float fConst587;
	float fConst588;
	float fConst589;
	float fConst590;
	float fRec540[3];
	float fConst591;
	float fConst592;
	float fConst593;
	float fConst594;
	float fRec541[3];
	float fConst595;
	float fConst596;
	float fConst597;
	float fConst598;
	float fRec542[3];
	float fConst599;
	float fConst600;
	float fConst601;
	float fConst602;
	float fRec543[3];
	float fConst603;
	float fConst604;
	float fConst605;
	float fConst606;
	float fRec544[3];
	float fConst607;
	float fConst608;
	float fConst609;
	float fConst610;
	float fRec545[3];
	float fConst611;
	float fConst612;
	float fConst613;
	float fConst614;
	float fConst615;
	float fRec548[2];
	float fRec547[2];
	float fRec546[2];
	float fConst616;
	float fConst617;
	float fConst618;
	float fConst619;
	float fRec551[2];
	float fRec550[2];
	float fRec549[2];
	FAUSTFLOAT fHslider160;
	FAUSTFLOAT fHslider161;
	float fRec552[3];
	FAUSTFLOAT fHslider162;
	FAUSTFLOAT fHslider163;
	float fRec4[3];
	FAUSTFLOAT fHslider164;
	FAUSTFLOAT fHslider165;
	float fRec3[3];
	float fRec2[3];
	FAUSTFLOAT fHslider166;
	float fRec553[2];
	float fRec1[3];
	float fRec556[2];
	float fRec555[2];
	float fRec554[2];
	float fRec557[2];
	float fRec567[5];
	float fRec568[2];
	float fRec569[2];
	float fRec566[131072];
	float fRec572[2];
	float fRec571[2];
	float fRec570[2];
	float fRec573[3];
	float fRec565[3];
	float fRec564[3];
	float fRec563[3];
	float fRec574[3];
	float fRec562[3];
	float fRec575[3];
	float fVec168[262144];
	float fRec576[3];
	float fRec577[2];
	float fRec580[2];
	float fRec579[2];
	float fRec578[2];
	float fRec583[2];
	float fRec582[2];
	float fRec581[2];
	float fRec584[3];
	float fRec561[3];
	float fRec560[3];
	float fRec559[3];
	float fRec558[3];
	float fRec587[2];
	float fRec586[2];
	float fRec585[2];
	
 public:
	
	void metadata(Meta* m) { 
		m->declare("analyzers.lib/name", "Faust Analyzer Library");
		m->declare("analyzers.lib/version", "0.0");
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.1");
		m->declare("delays.lib/name", "Faust Delay Library");
		m->declare("delays.lib/version", "0.1");
		m->declare("envelopes.lib/adsr:author", "Yann Orlarey");
		m->declare("envelopes.lib/ar:author", "Yann Orlarey, Stéphane Letz");
		m->declare("envelopes.lib/author", "GRAME");
		m->declare("envelopes.lib/copyright", "GRAME");
		m->declare("envelopes.lib/license", "LGPL with exception");
		m->declare("envelopes.lib/name", "Faust Envelope Library");
		m->declare("envelopes.lib/version", "0.1");
		m->declare("filename", "GaitSoni.dsp");
		m->declare("filters.lib/allpass_comb:author", "Julius O. Smith III");
		m->declare("filters.lib/allpass_comb:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/allpass_comb:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/bandpass0_bandstop1:author", "Julius O. Smith III");
		m->declare("filters.lib/bandpass0_bandstop1:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/bandpass0_bandstop1:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/bandpass:author", "Julius O. Smith III");
		m->declare("filters.lib/bandpass:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/bandpass:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/fir:author", "Julius O. Smith III");
		m->declare("filters.lib/fir:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/fir:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/highpass:author", "Julius O. Smith III");
		m->declare("filters.lib/highpass:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/iir:author", "Julius O. Smith III");
		m->declare("filters.lib/iir:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/iir:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/lowpass0_highpass1", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/lowpass0_highpass1:author", "Julius O. Smith III");
		m->declare("filters.lib/lowpass:author", "Julius O. Smith III");
		m->declare("filters.lib/lowpass:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/lowpass:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/peak_eq:author", "Julius O. Smith III");
		m->declare("filters.lib/peak_eq:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/peak_eq:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/peak_eq_cq:author", "Julius O. Smith III");
		m->declare("filters.lib/peak_eq_cq:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/peak_eq_cq:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/pole:author", "Julius O. Smith III");
		m->declare("filters.lib/pole:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/pole:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/resonbp:author", "Julius O. Smith III");
		m->declare("filters.lib/resonbp:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/resonbp:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/resonhp:author", "Julius O. Smith III");
		m->declare("filters.lib/resonhp:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/resonhp:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/resonlp:author", "Julius O. Smith III");
		m->declare("filters.lib/resonlp:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/resonlp:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/tf1:author", "Julius O. Smith III");
		m->declare("filters.lib/tf1:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf1:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/tf1s:author", "Julius O. Smith III");
		m->declare("filters.lib/tf1s:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf1s:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/tf1sb:author", "Julius O. Smith III");
		m->declare("filters.lib/tf1sb:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf1sb:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/tf2:author", "Julius O. Smith III");
		m->declare("filters.lib/tf2:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf2:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/tf2s:author", "Julius O. Smith III");
		m->declare("filters.lib/tf2s:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf2s:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/tf2sb:author", "Julius O. Smith III");
		m->declare("filters.lib/tf2sb:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf2sb:license", "MIT-style STK-4.3 license");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.2");
		m->declare("misceffects.lib/name", "Faust Math Library");
		m->declare("misceffects.lib/version", "2.0");
		m->declare("name", "GaitSoni");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "0.0");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("platform.lib/name", "Generic Platform Library");
		m->declare("platform.lib/version", "0.1");
		m->declare("reverbs.lib/name", "Faust Reverb Library");
		m->declare("reverbs.lib/version", "0.0");
		m->declare("routes.lib/name", "Faust Signal Routing Library");
		m->declare("routes.lib/version", "0.1");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
		m->declare("synths.lib/name", "Faust Synthesizer Library");
		m->declare("synths.lib/version", "0.0");
	}

	virtual int getNumInputs() {
		return 14;
	}
	virtual int getNumOutputs() {
		return 2;
	}
	virtual int getInputRate(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 1;
				break;
			}
			case 1: {
				rate = 1;
				break;
			}
			case 2: {
				rate = 1;
				break;
			}
			case 3: {
				rate = 1;
				break;
			}
			case 4: {
				rate = 1;
				break;
			}
			case 5: {
				rate = 1;
				break;
			}
			case 6: {
				rate = 1;
				break;
			}
			case 7: {
				rate = 1;
				break;
			}
			case 8: {
				rate = 1;
				break;
			}
			case 9: {
				rate = 1;
				break;
			}
			case 10: {
				rate = 1;
				break;
			}
			case 11: {
				rate = 1;
				break;
			}
			case 12: {
				rate = 1;
				break;
			}
			case 13: {
				rate = 1;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	virtual int getOutputRate(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 1;
				break;
			}
			case 1: {
				rate = 1;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	
	static void classInit(int sample_rate) {
		mydspSIG0* sig0 = newmydspSIG0();
		sig0->instanceInitmydspSIG0(sample_rate);
		sig0->fillmydspSIG0(7, ftbl0mydspSIG0);
		mydspSIG1* sig1 = newmydspSIG1();
		sig1->instanceInitmydspSIG1(sample_rate);
		sig1->fillmydspSIG1(48, itbl1mydspSIG1);
		mydspSIG2* sig2 = newmydspSIG2();
		sig2->instanceInitmydspSIG2(sample_rate);
		sig2->fillmydspSIG2(65536, ftbl2mydspSIG2);
		mydspSIG3* sig3 = newmydspSIG3();
		sig3->instanceInitmydspSIG3(sample_rate);
		sig3->fillmydspSIG3(250, ftbl3mydspSIG3);
		mydspSIG4* sig4 = newmydspSIG4();
		sig4->instanceInitmydspSIG4(sample_rate);
		sig4->fillmydspSIG4(350, ftbl4mydspSIG4);
		deletemydspSIG0(sig0);
		deletemydspSIG1(sig1);
		deletemydspSIG2(sig2);
		deletemydspSIG3(sig3);
		deletemydspSIG4(sig4);
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = ftbl0mydspSIG0[1];
		fConst1 = ftbl0mydspSIG0[0];
		fConst2 = ftbl0mydspSIG0[2];
		fConst3 = ftbl0mydspSIG0[3];
		fConst4 = ftbl0mydspSIG0[4];
		fConst5 = ftbl0mydspSIG0[5];
		fConst6 = ftbl0mydspSIG0[6];
		fConst7 = std::min<float>(192000.0f, std::max<float>(1.0f, float(fSampleRate)));
		fConst8 = (3.14159274f / fConst7);
		fConst9 = std::exp((0.0f - (10000.0f / fConst7)));
		fConst10 = (1.0f - fConst9);
		fConst11 = std::max<float>(1.0f, (0.00100000005f * fConst7));
		fConst12 = (1.0f / fConst11);
		fConst13 = (4.0f * fConst7);
		fConst14 = (0.330000013f * fConst7);
		fConst15 = (0.100000001f * fConst7);
		fConst16 = (0.660000026f * fConst7);
		fConst17 = (1.0f / fConst7);
		fConst18 = std::exp((0.0f - (1000.0f / fConst7)));
		fConst19 = (1.0f - fConst18);
		fConst20 = (0.5f / fConst11);
		fConst21 = (0.400000006f * fConst7);
		fConst22 = std::exp((0.0f - (200.0f / fConst7)));
		fConst23 = (1.0f - fConst22);
		fConst24 = (4.0f / fConst7);
		fConst25 = (0.25f * fConst7);
		fConst26 = (0.5f * fConst7);
		fConst27 = std::exp((0.0f - (20.0f / fConst7)));
		fConst28 = (1.0f - fConst27);
		fConst29 = (6.28318548f / fConst7);
		fConst30 = (81.0f / fConst7);
		fConst31 = std::exp((0.0f - (142.857147f / fConst7)));
		fConst32 = (1.0f - fConst31);
		fConst33 = (0.00700000022f * fConst7);
		fConst34 = std::max<float>(1.0f, fConst33);
		fConst35 = (1.0f / fConst34);
		iConst36 = int(fConst33);
		fConst37 = std::exp((0.0f - (100.0f / fConst7)));
		fConst38 = (1.0f - fConst37);
		fConst39 = (0.00999999978f * fConst7);
		fConst40 = std::max<float>(1.0f, fConst39);
		fConst41 = (1.0f / fConst40);
		iConst42 = int(fConst39);
		fConst43 = mydsp_faustpower2_f(fConst17);
		fConst44 = (6283.18555f / fConst7);
		fConst45 = std::tan(fConst44);
		fConst46 = (fConst7 * fConst45);
		fConst47 = mydsp_faustpower2_f(fConst7);
		fConst48 = std::sqrt((4.0f * ((fConst47 * fConst45) * std::tan((2513.27417f / fConst7)))));
		fConst49 = mydsp_faustpower2_f(fConst48);
		fConst50 = ((2.0f * fConst46) - (0.5f * (fConst49 / fConst46)));
		fConst51 = mydsp_faustpower2_f(fConst50);
		fConst52 = (4.0f * fConst51);
		fConst53 = (fConst52 + (8.0f * fConst49));
		fConst54 = (fConst17 * fConst49);
		fConst55 = (2.82842708f * fConst50);
		fConst56 = (fConst50 / fConst7);
		fConst57 = (11.3137083f * fConst56);
		fConst58 = (((fConst43 * (fConst53 + (fConst54 * (fConst54 + fConst55)))) + fConst57) + 16.0f);
		fConst59 = (fConst43 / fConst58);
		fConst60 = (0.400000006f * fConst59);
		fConst61 = (8.0f * fConst51);
		fConst62 = (0.0f - fConst61);
		fConst63 = (45.0f * fConst7);
		fConst64 = (1.0f / fConst58);
		fConst65 = (mydsp_faustpower3_f(fConst17) * fConst49);
		fConst66 = (5.65685415f * fConst50);
		fConst67 = (4.0f * fConst54);
		fConst68 = (22.6274166f * fConst56);
		fConst69 = ((fConst65 * (fConst66 + fConst67)) + (-64.0f - fConst68));
		fConst70 = ((fConst43 * ((0.0f - (fConst61 + (16.0f * fConst49))) + (6.0f * (fConst43 * mydsp_faustpower4_f(fConst48))))) + 96.0f);
		fConst71 = ((fConst68 + (fConst65 * (fConst67 - fConst66))) + -64.0f);
		fConst72 = ((fConst43 * (fConst53 + (fConst54 * (fConst54 - fConst55)))) + (16.0f - fConst57));
		fConst73 = std::tan((25132.7422f / fConst7));
		fConst74 = (1.0f / fConst73);
		fConst75 = (1.0f / (((fConst74 + 0.333333343f) / fConst73) + 1.0f));
		fConst76 = (0.0666666701f / fConst7);
		fConst77 = (0.0166666675f / fConst7);
		fConst78 = std::max<float>(1.0f, (0.0199999996f * fConst7));
		fConst79 = (1.0f / fConst78);
		fConst80 = (235.800003f * fConst7);
		fConst81 = (((fConst74 + -0.333333343f) / fConst73) + 1.0f);
		fConst82 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fConst73))));
		fConst83 = (0.0500000007f * fConst7);
		fConst84 = std::max<float>(1.0f, fConst83);
		fConst85 = (1.0f / fConst84);
		iConst86 = int(fConst83);
		fConst87 = (0.319999993f * fConst59);
		fConst88 = (0.000750000007f * fConst7);
		fConst89 = (0.98853302f * fConst7);
		fConst90 = (0.000500000024f * fConst7);
		fConst91 = (0.000250000012f * fConst7);
		fConst92 = (1.0f / std::max<float>(1.0f, (5.0f * fConst7)));
		fConst93 = std::tan((10995.5742f / fConst7));
		fConst94 = (fConst7 * fConst93);
		fConst95 = mydsp_faustpower2_f(std::sqrt((4.0f * ((fConst47 * fConst93) * std::tan((628.318542f / fConst7))))));
		fConst96 = ((2.0f * fConst94) - (0.5f * (fConst95 / fConst94)));
		fConst97 = (fConst43 * fConst95);
		fConst98 = (2.0f * (fConst96 / fConst7));
		fConst99 = ((fConst97 + fConst98) + 4.0f);
		fConst100 = (2.0f * (fConst96 / (fConst7 * fConst99)));
		fConst101 = (12566.3711f / fConst7);
		fConst102 = std::cos(fConst101);
		fConst103 = std::floor(((0.219990999f * fConst7) + 0.5f));
		fConst104 = ((0.0f - (6.90775537f * fConst103)) / fConst7);
		fConst105 = std::exp(fConst104);
		fConst106 = (1.0f / std::tan((314.159271f / fConst7)));
		fConst107 = (1.0f / (fConst106 + 1.0f));
		fConst108 = (1.0f - fConst106);
		fConst109 = std::floor(((0.0191229992f * fConst7) + 0.5f));
		iConst110 = int(std::min<float>(16384.0f, std::max<float>(0.0f, (fConst103 - fConst109))));
		fConst111 = (0.0333333351f / fConst7);
		fConst112 = (2094.39502f / fConst7);
		fConst113 = (0.000566176488f * fConst7);
		fConst114 = (fConst113 + -1.49999499f);
		fConst115 = std::floor(fConst114);
		fConst116 = (fConst113 + (-1.0f - fConst115));
		fConst117 = (fConst113 + (-2.0f - fConst115));
		fConst118 = (fConst113 + (-3.0f - fConst115));
		fConst119 = (fConst113 + (-4.0f - fConst115));
		fConst120 = ((((0.0f - fConst116) * (0.0f - (0.5f * fConst117))) * (0.0f - (0.333333343f * fConst118))) * (0.0f - (0.25f * fConst119)));
		fConst121 = (0.00882352982f * fConst7);
		iConst122 = int(fConst114);
		iConst123 = int(std::min<float>(fConst121, float(std::max<int>(0, iConst122))));
		fConst124 = (fConst113 - fConst115);
		fConst125 = (((0.0f - fConst117) * (0.0f - (0.5f * fConst118))) * (0.0f - (0.333333343f * fConst119)));
		iConst126 = int(std::min<float>(fConst121, float(std::max<int>(0, (iConst122 + 1)))));
		fConst127 = (0.5f * ((fConst116 * (0.0f - fConst118)) * (0.0f - (0.5f * fConst119))));
		iConst128 = int(std::min<float>(fConst121, float(std::max<int>(0, (iConst122 + 2)))));
		fConst129 = (fConst116 * fConst117);
		fConst130 = (0.166666672f * (fConst129 * (0.0f - fConst119)));
		iConst131 = int(std::min<float>(fConst121, float(std::max<int>(0, (iConst122 + 3)))));
		fConst132 = (0.0416666679f * (fConst129 * fConst118));
		iConst133 = int(std::min<float>(fConst121, float(std::max<int>(0, (iConst122 + 4)))));
		fConst134 = std::tan((15707.9629f / fConst7));
		fConst135 = (1.0f / fConst134);
		fConst136 = (1.0f / (((fConst135 + 1.41421354f) / fConst134) + 1.0f));
		fConst137 = std::tan((31.415926f / fConst7));
		fConst138 = (1.0f / fConst137);
		fConst139 = (1.0f / (((fConst138 + 1.41421354f) / fConst137) + 1.0f));
		fConst140 = mydsp_faustpower2_f(fConst137);
		fConst141 = (1.0f / fConst140);
		fConst142 = (((fConst138 + -1.41421354f) / fConst137) + 1.0f);
		fConst143 = (2.0f * (1.0f - fConst141));
		fConst144 = (0.0f - (2.0f / fConst140));
		fConst145 = (((fConst135 + -1.41421354f) / fConst134) + 1.0f);
		fConst146 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fConst134))));
		fConst147 = (1.0f / std::max<float>(1.0f, (0.00200000009f * fConst7)));
		fConst148 = std::pow(0.00100000005f, (10.2591143f / fConst7));
		fConst149 = (std::cos((5026.54834f / fConst7)) * (0.0f - (2.0f * fConst148)));
		fConst150 = mydsp_faustpower2_f(fConst148);
		fConst151 = (fConst26 + -1.0f);
		fConst152 = ((800.0f < fConst151) ? ftbl3mydspSIG3[0] : 0.0f);
		fConst153 = std::pow(0.00100000005f, (10.8901329f / fConst7));
		fConst154 = (std::cos((16655.7695f / fConst7)) * (0.0f - (2.0f * fConst153)));
		fConst155 = mydsp_faustpower2_f(fConst153);
		fConst156 = ((2650.8479f < fConst151) ? ftbl3mydspSIG3[1] : 0.0f);
		fConst157 = std::pow(0.00100000005f, (11.0386343f / fConst7));
		fConst158 = (std::cos((19275.2539f / fConst7)) * (0.0f - (2.0f * fConst157)));
		fConst159 = mydsp_faustpower2_f(fConst157);
		fConst160 = ((3067.75195f < fConst151) ? ftbl3mydspSIG3[2] : 0.0f);
		fConst161 = std::pow(0.00100000005f, (12.3379154f / fConst7));
		fConst162 = (std::cos((40529.7109f / fConst7)) * (0.0f - (2.0f * fConst161)));
		fConst163 = mydsp_faustpower2_f(fConst161);
		fConst164 = ((6450.50391f < fConst151) ? ftbl3mydspSIG3[3] : 0.0f);
		fConst165 = std::pow(0.00100000005f, (12.8027573f / fConst7));
		fConst166 = (std::cos((47489.7227f / fConst7)) * (0.0f - (2.0f * fConst165)));
		fConst167 = mydsp_faustpower2_f(fConst165);
		fConst168 = ((7558.22412f < fConst151) ? ftbl3mydspSIG3[4] : 0.0f);
		fConst169 = std::pow(0.00100000005f, (14.5330687f / fConst7));
		fConst170 = (std::cos((70959.2812f / fConst7)) * (0.0f - (2.0f * fConst169)));
		fConst171 = mydsp_faustpower2_f(fConst169);
		fConst172 = ((11293.5195f < fConst151) ? ftbl3mydspSIG3[5] : 0.0f);
		fConst173 = std::pow(0.00100000005f, (16.3652077f / fConst7));
		fConst174 = (std::cos((92408.0625f / fConst7)) * (0.0f - (2.0f * fConst173)));
		fConst175 = mydsp_faustpower2_f(fConst173);
		fConst176 = ((14707.2002f < fConst151) ? ftbl3mydspSIG3[6] : 0.0f);
		fConst177 = std::pow(0.00100000005f, (17.6309834f / fConst7));
		fConst178 = (std::cos((105608.781f / fConst7)) * (0.0f - (2.0f * fConst177)));
		fConst179 = mydsp_faustpower2_f(fConst177);
		fConst180 = ((16808.1602f < fConst151) ? ftbl3mydspSIG3[7] : 0.0f);
		fConst181 = std::pow(0.00100000005f, (20.4824104f / fConst7));
		fConst182 = (std::cos((131582.469f / fConst7)) * (0.0f - (2.0f * fConst181)));
		fConst183 = mydsp_faustpower2_f(fConst181);
		fConst184 = ((20942.0f < fConst151) ? ftbl3mydspSIG3[8] : 0.0f);
		fConst185 = std::pow(0.00100000005f, (22.2695656f / fConst7));
		fConst186 = (std::cos((145741.75f / fConst7)) * (0.0f - (2.0f * fConst185)));
		fConst187 = mydsp_faustpower2_f(fConst185);
		fConst188 = ((23195.5195f < fConst151) ? ftbl3mydspSIG3[9] : 0.0f);
		fConst189 = std::pow(0.00100000005f, (28.5368156f / fConst7));
		fConst190 = (std::cos((186348.219f / fConst7)) * (0.0f - (2.0f * fConst189)));
		fConst191 = mydsp_faustpower2_f(fConst189);
		fConst192 = ((29658.2402f < fConst151) ? ftbl3mydspSIG3[10] : 0.0f);
		fConst193 = std::pow(0.00100000005f, (29.2639236f / fConst7));
		fConst194 = (std::cos((190356.891f / fConst7)) * (0.0f - (2.0f * fConst193)));
		fConst195 = mydsp_faustpower2_f(fConst193);
		fConst196 = ((30296.2402f < fConst151) ? ftbl3mydspSIG3[11] : 0.0f);
		fConst197 = std::pow(0.00100000005f, (31.3811016f / fConst7));
		fConst198 = (std::cos((201380.609f / fConst7)) * (0.0f - (2.0f * fConst197)));
		fConst199 = mydsp_faustpower2_f(fConst197);
		fConst200 = ((32050.7207f < fConst151) ? ftbl3mydspSIG3[12] : 0.0f);
		fConst201 = std::pow(0.00100000005f, (40.2636795f / fConst7));
		fConst202 = (std::cos((239484.359f / fConst7)) * (0.0f - (2.0f * fConst201)));
		fConst203 = mydsp_faustpower2_f(fConst201);
		fConst204 = ((38115.1211f < fConst151) ? ftbl3mydspSIG3[13] : 0.0f);
		fConst205 = std::pow(0.00100000005f, (45.1752319f / fConst7));
		fConst206 = (std::cos((256449.469f / fConst7)) * (0.0f - (2.0f * fConst205)));
		fConst207 = mydsp_faustpower2_f(fConst205);
		fConst208 = ((40815.1992f < fConst151) ? ftbl3mydspSIG3[14] : 0.0f);
		fConst209 = std::pow(0.00100000005f, (47.4399223f / fConst7));
		fConst210 = (std::cos((263541.938f / fConst7)) * (0.0f - (2.0f * fConst209)));
		fConst211 = mydsp_faustpower2_f(fConst209);
		fConst212 = ((41944.0f < fConst151) ? ftbl3mydspSIG3[15] : 0.0f);
		fConst213 = std::pow(0.00100000005f, (58.4253006f / fConst7));
		fConst214 = (std::cos((292977.406f / fConst7)) * (0.0f - (2.0f * fConst213)));
		fConst215 = mydsp_faustpower2_f(fConst213);
		fConst216 = ((46628.8008f < fConst151) ? ftbl3mydspSIG3[16] : 0.0f);
		fConst217 = std::pow(0.00100000005f, (70.9964905f / fConst7));
		fConst218 = (std::cos((319430.094f / fConst7)) * (0.0f - (2.0f * fConst217)));
		fConst219 = mydsp_faustpower2_f(fConst217);
		fConst220 = ((50838.8789f < fConst151) ? ftbl3mydspSIG3[17] : 0.0f);
		fConst221 = std::pow(0.00100000005f, (76.0668716f / fConst7));
		fConst222 = (std::cos((328549.281f / fConst7)) * (0.0f - (2.0f * fConst221)));
		fConst223 = mydsp_faustpower2_f(fConst221);
		fConst224 = ((52290.2383f < fConst151) ? ftbl3mydspSIG3[18] : 0.0f);
		fConst225 = std::pow(0.00100000005f, (80.8901215f / fConst7));
		fConst226 = (std::cos((336571.125f / fConst7)) * (0.0f - (2.0f * fConst225)));
		fConst227 = mydsp_faustpower2_f(fConst225);
		fConst228 = ((53566.9609f < fConst151) ? ftbl3mydspSIG3[19] : 0.0f);
		fConst229 = std::pow(0.00100000005f, (109.456856f / fConst7));
		fConst230 = (std::cos((374629.156f / fConst7)) * (0.0f - (2.0f * fConst229)));
		fConst231 = mydsp_faustpower2_f(fConst229);
		fConst232 = ((59624.0781f < fConst151) ? ftbl3mydspSIG3[20] : 0.0f);
		fConst233 = std::pow(0.00100000005f, (130.309692f / fConst7));
		fConst234 = (std::cos((395549.125f / fConst7)) * (0.0f - (2.0f * fConst233)));
		fConst235 = mydsp_faustpower2_f(fConst233);
		fConst236 = ((62953.6016f < fConst151) ? ftbl3mydspSIG3[21] : 0.0f);
		fConst237 = std::pow(0.00100000005f, (142.914078f / fConst7));
		fConst238 = (std::cos((406333.594f / fConst7)) * (0.0f - (2.0f * fConst237)));
		fConst239 = mydsp_faustpower2_f(fConst237);
		fConst240 = ((64670.0f < fConst151) ? ftbl3mydspSIG3[22] : 0.0f);
		fConst241 = std::pow(0.00100000005f, (216.134277f / fConst7));
		fConst242 = (std::cos((452278.75f / fConst7)) * (0.0f - (2.0f * fConst241)));
		fConst243 = mydsp_faustpower2_f(fConst241);
		fConst244 = ((71982.3984f < fConst151) ? ftbl3mydspSIG3[23] : 0.0f);
		fConst245 = std::pow(0.00100000005f, (249.361649f / fConst7));
		fConst246 = (std::cos((467298.594f / fConst7)) * (0.0f - (2.0f * fConst245)));
		fConst247 = mydsp_faustpower2_f(fConst245);
		fConst248 = ((74372.8828f < fConst151) ? ftbl3mydspSIG3[24] : 0.0f);
		fConst249 = std::pow(0.00100000005f, (278.139954f / fConst7));
		fConst250 = (std::cos((478484.156f / fConst7)) * (0.0f - (2.0f * fConst249)));
		fConst251 = mydsp_faustpower2_f(fConst249);
		fConst252 = ((76153.1172f < fConst151) ? ftbl3mydspSIG3[25] : 0.0f);
		fConst253 = std::pow(0.00100000005f, (312.009094f / fConst7));
		fConst254 = (std::cos((489991.438f / fConst7)) * (0.0f - (2.0f * fConst253)));
		fConst255 = mydsp_faustpower2_f(fConst253);
		fConst256 = ((77984.5625f < fConst151) ? ftbl3mydspSIG3[26] : 0.0f);
		fConst257 = std::pow(0.00100000005f, (638.477783f / fConst7));
		fConst258 = (std::cos((556036.75f / fConst7)) * (0.0f - (2.0f * fConst257)));
		fConst259 = mydsp_faustpower2_f(fConst257);
		fConst260 = ((88496.0f < fConst151) ? ftbl3mydspSIG3[27] : 0.0f);
		fConst261 = std::pow(0.00100000005f, (695.55957f / fConst7));
		fConst262 = (std::cos((563320.25f / fConst7)) * (0.0f - (2.0f * fConst261)));
		fConst263 = mydsp_faustpower2_f(fConst261);
		fConst264 = ((89655.2031f < fConst151) ? ftbl3mydspSIG3[28] : 0.0f);
		fConst265 = std::pow(0.00100000005f, (773.212891f / fConst7));
		fConst266 = (std::cos((572151.875f / fConst7)) * (0.0f - (2.0f * fConst265)));
		fConst267 = mydsp_faustpower2_f(fConst265);
		fConst268 = ((91060.7969f < fConst151) ? ftbl3mydspSIG3[29] : 0.0f);
		fConst269 = std::pow(0.00100000005f, (1095.63586f / fConst7));
		fConst270 = (std::cos((599948.688f / fConst7)) * (0.0f - (2.0f * fConst269)));
		fConst271 = mydsp_faustpower2_f(fConst269);
		fConst272 = ((95484.7969f < fConst151) ? ftbl3mydspSIG3[30] : 0.0f);
		fConst273 = std::pow(0.00100000005f, (1859.39001f / fConst7));
		fConst274 = (std::cos((638597.812f / fConst7)) * (0.0f - (2.0f * fConst273)));
		fConst275 = mydsp_faustpower2_f(fConst273);
		fConst276 = ((101636.0f < fConst151) ? ftbl3mydspSIG3[31] : 0.0f);
		fConst277 = std::pow(0.00100000005f, (2311.80176f / fConst7));
		fConst278 = (std::cos((653360.812f / fConst7)) * (0.0f - (2.0f * fConst277)));
		fConst279 = mydsp_faustpower2_f(fConst277);
		fConst280 = ((103985.602f < fConst151) ? ftbl3mydspSIG3[32] : 0.0f);
		fConst281 = std::pow(0.00100000005f, (2755.63037f / fConst7));
		fConst282 = (std::cos((664806.25f / fConst7)) * (0.0f - (2.0f * fConst281)));
		fConst283 = mydsp_faustpower2_f(fConst281);
		fConst284 = ((105807.203f < fConst151) ? ftbl3mydspSIG3[33] : 0.0f);
		fConst285 = std::pow(0.00100000005f, (3034.91235f / fConst7));
		fConst286 = (std::cos((670928.562f / fConst7)) * (0.0f - (2.0f * fConst285)));
		fConst287 = mydsp_faustpower2_f(fConst285);
		fConst288 = ((106781.602f < fConst151) ? ftbl3mydspSIG3[34] : 0.0f);
		fConst289 = std::pow(0.00100000005f, (8048.45801f / fConst7));
		fConst290 = (std::cos((726582.5f / fConst7)) * (0.0f - (2.0f * fConst289)));
		fConst291 = mydsp_faustpower2_f(fConst289);
		fConst292 = ((115639.203f < fConst151) ? ftbl3mydspSIG3[35] : 0.0f);
		fConst293 = std::pow(0.00100000005f, (13265.4883f / fConst7));
		fConst294 = (std::cos((751157.312f / fConst7)) * (0.0f - (2.0f * fConst293)));
		fConst295 = mydsp_faustpower2_f(fConst293);
		fConst296 = ((119550.398f < fConst151) ? ftbl3mydspSIG3[36] : 0.0f);
		fConst297 = std::pow(0.00100000005f, (17675.4805f / fConst7));
		fConst298 = (std::cos((764201.188f / fConst7)) * (0.0f - (2.0f * fConst297)));
		fConst299 = mydsp_faustpower2_f(fConst297);
		fConst300 = ((121626.398f < fConst151) ? ftbl3mydspSIG3[37] : 0.0f);
		fConst301 = std::pow(0.00100000005f, (20142.8574f / fConst7));
		fConst302 = (std::cos((769896.312f / fConst7)) * (0.0f - (2.0f * fConst301)));
		fConst303 = mydsp_faustpower2_f(fConst301);
		fConst304 = ((122532.797f < fConst151) ? ftbl3mydspSIG3[38] : 0.0f);
		fConst305 = std::pow(0.00100000005f, (26985.6934f / fConst7));
		fConst306 = (std::cos((782115.812f / fConst7)) * (0.0f - (2.0f * fConst305)));
		fConst307 = mydsp_faustpower2_f(fConst305);
		fConst308 = ((124477.602f < fConst151) ? ftbl3mydspSIG3[39] : 0.0f);
		fConst309 = std::pow(0.00100000005f, (37577.8438f / fConst7));
		fConst310 = (std::cos((795114.5f / fConst7)) * (0.0f - (2.0f * fConst309)));
		fConst311 = mydsp_faustpower2_f(fConst309);
		fConst312 = ((126546.398f < fConst151) ? ftbl3mydspSIG3[40] : 0.0f);
		fConst313 = std::pow(0.00100000005f, (172447.047f / fConst7));
		fConst314 = (std::cos((844987.875f / fConst7)) * (0.0f - (2.0f * fConst313)));
		fConst315 = mydsp_faustpower2_f(fConst313);
		fConst316 = ((134484.0f < fConst151) ? ftbl3mydspSIG3[41] : 0.0f);
		fConst317 = std::pow(0.00100000005f, (355973.344f / fConst7));
		fConst318 = (std::cos((863877.688f / fConst7)) * (0.0f - (2.0f * fConst317)));
		fConst319 = mydsp_faustpower2_f(fConst317);
		fConst320 = ((137490.406f < fConst151) ? ftbl3mydspSIG3[42] : 0.0f);
		fConst321 = std::pow(0.00100000005f, (630229.375f / fConst7));
		fConst322 = (std::cos((876951.688f / fConst7)) * (0.0f - (2.0f * fConst321)));
		fConst323 = mydsp_faustpower2_f(fConst321);
		fConst324 = ((139571.203f < fConst151) ? ftbl3mydspSIG3[43] : 0.0f);
		fConst325 = std::pow(0.00100000005f, (2024133.5f / fConst7));
		fConst326 = (std::cos((899435.438f / fConst7)) * (0.0f - (2.0f * fConst325)));
		fConst327 = mydsp_faustpower2_f(fConst325);
		fConst328 = ((143149.594f < fConst151) ? ftbl3mydspSIG3[44] : 0.0f);
		fConst329 = std::pow(0.00100000005f, (4549764.5f / fConst7));
		fConst330 = (std::cos((912228.0f / fConst7)) * (0.0f - (2.0f * fConst329)));
		fConst331 = mydsp_faustpower2_f(fConst329);
		fConst332 = ((145185.594f < fConst151) ? ftbl3mydspSIG3[45] : 0.0f);
		fConst333 = std::pow(0.00100000005f, (22033280.0f / fConst7));
		fConst334 = (std::cos((931912.0f / fConst7)) * (0.0f - (2.0f * fConst333)));
		fConst335 = mydsp_faustpower2_f(fConst333);
		fConst336 = ((148318.406f < fConst151) ? ftbl3mydspSIG3[46] : 0.0f);
		fConst337 = std::pow(0.00100000005f, (531223264.0f / fConst7));
		fConst338 = (std::cos((956898.938f / fConst7)) * (0.0f - (2.0f * fConst337)));
		fConst339 = mydsp_faustpower2_f(fConst337);
		fConst340 = ((152295.203f < fConst151) ? ftbl3mydspSIG3[47] : 0.0f);
		fConst341 = std::pow(0.00100000005f, (3.8190633e+09f / fConst7));
		fConst342 = (std::cos((966052.312f / fConst7)) * (0.0f - (2.0f * fConst341)));
		fConst343 = mydsp_faustpower2_f(fConst341);
		fConst344 = ((153752.0f < fConst151) ? ftbl3mydspSIG3[48] : 0.0f);
		fConst345 = std::pow(0.00100000005f, (1.56573838e+14f / fConst7));
		fConst346 = (std::cos((982715.312f / fConst7)) * (0.0f - (2.0f * fConst345)));
		fConst347 = mydsp_faustpower2_f(fConst345);
		fConst348 = ((156404.0f < fConst151) ? ftbl3mydspSIG3[49] : 0.0f);
		fConst349 = (90.0f * fConst7);
		iConst350 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst39)));
		iConst351 = int(std::min<float>(1024.0f, std::max<float>(0.0f, (fConst109 + -1.0f))));
		fConst352 = std::floor(((0.256891012f * fConst7) + 0.5f));
		fConst353 = ((0.0f - (6.90775537f * fConst352)) / fConst7);
		fConst354 = std::exp(fConst353);
		fConst355 = std::floor(((0.0273330007f * fConst7) + 0.5f));
		iConst356 = int(std::min<float>(16384.0f, std::max<float>(0.0f, (fConst352 - fConst355))));
		iConst357 = int(std::min<float>(2048.0f, std::max<float>(0.0f, (fConst355 + -1.0f))));
		fConst358 = std::floor(((0.192303002f * fConst7) + 0.5f));
		fConst359 = ((0.0f - (6.90775537f * fConst358)) / fConst7);
		fConst360 = std::exp(fConst359);
		fConst361 = std::floor(((0.0292910002f * fConst7) + 0.5f));
		iConst362 = int(std::min<float>(8192.0f, std::max<float>(0.0f, (fConst358 - fConst361))));
		iConst363 = int(std::min<float>(2048.0f, std::max<float>(0.0f, (fConst361 + -1.0f))));
		fConst364 = std::floor(((0.210389003f * fConst7) + 0.5f));
		fConst365 = ((0.0f - (6.90775537f * fConst364)) / fConst7);
		fConst366 = std::exp(fConst365);
		fConst367 = std::floor(((0.0244210009f * fConst7) + 0.5f));
		iConst368 = int(std::min<float>(16384.0f, std::max<float>(0.0f, (fConst364 - fConst367))));
		iConst369 = int(std::min<float>(2048.0f, std::max<float>(0.0f, (fConst367 + -1.0f))));
		fConst370 = std::floor(((0.125f * fConst7) + 0.5f));
		fConst371 = ((0.0f - (6.90775537f * fConst370)) / fConst7);
		fConst372 = std::exp(fConst371);
		fConst373 = std::floor(((0.0134579996f * fConst7) + 0.5f));
		iConst374 = int(std::min<float>(8192.0f, std::max<float>(0.0f, (fConst370 - fConst373))));
		iConst375 = int(std::min<float>(1024.0f, std::max<float>(0.0f, (fConst373 + -1.0f))));
		fConst376 = std::floor(((0.127837002f * fConst7) + 0.5f));
		fConst377 = ((0.0f - (6.90775537f * fConst376)) / fConst7);
		fConst378 = std::exp(fConst377);
		fConst379 = std::floor(((0.0316039994f * fConst7) + 0.5f));
		iConst380 = int(std::min<float>(8192.0f, std::max<float>(0.0f, (fConst376 - fConst379))));
		iConst381 = int(std::min<float>(2048.0f, std::max<float>(0.0f, (fConst379 + -1.0f))));
		fConst382 = std::floor(((0.174713001f * fConst7) + 0.5f));
		fConst383 = ((0.0f - (6.90775537f * fConst382)) / fConst7);
		fConst384 = std::exp(fConst383);
		fConst385 = std::floor(((0.0229039993f * fConst7) + 0.5f));
		iConst386 = int(std::min<float>(8192.0f, std::max<float>(0.0f, (fConst382 - fConst385))));
		iConst387 = int(std::min<float>(2048.0f, std::max<float>(0.0f, (fConst385 + -1.0f))));
		fConst388 = std::floor(((0.153128996f * fConst7) + 0.5f));
		fConst389 = ((0.0f - (6.90775537f * fConst388)) / fConst7);
		fConst390 = std::exp(fConst389);
		fConst391 = std::floor(((0.0203460008f * fConst7) + 0.5f));
		iConst392 = int(std::min<float>(8192.0f, std::max<float>(0.0f, (fConst388 - fConst391))));
		iConst393 = int(std::min<float>(1024.0f, std::max<float>(0.0f, (fConst391 + -1.0f))));
		fConst394 = (1.0f / fConst99);
		fConst395 = ((2.0f * fConst97) + -8.0f);
		fConst396 = (fConst97 + (4.0f - fConst98));
		fConst397 = (0.0f - fConst100);
		fConst398 = (1.01341701f / fConst7);
		fConst399 = std::tan((471.238892f / fConst7));
		fConst400 = (1.0f / fConst399);
		fConst401 = (1.0f / (((fConst400 + 1.42857146f) / fConst399) + 1.0f));
		fConst402 = (((fConst400 + -1.42857146f) / fConst399) + 1.0f);
		fConst403 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fConst399))));
		fConst404 = (3700.0f / fConst7);
		fConst405 = ftbl4mydspSIG4[50];
		fConst406 = std::tan((31415.9258f / fConst7));
		fConst407 = (1.0f / fConst406);
		fConst408 = (1.0f / (((fConst407 + 1.41421354f) / fConst406) + 1.0f));
		fConst409 = (((fConst407 + -1.41421354f) / fConst406) + 1.0f);
		fConst410 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fConst406))));
		fConst411 = (1.0f / std::max<float>(1.0f, (0.00159999996f * fConst7)));
		fConst412 = std::pow(0.00100000005f, (0.0448570587f / fConst7));
		fConst413 = (std::cos((2839.48462f / fConst7)) * (0.0f - (2.0f * fConst412)));
		fConst414 = mydsp_faustpower2_f(fConst412);
		fConst415 = ftbl4mydspSIG4[51];
		fConst416 = std::pow(0.00100000005f, (0.0449536517f / fConst7));
		fConst417 = (std::cos((2858.84937f / fConst7)) * (0.0f - (2.0f * fConst416)));
		fConst418 = mydsp_faustpower2_f(fConst416);
		fConst419 = ftbl4mydspSIG4[52];
		fConst420 = std::pow(0.00100000005f, (0.0609094799f / fConst7));
		fConst421 = (std::cos((5432.7124f / fConst7)) * (0.0f - (2.0f * fConst420)));
		fConst422 = mydsp_faustpower2_f(fConst420);
		fConst423 = ftbl4mydspSIG4[53];
		fConst424 = std::pow(0.00100000005f, (0.0612352863f / fConst7));
		fConst425 = (std::cos((5475.18018f / fConst7)) * (0.0f - (2.0f * fConst424)));
		fConst426 = mydsp_faustpower2_f(fConst424);
		fConst427 = ftbl4mydspSIG4[54];
		fConst428 = std::pow(0.00100000005f, (0.0721585602f / fConst7));
		fConst429 = (std::cos((6738.52783f / fConst7)) * (0.0f - (2.0f * fConst428)));
		fConst430 = mydsp_faustpower2_f(fConst428);
		fConst431 = ftbl4mydspSIG4[55];
		fConst432 = std::pow(0.00100000005f, (0.0722505748f / fConst7));
		fConst433 = (std::cos((6748.01514f / fConst7)) * (0.0f - (2.0f * fConst432)));
		fConst434 = mydsp_faustpower2_f(fConst432);
		fConst435 = ftbl4mydspSIG4[56];
		fConst436 = std::pow(0.00100000005f, (0.0874899849f / fConst7));
		fConst437 = (std::cos((8119.32031f / fConst7)) * (0.0f - (2.0f * fConst436)));
		fConst438 = mydsp_faustpower2_f(fConst436);
		fConst439 = ftbl4mydspSIG4[57];
		fConst440 = std::pow(0.00100000005f, (0.0875099227f / fConst7));
		fConst441 = (std::cos((8120.89111f / fConst7)) * (0.0f - (2.0f * fConst440)));
		fConst442 = mydsp_faustpower2_f(fConst440);
		fConst443 = ftbl4mydspSIG4[58];
		fConst444 = std::pow(0.00100000005f, (0.107014902f / fConst7));
		fConst445 = (std::cos((9453.68066f / fConst7)) * (0.0f - (2.0f * fConst444)));
		fConst446 = mydsp_faustpower2_f(fConst444);
		fConst447 = ftbl4mydspSIG4[59];
		fConst448 = std::pow(0.00100000005f, (0.110012196f / fConst7));
		fConst449 = (std::cos((9628.41602f / fConst7)) * (0.0f - (2.0f * fConst448)));
		fConst450 = mydsp_faustpower2_f(fConst448);
		fConst451 = ftbl4mydspSIG4[60];
		fConst452 = std::pow(0.00100000005f, (0.123582378f / fConst7));
		fConst453 = (std::cos((10343.3799f / fConst7)) * (0.0f - (2.0f * fConst452)));
		fConst454 = mydsp_faustpower2_f(fConst452);
		fConst455 = ftbl4mydspSIG4[61];
		fConst456 = std::pow(0.00100000005f, (0.123685889f / fConst7));
		fConst457 = (std::cos((10348.4062f / fConst7)) * (0.0f - (2.0f * fConst456)));
		fConst458 = mydsp_faustpower2_f(fConst456);
		fConst459 = ftbl4mydspSIG4[62];
		fConst460 = std::pow(0.00100000005f, (0.127769172f / fConst7));
		fConst461 = (std::cos((10542.1172f / fConst7)) * (0.0f - (2.0f * fConst460)));
		fConst462 = mydsp_faustpower2_f(fConst460);
		fConst463 = ftbl4mydspSIG4[63];
		fConst464 = std::pow(0.00100000005f, (0.127809823f / fConst7));
		fConst465 = (std::cos((10544.002f / fConst7)) * (0.0f - (2.0f * fConst464)));
		fConst466 = mydsp_faustpower2_f(fConst464);
		fConst467 = ftbl4mydspSIG4[64];
		fConst468 = std::pow(0.00100000005f, (0.157417208f / fConst7));
		fConst469 = (std::cos((11728.3818f / fConst7)) * (0.0f - (2.0f * fConst468)));
		fConst470 = mydsp_faustpower2_f(fConst468);
		fConst471 = ftbl4mydspSIG4[65];
		fConst472 = std::pow(0.00100000005f, (0.160256028f / fConst7));
		fConst473 = (std::cos((11825.457f / fConst7)) * (0.0f - (2.0f * fConst472)));
		fConst474 = mydsp_faustpower2_f(fConst472);
		fConst475 = ftbl4mydspSIG4[66];
		fConst476 = std::pow(0.00100000005f, (0.18117331f / fConst7));
		fConst477 = (std::cos((12473.3799f / fConst7)) * (0.0f - (2.0f * fConst476)));
		fConst478 = mydsp_faustpower2_f(fConst476);
		fConst479 = ftbl4mydspSIG4[67];
		fConst480 = std::pow(0.00100000005f, (0.182209119f / fConst7));
		fConst481 = (std::cos((12502.7217f / fConst7)) * (0.0f - (2.0f * fConst480)));
		fConst482 = mydsp_faustpower2_f(fConst480);
		fConst483 = ftbl4mydspSIG4[68];
		fConst484 = std::pow(0.00100000005f, (0.2133362f / fConst7));
		fConst485 = (std::cos((13288.4971f / fConst7)) * (0.0f - (2.0f * fConst484)));
		fConst486 = mydsp_faustpower2_f(fConst484);
		fConst487 = ftbl4mydspSIG4[69];
		fConst488 = std::pow(0.00100000005f, (0.298688531f / fConst7));
		fConst489 = (std::cos((14808.2744f / fConst7)) * (0.0f - (2.0f * fConst488)));
		fConst490 = mydsp_faustpower2_f(fConst488);
		fConst491 = ftbl4mydspSIG4[70];
		fConst492 = std::pow(0.00100000005f, (0.341466933f / fConst7));
		fConst493 = (std::cos((15358.1152f / fConst7)) * (0.0f - (2.0f * fConst492)));
		fConst494 = mydsp_faustpower2_f(fConst492);
		fConst495 = ftbl4mydspSIG4[71];
		fConst496 = std::pow(0.00100000005f, (0.342488438f / fConst7));
		fConst497 = (std::cos((15370.0537f / fConst7)) * (0.0f - (2.0f * fConst496)));
		fConst498 = mydsp_faustpower2_f(fConst496);
		fConst499 = ftbl4mydspSIG4[72];
		fConst500 = std::pow(0.00100000005f, (0.391345769f / fConst7));
		fConst501 = (std::cos((15888.7305f / fConst7)) * (0.0f - (2.0f * fConst500)));
		fConst502 = mydsp_faustpower2_f(fConst500);
		fConst503 = ftbl4mydspSIG4[73];
		fConst504 = std::pow(0.00100000005f, (0.392745376f / fConst7));
		fConst505 = (std::cos((15902.2393f / fConst7)) * (0.0f - (2.0f * fConst504)));
		fConst506 = mydsp_faustpower2_f(fConst504);
		fConst507 = ftbl4mydspSIG4[74];
		fConst508 = std::pow(0.00100000005f, (0.499480247f / fConst7));
		fConst509 = (std::cos((16768.9414f / fConst7)) * (0.0f - (2.0f * fConst508)));
		fConst510 = mydsp_faustpower2_f(fConst508);
		fConst511 = ftbl4mydspSIG4[75];
		fConst512 = std::pow(0.00100000005f, (0.500184536f / fConst7));
		fConst513 = (std::cos((16773.7793f / fConst7)) * (0.0f - (2.0f * fConst512)));
		fConst514 = mydsp_faustpower2_f(fConst512);
		fConst515 = ftbl4mydspSIG4[76];
		fConst516 = std::pow(0.00100000005f, (0.56877172f / fConst7));
		fConst517 = (std::cos((17203.7383f / fConst7)) * (0.0f - (2.0f * fConst516)));
		fConst518 = mydsp_faustpower2_f(fConst516);
		fConst519 = ftbl4mydspSIG4[77];
		fConst520 = std::pow(0.00100000005f, (0.580974996f / fConst7));
		fConst521 = (std::cos((17272.6641f / fConst7)) * (0.0f - (2.0f * fConst520)));
		fConst522 = mydsp_faustpower2_f(fConst520);
		fConst523 = ftbl4mydspSIG4[78];
		fConst524 = std::pow(0.00100000005f, (0.58267206f / fConst7));
		fConst525 = (std::cos((17282.0898f / fConst7)) * (0.0f - (2.0f * fConst524)));
		fConst526 = mydsp_faustpower2_f(fConst524);
		fConst527 = ftbl4mydspSIG4[79];
		fConst528 = std::pow(0.00100000005f, (0.58560729f / fConst7));
		fConst529 = (std::cos((17298.3008f / fConst7)) * (0.0f - (2.0f * fConst528)));
		fConst530 = mydsp_faustpower2_f(fConst528);
		fConst531 = ftbl4mydspSIG4[80];
		fConst532 = std::pow(0.00100000005f, (0.679538369f / fConst7));
		fConst533 = (std::cos((17763.7578f / fConst7)) * (0.0f - (2.0f * fConst532)));
		fConst534 = mydsp_faustpower2_f(fConst532);
		fConst535 = ftbl4mydspSIG4[81];
		fConst536 = std::pow(0.00100000005f, (0.701286793f / fConst7));
		fConst537 = (std::cos((17858.8242f / fConst7)) * (0.0f - (2.0f * fConst536)));
		fConst538 = mydsp_faustpower2_f(fConst536);
		fConst539 = ftbl4mydspSIG4[82];
		fConst540 = std::pow(0.00100000005f, (0.981793463f / fConst7));
		fConst541 = (std::cos((18802.8086f / fConst7)) * (0.0f - (2.0f * fConst540)));
		fConst542 = mydsp_faustpower2_f(fConst540);
		fConst543 = ftbl4mydspSIG4[83];
		fConst544 = std::pow(0.00100000005f, (0.991939485f / fConst7));
		fConst545 = (std::cos((18829.7012f / fConst7)) * (0.0f - (2.0f * fConst544)));
		fConst546 = mydsp_faustpower2_f(fConst544);
		fConst547 = ftbl4mydspSIG4[84];
		fConst548 = std::pow(0.00100000005f, (1.57685912f / fConst7));
		fConst549 = (std::cos((19934.0957f / fConst7)) * (0.0f - (2.0f * fConst548)));
		fConst550 = mydsp_faustpower2_f(fConst548);
		fConst551 = ftbl4mydspSIG4[85];
		fConst552 = std::pow(0.00100000005f, (2.61620831f / fConst7));
		fConst553 = (std::cos((20927.9707f / fConst7)) * (0.0f - (2.0f * fConst552)));
		fConst554 = mydsp_faustpower2_f(fConst552);
		fConst555 = ftbl4mydspSIG4[86];
		fConst556 = std::pow(0.00100000005f, (3.26228237f / fConst7));
		fConst557 = (std::cos((21302.0723f / fConst7)) * (0.0f - (2.0f * fConst556)));
		fConst558 = mydsp_faustpower2_f(fConst556);
		fConst559 = ftbl4mydspSIG4[87];
		fConst560 = std::pow(0.00100000005f, (3.42948842f / fConst7));
		fConst561 = (std::cos((21382.3086f / fConst7)) * (0.0f - (2.0f * fConst560)));
		fConst562 = mydsp_faustpower2_f(fConst560);
		fConst563 = ftbl4mydspSIG4[88];
		fConst564 = std::pow(0.00100000005f, (5.61909866f / fConst7));
		fConst565 = (std::cos((22094.3809f / fConst7)) * (0.0f - (2.0f * fConst564)));
		fConst566 = mydsp_faustpower2_f(fConst564);
		fConst567 = ftbl4mydspSIG4[89];
		fConst568 = std::pow(0.00100000005f, (6.26517916f / fConst7));
		fConst569 = (std::cos((22233.3027f / fConst7)) * (0.0f - (2.0f * fConst568)));
		fConst570 = mydsp_faustpower2_f(fConst568);
		fConst571 = ftbl4mydspSIG4[90];
		fConst572 = std::pow(0.00100000005f, (7.91042233f / fConst7));
		fConst573 = (std::cos((22511.334f / fConst7)) * (0.0f - (2.0f * fConst572)));
		fConst574 = mydsp_faustpower2_f(fConst572);
		fConst575 = ftbl4mydspSIG4[91];
		fConst576 = std::pow(0.00100000005f, (7.95560217f / fConst7));
		fConst577 = (std::cos((22517.8047f / fConst7)) * (0.0f - (2.0f * fConst576)));
		fConst578 = mydsp_faustpower2_f(fConst576);
		fConst579 = ftbl4mydspSIG4[92];
		fConst580 = std::pow(0.00100000005f, (21.1559925f / fConst7));
		fConst581 = (std::cos((23436.5332f / fConst7)) * (0.0f - (2.0f * fConst580)));
		fConst582 = mydsp_faustpower2_f(fConst580);
		fConst583 = ftbl4mydspSIG4[93];
		fConst584 = std::pow(0.00100000005f, (22.8584423f / fConst7));
		fConst585 = (std::cos((23495.0293f / fConst7)) * (0.0f - (2.0f * fConst584)));
		fConst586 = mydsp_faustpower2_f(fConst584);
		fConst587 = ftbl4mydspSIG4[94];
		fConst588 = std::pow(0.00100000005f, (27.0563507f / fConst7));
		fConst589 = (std::cos((23616.3574f / fConst7)) * (0.0f - (2.0f * fConst588)));
		fConst590 = mydsp_faustpower2_f(fConst588);
		fConst591 = ftbl4mydspSIG4[95];
		fConst592 = std::pow(0.00100000005f, (173.368958f / fConst7));
		fConst593 = (std::cos((24528.1738f / fConst7)) * (0.0f - (2.0f * fConst592)));
		fConst594 = mydsp_faustpower2_f(fConst592);
		fConst595 = ftbl4mydspSIG4[96];
		fConst596 = std::pow(0.00100000005f, (415.098541f / fConst7));
		fConst597 = (std::cos((24772.0234f / fConst7)) * (0.0f - (2.0f * fConst596)));
		fConst598 = mydsp_faustpower2_f(fConst596);
		fConst599 = ftbl4mydspSIG4[97];
		fConst600 = std::pow(0.00100000005f, (1631.8125f / fConst7));
		fConst601 = (std::cos((25018.0098f / fConst7)) * (0.0f - (2.0f * fConst600)));
		fConst602 = mydsp_faustpower2_f(fConst600);
		fConst603 = ftbl4mydspSIG4[98];
		fConst604 = std::pow(0.00100000005f, (1752.41809f / fConst7));
		fConst605 = (std::cos((25027.498f / fConst7)) * (0.0f - (2.0f * fConst604)));
		fConst606 = mydsp_faustpower2_f(fConst604);
		fConst607 = ftbl4mydspSIG4[99];
		fConst608 = std::pow(0.00100000005f, (13161720.0f / fConst7));
		fConst609 = (std::cos((25346.1816f / fConst7)) * (0.0f - (2.0f * fConst608)));
		fConst610 = mydsp_faustpower2_f(fConst608);
		fConst611 = (1.0f / std::max<float>(1.0f, (2.0f * fConst7)));
		fConst612 = std::exp((0.0f - (0.00999999978f / fConst7)));
		fConst613 = (1.0f - fConst612);
		fConst614 = std::exp((0.0f - (0.00333333341f / fConst7)));
		fConst615 = (1.0f - fConst614);
		fConst616 = std::exp((0.0f - (0.0199999996f / fConst7)));
		fConst617 = (1.0f - fConst616);
		fConst618 = std::exp((0.0f - (0.00499999989f / fConst7)));
		fConst619 = (1.0f - fConst618);
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(0.5f);
		fVslider0 = FAUSTFLOAT(-6.0f);
		fHslider1 = FAUSTFLOAT(0.0f);
		fHslider2 = FAUSTFLOAT(0.0f);
		fHslider3 = FAUSTFLOAT(0.69999999999999996f);
		fHslider4 = FAUSTFLOAT(20000.0f);
		fHslider5 = FAUSTFLOAT(2000.0f);
		fHslider6 = FAUSTFLOAT(500.0f);
		fHslider7 = FAUSTFLOAT(0.0f);
		fHslider8 = FAUSTFLOAT(0.0f);
		fHslider9 = FAUSTFLOAT(0.0f);
		fCheckbox0 = FAUSTFLOAT(0.0f);
		fHslider10 = FAUSTFLOAT(0.69999999999999996f);
		fHslider11 = FAUSTFLOAT(20000.0f);
		fHslider12 = FAUSTFLOAT(2000.0f);
		fHslider13 = FAUSTFLOAT(500.0f);
		fEntry0 = FAUSTFLOAT(1.0f);
		fHslider14 = FAUSTFLOAT(0.0f);
		fHslider15 = FAUSTFLOAT(9.0f);
		fVslider1 = FAUSTFLOAT(1.0f);
		fVslider2 = FAUSTFLOAT(120.0f);
		fHslider16 = FAUSTFLOAT(100.0f);
		fHslider17 = FAUSTFLOAT(0.5f);
		fHslider18 = FAUSTFLOAT(0.0f);
		fHslider19 = FAUSTFLOAT(5.0f);
		fHslider20 = FAUSTFLOAT(9.0f);
		fHslider21 = FAUSTFLOAT(100.0f);
		fHslider22 = FAUSTFLOAT(5.0f);
		fHslider23 = FAUSTFLOAT(9.0f);
		fHslider24 = FAUSTFLOAT(100.0f);
		fHslider25 = FAUSTFLOAT(5.0f);
		fHslider26 = FAUSTFLOAT(9.0f);
		fHslider27 = FAUSTFLOAT(100.0f);
		fHslider28 = FAUSTFLOAT(5.0f);
		fHslider29 = FAUSTFLOAT(1.0f);
		fHslider30 = FAUSTFLOAT(0.10000000000000001f);
		fHslider31 = FAUSTFLOAT(0.10000000000000001f);
		fHslider32 = FAUSTFLOAT(0.0f);
		fHslider33 = FAUSTFLOAT(0.69999999999999996f);
		fHslider34 = FAUSTFLOAT(50.0f);
		fHslider35 = FAUSTFLOAT(0.0f);
		fHslider36 = FAUSTFLOAT(0.69999999999999996f);
		fHslider37 = FAUSTFLOAT(0.0f);
		fHslider38 = FAUSTFLOAT(0.69999999999999996f);
		fHslider39 = FAUSTFLOAT(0.0f);
		fCheckbox1 = FAUSTFLOAT(0.0f);
		fHslider40 = FAUSTFLOAT(0.69999999999999996f);
		fHslider41 = FAUSTFLOAT(20000.0f);
		fHslider42 = FAUSTFLOAT(2000.0f);
		fHslider43 = FAUSTFLOAT(500.0f);
		fHslider44 = FAUSTFLOAT(9.0f);
		fEntry1 = FAUSTFLOAT(1.0f);
		fHslider45 = FAUSTFLOAT(100.0f);
		fHslider46 = FAUSTFLOAT(1.0f);
		fHslider47 = FAUSTFLOAT(0.10000000000000001f);
		fHslider48 = FAUSTFLOAT(0.10000000000000001f);
		fHslider49 = FAUSTFLOAT(0.0f);
		fHslider50 = FAUSTFLOAT(0.69999999999999996f);
		fHslider51 = FAUSTFLOAT(50.0f);
		fHslider52 = FAUSTFLOAT(0.0f);
		fHslider53 = FAUSTFLOAT(0.69999999999999996f);
		fHslider54 = FAUSTFLOAT(0.0f);
		fHslider55 = FAUSTFLOAT(0.69999999999999996f);
		fHslider56 = FAUSTFLOAT(0.0f);
		fCheckbox2 = FAUSTFLOAT(0.0f);
		fHslider57 = FAUSTFLOAT(0.69999999999999996f);
		fHslider58 = FAUSTFLOAT(20000.0f);
		fHslider59 = FAUSTFLOAT(2000.0f);
		fHslider60 = FAUSTFLOAT(500.0f);
		fHslider61 = FAUSTFLOAT(9.0f);
		fEntry2 = FAUSTFLOAT(1.0f);
		fHslider62 = FAUSTFLOAT(100.0f);
		fHslider63 = FAUSTFLOAT(1.0f);
		fHslider64 = FAUSTFLOAT(0.10000000000000001f);
		fHslider65 = FAUSTFLOAT(0.10000000000000001f);
		fHslider66 = FAUSTFLOAT(0.0f);
		fHslider67 = FAUSTFLOAT(0.69999999999999996f);
		fHslider68 = FAUSTFLOAT(50.0f);
		fHslider69 = FAUSTFLOAT(0.0f);
		fHslider70 = FAUSTFLOAT(0.69999999999999996f);
		fHslider71 = FAUSTFLOAT(0.0f);
		fHslider72 = FAUSTFLOAT(0.69999999999999996f);
		fHslider73 = FAUSTFLOAT(0.0f);
		fCheckbox3 = FAUSTFLOAT(0.0f);
		fHslider74 = FAUSTFLOAT(0.69999999999999996f);
		fHslider75 = FAUSTFLOAT(20000.0f);
		fHslider76 = FAUSTFLOAT(2000.0f);
		fHslider77 = FAUSTFLOAT(500.0f);
		fEntry3 = FAUSTFLOAT(1.0f);
		fHslider78 = FAUSTFLOAT(9.0f);
		fHslider79 = FAUSTFLOAT(100.0f);
		fHslider80 = FAUSTFLOAT(100.0f);
		fHslider81 = FAUSTFLOAT(100.0f);
		fHslider82 = FAUSTFLOAT(100.0f);
		fHslider83 = FAUSTFLOAT(1.0f);
		fHslider84 = FAUSTFLOAT(0.10000000000000001f);
		fHslider85 = FAUSTFLOAT(0.10000000000000001f);
		fHslider86 = FAUSTFLOAT(0.0f);
		fHslider87 = FAUSTFLOAT(0.69999999999999996f);
		fHslider88 = FAUSTFLOAT(50.0f);
		fHslider89 = FAUSTFLOAT(0.0f);
		fHslider90 = FAUSTFLOAT(0.69999999999999996f);
		fHslider91 = FAUSTFLOAT(0.0f);
		fHslider92 = FAUSTFLOAT(0.69999999999999996f);
		fHslider93 = FAUSTFLOAT(0.0f);
		fCheckbox4 = FAUSTFLOAT(0.0f);
		fHslider94 = FAUSTFLOAT(0.69999999999999996f);
		fHslider95 = FAUSTFLOAT(20000.0f);
		fHslider96 = FAUSTFLOAT(2000.0f);
		fHslider97 = FAUSTFLOAT(500.0f);
		fEntry4 = FAUSTFLOAT(1.0f);
		fHslider98 = FAUSTFLOAT(0.0f);
		fHslider99 = FAUSTFLOAT(9.0f);
		if (uintptr_t(fSoundfile0) == 0) {
			fSoundfile0 = defaultsound;
		}
		if (uintptr_t(fSoundfile1) == 0) {
			fSoundfile1 = defaultsound;
		}
		if (uintptr_t(fSoundfile2) == 0) {
			fSoundfile2 = defaultsound;
		}
		fHslider100 = FAUSTFLOAT(1.0f);
		fHslider101 = FAUSTFLOAT(0.10000000000000001f);
		fHslider102 = FAUSTFLOAT(0.10000000000000001f);
		fHslider103 = FAUSTFLOAT(0.0f);
		fHslider104 = FAUSTFLOAT(0.69999999999999996f);
		fHslider105 = FAUSTFLOAT(50.0f);
		fHslider106 = FAUSTFLOAT(0.0f);
		fHslider107 = FAUSTFLOAT(0.69999999999999996f);
		fHslider108 = FAUSTFLOAT(0.0f);
		fHslider109 = FAUSTFLOAT(0.69999999999999996f);
		fHslider110 = FAUSTFLOAT(0.0f);
		fCheckbox5 = FAUSTFLOAT(0.0f);
		fHslider111 = FAUSTFLOAT(0.69999999999999996f);
		fHslider112 = FAUSTFLOAT(20000.0f);
		fHslider113 = FAUSTFLOAT(2000.0f);
		fHslider114 = FAUSTFLOAT(500.0f);
		fEntry5 = FAUSTFLOAT(1.0f);
		fHslider115 = FAUSTFLOAT(9.0f);
		if (uintptr_t(fSoundfile3) == 0) {
			fSoundfile3 = defaultsound;
		}
		if (uintptr_t(fSoundfile4) == 0) {
			fSoundfile4 = defaultsound;
		}
		fHslider116 = FAUSTFLOAT(1.0f);
		fHslider117 = FAUSTFLOAT(0.10000000000000001f);
		fHslider118 = FAUSTFLOAT(0.10000000000000001f);
		fHslider119 = FAUSTFLOAT(0.0f);
		fHslider120 = FAUSTFLOAT(0.69999999999999996f);
		fHslider121 = FAUSTFLOAT(50.0f);
		fHslider122 = FAUSTFLOAT(0.0f);
		fHslider123 = FAUSTFLOAT(0.69999999999999996f);
		fHslider124 = FAUSTFLOAT(0.0f);
		fHslider125 = FAUSTFLOAT(0.69999999999999996f);
		fHslider126 = FAUSTFLOAT(0.0f);
		fHslider127 = FAUSTFLOAT(0.0f);
		fCheckbox6 = FAUSTFLOAT(0.0f);
		fHslider128 = FAUSTFLOAT(0.69999999999999996f);
		fHslider129 = FAUSTFLOAT(20000.0f);
		fHslider130 = FAUSTFLOAT(2000.0f);
		fHslider131 = FAUSTFLOAT(500.0f);
		fEntry6 = FAUSTFLOAT(1.0f);
		fHslider132 = FAUSTFLOAT(9.0f);
		if (uintptr_t(fSoundfile5) == 0) {
			fSoundfile5 = defaultsound;
		}
		fHslider133 = FAUSTFLOAT(1.0f);
		fHslider134 = FAUSTFLOAT(0.10000000000000001f);
		fHslider135 = FAUSTFLOAT(0.10000000000000001f);
		fHslider136 = FAUSTFLOAT(0.0f);
		fHslider137 = FAUSTFLOAT(0.69999999999999996f);
		fHslider138 = FAUSTFLOAT(50.0f);
		fHslider139 = FAUSTFLOAT(0.0f);
		fHslider140 = FAUSTFLOAT(0.69999999999999996f);
		fHslider141 = FAUSTFLOAT(0.0f);
		fHslider142 = FAUSTFLOAT(0.69999999999999996f);
		fHslider143 = FAUSTFLOAT(0.0f);
		fCheckbox7 = FAUSTFLOAT(0.0f);
		fHslider144 = FAUSTFLOAT(0.69999999999999996f);
		fHslider145 = FAUSTFLOAT(20000.0f);
		fHslider146 = FAUSTFLOAT(2000.0f);
		fHslider147 = FAUSTFLOAT(500.0f);
		fEntry7 = FAUSTFLOAT(1.0f);
		fHslider148 = FAUSTFLOAT(9.0f);
		if (uintptr_t(fSoundfile6) == 0) {
			fSoundfile6 = defaultsound;
		}
		fHslider149 = FAUSTFLOAT(1.0f);
		fHslider150 = FAUSTFLOAT(0.10000000000000001f);
		fHslider151 = FAUSTFLOAT(0.10000000000000001f);
		fHslider152 = FAUSTFLOAT(0.0f);
		fHslider153 = FAUSTFLOAT(0.69999999999999996f);
		fHslider154 = FAUSTFLOAT(50.0f);
		fHslider155 = FAUSTFLOAT(0.0f);
		fHslider156 = FAUSTFLOAT(0.69999999999999996f);
		fHslider157 = FAUSTFLOAT(0.0f);
		fHslider158 = FAUSTFLOAT(0.69999999999999996f);
		fVslider3 = FAUSTFLOAT(-8.0f);
		fHslider159 = FAUSTFLOAT(0.0f);
		fHslider160 = FAUSTFLOAT(0.69999999999999996f);
		fHslider161 = FAUSTFLOAT(50.0f);
		fHslider162 = FAUSTFLOAT(0.0f);
		fHslider163 = FAUSTFLOAT(0.69999999999999996f);
		fHslider164 = FAUSTFLOAT(0.0f);
		fHslider165 = FAUSTFLOAT(0.69999999999999996f);
		fHslider166 = FAUSTFLOAT(0.0f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; (l0 < 2); l0 = (l0 + 1)) {
			iVec0[l0] = 0;
		}
		for (int l1 = 0; (l1 < 2); l1 = (l1 + 1)) {
			fRec0[l1] = 0.0f;
		}
		for (int l2 = 0; (l2 < 2); l2 = (l2 + 1)) {
			fRec5[l2] = 0.0f;
		}
		for (int l3 = 0; (l3 < 2); l3 = (l3 + 1)) {
			fRec6[l3] = 0.0f;
		}
		for (int l4 = 0; (l4 < 2); l4 = (l4 + 1)) {
			fRec8[l4] = 0.0f;
		}
		for (int l5 = 0; (l5 < 2); l5 = (l5 + 1)) {
			fVec1[l5] = 0.0f;
		}
		for (int l6 = 0; (l6 < 2); l6 = (l6 + 1)) {
			fVec2[l6] = 0.0f;
		}
		for (int l7 = 0; (l7 < 2); l7 = (l7 + 1)) {
			iVec3[l7] = 0;
		}
		for (int l8 = 0; (l8 < 2); l8 = (l8 + 1)) {
			iRec13[l8] = 0;
		}
		for (int l9 = 0; (l9 < 2); l9 = (l9 + 1)) {
			fRec12[l9] = 0.0f;
		}
		for (int l10 = 0; (l10 < 2); l10 = (l10 + 1)) {
			iRec15[l10] = 0;
		}
		for (int l11 = 0; (l11 < 2); l11 = (l11 + 1)) {
			fRec17[l11] = 0.0f;
		}
		for (int l12 = 0; (l12 < 2); l12 = (l12 + 1)) {
			fRec16[l12] = 0.0f;
		}
		for (int l13 = 0; (l13 < 3); l13 = (l13 + 1)) {
			fRec14[l13] = 0.0f;
		}
		for (int l14 = 0; (l14 < 2); l14 = (l14 + 1)) {
			iRec20[l14] = 0;
		}
		for (int l15 = 0; (l15 < 2); l15 = (l15 + 1)) {
			fVec4[l15] = 0.0f;
		}
		for (int l16 = 0; (l16 < 2); l16 = (l16 + 1)) {
			iVec5[l16] = 0;
		}
		for (int l17 = 0; (l17 < 2); l17 = (l17 + 1)) {
			iRec19[l17] = 0;
		}
		for (int l18 = 0; (l18 < 2); l18 = (l18 + 1)) {
			iRec21[l18] = 0;
		}
		for (int l19 = 0; (l19 < 2); l19 = (l19 + 1)) {
			fRec18[l19] = 0.0f;
		}
		for (int l21 = 0; (l21 < 2); l21 = (l21 + 1)) {
			fRec24[l21] = 0.0f;
		}
		for (int l22 = 0; (l22 < 2); l22 = (l22 + 1)) {
			fVec6[l22] = 0.0f;
		}
		for (int l23 = 0; (l23 < 2); l23 = (l23 + 1)) {
			fRec26[l23] = 0.0f;
		}
		for (int l24 = 0; (l24 < 2); l24 = (l24 + 1)) {
			fVec7[l24] = 0.0f;
		}
		IOTA = 0;
		for (int l25 = 0; (l25 < 4096); l25 = (l25 + 1)) {
			fVec8[l25] = 0.0f;
		}
		for (int l26 = 0; (l26 < 2); l26 = (l26 + 1)) {
			fRec25[l26] = 0.0f;
		}
		for (int l27 = 0; (l27 < 2); l27 = (l27 + 1)) {
			fRec23[l27] = 0.0f;
		}
		for (int l28 = 0; (l28 < 2); l28 = (l28 + 1)) {
			fRec27[l28] = 0.0f;
		}
		for (int l29 = 0; (l29 < 2); l29 = (l29 + 1)) {
			fRec28[l29] = 0.0f;
		}
		for (int l30 = 0; (l30 < 2); l30 = (l30 + 1)) {
			fRec29[l30] = 0.0f;
		}
		for (int l31 = 0; (l31 < 2); l31 = (l31 + 1)) {
			fVec9[l31] = 0.0f;
		}
		for (int l32 = 0; (l32 < 2); l32 = (l32 + 1)) {
			fVec10[l32] = 0.0f;
		}
		for (int l33 = 0; (l33 < 2); l33 = (l33 + 1)) {
			iVec11[l33] = 0;
		}
		for (int l34 = 0; (l34 < 2); l34 = (l34 + 1)) {
			iRec31[l34] = 0;
		}
		for (int l35 = 0; (l35 < 2); l35 = (l35 + 1)) {
			fRec30[l35] = 0.0f;
		}
		for (int l36 = 0; (l36 < 2); l36 = (l36 + 1)) {
			iRec33[l36] = 0;
		}
		for (int l37 = 0; (l37 < 2); l37 = (l37 + 1)) {
			fRec35[l37] = 0.0f;
		}
		for (int l38 = 0; (l38 < 2); l38 = (l38 + 1)) {
			fRec34[l38] = 0.0f;
		}
		for (int l39 = 0; (l39 < 3); l39 = (l39 + 1)) {
			fRec32[l39] = 0.0f;
		}
		for (int l40 = 0; (l40 < 2); l40 = (l40 + 1)) {
			iRec38[l40] = 0;
		}
		for (int l41 = 0; (l41 < 2); l41 = (l41 + 1)) {
			fVec12[l41] = 0.0f;
		}
		for (int l42 = 0; (l42 < 2); l42 = (l42 + 1)) {
			iVec13[l42] = 0;
		}
		for (int l43 = 0; (l43 < 2); l43 = (l43 + 1)) {
			iRec37[l43] = 0;
		}
		for (int l44 = 0; (l44 < 2); l44 = (l44 + 1)) {
			iRec39[l44] = 0;
		}
		for (int l45 = 0; (l45 < 2); l45 = (l45 + 1)) {
			fRec36[l45] = 0.0f;
		}
		for (int l46 = 0; (l46 < 2); l46 = (l46 + 1)) {
			fRec41[l46] = 0.0f;
		}
		for (int l47 = 0; (l47 < 2); l47 = (l47 + 1)) {
			fVec14[l47] = 0.0f;
		}
		for (int l48 = 0; (l48 < 2); l48 = (l48 + 1)) {
			fRec43[l48] = 0.0f;
		}
		for (int l49 = 0; (l49 < 2); l49 = (l49 + 1)) {
			fVec15[l49] = 0.0f;
		}
		for (int l50 = 0; (l50 < 4096); l50 = (l50 + 1)) {
			fVec16[l50] = 0.0f;
		}
		for (int l51 = 0; (l51 < 2); l51 = (l51 + 1)) {
			fRec42[l51] = 0.0f;
		}
		for (int l52 = 0; (l52 < 2); l52 = (l52 + 1)) {
			fRec40[l52] = 0.0f;
		}
		for (int l53 = 0; (l53 < 2); l53 = (l53 + 1)) {
			fRec44[l53] = 0.0f;
		}
		for (int l54 = 0; (l54 < 2); l54 = (l54 + 1)) {
			fRec45[l54] = 0.0f;
		}
		for (int l55 = 0; (l55 < 2); l55 = (l55 + 1)) {
			fRec46[l55] = 0.0f;
		}
		for (int l56 = 0; (l56 < 2); l56 = (l56 + 1)) {
			fVec17[l56] = 0.0f;
		}
		for (int l57 = 0; (l57 < 2); l57 = (l57 + 1)) {
			fVec18[l57] = 0.0f;
		}
		for (int l58 = 0; (l58 < 2); l58 = (l58 + 1)) {
			iVec19[l58] = 0;
		}
		for (int l59 = 0; (l59 < 2); l59 = (l59 + 1)) {
			iRec48[l59] = 0;
		}
		for (int l60 = 0; (l60 < 2); l60 = (l60 + 1)) {
			fRec47[l60] = 0.0f;
		}
		for (int l61 = 0; (l61 < 2); l61 = (l61 + 1)) {
			iRec50[l61] = 0;
		}
		for (int l62 = 0; (l62 < 2); l62 = (l62 + 1)) {
			fRec52[l62] = 0.0f;
		}
		for (int l63 = 0; (l63 < 2); l63 = (l63 + 1)) {
			fRec51[l63] = 0.0f;
		}
		for (int l64 = 0; (l64 < 3); l64 = (l64 + 1)) {
			fRec49[l64] = 0.0f;
		}
		for (int l65 = 0; (l65 < 2); l65 = (l65 + 1)) {
			iRec55[l65] = 0;
		}
		for (int l66 = 0; (l66 < 2); l66 = (l66 + 1)) {
			fVec20[l66] = 0.0f;
		}
		for (int l67 = 0; (l67 < 2); l67 = (l67 + 1)) {
			iVec21[l67] = 0;
		}
		for (int l68 = 0; (l68 < 2); l68 = (l68 + 1)) {
			iRec54[l68] = 0;
		}
		for (int l69 = 0; (l69 < 2); l69 = (l69 + 1)) {
			iRec56[l69] = 0;
		}
		for (int l70 = 0; (l70 < 2); l70 = (l70 + 1)) {
			fRec53[l70] = 0.0f;
		}
		for (int l71 = 0; (l71 < 2); l71 = (l71 + 1)) {
			fRec58[l71] = 0.0f;
		}
		for (int l72 = 0; (l72 < 2); l72 = (l72 + 1)) {
			fVec22[l72] = 0.0f;
		}
		for (int l73 = 0; (l73 < 2); l73 = (l73 + 1)) {
			fRec60[l73] = 0.0f;
		}
		for (int l74 = 0; (l74 < 2); l74 = (l74 + 1)) {
			fVec23[l74] = 0.0f;
		}
		for (int l75 = 0; (l75 < 4096); l75 = (l75 + 1)) {
			fVec24[l75] = 0.0f;
		}
		for (int l76 = 0; (l76 < 2); l76 = (l76 + 1)) {
			fRec59[l76] = 0.0f;
		}
		for (int l77 = 0; (l77 < 2); l77 = (l77 + 1)) {
			fRec57[l77] = 0.0f;
		}
		for (int l78 = 0; (l78 < 2); l78 = (l78 + 1)) {
			fRec61[l78] = 0.0f;
		}
		for (int l79 = 0; (l79 < 2); l79 = (l79 + 1)) {
			fRec62[l79] = 0.0f;
		}
		for (int l80 = 0; (l80 < 2); l80 = (l80 + 1)) {
			fRec63[l80] = 0.0f;
		}
		for (int l81 = 0; (l81 < 2); l81 = (l81 + 1)) {
			fVec25[l81] = 0.0f;
		}
		for (int l82 = 0; (l82 < 2); l82 = (l82 + 1)) {
			fVec26[l82] = 0.0f;
		}
		for (int l83 = 0; (l83 < 2); l83 = (l83 + 1)) {
			iVec27[l83] = 0;
		}
		for (int l84 = 0; (l84 < 2); l84 = (l84 + 1)) {
			iRec65[l84] = 0;
		}
		for (int l85 = 0; (l85 < 2); l85 = (l85 + 1)) {
			fRec64[l85] = 0.0f;
		}
		for (int l86 = 0; (l86 < 2); l86 = (l86 + 1)) {
			iRec67[l86] = 0;
		}
		for (int l87 = 0; (l87 < 2); l87 = (l87 + 1)) {
			fRec69[l87] = 0.0f;
		}
		for (int l88 = 0; (l88 < 2); l88 = (l88 + 1)) {
			fRec68[l88] = 0.0f;
		}
		for (int l89 = 0; (l89 < 3); l89 = (l89 + 1)) {
			fRec66[l89] = 0.0f;
		}
		for (int l90 = 0; (l90 < 2); l90 = (l90 + 1)) {
			iRec72[l90] = 0;
		}
		for (int l91 = 0; (l91 < 2); l91 = (l91 + 1)) {
			fVec28[l91] = 0.0f;
		}
		for (int l92 = 0; (l92 < 2); l92 = (l92 + 1)) {
			iVec29[l92] = 0;
		}
		for (int l93 = 0; (l93 < 2); l93 = (l93 + 1)) {
			iRec71[l93] = 0;
		}
		for (int l94 = 0; (l94 < 2); l94 = (l94 + 1)) {
			iRec73[l94] = 0;
		}
		for (int l95 = 0; (l95 < 2); l95 = (l95 + 1)) {
			fRec70[l95] = 0.0f;
		}
		for (int l96 = 0; (l96 < 2); l96 = (l96 + 1)) {
			fRec75[l96] = 0.0f;
		}
		for (int l97 = 0; (l97 < 2); l97 = (l97 + 1)) {
			fVec30[l97] = 0.0f;
		}
		for (int l98 = 0; (l98 < 2); l98 = (l98 + 1)) {
			fRec77[l98] = 0.0f;
		}
		for (int l99 = 0; (l99 < 2); l99 = (l99 + 1)) {
			fVec31[l99] = 0.0f;
		}
		for (int l100 = 0; (l100 < 4096); l100 = (l100 + 1)) {
			fVec32[l100] = 0.0f;
		}
		for (int l101 = 0; (l101 < 2); l101 = (l101 + 1)) {
			fRec76[l101] = 0.0f;
		}
		for (int l102 = 0; (l102 < 2); l102 = (l102 + 1)) {
			fRec74[l102] = 0.0f;
		}
		for (int l103 = 0; (l103 < 2); l103 = (l103 + 1)) {
			fRec78[l103] = 0.0f;
		}
		for (int l104 = 0; (l104 < 2); l104 = (l104 + 1)) {
			fRec79[l104] = 0.0f;
		}
		for (int l105 = 0; (l105 < 2); l105 = (l105 + 1)) {
			fRec80[l105] = 0.0f;
		}
		for (int l106 = 0; (l106 < 2); l106 = (l106 + 1)) {
			fRec83[l106] = 0.0f;
		}
		for (int l107 = 0; (l107 < 2); l107 = (l107 + 1)) {
			fRec82[l107] = 0.0f;
		}
		for (int l108 = 0; (l108 < 2); l108 = (l108 + 1)) {
			fRec81[l108] = 0.0f;
		}
		for (int l109 = 0; (l109 < 3); l109 = (l109 + 1)) {
			fRec84[l109] = 0.0f;
		}
		for (int l110 = 0; (l110 < 3); l110 = (l110 + 1)) {
			fRec11[l110] = 0.0f;
		}
		for (int l111 = 0; (l111 < 3); l111 = (l111 + 1)) {
			fRec10[l111] = 0.0f;
		}
		for (int l112 = 0; (l112 < 3); l112 = (l112 + 1)) {
			fRec9[l112] = 0.0f;
		}
		for (int l113 = 0; (l113 < 2); l113 = (l113 + 1)) {
			fRec85[l113] = 0.0f;
		}
		for (int l114 = 0; (l114 < 2); l114 = (l114 + 1)) {
			fVec33[l114] = 0.0f;
		}
		for (int l115 = 0; (l115 < 2); l115 = (l115 + 1)) {
			fVec34[l115] = 0.0f;
		}
		for (int l116 = 0; (l116 < 2); l116 = (l116 + 1)) {
			iVec35[l116] = 0;
		}
		for (int l117 = 0; (l117 < 2); l117 = (l117 + 1)) {
			fRec89[l117] = 0.0f;
		}
		for (int l118 = 0; (l118 < 2); l118 = (l118 + 1)) {
			iRec91[l118] = 0;
		}
		for (int l119 = 0; (l119 < 2); l119 = (l119 + 1)) {
			fRec90[l119] = 0.0f;
		}
		for (int l120 = 0; (l120 < 2); l120 = (l120 + 1)) {
			fRec96[l120] = 0.0f;
		}
		for (int l121 = 0; (l121 < 2); l121 = (l121 + 1)) {
			fRec95[l121] = 0.0f;
		}
		for (int l122 = 0; (l122 < 2); l122 = (l122 + 1)) {
			fRec94[l122] = 0.0f;
		}
		for (int l123 = 0; (l123 < 2); l123 = (l123 + 1)) {
			fRec93[l123] = 0.0f;
		}
		for (int l124 = 0; (l124 < 2); l124 = (l124 + 1)) {
			fRec92[l124] = 0.0f;
		}
		for (int l125 = 0; (l125 < 2); l125 = (l125 + 1)) {
			fVec36[l125] = 0.0f;
		}
		for (int l126 = 0; (l126 < 2); l126 = (l126 + 1)) {
			iRec99[l126] = 0;
		}
		for (int l127 = 0; (l127 < 2); l127 = (l127 + 1)) {
			fRec98[l127] = 0.0f;
		}
		for (int l128 = 0; (l128 < 2); l128 = (l128 + 1)) {
			fRec97[l128] = 0.0f;
		}
		for (int l129 = 0; (l129 < 2); l129 = (l129 + 1)) {
			fRec101[l129] = 0.0f;
		}
		for (int l130 = 0; (l130 < 2); l130 = (l130 + 1)) {
			fVec37[l130] = 0.0f;
		}
		for (int l131 = 0; (l131 < 2); l131 = (l131 + 1)) {
			fRec103[l131] = 0.0f;
		}
		for (int l132 = 0; (l132 < 2); l132 = (l132 + 1)) {
			fVec38[l132] = 0.0f;
		}
		for (int l133 = 0; (l133 < 4096); l133 = (l133 + 1)) {
			fVec39[l133] = 0.0f;
		}
		for (int l134 = 0; (l134 < 2); l134 = (l134 + 1)) {
			fRec102[l134] = 0.0f;
		}
		for (int l135 = 0; (l135 < 2); l135 = (l135 + 1)) {
			fRec100[l135] = 0.0f;
		}
		for (int l136 = 0; (l136 < 2); l136 = (l136 + 1)) {
			fVec40[l136] = 0.0f;
		}
		for (int l137 = 0; (l137 < 2); l137 = (l137 + 1)) {
			iRec106[l137] = 0;
		}
		for (int l138 = 0; (l138 < 2); l138 = (l138 + 1)) {
			fRec105[l138] = 0.0f;
		}
		for (int l139 = 0; (l139 < 2); l139 = (l139 + 1)) {
			fRec104[l139] = 0.0f;
		}
		for (int l140 = 0; (l140 < 2); l140 = (l140 + 1)) {
			fVec41[l140] = 0.0f;
		}
		for (int l141 = 0; (l141 < 2); l141 = (l141 + 1)) {
			fRec109[l141] = 0.0f;
		}
		for (int l142 = 0; (l142 < 2); l142 = (l142 + 1)) {
			fVec42[l142] = 0.0f;
		}
		for (int l143 = 0; (l143 < 4096); l143 = (l143 + 1)) {
			fVec43[l143] = 0.0f;
		}
		for (int l144 = 0; (l144 < 2); l144 = (l144 + 1)) {
			fRec108[l144] = 0.0f;
		}
		for (int l145 = 0; (l145 < 2); l145 = (l145 + 1)) {
			fRec107[l145] = 0.0f;
		}
		for (int l146 = 0; (l146 < 2); l146 = (l146 + 1)) {
			fRec112[l146] = 0.0f;
		}
		for (int l147 = 0; (l147 < 2); l147 = (l147 + 1)) {
			fRec111[l147] = 0.0f;
		}
		for (int l148 = 0; (l148 < 2); l148 = (l148 + 1)) {
			fRec110[l148] = 0.0f;
		}
		for (int l149 = 0; (l149 < 3); l149 = (l149 + 1)) {
			fRec113[l149] = 0.0f;
		}
		for (int l150 = 0; (l150 < 3); l150 = (l150 + 1)) {
			fRec88[l150] = 0.0f;
		}
		for (int l151 = 0; (l151 < 3); l151 = (l151 + 1)) {
			fRec87[l151] = 0.0f;
		}
		for (int l152 = 0; (l152 < 3); l152 = (l152 + 1)) {
			fRec86[l152] = 0.0f;
		}
		for (int l153 = 0; (l153 < 2); l153 = (l153 + 1)) {
			fRec114[l153] = 0.0f;
		}
		for (int l154 = 0; (l154 < 5); l154 = (l154 + 1)) {
			fRec119[l154] = 0.0f;
		}
		for (int l155 = 0; (l155 < 2); l155 = (l155 + 1)) {
			fVec44[l155] = 0.0f;
		}
		for (int l156 = 0; (l156 < 2); l156 = (l156 + 1)) {
			fVec45[l156] = 0.0f;
		}
		for (int l157 = 0; (l157 < 2); l157 = (l157 + 1)) {
			iVec46[l157] = 0;
		}
		for (int l158 = 0; (l158 < 2); l158 = (l158 + 1)) {
			fRec120[l158] = 0.0f;
		}
		for (int l159 = 0; (l159 < 2); l159 = (l159 + 1)) {
			fRec123[l159] = 0.0f;
		}
		for (int l160 = 0; (l160 < 2); l160 = (l160 + 1)) {
			fRec122[l160] = 0.0f;
		}
		for (int l161 = 0; (l161 < 2); l161 = (l161 + 1)) {
			fRec125[l161] = 0.0f;
		}
		for (int l162 = 0; (l162 < 2); l162 = (l162 + 1)) {
			fRec124[l162] = 0.0f;
		}
		for (int l163 = 0; (l163 < 2); l163 = (l163 + 1)) {
			fRec127[l163] = 0.0f;
		}
		for (int l164 = 0; (l164 < 2); l164 = (l164 + 1)) {
			iRec130[l164] = 0;
		}
		for (int l165 = 0; (l165 < 2); l165 = (l165 + 1)) {
			fRec129[l165] = 0.0f;
		}
		for (int l166 = 0; (l166 < 3); l166 = (l166 + 1)) {
			fRec126[l166] = 0.0f;
		}
		for (int l167 = 0; (l167 < 3); l167 = (l167 + 1)) {
			fRec131[l167] = 0.0f;
		}
		for (int l168 = 0; (l168 < 3); l168 = (l168 + 1)) {
			fRec132[l168] = 0.0f;
		}
		for (int l169 = 0; (l169 < 3); l169 = (l169 + 1)) {
			fRec133[l169] = 0.0f;
		}
		for (int l170 = 0; (l170 < 3); l170 = (l170 + 1)) {
			fRec134[l170] = 0.0f;
		}
		for (int l171 = 0; (l171 < 2); l171 = (l171 + 1)) {
			iRec135[l171] = 0;
		}
		for (int l172 = 0; (l172 < 3); l172 = (l172 + 1)) {
			fRec121[l172] = 0.0f;
		}
		for (int l173 = 0; (l173 < 2); l173 = (l173 + 1)) {
			fVec47[l173] = 0.0f;
		}
		for (int l174 = 0; (l174 < 2); l174 = (l174 + 1)) {
			iVec48[l174] = 0;
		}
		for (int l175 = 0; (l175 < 2); l175 = (l175 + 1)) {
			iRec137[l175] = 0;
		}
		for (int l176 = 0; (l176 < 2); l176 = (l176 + 1)) {
			iRec138[l176] = 0;
		}
		for (int l177 = 0; (l177 < 2); l177 = (l177 + 1)) {
			fRec136[l177] = 0.0f;
		}
		for (int l178 = 0; (l178 < 2); l178 = (l178 + 1)) {
			fRec140[l178] = 0.0f;
		}
		for (int l179 = 0; (l179 < 2); l179 = (l179 + 1)) {
			fVec49[l179] = 0.0f;
		}
		for (int l180 = 0; (l180 < 2); l180 = (l180 + 1)) {
			fRec142[l180] = 0.0f;
		}
		for (int l181 = 0; (l181 < 2); l181 = (l181 + 1)) {
			fVec50[l181] = 0.0f;
		}
		for (int l182 = 0; (l182 < 4096); l182 = (l182 + 1)) {
			fVec51[l182] = 0.0f;
		}
		for (int l183 = 0; (l183 < 2); l183 = (l183 + 1)) {
			fRec141[l183] = 0.0f;
		}
		for (int l184 = 0; (l184 < 2); l184 = (l184 + 1)) {
			fRec139[l184] = 0.0f;
		}
		for (int l185 = 0; (l185 < 2); l185 = (l185 + 1)) {
			fVec52[l185] = 0.0f;
		}
		for (int l186 = 0; (l186 < 2); l186 = (l186 + 1)) {
			iRec145[l186] = 0;
		}
		for (int l187 = 0; (l187 < 2); l187 = (l187 + 1)) {
			fRec144[l187] = 0.0f;
		}
		for (int l188 = 0; (l188 < 2); l188 = (l188 + 1)) {
			fRec143[l188] = 0.0f;
		}
		for (int l189 = 0; (l189 < 2); l189 = (l189 + 1)) {
			fVec53[l189] = 0.0f;
		}
		for (int l190 = 0; (l190 < 2); l190 = (l190 + 1)) {
			fRec148[l190] = 0.0f;
		}
		for (int l191 = 0; (l191 < 2); l191 = (l191 + 1)) {
			fVec54[l191] = 0.0f;
		}
		for (int l192 = 0; (l192 < 4096); l192 = (l192 + 1)) {
			fVec55[l192] = 0.0f;
		}
		for (int l193 = 0; (l193 < 2); l193 = (l193 + 1)) {
			fRec147[l193] = 0.0f;
		}
		for (int l194 = 0; (l194 < 2); l194 = (l194 + 1)) {
			fRec146[l194] = 0.0f;
		}
		for (int l195 = 0; (l195 < 131072); l195 = (l195 + 1)) {
			fRec118[l195] = 0.0f;
		}
		for (int l196 = 0; (l196 < 2); l196 = (l196 + 1)) {
			fRec151[l196] = 0.0f;
		}
		for (int l197 = 0; (l197 < 2); l197 = (l197 + 1)) {
			fRec150[l197] = 0.0f;
		}
		for (int l198 = 0; (l198 < 2); l198 = (l198 + 1)) {
			fRec149[l198] = 0.0f;
		}
		for (int l199 = 0; (l199 < 3); l199 = (l199 + 1)) {
			fRec152[l199] = 0.0f;
		}
		for (int l200 = 0; (l200 < 3); l200 = (l200 + 1)) {
			fRec117[l200] = 0.0f;
		}
		for (int l201 = 0; (l201 < 3); l201 = (l201 + 1)) {
			fRec116[l201] = 0.0f;
		}
		for (int l202 = 0; (l202 < 3); l202 = (l202 + 1)) {
			fRec115[l202] = 0.0f;
		}
		for (int l203 = 0; (l203 < 2); l203 = (l203 + 1)) {
			fRec153[l203] = 0.0f;
		}
		for (int l204 = 0; (l204 < 5); l204 = (l204 + 1)) {
			fRec158[l204] = 0.0f;
		}
		for (int l205 = 0; (l205 < 2); l205 = (l205 + 1)) {
			iRec160[l205] = 0;
		}
		for (int l206 = 0; (l206 < 2); l206 = (l206 + 1)) {
			fVec56[l206] = 0.0f;
		}
		for (int l207 = 0; (l207 < 2); l207 = (l207 + 1)) {
			fVec57[l207] = 0.0f;
		}
		for (int l208 = 0; (l208 < 2); l208 = (l208 + 1)) {
			iVec58[l208] = 0;
		}
		for (int l209 = 0; (l209 < 2); l209 = (l209 + 1)) {
			iRec161[l209] = 0;
		}
		for (int l210 = 0; (l210 < 2); l210 = (l210 + 1)) {
			fVec59[l210] = 0.0f;
		}
		for (int l211 = 0; (l211 < 2048); l211 = (l211 + 1)) {
			fRec159[l211] = 0.0f;
		}
		for (int l212 = 0; (l212 < 2); l212 = (l212 + 1)) {
			fVec60[l212] = 0.0f;
		}
		for (int l213 = 0; (l213 < 2); l213 = (l213 + 1)) {
			fRec163[l213] = 0.0f;
		}
		for (int l214 = 0; (l214 < 2); l214 = (l214 + 1)) {
			fVec61[l214] = 0.0f;
		}
		for (int l215 = 0; (l215 < 4096); l215 = (l215 + 1)) {
			fVec62[l215] = 0.0f;
		}
		for (int l216 = 0; (l216 < 2); l216 = (l216 + 1)) {
			fRec162[l216] = 0.0f;
		}
		for (int l217 = 0; (l217 < 2); l217 = (l217 + 1)) {
			fRec164[l217] = 0.0f;
		}
		for (int l218 = 0; (l218 < 8192); l218 = (l218 + 1)) {
			fVec63[l218] = 0.0f;
		}
		for (int l219 = 0; (l219 < 2); l219 = (l219 + 1)) {
			fVec64[l219] = 0.0f;
		}
		for (int l220 = 0; (l220 < 2048); l220 = (l220 + 1)) {
			fRec166[l220] = 0.0f;
		}
		for (int l221 = 0; (l221 < 2); l221 = (l221 + 1)) {
			fVec65[l221] = 0.0f;
		}
		for (int l222 = 0; (l222 < 2); l222 = (l222 + 1)) {
			fRec168[l222] = 0.0f;
		}
		for (int l223 = 0; (l223 < 2); l223 = (l223 + 1)) {
			fVec66[l223] = 0.0f;
		}
		for (int l224 = 0; (l224 < 4096); l224 = (l224 + 1)) {
			fVec67[l224] = 0.0f;
		}
		for (int l225 = 0; (l225 < 2); l225 = (l225 + 1)) {
			fRec167[l225] = 0.0f;
		}
		for (int l226 = 0; (l226 < 2); l226 = (l226 + 1)) {
			fRec169[l226] = 0.0f;
		}
		for (int l227 = 0; (l227 < 8192); l227 = (l227 + 1)) {
			fVec68[l227] = 0.0f;
		}
		for (int l228 = 0; (l228 < 2); l228 = (l228 + 1)) {
			fVec69[l228] = 0.0f;
		}
		for (int l229 = 0; (l229 < 2048); l229 = (l229 + 1)) {
			fRec171[l229] = 0.0f;
		}
		for (int l230 = 0; (l230 < 2); l230 = (l230 + 1)) {
			fVec70[l230] = 0.0f;
		}
		for (int l231 = 0; (l231 < 2); l231 = (l231 + 1)) {
			fRec173[l231] = 0.0f;
		}
		for (int l232 = 0; (l232 < 2); l232 = (l232 + 1)) {
			fVec71[l232] = 0.0f;
		}
		for (int l233 = 0; (l233 < 4096); l233 = (l233 + 1)) {
			fVec72[l233] = 0.0f;
		}
		for (int l234 = 0; (l234 < 2); l234 = (l234 + 1)) {
			fRec172[l234] = 0.0f;
		}
		for (int l235 = 0; (l235 < 2); l235 = (l235 + 1)) {
			fRec174[l235] = 0.0f;
		}
		for (int l236 = 0; (l236 < 4096); l236 = (l236 + 1)) {
			fVec73[l236] = 0.0f;
		}
		for (int l237 = 0; (l237 < 2); l237 = (l237 + 1)) {
			fVec74[l237] = 0.0f;
		}
		for (int l238 = 0; (l238 < 2048); l238 = (l238 + 1)) {
			fRec176[l238] = 0.0f;
		}
		for (int l239 = 0; (l239 < 2); l239 = (l239 + 1)) {
			fVec75[l239] = 0.0f;
		}
		for (int l240 = 0; (l240 < 2); l240 = (l240 + 1)) {
			fRec178[l240] = 0.0f;
		}
		for (int l241 = 0; (l241 < 2); l241 = (l241 + 1)) {
			fVec76[l241] = 0.0f;
		}
		for (int l242 = 0; (l242 < 4096); l242 = (l242 + 1)) {
			fVec77[l242] = 0.0f;
		}
		for (int l243 = 0; (l243 < 2); l243 = (l243 + 1)) {
			fRec177[l243] = 0.0f;
		}
		for (int l244 = 0; (l244 < 2); l244 = (l244 + 1)) {
			fRec179[l244] = 0.0f;
		}
		for (int l245 = 0; (l245 < 131072); l245 = (l245 + 1)) {
			fRec157[l245] = 0.0f;
		}
		for (int l246 = 0; (l246 < 2); l246 = (l246 + 1)) {
			fRec183[l246] = 0.0f;
		}
		for (int l247 = 0; (l247 < 2); l247 = (l247 + 1)) {
			fRec182[l247] = 0.0f;
		}
		for (int l248 = 0; (l248 < 2); l248 = (l248 + 1)) {
			fRec181[l248] = 0.0f;
		}
		for (int l249 = 0; (l249 < 3); l249 = (l249 + 1)) {
			fRec184[l249] = 0.0f;
		}
		for (int l250 = 0; (l250 < 3); l250 = (l250 + 1)) {
			fRec156[l250] = 0.0f;
		}
		for (int l251 = 0; (l251 < 3); l251 = (l251 + 1)) {
			fRec155[l251] = 0.0f;
		}
		for (int l252 = 0; (l252 < 3); l252 = (l252 + 1)) {
			fRec154[l252] = 0.0f;
		}
		for (int l253 = 0; (l253 < 2); l253 = (l253 + 1)) {
			fRec197[l253] = 0.0f;
		}
		for (int l254 = 0; (l254 < 2); l254 = (l254 + 1)) {
			fRec196[l254] = 0.0f;
		}
		for (int l255 = 0; (l255 < 32768); l255 = (l255 + 1)) {
			fVec78[l255] = 0.0f;
		}
		for (int l256 = 0; (l256 < 2); l256 = (l256 + 1)) {
			iRec202[l256] = 0;
		}
		for (int l257 = 0; (l257 < 3); l257 = (l257 + 1)) {
			fRec201[l257] = 0.0f;
		}
		for (int l258 = 0; (l258 < 2); l258 = (l258 + 1)) {
			fRec204[l258] = 0.0f;
		}
		for (int l259 = 0; (l259 < 2); l259 = (l259 + 1)) {
			fVec79[l259] = 0.0f;
		}
		for (int l260 = 0; (l260 < 2); l260 = (l260 + 1)) {
			fRec206[l260] = 0.0f;
		}
		for (int l261 = 0; (l261 < 2); l261 = (l261 + 1)) {
			fVec80[l261] = 0.0f;
		}
		for (int l262 = 0; (l262 < 4096); l262 = (l262 + 1)) {
			fVec81[l262] = 0.0f;
		}
		for (int l263 = 0; (l263 < 2); l263 = (l263 + 1)) {
			fRec205[l263] = 0.0f;
		}
		for (int l264 = 0; (l264 < 2); l264 = (l264 + 1)) {
			fRec203[l264] = 0.0f;
		}
		for (int l265 = 0; (l265 < 2); l265 = (l265 + 1)) {
			fRec207[l265] = 0.0f;
		}
		for (int l266 = 0; (l266 < 2); l266 = (l266 + 1)) {
			iRec209[l266] = 0;
		}
		for (int l267 = 0; (l267 < 3); l267 = (l267 + 1)) {
			fRec208[l267] = 0.0f;
		}
		for (int l268 = 0; (l268 < 2); l268 = (l268 + 1)) {
			fRec211[l268] = 0.0f;
		}
		for (int l269 = 0; (l269 < 2); l269 = (l269 + 1)) {
			fVec82[l269] = 0.0f;
		}
		for (int l270 = 0; (l270 < 2); l270 = (l270 + 1)) {
			fRec213[l270] = 0.0f;
		}
		for (int l271 = 0; (l271 < 2); l271 = (l271 + 1)) {
			fVec83[l271] = 0.0f;
		}
		for (int l272 = 0; (l272 < 4096); l272 = (l272 + 1)) {
			fVec84[l272] = 0.0f;
		}
		for (int l273 = 0; (l273 < 2); l273 = (l273 + 1)) {
			fRec212[l273] = 0.0f;
		}
		for (int l274 = 0; (l274 < 2); l274 = (l274 + 1)) {
			fRec210[l274] = 0.0f;
		}
		for (int l275 = 0; (l275 < 2); l275 = (l275 + 1)) {
			fRec214[l275] = 0.0f;
		}
		for (int l276 = 0; (l276 < 2); l276 = (l276 + 1)) {
			iRec216[l276] = 0;
		}
		for (int l277 = 0; (l277 < 3); l277 = (l277 + 1)) {
			fRec215[l277] = 0.0f;
		}
		for (int l278 = 0; (l278 < 2); l278 = (l278 + 1)) {
			fRec218[l278] = 0.0f;
		}
		for (int l279 = 0; (l279 < 2); l279 = (l279 + 1)) {
			fVec85[l279] = 0.0f;
		}
		for (int l280 = 0; (l280 < 2); l280 = (l280 + 1)) {
			fRec220[l280] = 0.0f;
		}
		for (int l281 = 0; (l281 < 2); l281 = (l281 + 1)) {
			fVec86[l281] = 0.0f;
		}
		for (int l282 = 0; (l282 < 4096); l282 = (l282 + 1)) {
			fVec87[l282] = 0.0f;
		}
		for (int l283 = 0; (l283 < 2); l283 = (l283 + 1)) {
			fRec219[l283] = 0.0f;
		}
		for (int l284 = 0; (l284 < 2); l284 = (l284 + 1)) {
			fRec217[l284] = 0.0f;
		}
		for (int l285 = 0; (l285 < 2); l285 = (l285 + 1)) {
			fRec221[l285] = 0.0f;
		}
		for (int l286 = 0; (l286 < 2); l286 = (l286 + 1)) {
			iRec223[l286] = 0;
		}
		for (int l287 = 0; (l287 < 3); l287 = (l287 + 1)) {
			fRec222[l287] = 0.0f;
		}
		for (int l288 = 0; (l288 < 2); l288 = (l288 + 1)) {
			fRec225[l288] = 0.0f;
		}
		for (int l289 = 0; (l289 < 2); l289 = (l289 + 1)) {
			fVec88[l289] = 0.0f;
		}
		for (int l290 = 0; (l290 < 2); l290 = (l290 + 1)) {
			fRec227[l290] = 0.0f;
		}
		for (int l291 = 0; (l291 < 2); l291 = (l291 + 1)) {
			fVec89[l291] = 0.0f;
		}
		for (int l292 = 0; (l292 < 4096); l292 = (l292 + 1)) {
			fVec90[l292] = 0.0f;
		}
		for (int l293 = 0; (l293 < 2); l293 = (l293 + 1)) {
			fRec226[l293] = 0.0f;
		}
		for (int l294 = 0; (l294 < 2); l294 = (l294 + 1)) {
			fRec224[l294] = 0.0f;
		}
		for (int l295 = 0; (l295 < 2); l295 = (l295 + 1)) {
			fRec228[l295] = 0.0f;
		}
		for (int l296 = 0; (l296 < 2); l296 = (l296 + 1)) {
			fRec231[l296] = 0.0f;
		}
		for (int l297 = 0; (l297 < 2); l297 = (l297 + 1)) {
			fRec230[l297] = 0.0f;
		}
		for (int l298 = 0; (l298 < 2); l298 = (l298 + 1)) {
			fRec229[l298] = 0.0f;
		}
		for (int l299 = 0; (l299 < 3); l299 = (l299 + 1)) {
			fRec232[l299] = 0.0f;
		}
		for (int l300 = 0; (l300 < 3); l300 = (l300 + 1)) {
			fRec200[l300] = 0.0f;
		}
		for (int l301 = 0; (l301 < 3); l301 = (l301 + 1)) {
			fRec199[l301] = 0.0f;
		}
		for (int l302 = 0; (l302 < 3); l302 = (l302 + 1)) {
			fRec198[l302] = 0.0f;
		}
		for (int l303 = 0; (l303 < 5); l303 = (l303 + 1)) {
			fRec237[l303] = 0.0f;
		}
		for (int l304 = 0; (l304 < 2); l304 = (l304 + 1)) {
			fVec91[l304] = 0.0f;
		}
		for (int l305 = 0; (l305 < 2048); l305 = (l305 + 1)) {
			fRec238[l305] = 0.0f;
		}
		for (int l306 = 0; (l306 < 2); l306 = (l306 + 1)) {
			fVec92[l306] = 0.0f;
		}
		for (int l307 = 0; (l307 < 2); l307 = (l307 + 1)) {
			fRec240[l307] = 0.0f;
		}
		for (int l308 = 0; (l308 < 2); l308 = (l308 + 1)) {
			fVec93[l308] = 0.0f;
		}
		for (int l309 = 0; (l309 < 4096); l309 = (l309 + 1)) {
			fVec94[l309] = 0.0f;
		}
		for (int l310 = 0; (l310 < 2); l310 = (l310 + 1)) {
			fRec239[l310] = 0.0f;
		}
		for (int l311 = 0; (l311 < 2); l311 = (l311 + 1)) {
			fRec241[l311] = 0.0f;
		}
		for (int l312 = 0; (l312 < 8192); l312 = (l312 + 1)) {
			fVec95[l312] = 0.0f;
		}
		for (int l313 = 0; (l313 < 2); l313 = (l313 + 1)) {
			fVec96[l313] = 0.0f;
		}
		for (int l314 = 0; (l314 < 2048); l314 = (l314 + 1)) {
			fRec243[l314] = 0.0f;
		}
		for (int l315 = 0; (l315 < 2); l315 = (l315 + 1)) {
			fVec97[l315] = 0.0f;
		}
		for (int l316 = 0; (l316 < 2); l316 = (l316 + 1)) {
			fRec245[l316] = 0.0f;
		}
		for (int l317 = 0; (l317 < 2); l317 = (l317 + 1)) {
			fVec98[l317] = 0.0f;
		}
		for (int l318 = 0; (l318 < 4096); l318 = (l318 + 1)) {
			fVec99[l318] = 0.0f;
		}
		for (int l319 = 0; (l319 < 2); l319 = (l319 + 1)) {
			fRec244[l319] = 0.0f;
		}
		for (int l320 = 0; (l320 < 2); l320 = (l320 + 1)) {
			fRec246[l320] = 0.0f;
		}
		for (int l321 = 0; (l321 < 8192); l321 = (l321 + 1)) {
			fVec100[l321] = 0.0f;
		}
		for (int l322 = 0; (l322 < 2); l322 = (l322 + 1)) {
			fVec101[l322] = 0.0f;
		}
		for (int l323 = 0; (l323 < 2048); l323 = (l323 + 1)) {
			fRec248[l323] = 0.0f;
		}
		for (int l324 = 0; (l324 < 2); l324 = (l324 + 1)) {
			fVec102[l324] = 0.0f;
		}
		for (int l325 = 0; (l325 < 2); l325 = (l325 + 1)) {
			fRec250[l325] = 0.0f;
		}
		for (int l326 = 0; (l326 < 2); l326 = (l326 + 1)) {
			fVec103[l326] = 0.0f;
		}
		for (int l327 = 0; (l327 < 4096); l327 = (l327 + 1)) {
			fVec104[l327] = 0.0f;
		}
		for (int l328 = 0; (l328 < 2); l328 = (l328 + 1)) {
			fRec249[l328] = 0.0f;
		}
		for (int l329 = 0; (l329 < 2); l329 = (l329 + 1)) {
			fRec251[l329] = 0.0f;
		}
		for (int l330 = 0; (l330 < 4096); l330 = (l330 + 1)) {
			fVec105[l330] = 0.0f;
		}
		for (int l331 = 0; (l331 < 2); l331 = (l331 + 1)) {
			fVec106[l331] = 0.0f;
		}
		for (int l332 = 0; (l332 < 2048); l332 = (l332 + 1)) {
			fRec253[l332] = 0.0f;
		}
		for (int l333 = 0; (l333 < 2); l333 = (l333 + 1)) {
			fVec107[l333] = 0.0f;
		}
		for (int l334 = 0; (l334 < 2); l334 = (l334 + 1)) {
			fRec255[l334] = 0.0f;
		}
		for (int l335 = 0; (l335 < 2); l335 = (l335 + 1)) {
			fVec108[l335] = 0.0f;
		}
		for (int l336 = 0; (l336 < 4096); l336 = (l336 + 1)) {
			fVec109[l336] = 0.0f;
		}
		for (int l337 = 0; (l337 < 2); l337 = (l337 + 1)) {
			fRec254[l337] = 0.0f;
		}
		for (int l338 = 0; (l338 < 2); l338 = (l338 + 1)) {
			fRec256[l338] = 0.0f;
		}
		for (int l339 = 0; (l339 < 131072); l339 = (l339 + 1)) {
			fRec236[l339] = 0.0f;
		}
		for (int l340 = 0; (l340 < 2); l340 = (l340 + 1)) {
			fRec260[l340] = 0.0f;
		}
		for (int l341 = 0; (l341 < 2); l341 = (l341 + 1)) {
			fRec259[l341] = 0.0f;
		}
		for (int l342 = 0; (l342 < 2); l342 = (l342 + 1)) {
			fRec258[l342] = 0.0f;
		}
		for (int l343 = 0; (l343 < 3); l343 = (l343 + 1)) {
			fRec261[l343] = 0.0f;
		}
		for (int l344 = 0; (l344 < 3); l344 = (l344 + 1)) {
			fRec235[l344] = 0.0f;
		}
		for (int l345 = 0; (l345 < 3); l345 = (l345 + 1)) {
			fRec234[l345] = 0.0f;
		}
		for (int l346 = 0; (l346 < 3); l346 = (l346 + 1)) {
			fRec233[l346] = 0.0f;
		}
		for (int l347 = 0; (l347 < 2); l347 = (l347 + 1)) {
			fRec262[l347] = 0.0f;
		}
		for (int l348 = 0; (l348 < 2); l348 = (l348 + 1)) {
			fRec263[l348] = 0.0f;
		}
		for (int l349 = 0; (l349 < 2); l349 = (l349 + 1)) {
			fVec110[l349] = 0.0f;
		}
		for (int l350 = 0; (l350 < 2); l350 = (l350 + 1)) {
			fVec111[l350] = 0.0f;
		}
		for (int l351 = 0; (l351 < 2); l351 = (l351 + 1)) {
			iRec268[l351] = 0;
		}
		for (int l352 = 0; (l352 < 2); l352 = (l352 + 1)) {
			iVec112[l352] = 0;
		}
		for (int l353 = 0; (l353 < 2); l353 = (l353 + 1)) {
			iRec269[l353] = 0;
		}
		for (int l354 = 0; (l354 < 2); l354 = (l354 + 1)) {
			fRec270[l354] = 0.0f;
		}
		for (int l355 = 0; (l355 < 2); l355 = (l355 + 1)) {
			fRec273[l355] = 0.0f;
		}
		for (int l356 = 0; (l356 < 2); l356 = (l356 + 1)) {
			fRec272[l356] = 0.0f;
		}
		for (int l357 = 0; (l357 < 2); l357 = (l357 + 1)) {
			fRec271[l357] = 0.0f;
		}
		for (int l358 = 0; (l358 < 3); l358 = (l358 + 1)) {
			fRec274[l358] = 0.0f;
		}
		for (int l359 = 0; (l359 < 3); l359 = (l359 + 1)) {
			fRec267[l359] = 0.0f;
		}
		for (int l360 = 0; (l360 < 3); l360 = (l360 + 1)) {
			fRec266[l360] = 0.0f;
		}
		for (int l361 = 0; (l361 < 3); l361 = (l361 + 1)) {
			fRec265[l361] = 0.0f;
		}
		for (int l362 = 0; (l362 < 262144); l362 = (l362 + 1)) {
			fVec113[l362] = 0.0f;
		}
		for (int l363 = 0; (l363 < 2); l363 = (l363 + 1)) {
			fRec275[l363] = 0.0f;
		}
		for (int l364 = 0; (l364 < 3); l364 = (l364 + 1)) {
			fRec264[l364] = 0.0f;
		}
		for (int l365 = 0; (l365 < 2); l365 = (l365 + 1)) {
			fRec276[l365] = 0.0f;
		}
		for (int l366 = 0; (l366 < 2); l366 = (l366 + 1)) {
			fVec114[l366] = 0.0f;
		}
		for (int l367 = 0; (l367 < 2); l367 = (l367 + 1)) {
			fVec115[l367] = 0.0f;
		}
		for (int l368 = 0; (l368 < 2); l368 = (l368 + 1)) {
			iVec116[l368] = 0;
		}
		for (int l369 = 0; (l369 < 2); l369 = (l369 + 1)) {
			iRec281[l369] = 0;
		}
		for (int l370 = 0; (l370 < 2); l370 = (l370 + 1)) {
			iRec282[l370] = 0;
		}
		for (int l371 = 0; (l371 < 2); l371 = (l371 + 1)) {
			iRec283[l371] = 0;
		}
		for (int l372 = 0; (l372 < 2); l372 = (l372 + 1)) {
			fRec287[l372] = 0.0f;
		}
		for (int l373 = 0; (l373 < 128); l373 = (l373 + 1)) {
			fVec117[l373] = 0.0f;
		}
		for (int l374 = 0; (l374 < 2); l374 = (l374 + 1)) {
			fRec285[l374] = 0.0f;
		}
		for (int l375 = 0; (l375 < 2); l375 = (l375 + 1)) {
			fRec288[l375] = 0.0f;
		}
		for (int l376 = 0; (l376 < 3); l376 = (l376 + 1)) {
			fRec291[l376] = 0.0f;
		}
		for (int l377 = 0; (l377 < 3); l377 = (l377 + 1)) {
			fRec290[l377] = 0.0f;
		}
		for (int l378 = 0; (l378 < 2); l378 = (l378 + 1)) {
			iRec292[l378] = 0;
		}
		for (int l379 = 0; (l379 < 3); l379 = (l379 + 1)) {
			fRec289[l379] = 0.0f;
		}
		for (int l380 = 0; (l380 < 3); l380 = (l380 + 1)) {
			fRec293[l380] = 0.0f;
		}
		for (int l381 = 0; (l381 < 3); l381 = (l381 + 1)) {
			fRec294[l381] = 0.0f;
		}
		for (int l382 = 0; (l382 < 3); l382 = (l382 + 1)) {
			fRec295[l382] = 0.0f;
		}
		for (int l383 = 0; (l383 < 3); l383 = (l383 + 1)) {
			fRec296[l383] = 0.0f;
		}
		for (int l384 = 0; (l384 < 3); l384 = (l384 + 1)) {
			fRec297[l384] = 0.0f;
		}
		for (int l385 = 0; (l385 < 3); l385 = (l385 + 1)) {
			fRec298[l385] = 0.0f;
		}
		for (int l386 = 0; (l386 < 3); l386 = (l386 + 1)) {
			fRec299[l386] = 0.0f;
		}
		for (int l387 = 0; (l387 < 3); l387 = (l387 + 1)) {
			fRec300[l387] = 0.0f;
		}
		for (int l388 = 0; (l388 < 3); l388 = (l388 + 1)) {
			fRec301[l388] = 0.0f;
		}
		for (int l389 = 0; (l389 < 3); l389 = (l389 + 1)) {
			fRec302[l389] = 0.0f;
		}
		for (int l390 = 0; (l390 < 3); l390 = (l390 + 1)) {
			fRec303[l390] = 0.0f;
		}
		for (int l391 = 0; (l391 < 3); l391 = (l391 + 1)) {
			fRec304[l391] = 0.0f;
		}
		for (int l392 = 0; (l392 < 3); l392 = (l392 + 1)) {
			fRec305[l392] = 0.0f;
		}
		for (int l393 = 0; (l393 < 3); l393 = (l393 + 1)) {
			fRec306[l393] = 0.0f;
		}
		for (int l394 = 0; (l394 < 3); l394 = (l394 + 1)) {
			fRec307[l394] = 0.0f;
		}
		for (int l395 = 0; (l395 < 3); l395 = (l395 + 1)) {
			fRec308[l395] = 0.0f;
		}
		for (int l396 = 0; (l396 < 3); l396 = (l396 + 1)) {
			fRec309[l396] = 0.0f;
		}
		for (int l397 = 0; (l397 < 3); l397 = (l397 + 1)) {
			fRec310[l397] = 0.0f;
		}
		for (int l398 = 0; (l398 < 3); l398 = (l398 + 1)) {
			fRec311[l398] = 0.0f;
		}
		for (int l399 = 0; (l399 < 3); l399 = (l399 + 1)) {
			fRec312[l399] = 0.0f;
		}
		for (int l400 = 0; (l400 < 3); l400 = (l400 + 1)) {
			fRec313[l400] = 0.0f;
		}
		for (int l401 = 0; (l401 < 3); l401 = (l401 + 1)) {
			fRec314[l401] = 0.0f;
		}
		for (int l402 = 0; (l402 < 3); l402 = (l402 + 1)) {
			fRec315[l402] = 0.0f;
		}
		for (int l403 = 0; (l403 < 3); l403 = (l403 + 1)) {
			fRec316[l403] = 0.0f;
		}
		for (int l404 = 0; (l404 < 3); l404 = (l404 + 1)) {
			fRec317[l404] = 0.0f;
		}
		for (int l405 = 0; (l405 < 3); l405 = (l405 + 1)) {
			fRec318[l405] = 0.0f;
		}
		for (int l406 = 0; (l406 < 3); l406 = (l406 + 1)) {
			fRec319[l406] = 0.0f;
		}
		for (int l407 = 0; (l407 < 3); l407 = (l407 + 1)) {
			fRec320[l407] = 0.0f;
		}
		for (int l408 = 0; (l408 < 3); l408 = (l408 + 1)) {
			fRec321[l408] = 0.0f;
		}
		for (int l409 = 0; (l409 < 3); l409 = (l409 + 1)) {
			fRec322[l409] = 0.0f;
		}
		for (int l410 = 0; (l410 < 3); l410 = (l410 + 1)) {
			fRec323[l410] = 0.0f;
		}
		for (int l411 = 0; (l411 < 3); l411 = (l411 + 1)) {
			fRec324[l411] = 0.0f;
		}
		for (int l412 = 0; (l412 < 3); l412 = (l412 + 1)) {
			fRec325[l412] = 0.0f;
		}
		for (int l413 = 0; (l413 < 3); l413 = (l413 + 1)) {
			fRec326[l413] = 0.0f;
		}
		for (int l414 = 0; (l414 < 3); l414 = (l414 + 1)) {
			fRec327[l414] = 0.0f;
		}
		for (int l415 = 0; (l415 < 3); l415 = (l415 + 1)) {
			fRec328[l415] = 0.0f;
		}
		for (int l416 = 0; (l416 < 3); l416 = (l416 + 1)) {
			fRec329[l416] = 0.0f;
		}
		for (int l417 = 0; (l417 < 3); l417 = (l417 + 1)) {
			fRec330[l417] = 0.0f;
		}
		for (int l418 = 0; (l418 < 3); l418 = (l418 + 1)) {
			fRec331[l418] = 0.0f;
		}
		for (int l419 = 0; (l419 < 3); l419 = (l419 + 1)) {
			fRec332[l419] = 0.0f;
		}
		for (int l420 = 0; (l420 < 3); l420 = (l420 + 1)) {
			fRec333[l420] = 0.0f;
		}
		for (int l421 = 0; (l421 < 3); l421 = (l421 + 1)) {
			fRec334[l421] = 0.0f;
		}
		for (int l422 = 0; (l422 < 3); l422 = (l422 + 1)) {
			fRec335[l422] = 0.0f;
		}
		for (int l423 = 0; (l423 < 3); l423 = (l423 + 1)) {
			fRec336[l423] = 0.0f;
		}
		for (int l424 = 0; (l424 < 3); l424 = (l424 + 1)) {
			fRec337[l424] = 0.0f;
		}
		for (int l425 = 0; (l425 < 3); l425 = (l425 + 1)) {
			fRec338[l425] = 0.0f;
		}
		for (int l426 = 0; (l426 < 3); l426 = (l426 + 1)) {
			fRec339[l426] = 0.0f;
		}
		for (int l427 = 0; (l427 < 3); l427 = (l427 + 1)) {
			fRec340[l427] = 0.0f;
		}
		for (int l428 = 0; (l428 < 3); l428 = (l428 + 1)) {
			fRec341[l428] = 0.0f;
		}
		for (int l429 = 0; (l429 < 2); l429 = (l429 + 1)) {
			fVec118[l429] = 0.0f;
		}
		for (int l430 = 0; (l430 < 128); l430 = (l430 + 1)) {
			fVec119[l430] = 0.0f;
		}
		for (int l431 = 0; (l431 < 2); l431 = (l431 + 1)) {
			fRec286[l431] = 0.0f;
		}
		for (int l432 = 0; (l432 < 2); l432 = (l432 + 1)) {
			fRec342[l432] = 0.0f;
		}
		for (int l433 = 0; (l433 < 2); l433 = (l433 + 1)) {
			fRec345[l433] = 0.0f;
		}
		for (int l434 = 0; (l434 < 2); l434 = (l434 + 1)) {
			fRec344[l434] = 0.0f;
		}
		for (int l435 = 0; (l435 < 2); l435 = (l435 + 1)) {
			fRec343[l435] = 0.0f;
		}
		for (int l436 = 0; (l436 < 3); l436 = (l436 + 1)) {
			fRec346[l436] = 0.0f;
		}
		for (int l437 = 0; (l437 < 3); l437 = (l437 + 1)) {
			fRec280[l437] = 0.0f;
		}
		for (int l438 = 0; (l438 < 3); l438 = (l438 + 1)) {
			fRec279[l438] = 0.0f;
		}
		for (int l439 = 0; (l439 < 3); l439 = (l439 + 1)) {
			fRec278[l439] = 0.0f;
		}
		for (int l440 = 0; (l440 < 262144); l440 = (l440 + 1)) {
			fVec120[l440] = 0.0f;
		}
		for (int l441 = 0; (l441 < 3); l441 = (l441 + 1)) {
			fRec277[l441] = 0.0f;
		}
		for (int l442 = 0; (l442 < 5); l442 = (l442 + 1)) {
			fRec351[l442] = 0.0f;
		}
		for (int l443 = 0; (l443 < 2); l443 = (l443 + 1)) {
			fRec352[l443] = 0.0f;
		}
		for (int l444 = 0; (l444 < 2); l444 = (l444 + 1)) {
			fRec353[l444] = 0.0f;
		}
		for (int l445 = 0; (l445 < 131072); l445 = (l445 + 1)) {
			fRec350[l445] = 0.0f;
		}
		for (int l446 = 0; (l446 < 2); l446 = (l446 + 1)) {
			fRec356[l446] = 0.0f;
		}
		for (int l447 = 0; (l447 < 2); l447 = (l447 + 1)) {
			fRec355[l447] = 0.0f;
		}
		for (int l448 = 0; (l448 < 2); l448 = (l448 + 1)) {
			fRec354[l448] = 0.0f;
		}
		for (int l449 = 0; (l449 < 3); l449 = (l449 + 1)) {
			fRec357[l449] = 0.0f;
		}
		for (int l450 = 0; (l450 < 3); l450 = (l450 + 1)) {
			fRec349[l450] = 0.0f;
		}
		for (int l451 = 0; (l451 < 3); l451 = (l451 + 1)) {
			fRec348[l451] = 0.0f;
		}
		for (int l452 = 0; (l452 < 3); l452 = (l452 + 1)) {
			fRec347[l452] = 0.0f;
		}
		for (int l453 = 0; (l453 < 2048); l453 = (l453 + 1)) {
			fVec121[l453] = 0.0f;
		}
		for (int l454 = 0; (l454 < 2048); l454 = (l454 + 1)) {
			fVec122[l454] = 0.0f;
		}
		for (int l455 = 0; (l455 < 2); l455 = (l455 + 1)) {
			fRec194[l455] = 0.0f;
		}
		for (int l456 = 0; (l456 < 2); l456 = (l456 + 1)) {
			fRec361[l456] = 0.0f;
		}
		for (int l457 = 0; (l457 < 2); l457 = (l457 + 1)) {
			fRec360[l457] = 0.0f;
		}
		for (int l458 = 0; (l458 < 32768); l458 = (l458 + 1)) {
			fVec123[l458] = 0.0f;
		}
		for (int l459 = 0; (l459 < 4096); l459 = (l459 + 1)) {
			fVec124[l459] = 0.0f;
		}
		for (int l460 = 0; (l460 < 2); l460 = (l460 + 1)) {
			fRec358[l460] = 0.0f;
		}
		for (int l461 = 0; (l461 < 2); l461 = (l461 + 1)) {
			fRec365[l461] = 0.0f;
		}
		for (int l462 = 0; (l462 < 2); l462 = (l462 + 1)) {
			fRec364[l462] = 0.0f;
		}
		for (int l463 = 0; (l463 < 16384); l463 = (l463 + 1)) {
			fVec125[l463] = 0.0f;
		}
		for (int l464 = 0; (l464 < 4096); l464 = (l464 + 1)) {
			fVec126[l464] = 0.0f;
		}
		for (int l465 = 0; (l465 < 2); l465 = (l465 + 1)) {
			fRec362[l465] = 0.0f;
		}
		for (int l466 = 0; (l466 < 2); l466 = (l466 + 1)) {
			fRec369[l466] = 0.0f;
		}
		for (int l467 = 0; (l467 < 2); l467 = (l467 + 1)) {
			fRec368[l467] = 0.0f;
		}
		for (int l468 = 0; (l468 < 32768); l468 = (l468 + 1)) {
			fVec127[l468] = 0.0f;
		}
		for (int l469 = 0; (l469 < 4096); l469 = (l469 + 1)) {
			fVec128[l469] = 0.0f;
		}
		for (int l470 = 0; (l470 < 2); l470 = (l470 + 1)) {
			fRec366[l470] = 0.0f;
		}
		for (int l471 = 0; (l471 < 2); l471 = (l471 + 1)) {
			fRec373[l471] = 0.0f;
		}
		for (int l472 = 0; (l472 < 2); l472 = (l472 + 1)) {
			fRec372[l472] = 0.0f;
		}
		for (int l473 = 0; (l473 < 16384); l473 = (l473 + 1)) {
			fVec129[l473] = 0.0f;
		}
		for (int l474 = 0; (l474 < 3); l474 = (l474 + 1)) {
			fRec374[l474] = 0.0f;
		}
		for (int l475 = 0; (l475 < 262144); l475 = (l475 + 1)) {
			fVec130[l475] = 0.0f;
		}
		for (int l476 = 0; (l476 < 3); l476 = (l476 + 1)) {
			fRec375[l476] = 0.0f;
		}
		for (int l477 = 0; (l477 < 5); l477 = (l477 + 1)) {
			fRec380[l477] = 0.0f;
		}
		for (int l478 = 0; (l478 < 2); l478 = (l478 + 1)) {
			fRec381[l478] = 0.0f;
		}
		for (int l479 = 0; (l479 < 2); l479 = (l479 + 1)) {
			fRec382[l479] = 0.0f;
		}
		for (int l480 = 0; (l480 < 131072); l480 = (l480 + 1)) {
			fRec379[l480] = 0.0f;
		}
		for (int l481 = 0; (l481 < 2); l481 = (l481 + 1)) {
			fRec385[l481] = 0.0f;
		}
		for (int l482 = 0; (l482 < 2); l482 = (l482 + 1)) {
			fRec384[l482] = 0.0f;
		}
		for (int l483 = 0; (l483 < 2); l483 = (l483 + 1)) {
			fRec383[l483] = 0.0f;
		}
		for (int l484 = 0; (l484 < 3); l484 = (l484 + 1)) {
			fRec386[l484] = 0.0f;
		}
		for (int l485 = 0; (l485 < 3); l485 = (l485 + 1)) {
			fRec378[l485] = 0.0f;
		}
		for (int l486 = 0; (l486 < 3); l486 = (l486 + 1)) {
			fRec377[l486] = 0.0f;
		}
		for (int l487 = 0; (l487 < 3); l487 = (l487 + 1)) {
			fRec376[l487] = 0.0f;
		}
		for (int l488 = 0; (l488 < 2048); l488 = (l488 + 1)) {
			fVec131[l488] = 0.0f;
		}
		for (int l489 = 0; (l489 < 2048); l489 = (l489 + 1)) {
			fVec132[l489] = 0.0f;
		}
		for (int l490 = 0; (l490 < 2); l490 = (l490 + 1)) {
			fRec370[l490] = 0.0f;
		}
		for (int l491 = 0; (l491 < 2); l491 = (l491 + 1)) {
			fRec390[l491] = 0.0f;
		}
		for (int l492 = 0; (l492 < 2); l492 = (l492 + 1)) {
			fRec389[l492] = 0.0f;
		}
		for (int l493 = 0; (l493 < 16384); l493 = (l493 + 1)) {
			fVec133[l493] = 0.0f;
		}
		for (int l494 = 0; (l494 < 4096); l494 = (l494 + 1)) {
			fVec134[l494] = 0.0f;
		}
		for (int l495 = 0; (l495 < 2); l495 = (l495 + 1)) {
			fRec387[l495] = 0.0f;
		}
		for (int l496 = 0; (l496 < 2); l496 = (l496 + 1)) {
			fRec394[l496] = 0.0f;
		}
		for (int l497 = 0; (l497 < 2); l497 = (l497 + 1)) {
			fRec393[l497] = 0.0f;
		}
		for (int l498 = 0; (l498 < 16384); l498 = (l498 + 1)) {
			fVec135[l498] = 0.0f;
		}
		for (int l499 = 0; (l499 < 4096); l499 = (l499 + 1)) {
			fVec136[l499] = 0.0f;
		}
		for (int l500 = 0; (l500 < 2); l500 = (l500 + 1)) {
			fRec391[l500] = 0.0f;
		}
		for (int l501 = 0; (l501 < 2); l501 = (l501 + 1)) {
			fRec398[l501] = 0.0f;
		}
		for (int l502 = 0; (l502 < 2); l502 = (l502 + 1)) {
			fRec397[l502] = 0.0f;
		}
		for (int l503 = 0; (l503 < 16384); l503 = (l503 + 1)) {
			fVec137[l503] = 0.0f;
		}
		for (int l504 = 0; (l504 < 2048); l504 = (l504 + 1)) {
			fVec138[l504] = 0.0f;
		}
		for (int l505 = 0; (l505 < 2); l505 = (l505 + 1)) {
			fRec395[l505] = 0.0f;
		}
		for (int l506 = 0; (l506 < 3); l506 = (l506 + 1)) {
			fRec186[l506] = 0.0f;
		}
		for (int l507 = 0; (l507 < 3); l507 = (l507 + 1)) {
			fRec187[l507] = 0.0f;
		}
		for (int l508 = 0; (l508 < 3); l508 = (l508 + 1)) {
			fRec188[l508] = 0.0f;
		}
		for (int l509 = 0; (l509 < 3); l509 = (l509 + 1)) {
			fRec189[l509] = 0.0f;
		}
		for (int l510 = 0; (l510 < 3); l510 = (l510 + 1)) {
			fRec190[l510] = 0.0f;
		}
		for (int l511 = 0; (l511 < 3); l511 = (l511 + 1)) {
			fRec191[l511] = 0.0f;
		}
		for (int l512 = 0; (l512 < 3); l512 = (l512 + 1)) {
			fRec192[l512] = 0.0f;
		}
		for (int l513 = 0; (l513 < 3); l513 = (l513 + 1)) {
			fRec193[l513] = 0.0f;
		}
		for (int l514 = 0; (l514 < 3); l514 = (l514 + 1)) {
			fRec185[l514] = 0.0f;
		}
		for (int l515 = 0; (l515 < 2); l515 = (l515 + 1)) {
			fRec399[l515] = 0.0f;
		}
		for (int l516 = 0; (l516 < 3); l516 = (l516 + 1)) {
			fRec7[l516] = 0.0f;
		}
		for (int l517 = 0; (l517 < 2); l517 = (l517 + 1)) {
			fRec412[l517] = 0.0f;
		}
		for (int l518 = 0; (l518 < 2); l518 = (l518 + 1)) {
			fRec411[l518] = 0.0f;
		}
		for (int l519 = 0; (l519 < 32768); l519 = (l519 + 1)) {
			fVec139[l519] = 0.0f;
		}
		for (int l520 = 0; (l520 < 5); l520 = (l520 + 1)) {
			fRec417[l520] = 0.0f;
		}
		for (int l521 = 0; (l521 < 2); l521 = (l521 + 1)) {
			fRec418[l521] = 0.0f;
		}
		for (int l522 = 0; (l522 < 2); l522 = (l522 + 1)) {
			fRec419[l522] = 0.0f;
		}
		for (int l523 = 0; (l523 < 131072); l523 = (l523 + 1)) {
			fRec416[l523] = 0.0f;
		}
		for (int l524 = 0; (l524 < 2); l524 = (l524 + 1)) {
			fRec422[l524] = 0.0f;
		}
		for (int l525 = 0; (l525 < 2); l525 = (l525 + 1)) {
			fRec421[l525] = 0.0f;
		}
		for (int l526 = 0; (l526 < 2); l526 = (l526 + 1)) {
			fRec420[l526] = 0.0f;
		}
		for (int l527 = 0; (l527 < 3); l527 = (l527 + 1)) {
			fRec423[l527] = 0.0f;
		}
		for (int l528 = 0; (l528 < 3); l528 = (l528 + 1)) {
			fRec415[l528] = 0.0f;
		}
		for (int l529 = 0; (l529 < 3); l529 = (l529 + 1)) {
			fRec414[l529] = 0.0f;
		}
		for (int l530 = 0; (l530 < 3); l530 = (l530 + 1)) {
			fRec413[l530] = 0.0f;
		}
		for (int l531 = 0; (l531 < 2048); l531 = (l531 + 1)) {
			fVec140[l531] = 0.0f;
		}
		for (int l532 = 0; (l532 < 2048); l532 = (l532 + 1)) {
			fVec141[l532] = 0.0f;
		}
		for (int l533 = 0; (l533 < 2); l533 = (l533 + 1)) {
			fRec409[l533] = 0.0f;
		}
		for (int l534 = 0; (l534 < 2); l534 = (l534 + 1)) {
			fRec427[l534] = 0.0f;
		}
		for (int l535 = 0; (l535 < 2); l535 = (l535 + 1)) {
			fRec426[l535] = 0.0f;
		}
		for (int l536 = 0; (l536 < 32768); l536 = (l536 + 1)) {
			fVec142[l536] = 0.0f;
		}
		for (int l537 = 0; (l537 < 4096); l537 = (l537 + 1)) {
			fVec143[l537] = 0.0f;
		}
		for (int l538 = 0; (l538 < 2); l538 = (l538 + 1)) {
			fRec424[l538] = 0.0f;
		}
		for (int l539 = 0; (l539 < 2); l539 = (l539 + 1)) {
			fRec431[l539] = 0.0f;
		}
		for (int l540 = 0; (l540 < 2); l540 = (l540 + 1)) {
			fRec430[l540] = 0.0f;
		}
		for (int l541 = 0; (l541 < 16384); l541 = (l541 + 1)) {
			fVec144[l541] = 0.0f;
		}
		for (int l542 = 0; (l542 < 4096); l542 = (l542 + 1)) {
			fVec145[l542] = 0.0f;
		}
		for (int l543 = 0; (l543 < 2); l543 = (l543 + 1)) {
			fRec428[l543] = 0.0f;
		}
		for (int l544 = 0; (l544 < 2); l544 = (l544 + 1)) {
			fRec435[l544] = 0.0f;
		}
		for (int l545 = 0; (l545 < 2); l545 = (l545 + 1)) {
			fRec434[l545] = 0.0f;
		}
		for (int l546 = 0; (l546 < 32768); l546 = (l546 + 1)) {
			fVec146[l546] = 0.0f;
		}
		for (int l547 = 0; (l547 < 4096); l547 = (l547 + 1)) {
			fVec147[l547] = 0.0f;
		}
		for (int l548 = 0; (l548 < 2); l548 = (l548 + 1)) {
			fRec432[l548] = 0.0f;
		}
		for (int l549 = 0; (l549 < 2); l549 = (l549 + 1)) {
			fRec439[l549] = 0.0f;
		}
		for (int l550 = 0; (l550 < 2); l550 = (l550 + 1)) {
			fRec438[l550] = 0.0f;
		}
		for (int l551 = 0; (l551 < 16384); l551 = (l551 + 1)) {
			fVec148[l551] = 0.0f;
		}
		for (int l552 = 0; (l552 < 5); l552 = (l552 + 1)) {
			fRec444[l552] = 0.0f;
		}
		for (int l553 = 0; (l553 < 2); l553 = (l553 + 1)) {
			fRec445[l553] = 0.0f;
		}
		for (int l554 = 0; (l554 < 2); l554 = (l554 + 1)) {
			fRec446[l554] = 0.0f;
		}
		for (int l555 = 0; (l555 < 131072); l555 = (l555 + 1)) {
			fRec443[l555] = 0.0f;
		}
		for (int l556 = 0; (l556 < 2); l556 = (l556 + 1)) {
			fRec449[l556] = 0.0f;
		}
		for (int l557 = 0; (l557 < 2); l557 = (l557 + 1)) {
			fRec448[l557] = 0.0f;
		}
		for (int l558 = 0; (l558 < 2); l558 = (l558 + 1)) {
			fRec447[l558] = 0.0f;
		}
		for (int l559 = 0; (l559 < 3); l559 = (l559 + 1)) {
			fRec450[l559] = 0.0f;
		}
		for (int l560 = 0; (l560 < 3); l560 = (l560 + 1)) {
			fRec442[l560] = 0.0f;
		}
		for (int l561 = 0; (l561 < 3); l561 = (l561 + 1)) {
			fRec441[l561] = 0.0f;
		}
		for (int l562 = 0; (l562 < 3); l562 = (l562 + 1)) {
			fRec440[l562] = 0.0f;
		}
		for (int l563 = 0; (l563 < 2048); l563 = (l563 + 1)) {
			fVec149[l563] = 0.0f;
		}
		for (int l564 = 0; (l564 < 2048); l564 = (l564 + 1)) {
			fVec150[l564] = 0.0f;
		}
		for (int l565 = 0; (l565 < 2); l565 = (l565 + 1)) {
			fRec436[l565] = 0.0f;
		}
		for (int l566 = 0; (l566 < 2); l566 = (l566 + 1)) {
			fRec454[l566] = 0.0f;
		}
		for (int l567 = 0; (l567 < 2); l567 = (l567 + 1)) {
			fRec453[l567] = 0.0f;
		}
		for (int l568 = 0; (l568 < 16384); l568 = (l568 + 1)) {
			fVec151[l568] = 0.0f;
		}
		for (int l569 = 0; (l569 < 4096); l569 = (l569 + 1)) {
			fVec152[l569] = 0.0f;
		}
		for (int l570 = 0; (l570 < 2); l570 = (l570 + 1)) {
			fRec451[l570] = 0.0f;
		}
		for (int l571 = 0; (l571 < 2); l571 = (l571 + 1)) {
			fRec458[l571] = 0.0f;
		}
		for (int l572 = 0; (l572 < 2); l572 = (l572 + 1)) {
			fRec457[l572] = 0.0f;
		}
		for (int l573 = 0; (l573 < 16384); l573 = (l573 + 1)) {
			fVec153[l573] = 0.0f;
		}
		for (int l574 = 0; (l574 < 4096); l574 = (l574 + 1)) {
			fVec154[l574] = 0.0f;
		}
		for (int l575 = 0; (l575 < 2); l575 = (l575 + 1)) {
			fRec455[l575] = 0.0f;
		}
		for (int l576 = 0; (l576 < 2); l576 = (l576 + 1)) {
			fRec462[l576] = 0.0f;
		}
		for (int l577 = 0; (l577 < 2); l577 = (l577 + 1)) {
			fRec461[l577] = 0.0f;
		}
		for (int l578 = 0; (l578 < 16384); l578 = (l578 + 1)) {
			fVec155[l578] = 0.0f;
		}
		for (int l579 = 0; (l579 < 2048); l579 = (l579 + 1)) {
			fVec156[l579] = 0.0f;
		}
		for (int l580 = 0; (l580 < 2); l580 = (l580 + 1)) {
			fRec459[l580] = 0.0f;
		}
		for (int l581 = 0; (l581 < 3); l581 = (l581 + 1)) {
			fRec401[l581] = 0.0f;
		}
		for (int l582 = 0; (l582 < 3); l582 = (l582 + 1)) {
			fRec402[l582] = 0.0f;
		}
		for (int l583 = 0; (l583 < 3); l583 = (l583 + 1)) {
			fRec403[l583] = 0.0f;
		}
		for (int l584 = 0; (l584 < 3); l584 = (l584 + 1)) {
			fRec404[l584] = 0.0f;
		}
		for (int l585 = 0; (l585 < 3); l585 = (l585 + 1)) {
			fRec405[l585] = 0.0f;
		}
		for (int l586 = 0; (l586 < 3); l586 = (l586 + 1)) {
			fRec406[l586] = 0.0f;
		}
		for (int l587 = 0; (l587 < 3); l587 = (l587 + 1)) {
			fRec407[l587] = 0.0f;
		}
		for (int l588 = 0; (l588 < 3); l588 = (l588 + 1)) {
			fRec408[l588] = 0.0f;
		}
		for (int l589 = 0; (l589 < 3); l589 = (l589 + 1)) {
			fRec400[l589] = 0.0f;
		}
		for (int l590 = 0; (l590 < 2); l590 = (l590 + 1)) {
			fRec463[l590] = 0.0f;
		}
		for (int l591 = 0; (l591 < 2); l591 = (l591 + 1)) {
			iVec157[l591] = 0;
		}
		for (int l592 = 0; (l592 < 2); l592 = (l592 + 1)) {
			fVec158[l592] = 0.0f;
		}
		for (int l593 = 0; (l593 < 2); l593 = (l593 + 1)) {
			fVec159[l593] = 0.0f;
		}
		for (int l594 = 0; (l594 < 2); l594 = (l594 + 1)) {
			iRec467[l594] = 0;
		}
		for (int l595 = 0; (l595 < 2); l595 = (l595 + 1)) {
			fRec468[l595] = 0.0f;
		}
		for (int l596 = 0; (l596 < 2); l596 = (l596 + 1)) {
			fRec471[l596] = 0.0f;
		}
		for (int l597 = 0; (l597 < 2); l597 = (l597 + 1)) {
			fRec470[l597] = 0.0f;
		}
		for (int l598 = 0; (l598 < 2); l598 = (l598 + 1)) {
			fRec469[l598] = 0.0f;
		}
		for (int l599 = 0; (l599 < 3); l599 = (l599 + 1)) {
			fRec472[l599] = 0.0f;
		}
		for (int l600 = 0; (l600 < 3); l600 = (l600 + 1)) {
			fRec466[l600] = 0.0f;
		}
		for (int l601 = 0; (l601 < 3); l601 = (l601 + 1)) {
			fRec465[l601] = 0.0f;
		}
		for (int l602 = 0; (l602 < 3); l602 = (l602 + 1)) {
			fRec464[l602] = 0.0f;
		}
		for (int l603 = 0; (l603 < 2); l603 = (l603 + 1)) {
			fRec473[l603] = 0.0f;
		}
		for (int l604 = 0; (l604 < 2); l604 = (l604 + 1)) {
			fVec160[l604] = 0.0f;
		}
		for (int l605 = 0; (l605 < 2); l605 = (l605 + 1)) {
			fVec161[l605] = 0.0f;
		}
		for (int l606 = 0; (l606 < 2); l606 = (l606 + 1)) {
			iRec478[l606] = 0;
		}
		for (int l607 = 0; (l607 < 2); l607 = (l607 + 1)) {
			fRec479[l607] = 0.0f;
		}
		for (int l608 = 0; (l608 < 2); l608 = (l608 + 1)) {
			fRec482[l608] = 0.0f;
		}
		for (int l609 = 0; (l609 < 2); l609 = (l609 + 1)) {
			fRec481[l609] = 0.0f;
		}
		for (int l610 = 0; (l610 < 2); l610 = (l610 + 1)) {
			fRec480[l610] = 0.0f;
		}
		for (int l611 = 0; (l611 < 3); l611 = (l611 + 1)) {
			fRec483[l611] = 0.0f;
		}
		for (int l612 = 0; (l612 < 3); l612 = (l612 + 1)) {
			fRec477[l612] = 0.0f;
		}
		for (int l613 = 0; (l613 < 3); l613 = (l613 + 1)) {
			fRec476[l613] = 0.0f;
		}
		for (int l614 = 0; (l614 < 3); l614 = (l614 + 1)) {
			fRec475[l614] = 0.0f;
		}
		for (int l615 = 0; (l615 < 262144); l615 = (l615 + 1)) {
			fVec162[l615] = 0.0f;
		}
		for (int l616 = 0; (l616 < 3); l616 = (l616 + 1)) {
			fRec474[l616] = 0.0f;
		}
		for (int l617 = 0; (l617 < 2); l617 = (l617 + 1)) {
			fRec484[l617] = 0.0f;
		}
		for (int l618 = 0; (l618 < 2); l618 = (l618 + 1)) {
			fRec485[l618] = 0.0f;
		}
		for (int l619 = 0; (l619 < 2); l619 = (l619 + 1)) {
			fRec487[l619] = 0.0f;
		}
		for (int l620 = 0; (l620 < 3); l620 = (l620 + 1)) {
			fRec489[l620] = 0.0f;
		}
		for (int l621 = 0; (l621 < 3); l621 = (l621 + 1)) {
			fRec488[l621] = 0.0f;
		}
		for (int l622 = 0; (l622 < 2); l622 = (l622 + 1)) {
			fRec492[l622] = 0.0f;
		}
		for (int l623 = 0; (l623 < 2); l623 = (l623 + 1)) {
			fVec163[l623] = 0.0f;
		}
		for (int l624 = 0; (l624 < 2); l624 = (l624 + 1)) {
			fRec491[l624] = 0.0f;
		}
		for (int l625 = 0; (l625 < 2); l625 = (l625 + 1)) {
			fVec164[l625] = 0.0f;
		}
		for (int l626 = 0; (l626 < 256); l626 = (l626 + 1)) {
			fVec165[l626] = 0.0f;
		}
		for (int l627 = 0; (l627 < 2); l627 = (l627 + 1)) {
			fRec490[l627] = 0.0f;
		}
		for (int l628 = 0; (l628 < 2); l628 = (l628 + 1)) {
			fRec493[l628] = 0.0f;
		}
		for (int l629 = 0; (l629 < 3); l629 = (l629 + 1)) {
			fRec495[l629] = 0.0f;
		}
		for (int l630 = 0; (l630 < 2); l630 = (l630 + 1)) {
			fVec166[l630] = 0.0f;
		}
		for (int l631 = 0; (l631 < 2); l631 = (l631 + 1)) {
			iVec167[l631] = 0;
		}
		for (int l632 = 0; (l632 < 2); l632 = (l632 + 1)) {
			iRec496[l632] = 0;
		}
		for (int l633 = 0; (l633 < 3); l633 = (l633 + 1)) {
			fRec494[l633] = 0.0f;
		}
		for (int l634 = 0; (l634 < 3); l634 = (l634 + 1)) {
			fRec497[l634] = 0.0f;
		}
		for (int l635 = 0; (l635 < 3); l635 = (l635 + 1)) {
			fRec498[l635] = 0.0f;
		}
		for (int l636 = 0; (l636 < 3); l636 = (l636 + 1)) {
			fRec499[l636] = 0.0f;
		}
		for (int l637 = 0; (l637 < 3); l637 = (l637 + 1)) {
			fRec500[l637] = 0.0f;
		}
		for (int l638 = 0; (l638 < 3); l638 = (l638 + 1)) {
			fRec501[l638] = 0.0f;
		}
		for (int l639 = 0; (l639 < 3); l639 = (l639 + 1)) {
			fRec502[l639] = 0.0f;
		}
		for (int l640 = 0; (l640 < 3); l640 = (l640 + 1)) {
			fRec503[l640] = 0.0f;
		}
		for (int l641 = 0; (l641 < 3); l641 = (l641 + 1)) {
			fRec504[l641] = 0.0f;
		}
		for (int l642 = 0; (l642 < 3); l642 = (l642 + 1)) {
			fRec505[l642] = 0.0f;
		}
		for (int l643 = 0; (l643 < 3); l643 = (l643 + 1)) {
			fRec506[l643] = 0.0f;
		}
		for (int l644 = 0; (l644 < 3); l644 = (l644 + 1)) {
			fRec507[l644] = 0.0f;
		}
		for (int l645 = 0; (l645 < 3); l645 = (l645 + 1)) {
			fRec508[l645] = 0.0f;
		}
		for (int l646 = 0; (l646 < 3); l646 = (l646 + 1)) {
			fRec509[l646] = 0.0f;
		}
		for (int l647 = 0; (l647 < 3); l647 = (l647 + 1)) {
			fRec510[l647] = 0.0f;
		}
		for (int l648 = 0; (l648 < 3); l648 = (l648 + 1)) {
			fRec511[l648] = 0.0f;
		}
		for (int l649 = 0; (l649 < 3); l649 = (l649 + 1)) {
			fRec512[l649] = 0.0f;
		}
		for (int l650 = 0; (l650 < 3); l650 = (l650 + 1)) {
			fRec513[l650] = 0.0f;
		}
		for (int l651 = 0; (l651 < 3); l651 = (l651 + 1)) {
			fRec514[l651] = 0.0f;
		}
		for (int l652 = 0; (l652 < 3); l652 = (l652 + 1)) {
			fRec515[l652] = 0.0f;
		}
		for (int l653 = 0; (l653 < 3); l653 = (l653 + 1)) {
			fRec516[l653] = 0.0f;
		}
		for (int l654 = 0; (l654 < 3); l654 = (l654 + 1)) {
			fRec517[l654] = 0.0f;
		}
		for (int l655 = 0; (l655 < 3); l655 = (l655 + 1)) {
			fRec518[l655] = 0.0f;
		}
		for (int l656 = 0; (l656 < 3); l656 = (l656 + 1)) {
			fRec519[l656] = 0.0f;
		}
		for (int l657 = 0; (l657 < 3); l657 = (l657 + 1)) {
			fRec520[l657] = 0.0f;
		}
		for (int l658 = 0; (l658 < 3); l658 = (l658 + 1)) {
			fRec521[l658] = 0.0f;
		}
		for (int l659 = 0; (l659 < 3); l659 = (l659 + 1)) {
			fRec522[l659] = 0.0f;
		}
		for (int l660 = 0; (l660 < 3); l660 = (l660 + 1)) {
			fRec523[l660] = 0.0f;
		}
		for (int l661 = 0; (l661 < 3); l661 = (l661 + 1)) {
			fRec524[l661] = 0.0f;
		}
		for (int l662 = 0; (l662 < 3); l662 = (l662 + 1)) {
			fRec525[l662] = 0.0f;
		}
		for (int l663 = 0; (l663 < 3); l663 = (l663 + 1)) {
			fRec526[l663] = 0.0f;
		}
		for (int l664 = 0; (l664 < 3); l664 = (l664 + 1)) {
			fRec527[l664] = 0.0f;
		}
		for (int l665 = 0; (l665 < 3); l665 = (l665 + 1)) {
			fRec528[l665] = 0.0f;
		}
		for (int l666 = 0; (l666 < 3); l666 = (l666 + 1)) {
			fRec529[l666] = 0.0f;
		}
		for (int l667 = 0; (l667 < 3); l667 = (l667 + 1)) {
			fRec530[l667] = 0.0f;
		}
		for (int l668 = 0; (l668 < 3); l668 = (l668 + 1)) {
			fRec531[l668] = 0.0f;
		}
		for (int l669 = 0; (l669 < 3); l669 = (l669 + 1)) {
			fRec532[l669] = 0.0f;
		}
		for (int l670 = 0; (l670 < 3); l670 = (l670 + 1)) {
			fRec533[l670] = 0.0f;
		}
		for (int l671 = 0; (l671 < 3); l671 = (l671 + 1)) {
			fRec534[l671] = 0.0f;
		}
		for (int l672 = 0; (l672 < 3); l672 = (l672 + 1)) {
			fRec535[l672] = 0.0f;
		}
		for (int l673 = 0; (l673 < 3); l673 = (l673 + 1)) {
			fRec536[l673] = 0.0f;
		}
		for (int l674 = 0; (l674 < 3); l674 = (l674 + 1)) {
			fRec537[l674] = 0.0f;
		}
		for (int l675 = 0; (l675 < 3); l675 = (l675 + 1)) {
			fRec538[l675] = 0.0f;
		}
		for (int l676 = 0; (l676 < 3); l676 = (l676 + 1)) {
			fRec539[l676] = 0.0f;
		}
		for (int l677 = 0; (l677 < 3); l677 = (l677 + 1)) {
			fRec540[l677] = 0.0f;
		}
		for (int l678 = 0; (l678 < 3); l678 = (l678 + 1)) {
			fRec541[l678] = 0.0f;
		}
		for (int l679 = 0; (l679 < 3); l679 = (l679 + 1)) {
			fRec542[l679] = 0.0f;
		}
		for (int l680 = 0; (l680 < 3); l680 = (l680 + 1)) {
			fRec543[l680] = 0.0f;
		}
		for (int l681 = 0; (l681 < 3); l681 = (l681 + 1)) {
			fRec544[l681] = 0.0f;
		}
		for (int l682 = 0; (l682 < 3); l682 = (l682 + 1)) {
			fRec545[l682] = 0.0f;
		}
		for (int l683 = 0; (l683 < 2); l683 = (l683 + 1)) {
			fRec548[l683] = 0.0f;
		}
		for (int l684 = 0; (l684 < 2); l684 = (l684 + 1)) {
			fRec547[l684] = 0.0f;
		}
		for (int l685 = 0; (l685 < 2); l685 = (l685 + 1)) {
			fRec546[l685] = 0.0f;
		}
		for (int l686 = 0; (l686 < 2); l686 = (l686 + 1)) {
			fRec551[l686] = 0.0f;
		}
		for (int l687 = 0; (l687 < 2); l687 = (l687 + 1)) {
			fRec550[l687] = 0.0f;
		}
		for (int l688 = 0; (l688 < 2); l688 = (l688 + 1)) {
			fRec549[l688] = 0.0f;
		}
		for (int l689 = 0; (l689 < 3); l689 = (l689 + 1)) {
			fRec552[l689] = 0.0f;
		}
		for (int l690 = 0; (l690 < 3); l690 = (l690 + 1)) {
			fRec4[l690] = 0.0f;
		}
		for (int l691 = 0; (l691 < 3); l691 = (l691 + 1)) {
			fRec3[l691] = 0.0f;
		}
		for (int l692 = 0; (l692 < 3); l692 = (l692 + 1)) {
			fRec2[l692] = 0.0f;
		}
		for (int l693 = 0; (l693 < 2); l693 = (l693 + 1)) {
			fRec553[l693] = 0.0f;
		}
		for (int l694 = 0; (l694 < 3); l694 = (l694 + 1)) {
			fRec1[l694] = 0.0f;
		}
		for (int l695 = 0; (l695 < 2); l695 = (l695 + 1)) {
			fRec556[l695] = 0.0f;
		}
		for (int l696 = 0; (l696 < 2); l696 = (l696 + 1)) {
			fRec555[l696] = 0.0f;
		}
		for (int l697 = 0; (l697 < 2); l697 = (l697 + 1)) {
			fRec554[l697] = 0.0f;
		}
		for (int l698 = 0; (l698 < 2); l698 = (l698 + 1)) {
			fRec557[l698] = 0.0f;
		}
		for (int l699 = 0; (l699 < 5); l699 = (l699 + 1)) {
			fRec567[l699] = 0.0f;
		}
		for (int l700 = 0; (l700 < 2); l700 = (l700 + 1)) {
			fRec568[l700] = 0.0f;
		}
		for (int l701 = 0; (l701 < 2); l701 = (l701 + 1)) {
			fRec569[l701] = 0.0f;
		}
		for (int l702 = 0; (l702 < 131072); l702 = (l702 + 1)) {
			fRec566[l702] = 0.0f;
		}
		for (int l703 = 0; (l703 < 2); l703 = (l703 + 1)) {
			fRec572[l703] = 0.0f;
		}
		for (int l704 = 0; (l704 < 2); l704 = (l704 + 1)) {
			fRec571[l704] = 0.0f;
		}
		for (int l705 = 0; (l705 < 2); l705 = (l705 + 1)) {
			fRec570[l705] = 0.0f;
		}
		for (int l706 = 0; (l706 < 3); l706 = (l706 + 1)) {
			fRec573[l706] = 0.0f;
		}
		for (int l707 = 0; (l707 < 3); l707 = (l707 + 1)) {
			fRec565[l707] = 0.0f;
		}
		for (int l708 = 0; (l708 < 3); l708 = (l708 + 1)) {
			fRec564[l708] = 0.0f;
		}
		for (int l709 = 0; (l709 < 3); l709 = (l709 + 1)) {
			fRec563[l709] = 0.0f;
		}
		for (int l710 = 0; (l710 < 3); l710 = (l710 + 1)) {
			fRec574[l710] = 0.0f;
		}
		for (int l711 = 0; (l711 < 3); l711 = (l711 + 1)) {
			fRec562[l711] = 0.0f;
		}
		for (int l712 = 0; (l712 < 3); l712 = (l712 + 1)) {
			fRec575[l712] = 0.0f;
		}
		for (int l713 = 0; (l713 < 262144); l713 = (l713 + 1)) {
			fVec168[l713] = 0.0f;
		}
		for (int l714 = 0; (l714 < 3); l714 = (l714 + 1)) {
			fRec576[l714] = 0.0f;
		}
		for (int l715 = 0; (l715 < 2); l715 = (l715 + 1)) {
			fRec577[l715] = 0.0f;
		}
		for (int l716 = 0; (l716 < 2); l716 = (l716 + 1)) {
			fRec580[l716] = 0.0f;
		}
		for (int l717 = 0; (l717 < 2); l717 = (l717 + 1)) {
			fRec579[l717] = 0.0f;
		}
		for (int l718 = 0; (l718 < 2); l718 = (l718 + 1)) {
			fRec578[l718] = 0.0f;
		}
		for (int l719 = 0; (l719 < 2); l719 = (l719 + 1)) {
			fRec583[l719] = 0.0f;
		}
		for (int l720 = 0; (l720 < 2); l720 = (l720 + 1)) {
			fRec582[l720] = 0.0f;
		}
		for (int l721 = 0; (l721 < 2); l721 = (l721 + 1)) {
			fRec581[l721] = 0.0f;
		}
		for (int l722 = 0; (l722 < 3); l722 = (l722 + 1)) {
			fRec584[l722] = 0.0f;
		}
		for (int l723 = 0; (l723 < 3); l723 = (l723 + 1)) {
			fRec561[l723] = 0.0f;
		}
		for (int l724 = 0; (l724 < 3); l724 = (l724 + 1)) {
			fRec560[l724] = 0.0f;
		}
		for (int l725 = 0; (l725 < 3); l725 = (l725 + 1)) {
			fRec559[l725] = 0.0f;
		}
		for (int l726 = 0; (l726 < 3); l726 = (l726 + 1)) {
			fRec558[l726] = 0.0f;
		}
		for (int l727 = 0; (l727 < 2); l727 = (l727 + 1)) {
			fRec587[l727] = 0.0f;
		}
		for (int l728 = 0; (l728 < 2); l728 = (l728 + 1)) {
			fRec586[l728] = 0.0f;
		}
		for (int l729 = 0; (l729 < 2); l729 = (l729 + 1)) {
			fRec585[l729] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("GaitSoni");
		ui_interface->addSoundfile("CR_SMPL", "{'D:\\GaitSonification\\Drum Samples\\Final Library\\CR_V1.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\CR_V2.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\CR_V3.wav'}", &fSoundfile6);
		ui_interface->addSoundfile("HH_SMPL_V1", "{'D:\\GaitSonification\\Drum Samples\\Final Library\\HH_V1_1.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\HH_V1_2.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\HH_V1_3.wav'}", &fSoundfile3);
		ui_interface->addSoundfile("HH_SMPL_V2", "{'D:\\GaitSonification\\Drum Samples\\Final Library\\HH_V2_1.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\HH_V2_2.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\HH_V2_3.wav'}", &fSoundfile4);
		ui_interface->addSoundfile("K_SMPL", "{'D:\\GaitSonification\\Drum Samples\\Final Library\\K_V1.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\K_V2.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\K_V3.wav'}", &fSoundfile5);
		ui_interface->openTabBox("Mapping_Tabs");
		ui_interface->openVerticalBox("Comp_Section");
		ui_interface->openHorizontalBox("Track 1");
		ui_interface->declare(&fHslider134, "style", "knob");
		ui_interface->addHorizontalSlider("Attack", &fHslider134, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider133, "style", "knob");
		ui_interface->addHorizontalSlider("Ratio", &fHslider133, 1.0f, 1.0f, 10.0f, 0.100000001f);
		ui_interface->declare(&fHslider135, "style", "knob");
		ui_interface->addHorizontalSlider("Release", &fHslider135, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider136, "style", "knob");
		ui_interface->addHorizontalSlider("Threshold", &fHslider136, 0.0f, -96.0f, 0.0f, 0.100000001f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 2");
		ui_interface->declare(&fHslider101, "style", "knob");
		ui_interface->addHorizontalSlider("Attack", &fHslider101, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider100, "style", "knob");
		ui_interface->addHorizontalSlider("Ratio", &fHslider100, 1.0f, 1.0f, 10.0f, 0.100000001f);
		ui_interface->declare(&fHslider102, "style", "knob");
		ui_interface->addHorizontalSlider("Release", &fHslider102, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider103, "style", "knob");
		ui_interface->addHorizontalSlider("Threshold", &fHslider103, 0.0f, -96.0f, 0.0f, 0.100000001f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 3");
		ui_interface->declare(&fHslider117, "style", "knob");
		ui_interface->addHorizontalSlider("Attack", &fHslider117, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider116, "style", "knob");
		ui_interface->addHorizontalSlider("Ratio", &fHslider116, 1.0f, 1.0f, 10.0f, 0.100000001f);
		ui_interface->declare(&fHslider118, "style", "knob");
		ui_interface->addHorizontalSlider("Release", &fHslider118, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider119, "style", "knob");
		ui_interface->addHorizontalSlider("Threshold", &fHslider119, 0.0f, -96.0f, 0.0f, 0.100000001f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 4");
		ui_interface->declare(&fHslider30, "style", "knob");
		ui_interface->addHorizontalSlider("Attack", &fHslider30, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider29, "style", "knob");
		ui_interface->addHorizontalSlider("Ratio", &fHslider29, 1.0f, 1.0f, 10.0f, 0.100000001f);
		ui_interface->declare(&fHslider31, "style", "knob");
		ui_interface->addHorizontalSlider("Release", &fHslider31, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider32, "style", "knob");
		ui_interface->addHorizontalSlider("Threshold", &fHslider32, 0.0f, -96.0f, 0.0f, 0.100000001f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 5");
		ui_interface->declare(&fHslider47, "style", "knob");
		ui_interface->addHorizontalSlider("Attack", &fHslider47, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider46, "style", "knob");
		ui_interface->addHorizontalSlider("Ratio", &fHslider46, 1.0f, 1.0f, 10.0f, 0.100000001f);
		ui_interface->declare(&fHslider48, "style", "knob");
		ui_interface->addHorizontalSlider("Release", &fHslider48, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider49, "style", "knob");
		ui_interface->addHorizontalSlider("Threshold", &fHslider49, 0.0f, -96.0f, 0.0f, 0.100000001f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 6");
		ui_interface->declare(&fHslider64, "style", "knob");
		ui_interface->addHorizontalSlider("Attack", &fHslider64, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider63, "style", "knob");
		ui_interface->addHorizontalSlider("Ratio", &fHslider63, 1.0f, 1.0f, 10.0f, 0.100000001f);
		ui_interface->declare(&fHslider65, "style", "knob");
		ui_interface->addHorizontalSlider("Release", &fHslider65, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider66, "style", "knob");
		ui_interface->addHorizontalSlider("Threshold", &fHslider66, 0.0f, -96.0f, 0.0f, 0.100000001f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 7");
		ui_interface->declare(&fHslider84, "style", "knob");
		ui_interface->addHorizontalSlider("Attack", &fHslider84, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider83, "style", "knob");
		ui_interface->addHorizontalSlider("Ratio", &fHslider83, 1.0f, 1.0f, 10.0f, 0.100000001f);
		ui_interface->declare(&fHslider85, "style", "knob");
		ui_interface->addHorizontalSlider("Release", &fHslider85, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider86, "style", "knob");
		ui_interface->addHorizontalSlider("Threshold", &fHslider86, 0.0f, -96.0f, 0.0f, 0.100000001f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 8");
		ui_interface->declare(&fHslider150, "style", "knob");
		ui_interface->addHorizontalSlider("Attack", &fHslider150, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider149, "style", "knob");
		ui_interface->addHorizontalSlider("Ratio", &fHslider149, 1.0f, 1.0f, 10.0f, 0.100000001f);
		ui_interface->declare(&fHslider151, "style", "knob");
		ui_interface->addHorizontalSlider("Release", &fHslider151, 0.100000001f, 0.00100000005f, 0.5f, 0.00100000005f);
		ui_interface->declare(&fHslider152, "style", "knob");
		ui_interface->addHorizontalSlider("Threshold", &fHslider152, 0.0f, -96.0f, 0.0f, 0.100000001f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("EQ_Section");
		ui_interface->openHorizontalBox("Track 1");
		ui_interface->openHorizontalBox("1_HPF");
		ui_interface->declare(&fHslider138, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider138, 50.0f, 50.0f, 1000.0f, 0.100000001f);
		ui_interface->declare(&fHslider137, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider137, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("2_Parametric_1");
		ui_interface->declare(&fHslider131, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider131, 500.0f, 100.0f, 2000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider139, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider139, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider140, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider140, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("3_Parametric_2");
		ui_interface->declare(&fHslider130, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider130, 2000.0f, 1500.0f, 15000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider141, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider141, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider142, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider142, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("4_LPF");
		ui_interface->declare(&fHslider129, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider129, 20000.0f, 50.0f, 20000.0f, 0.100000001f);
		ui_interface->declare(&fHslider128, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider128, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 2");
		ui_interface->openHorizontalBox("1_HPF");
		ui_interface->declare(&fHslider105, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider105, 50.0f, 50.0f, 1000.0f, 0.100000001f);
		ui_interface->declare(&fHslider104, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider104, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("2_Parametric_1");
		ui_interface->declare(&fHslider97, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider97, 500.0f, 100.0f, 2000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider106, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider106, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider107, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider107, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("3_Parametric_2");
		ui_interface->declare(&fHslider96, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider96, 2000.0f, 1500.0f, 15000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider108, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider108, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider109, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider109, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("4_LPF");
		ui_interface->declare(&fHslider95, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider95, 20000.0f, 50.0f, 20000.0f, 0.100000001f);
		ui_interface->declare(&fHslider94, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider94, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 3");
		ui_interface->openHorizontalBox("1_HPF");
		ui_interface->declare(&fHslider121, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider121, 50.0f, 50.0f, 1000.0f, 0.100000001f);
		ui_interface->declare(&fHslider120, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider120, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("2_Parametric_1");
		ui_interface->declare(&fHslider114, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider114, 500.0f, 100.0f, 2000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider122, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider122, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider123, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider123, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("3_Parametric_2");
		ui_interface->declare(&fHslider113, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider113, 2000.0f, 1500.0f, 15000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider124, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider124, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider125, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider125, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("4_LPF");
		ui_interface->declare(&fHslider112, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider112, 20000.0f, 50.0f, 20000.0f, 0.100000001f);
		ui_interface->declare(&fHslider111, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider111, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 4");
		ui_interface->openHorizontalBox("1_HPF");
		ui_interface->declare(&fHslider34, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider34, 50.0f, 50.0f, 1000.0f, 0.100000001f);
		ui_interface->declare(&fHslider33, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider33, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("2_Parametric_1");
		ui_interface->declare(&fHslider13, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider13, 500.0f, 100.0f, 2000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider35, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider35, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider36, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider36, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("3_Parametric_2");
		ui_interface->declare(&fHslider12, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider12, 2000.0f, 1500.0f, 15000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider37, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider37, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider38, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider38, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("4_LPF");
		ui_interface->declare(&fHslider11, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider11, 20000.0f, 50.0f, 20000.0f, 0.100000001f);
		ui_interface->declare(&fHslider10, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider10, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 5");
		ui_interface->openHorizontalBox("1_HPF");
		ui_interface->declare(&fHslider51, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider51, 50.0f, 50.0f, 1000.0f, 0.100000001f);
		ui_interface->declare(&fHslider50, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider50, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("2_Parametric_1");
		ui_interface->declare(&fHslider43, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider43, 500.0f, 100.0f, 2000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider52, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider52, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider53, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider53, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("3_Parametric_2");
		ui_interface->declare(&fHslider42, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider42, 2000.0f, 1500.0f, 15000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider54, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider54, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider55, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider55, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("4_LPF");
		ui_interface->declare(&fHslider41, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider41, 20000.0f, 50.0f, 20000.0f, 0.100000001f);
		ui_interface->declare(&fHslider40, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider40, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 6");
		ui_interface->openHorizontalBox("1_HPF");
		ui_interface->declare(&fHslider68, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider68, 50.0f, 50.0f, 1000.0f, 0.100000001f);
		ui_interface->declare(&fHslider67, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider67, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("2_Parametric_1");
		ui_interface->declare(&fHslider60, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider60, 500.0f, 100.0f, 2000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider69, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider69, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider70, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider70, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("3_Parametric_2");
		ui_interface->declare(&fHslider59, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider59, 2000.0f, 1500.0f, 15000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider71, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider71, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider72, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider72, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("4_LPF");
		ui_interface->declare(&fHslider58, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider58, 20000.0f, 50.0f, 20000.0f, 0.100000001f);
		ui_interface->declare(&fHslider57, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider57, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 7");
		ui_interface->openHorizontalBox("1_HPF");
		ui_interface->declare(&fHslider88, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider88, 50.0f, 50.0f, 1000.0f, 0.100000001f);
		ui_interface->declare(&fHslider87, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider87, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("2_Parametric_1");
		ui_interface->declare(&fHslider77, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider77, 500.0f, 100.0f, 2000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider89, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider89, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider90, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider90, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("3_Parametric_2");
		ui_interface->declare(&fHslider76, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider76, 2000.0f, 1500.0f, 15000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider91, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider91, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider92, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider92, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("4_LPF");
		ui_interface->declare(&fHslider75, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider75, 20000.0f, 50.0f, 20000.0f, 0.100000001f);
		ui_interface->declare(&fHslider74, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider74, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Track 8");
		ui_interface->openHorizontalBox("1_HPF");
		ui_interface->declare(&fHslider154, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider154, 50.0f, 50.0f, 1000.0f, 0.100000001f);
		ui_interface->declare(&fHslider153, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider153, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("2_Parametric_1");
		ui_interface->declare(&fHslider147, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider147, 500.0f, 100.0f, 2000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider155, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider155, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider156, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider156, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("3_Parametric_2");
		ui_interface->declare(&fHslider146, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider146, 2000.0f, 1500.0f, 15000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider157, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider157, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider158, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider158, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("4_LPF");
		ui_interface->declare(&fHslider145, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider145, 20000.0f, 50.0f, 20000.0f, 0.100000001f);
		ui_interface->declare(&fHslider144, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider144, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Mixer_And_Master");
		ui_interface->openVerticalBox("Master EQ");
		ui_interface->openHorizontalBox("1_HPF");
		ui_interface->declare(&fHslider161, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider161, 50.0f, 50.0f, 1000.0f, 0.100000001f);
		ui_interface->declare(&fHslider160, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider160, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("2_Parametric_1");
		ui_interface->declare(&fHslider6, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider6, 500.0f, 100.0f, 2000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider162, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider162, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider163, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider163, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("3_Parametric_2");
		ui_interface->declare(&fHslider5, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider5, 2000.0f, 1500.0f, 15000.0f, 0.00999999978f);
		ui_interface->declare(&fHslider164, "style", "knob");
		ui_interface->addHorizontalSlider("Gain", &fHslider164, 0.0f, -24.0f, 24.0f, 0.00999999978f);
		ui_interface->declare(&fHslider165, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider165, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("4_LPF");
		ui_interface->declare(&fHslider4, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fHslider4, 20000.0f, 50.0f, 20000.0f, 0.100000001f);
		ui_interface->declare(&fHslider3, "style", "knob");
		ui_interface->addHorizontalSlider("Q", &fHslider3, 0.699999988f, 0.5f, 10.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Master Gain");
		ui_interface->addVerticalSlider("Master Gain", &fVslider0, -6.0f, -96.0f, 12.0f, 0.00999999978f);
		ui_interface->addVerticalSlider("Soni Buss Gain", &fVslider3, -8.0f, -10.0f, 2.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Track Gain");
		ui_interface->addHorizontalSlider("Track 1", &fHslider127, 0.0f, -96.0f, 24.0f, 0.00999999978f);
		ui_interface->addHorizontalSlider("Track 2", &fHslider93, 0.0f, -96.0f, 24.0f, 0.00999999978f);
		ui_interface->addHorizontalSlider("Track 3", &fHslider110, 0.0f, -96.0f, 24.0f, 0.00999999978f);
		ui_interface->addHorizontalSlider("Track 4", &fHslider9, 0.0f, -96.0f, 24.0f, 0.00999999978f);
		ui_interface->addHorizontalSlider("Track 5", &fHslider39, 0.0f, -96.0f, 24.0f, 0.00999999978f);
		ui_interface->addHorizontalSlider("Track 6", &fHslider56, 0.0f, -96.0f, 24.0f, 0.00999999978f);
		ui_interface->addHorizontalSlider("Track 7", &fHslider73, 0.0f, -96.0f, 24.0f, 0.00999999978f);
		ui_interface->addHorizontalSlider("Track 8", &fHslider143, 0.0f, -96.0f, 24.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Track Mute");
		ui_interface->addCheckButton("1", &fCheckbox6);
		ui_interface->addCheckButton("2", &fCheckbox4);
		ui_interface->addCheckButton("3", &fCheckbox5);
		ui_interface->addCheckButton("4", &fCheckbox0);
		ui_interface->addCheckButton("5", &fCheckbox1);
		ui_interface->addCheckButton("6", &fCheckbox2);
		ui_interface->addCheckButton("7", &fCheckbox3);
		ui_interface->addCheckButton("8", &fCheckbox7);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Track Variant");
		ui_interface->addNumEntry("Variant_1", &fEntry6, 1.0f, 1.0f, 3.0f, 1.0f);
		ui_interface->addNumEntry("Variant_2", &fEntry4, 1.0f, 1.0f, 3.0f, 1.0f);
		ui_interface->addNumEntry("Variant_3", &fEntry5, 1.0f, 1.0f, 3.0f, 1.0f);
		ui_interface->addNumEntry("Variant_4", &fEntry0, 1.0f, 1.0f, 3.0f, 1.0f);
		ui_interface->addNumEntry("Variant_5", &fEntry1, 1.0f, 1.0f, 3.0f, 1.0f);
		ui_interface->addNumEntry("Variant_6", &fEntry2, 1.0f, 1.0f, 3.0f, 1.0f);
		ui_interface->addNumEntry("Variant_7", &fEntry3, 1.0f, 1.0f, 3.0f, 1.0f);
		ui_interface->addNumEntry("Variant_8", &fEntry7, 1.0f, 1.0f, 3.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Music_Info");
		ui_interface->openVerticalBox("Accent");
		ui_interface->addHorizontalSlider("T4_A_1", &fHslider19, 5.0f, 0.0f, 9.0f, 0.00999999978f);
		ui_interface->addHorizontalSlider("T4_A_2", &fHslider22, 5.0f, 0.0f, 9.0f, 0.00999999978f);
		ui_interface->addHorizontalSlider("T4_A_3", &fHslider25, 5.0f, 0.0f, 9.0f, 0.00999999978f);
		ui_interface->addHorizontalSlider("T4_A_4", &fHslider28, 5.0f, 0.0f, 9.0f, 0.00999999978f);
		ui_interface->closeBox();
		ui_interface->addVerticalSlider("Fluidity", &fVslider1, 1.0f, 0.0500000007f, 10.0f, 0.00999999978f);
		ui_interface->openVerticalBox("Pitch");
		ui_interface->addHorizontalSlider("T4_P_1", &fHslider16, 100.0f, 20.0f, 10000.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("T4_P_2", &fHslider21, 100.0f, 20.0f, 10000.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("T4_P_3", &fHslider24, 100.0f, 20.0f, 10000.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("T4_P_4", &fHslider27, 100.0f, 20.0f, 10000.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("T5_P_1", &fHslider45, 100.0f, 20.0f, 10000.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("T6_P_1", &fHslider62, 100.0f, 20.0f, 10000.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("T7_P_1", &fHslider82, 100.0f, 20.0f, 10000.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("T7_P_2", &fHslider81, 100.0f, 20.0f, 10000.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("T7_P_3", &fHslider80, 100.0f, 20.0f, 10000.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("T7_P_4", &fHslider79, 100.0f, 20.0f, 10000.0f, 0.00100000005f);
		ui_interface->closeBox();
		ui_interface->addVerticalSlider("Tempo", &fVslider2, 120.0f, 50.0f, 150.0f, 0.100000001f);
		ui_interface->openVerticalBox("Velocity");
		ui_interface->addHorizontalSlider("T1_V_1", &fHslider132, 9.0f, 0.0f, 9.0f, 0.100000001f);
		ui_interface->addHorizontalSlider("T2_V_1", &fHslider99, 9.0f, 0.0f, 9.0f, 0.100000001f);
		ui_interface->addHorizontalSlider("T3_V_1", &fHslider115, 9.0f, 0.0f, 9.0f, 0.100000001f);
		ui_interface->addHorizontalSlider("T4_V_1", &fHslider15, 9.0f, 0.0f, 9.0f, 0.100000001f);
		ui_interface->addHorizontalSlider("T4_V_2", &fHslider20, 9.0f, 0.0f, 9.0f, 0.100000001f);
		ui_interface->addHorizontalSlider("T4_V_3", &fHslider23, 9.0f, 0.0f, 9.0f, 0.100000001f);
		ui_interface->addHorizontalSlider("T4_V_4", &fHslider26, 9.0f, 0.0f, 9.0f, 0.100000001f);
		ui_interface->addHorizontalSlider("T5_V_1", &fHslider44, 9.0f, 1.0f, 9.0f, 0.100000001f);
		ui_interface->addHorizontalSlider("T6_V_1", &fHslider61, 9.0f, 1.0f, 9.0f, 0.100000001f);
		ui_interface->addHorizontalSlider("T7_V_1", &fHslider78, 9.0f, 0.0f, 9.0f, 0.100000001f);
		ui_interface->addHorizontalSlider("T8_V_1", &fHslider148, 9.0f, 0.0f, 9.0f, 0.100000001f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Sonification Types");
		ui_interface->openVerticalBox("AP Values");
		ui_interface->addHorizontalSlider("Soni 1", &fHslider1, 0.0f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("Soni 10", &fHslider8, 0.0f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("Soni 11", &fHslider7, 0.0f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("Soni 12", &fHslider0, 0.5f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("Soni 2", &fHslider2, 0.0f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("Soni 3", &fHslider159, 0.0f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("Soni 4", &fHslider14, 0.0f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("Soni 5", &fHslider126, 0.0f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("Soni 6", &fHslider98, 0.0f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("Soni 7", &fHslider18, 0.0f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("Soni 8", &fHslider166, 0.0f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->addHorizontalSlider("Soni 9", &fHslider17, 0.5f, 0.0f, 1.0f, 0.00100000005f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->addSoundfile("S_SMPL_V1", "{'D:\\GaitSonification\\Drum Samples\\Final Library\\S_V1_1.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\S_V1_2.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\S_V1_3.wav'}", &fSoundfile0);
		ui_interface->addSoundfile("S_SMPL_V2", "{'D:\\GaitSonification\\Drum Samples\\Final Library\\S_V2_1.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\S_V2_2.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\S_V2_3.wav'}", &fSoundfile1);
		ui_interface->addSoundfile("S_SMPL_V3", "{'D:\\GaitSonification\\Drum Samples\\Final Library\\S_V3_1.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\S_V3_2.wav';'D:\\GaitSonification\\Drum Samples\\Final Library\\S_V3_3.wav'}", &fSoundfile2);
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) {
		FAUSTFLOAT* input0 = inputs[0];
		FAUSTFLOAT* input1 = inputs[1];
		FAUSTFLOAT* input2 = inputs[2];
		FAUSTFLOAT* input3 = inputs[3];
		FAUSTFLOAT* input4 = inputs[4];
		FAUSTFLOAT* input5 = inputs[5];
		FAUSTFLOAT* input6 = inputs[6];
		FAUSTFLOAT* input7 = inputs[7];
		FAUSTFLOAT* input8 = inputs[8];
		FAUSTFLOAT* input9 = inputs[9];
		FAUSTFLOAT* input10 = inputs[10];
		FAUSTFLOAT* input11 = inputs[11];
		FAUSTFLOAT* input12 = inputs[12];
		FAUSTFLOAT* input13 = inputs[13];
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		float fSlow0 = float(fHslider0);
		float fSlow1 = (1.41400003f * std::sqrt((1.0f - fSlow0)));
		float fSlow2 = std::pow(10.0f, (0.0500000007f * float(fVslider0)));
		float fSlow3 = float(fHslider1);
		int iSlow4 = (((((((fSlow3 < fConst0) * (fSlow3 > fConst1)) + (2 * ((fSlow3 < fConst2) * (fSlow3 > fConst0)))) + (3 * ((fSlow3 < fConst3) * (fSlow3 > fConst2)))) + (4 * ((fSlow3 < fConst4) * (fSlow3 > fConst3)))) + (5 * ((fSlow3 < fConst5) * (fSlow3 > fConst4)))) + (6 * ((fSlow3 < fConst6) * (fSlow3 > fConst5))));
		int iSlow5 = (iSlow4 == 6);
		float fSlow6 = float(fHslider2);
		int iSlow7 = ((((((fSlow6 < fConst0) * (fSlow6 > fConst1)) + (2 * ((fSlow6 < fConst2) * (fSlow6 > fConst0)))) + (3 * ((fSlow6 < fConst3) * (fSlow6 > fConst2)))) + (4 * ((fSlow6 < fConst4) * (fSlow6 > fConst3)))) + (5 * ((fSlow6 < fConst5) * (fSlow6 > fConst4))));
		int iSlow8 = ((fSlow6 < fConst6) * (fSlow6 > fConst5));
		int iSlow9 = (iSlow7 + (6 * iSlow8));
		float fSlow10 = (0.00100000005f * float((1 - (iSlow5 + (iSlow9 == 6)))));
		float fSlow11 = (1.0f / float(fHslider3));
		float fSlow12 = std::tan((fConst8 * float(fHslider4)));
		float fSlow13 = (1.0f / fSlow12);
		float fSlow14 = (1.0f / (((fSlow11 + fSlow13) / fSlow12) + 1.0f));
		float fSlow15 = float(fHslider5);
		float fSlow16 = std::tan((fConst8 * fSlow15));
		float fSlow17 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow16))));
		float fSlow18 = float(fHslider6);
		float fSlow19 = std::tan((fConst8 * fSlow18));
		float fSlow20 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow19))));
		float fSlow21 = (0.00100000005f * std::pow(10.0f, (0.0500000007f * (0.0f - (50.0f * (float((iSlow4 >= 3)) + (0.5f * float((iSlow4 == 2)))))))));
		float fSlow22 = float(fHslider7);
		int iSlow23 = (fSlow22 > 0.00999999978f);
		float fSlow24 = float(fHslider8);
		int iSlow25 = (fSlow24 > 0.00999999978f);
		float fSlow26 = (0.00100000005f * std::pow(10.0f, (0.0500000007f * float((0 - (24 * (iSlow23 + iSlow25)))))));
		float fSlow27 = (1.0f / float(fHslider10));
		float fSlow28 = std::tan((fConst8 * float(fHslider11)));
		float fSlow29 = (1.0f / fSlow28);
		float fSlow30 = (((fSlow27 + fSlow29) / fSlow28) + 1.0f);
		float fSlow31 = ((std::pow(10.0f, (0.0500000007f * float(fHslider9))) * (1.0f - float(fCheckbox0))) / fSlow30);
		float fSlow32 = (0.00100000005f * float(itbl1mydspSIG1[std::max<int>(0, int((iSlow9 + 17)))]));
		float fSlow33 = float(fHslider12);
		float fSlow34 = std::tan((fConst8 * fSlow33));
		float fSlow35 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow34))));
		float fSlow36 = float(fHslider13);
		float fSlow37 = std::tan((fConst8 * fSlow36));
		float fSlow38 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow37))));
		float fSlow39 = (float(fEntry0) + -1.0f);
		int iSlow40 = (fSlow39 >= 2.0f);
		int iSlow41 = (fSlow39 >= 1.0f);
		int iSlow42 = (1 - (float(fHslider14) > 0.100000001f));
		float fSlow43 = float(fHslider15);
		int iSlow44 = (fSlow43 > 0.0f);
		float fSlow45 = (0.0f - fSlow43);
		float fSlow46 = std::min<float>(150.0f, std::max<float>(60.0f, float(fVslider2)));
		float fSlow47 = ((120.0f - fSlow46) * float((fSlow46 < 120.0f)));
		float fSlow48 = (std::min<float>(5.0f, std::max<float>(0.200000003f, float(fVslider1))) + (0.0375000015f * fSlow47));
		float fSlow49 = (1.0f / std::max<float>(1.0f, (fConst13 * fSlow48)));
		float fSlow50 = std::pow(10.0f, (2.0f * (float(fHslider17) + -0.5f)));
		float fSlow51 = float(fHslider18);
		float fSlow52 = ((0.0500000007f * fSlow51) + 1.0f);
		float fSlow53 = ((float(fHslider16) * fSlow50) * fSlow52);
		int iSlow54 = int((fConst7 / fSlow53));
		float fSlow55 = (fConst14 / fSlow53);
		float fSlow56 = (fConst15 / fSlow53);
		float fSlow57 = (fConst16 / fSlow53);
		float fSlow58 = (6.66666651f * (fSlow53 * (1.0f - (0.000500000024f * std::min<float>(fSlow53, 1000.0f)))));
		float fSlow59 = float(fHslider19);
		float fSlow60 = ((0.200000003f * (fSlow59 + -5.0f)) + 1.0f);
		float fSlow61 = (fConst10 * fSlow60);
		float fSlow62 = (0.400000006f * fSlow48);
		float fSlow63 = (0.5f / std::max<float>(1.0f, (fConst21 * fSlow48)));
		float fSlow64 = (fConst23 * fSlow53);
		float fSlow65 = (fSlow51 + 2.0f);
		float fSlow66 = (fConst24 * mydsp_faustpower2_f(fSlow65));
		float fSlow67 = (0.0133333337f * (fSlow53 + -300.0f));
		float fSlow68 = (6.86000013f * fSlow60);
		float fSlow69 = (2.0f * fSlow48);
		float fSlow70 = (fConst17 * fSlow53);
		float fSlow71 = (0.5f * std::max<float>(1.0f, (4.53999996f * ((0.200000003f * fSlow59) + 1.0f))));
		float fSlow72 = float(fHslider20);
		int iSlow73 = (fSlow72 > 0.0f);
		float fSlow74 = (0.0f - fSlow72);
		float fSlow75 = (1.0f - (0.0299999993f * fSlow51));
		float fSlow76 = ((float(fHslider21) * fSlow50) * fSlow75);
		int iSlow77 = int((fConst7 / fSlow76));
		float fSlow78 = (fConst14 / fSlow76);
		float fSlow79 = (fConst15 / fSlow76);
		float fSlow80 = (fConst16 / fSlow76);
		float fSlow81 = (6.66666651f * (fSlow76 * (1.0f - (0.000500000024f * std::min<float>(fSlow76, 1000.0f)))));
		float fSlow82 = float(fHslider22);
		float fSlow83 = ((0.200000003f * (fSlow82 + -5.0f)) + 1.0f);
		float fSlow84 = (fConst10 * fSlow83);
		float fSlow85 = (fConst23 * fSlow76);
		float fSlow86 = (0.0133333337f * (fSlow76 + -300.0f));
		float fSlow87 = (6.86000013f * fSlow83);
		float fSlow88 = (fConst17 * fSlow76);
		float fSlow89 = (0.5f * std::max<float>(1.0f, (4.53999996f * ((0.200000003f * fSlow82) + 1.0f))));
		float fSlow90 = float(fHslider23);
		int iSlow91 = (fSlow90 > 0.0f);
		float fSlow92 = (0.0f - fSlow90);
		float fSlow93 = ((0.310000002f * fSlow51) + 1.0f);
		float fSlow94 = ((float(fHslider24) * fSlow50) * fSlow93);
		int iSlow95 = int((fConst7 / fSlow94));
		float fSlow96 = (fConst14 / fSlow94);
		float fSlow97 = (fConst15 / fSlow94);
		float fSlow98 = (fConst16 / fSlow94);
		float fSlow99 = (6.66666651f * (fSlow94 * (1.0f - (0.000500000024f * std::min<float>(fSlow94, 1000.0f)))));
		float fSlow100 = float(fHslider25);
		float fSlow101 = ((0.200000003f * (fSlow100 + -5.0f)) + 1.0f);
		float fSlow102 = (fConst10 * fSlow101);
		float fSlow103 = (fConst23 * fSlow94);
		float fSlow104 = (0.0133333337f * (fSlow94 + -300.0f));
		float fSlow105 = (6.86000013f * fSlow101);
		float fSlow106 = (fConst17 * fSlow94);
		float fSlow107 = (0.5f * std::max<float>(1.0f, (4.53999996f * ((0.200000003f * fSlow100) + 1.0f))));
		float fSlow108 = float(fHslider26);
		int iSlow109 = (fSlow108 > 0.0f);
		float fSlow110 = (0.0f - fSlow108);
		float fSlow111 = (1.0f - (0.270000011f * fSlow51));
		float fSlow112 = ((float(fHslider27) * fSlow50) * fSlow111);
		int iSlow113 = int((fConst7 / fSlow112));
		float fSlow114 = (fConst14 / fSlow112);
		float fSlow115 = (fConst15 / fSlow112);
		float fSlow116 = (fConst16 / fSlow112);
		float fSlow117 = (6.66666651f * (fSlow112 * (1.0f - (0.000500000024f * std::min<float>(fSlow112, 1000.0f)))));
		float fSlow118 = float(fHslider28);
		float fSlow119 = ((0.200000003f * (fSlow118 + -5.0f)) + 1.0f);
		float fSlow120 = (fConst10 * fSlow119);
		float fSlow121 = (fConst23 * fSlow112);
		float fSlow122 = (0.0133333337f * (fSlow112 + -300.0f));
		float fSlow123 = (6.86000013f * fSlow119);
		float fSlow124 = (fConst17 * fSlow112);
		float fSlow125 = (0.5f * std::max<float>(1.0f, (4.53999996f * ((0.200000003f * fSlow118) + 1.0f))));
		float fSlow126 = (fConst28 * ((1.0f / float(fHslider29)) + -1.0f));
		float fSlow127 = float(fHslider30);
		int iSlow128 = (std::fabs(fSlow127) < 1.1920929e-07f);
		float fSlow129 = (iSlow128 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow128 ? 1.0f : fSlow127)))));
		float fSlow130 = float(fHslider31);
		int iSlow131 = (std::fabs(fSlow130) < 1.1920929e-07f);
		float fSlow132 = (iSlow131 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow131 ? 1.0f : fSlow130)))));
		float fSlow133 = (1.0f - fSlow132);
		float fSlow134 = (1.0f - fSlow129);
		float fSlow135 = float(fHslider32);
		float fSlow136 = (1.0f / float(fHslider33));
		float fSlow137 = std::tan((fConst8 * float(fHslider34)));
		float fSlow138 = (1.0f / fSlow137);
		float fSlow139 = (1.0f / (((fSlow136 + fSlow138) / fSlow137) + 1.0f));
		float fSlow140 = (((fSlow138 - fSlow136) / fSlow137) + 1.0f);
		float fSlow141 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow137))));
		float fSlow142 = (1.0f / fSlow37);
		float fSlow143 = float(fHslider35);
		int iSlow144 = (fSlow143 > 0.0f);
		float fSlow145 = (float(fHslider36) * std::sin((fConst29 * fSlow36)));
		float fSlow146 = (fConst8 * ((fSlow36 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow143)))) / fSlow145));
		float fSlow147 = (fConst8 * (fSlow36 / fSlow145));
		float fSlow148 = (iSlow144 ? fSlow147 : fSlow146);
		float fSlow149 = ((fSlow142 * (fSlow142 - fSlow148)) + 1.0f);
		float fSlow150 = ((fSlow142 * (fSlow142 + fSlow148)) + 1.0f);
		float fSlow151 = (iSlow144 ? fSlow146 : fSlow147);
		float fSlow152 = ((fSlow142 * (fSlow142 + fSlow151)) + 1.0f);
		float fSlow153 = ((fSlow142 * (fSlow142 - fSlow151)) + 1.0f);
		float fSlow154 = (1.0f / fSlow34);
		float fSlow155 = float(fHslider37);
		int iSlow156 = (fSlow155 > 0.0f);
		float fSlow157 = (float(fHslider38) * std::sin((fConst29 * fSlow33)));
		float fSlow158 = (fConst8 * ((fSlow33 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow155)))) / fSlow157));
		float fSlow159 = (fConst8 * (fSlow33 / fSlow157));
		float fSlow160 = (iSlow156 ? fSlow159 : fSlow158);
		float fSlow161 = ((fSlow154 * (fSlow154 - fSlow160)) + 1.0f);
		float fSlow162 = ((fSlow154 * (fSlow154 + fSlow160)) + 1.0f);
		float fSlow163 = (iSlow156 ? fSlow158 : fSlow159);
		float fSlow164 = ((fSlow154 * (fSlow154 + fSlow163)) + 1.0f);
		float fSlow165 = ((fSlow154 * (fSlow154 - fSlow163)) + 1.0f);
		float fSlow166 = (1.0f / fSlow30);
		float fSlow167 = (((fSlow29 - fSlow27) / fSlow28) + 1.0f);
		float fSlow168 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow28))));
		float fSlow169 = (1.0f / float(fHslider40));
		float fSlow170 = std::tan((fConst8 * float(fHslider41)));
		float fSlow171 = (1.0f / fSlow170);
		float fSlow172 = (((fSlow169 + fSlow171) / fSlow170) + 1.0f);
		float fSlow173 = ((std::pow(10.0f, (0.0500000007f * float(fHslider39))) * (1.0f - float(fCheckbox1))) / fSlow172);
		float fSlow174 = (0.00100000005f * float(itbl1mydspSIG1[std::max<int>(0, int((iSlow9 + 23)))]));
		float fSlow175 = float(fHslider42);
		float fSlow176 = std::tan((fConst8 * fSlow175));
		float fSlow177 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow176))));
		float fSlow178 = float(fHslider43);
		float fSlow179 = std::tan((fConst8 * fSlow178));
		float fSlow180 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow179))));
		float fSlow181 = float(fHslider44);
		int iSlow182 = (fSlow181 > 0.0f);
		float fSlow183 = (0.0f - fSlow181);
		float fSlow184 = (float(fEntry1) + -1.0f);
		int iSlow185 = (fSlow184 >= 2.0f);
		int iSlow186 = (fSlow184 >= 1.0f);
		float fSlow187 = (1.0f / std::max<float>(1.0f, (fConst7 * (fSlow48 * ((0.0599999987f * fSlow47) + 0.600000024f)))));
		float fSlow188 = (float(fHslider45) * fSlow50);
		float fSlow189 = (3.0f * fSlow188);
		float fSlow190 = (9.0f * fSlow188);
		float fSlow191 = (27.0f * fSlow188);
		float fSlow192 = (fConst30 * fSlow188);
		float fSlow193 = (0.649999976f * fSlow48);
		float fSlow194 = (fConst23 * fSlow188);
		float fSlow195 = (0.0133333337f * (fSlow188 + -300.0f));
		float fSlow196 = (0.866999984f * fSlow48);
		float fSlow197 = (fSlow51 + 3.0f);
		float fSlow198 = (fConst24 * mydsp_faustpower2_f(fSlow197));
		float fSlow199 = (fConst28 * ((1.0f / float(fHslider46)) + -1.0f));
		float fSlow200 = float(fHslider47);
		int iSlow201 = (std::fabs(fSlow200) < 1.1920929e-07f);
		float fSlow202 = (iSlow201 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow201 ? 1.0f : fSlow200)))));
		float fSlow203 = float(fHslider48);
		int iSlow204 = (std::fabs(fSlow203) < 1.1920929e-07f);
		float fSlow205 = (iSlow204 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow204 ? 1.0f : fSlow203)))));
		float fSlow206 = (1.0f - fSlow205);
		float fSlow207 = (1.0f - fSlow202);
		float fSlow208 = float(fHslider49);
		float fSlow209 = (1.0f / float(fHslider50));
		float fSlow210 = std::tan((fConst8 * float(fHslider51)));
		float fSlow211 = (1.0f / fSlow210);
		float fSlow212 = (1.0f / (((fSlow209 + fSlow211) / fSlow210) + 1.0f));
		float fSlow213 = (((fSlow211 - fSlow209) / fSlow210) + 1.0f);
		float fSlow214 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow210))));
		float fSlow215 = (1.0f / fSlow179);
		float fSlow216 = float(fHslider52);
		int iSlow217 = (fSlow216 > 0.0f);
		float fSlow218 = (float(fHslider53) * std::sin((fConst29 * fSlow178)));
		float fSlow219 = (fConst8 * ((fSlow178 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow216)))) / fSlow218));
		float fSlow220 = (fConst8 * (fSlow178 / fSlow218));
		float fSlow221 = (iSlow217 ? fSlow220 : fSlow219);
		float fSlow222 = ((fSlow215 * (fSlow215 - fSlow221)) + 1.0f);
		float fSlow223 = ((fSlow215 * (fSlow215 + fSlow221)) + 1.0f);
		float fSlow224 = (iSlow217 ? fSlow219 : fSlow220);
		float fSlow225 = ((fSlow215 * (fSlow215 + fSlow224)) + 1.0f);
		float fSlow226 = ((fSlow215 * (fSlow215 - fSlow224)) + 1.0f);
		float fSlow227 = (1.0f / fSlow176);
		float fSlow228 = float(fHslider54);
		int iSlow229 = (fSlow228 > 0.0f);
		float fSlow230 = (float(fHslider55) * std::sin((fConst29 * fSlow175)));
		float fSlow231 = (fConst8 * ((fSlow175 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow228)))) / fSlow230));
		float fSlow232 = (fConst8 * (fSlow175 / fSlow230));
		float fSlow233 = (iSlow229 ? fSlow232 : fSlow231);
		float fSlow234 = ((fSlow227 * (fSlow227 - fSlow233)) + 1.0f);
		float fSlow235 = ((fSlow227 * (fSlow227 + fSlow233)) + 1.0f);
		float fSlow236 = (iSlow229 ? fSlow231 : fSlow232);
		float fSlow237 = ((fSlow227 * (fSlow227 + fSlow236)) + 1.0f);
		float fSlow238 = ((fSlow227 * (fSlow227 - fSlow236)) + 1.0f);
		float fSlow239 = (1.0f / fSlow172);
		float fSlow240 = (((fSlow171 - fSlow169) / fSlow170) + 1.0f);
		float fSlow241 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow170))));
		float fSlow242 = (1.0f / float(fHslider57));
		float fSlow243 = std::tan((fConst8 * float(fHslider58)));
		float fSlow244 = (1.0f / fSlow243);
		float fSlow245 = (((fSlow242 + fSlow244) / fSlow243) + 1.0f);
		float fSlow246 = ((std::pow(10.0f, (0.0500000007f * float(fHslider56))) * (1.0f - float(fCheckbox2))) / fSlow245);
		float fSlow247 = (0.00100000005f * float(itbl1mydspSIG1[std::max<int>(0, int((iSlow9 + 29)))]));
		float fSlow248 = float(fHslider59);
		float fSlow249 = std::tan((fConst8 * fSlow248));
		float fSlow250 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow249))));
		float fSlow251 = float(fHslider60);
		float fSlow252 = std::tan((fConst8 * fSlow251));
		float fSlow253 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow252))));
		int iSlow254 = (int(std::min<float>(100000.0f, std::max<float>(0.0f, (fConst63 / fSlow46)))) + 1);
		float fSlow255 = float(fHslider61);
		int iSlow256 = (fSlow255 > 0.0f);
		float fSlow257 = (0.0f - fSlow255);
		float fSlow258 = (float(fEntry2) + -1.0f);
		int iSlow259 = (fSlow258 >= 2.0f);
		int iSlow260 = (fSlow258 >= 1.0f);
		float fSlow261 = (2.0f * (float(fHslider62) * fSlow50));
		float fSlow262 = (0.5f * fSlow51);
		float fSlow263 = (fConst76 * fSlow46);
		float fSlow264 = (5.71428573e-05f * (200.0f - fSlow46));
		float fSlow265 = (fConst77 * fSlow46);
		float fSlow266 = (1.0f / std::max<float>(1.0f, (fConst80 * (fSlow48 / fSlow46))));
		float fSlow267 = (0.779999971f * fSlow48);
		float fSlow268 = (fSlow51 + 1.0f);
		float fSlow269 = (fConst24 * mydsp_faustpower2_f(fSlow268));
		float fSlow270 = (fConst28 * ((1.0f / float(fHslider63)) + -1.0f));
		float fSlow271 = float(fHslider64);
		int iSlow272 = (std::fabs(fSlow271) < 1.1920929e-07f);
		float fSlow273 = (iSlow272 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow272 ? 1.0f : fSlow271)))));
		float fSlow274 = float(fHslider65);
		int iSlow275 = (std::fabs(fSlow274) < 1.1920929e-07f);
		float fSlow276 = (iSlow275 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow275 ? 1.0f : fSlow274)))));
		float fSlow277 = (1.0f - fSlow276);
		float fSlow278 = (1.0f - fSlow273);
		float fSlow279 = float(fHslider66);
		float fSlow280 = (1.0f / float(fHslider67));
		float fSlow281 = std::tan((fConst8 * float(fHslider68)));
		float fSlow282 = (1.0f / fSlow281);
		float fSlow283 = (1.0f / (((fSlow280 + fSlow282) / fSlow281) + 1.0f));
		float fSlow284 = (((fSlow282 - fSlow280) / fSlow281) + 1.0f);
		float fSlow285 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow281))));
		float fSlow286 = (1.0f / fSlow252);
		float fSlow287 = float(fHslider69);
		int iSlow288 = (fSlow287 > 0.0f);
		float fSlow289 = (float(fHslider70) * std::sin((fConst29 * fSlow251)));
		float fSlow290 = (fConst8 * ((fSlow251 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow287)))) / fSlow289));
		float fSlow291 = (fConst8 * (fSlow251 / fSlow289));
		float fSlow292 = (iSlow288 ? fSlow291 : fSlow290);
		float fSlow293 = ((fSlow286 * (fSlow286 - fSlow292)) + 1.0f);
		float fSlow294 = ((fSlow286 * (fSlow286 + fSlow292)) + 1.0f);
		float fSlow295 = (iSlow288 ? fSlow290 : fSlow291);
		float fSlow296 = ((fSlow286 * (fSlow286 + fSlow295)) + 1.0f);
		float fSlow297 = ((fSlow286 * (fSlow286 - fSlow295)) + 1.0f);
		float fSlow298 = (1.0f / fSlow249);
		float fSlow299 = float(fHslider71);
		int iSlow300 = (fSlow299 > 0.0f);
		float fSlow301 = (float(fHslider72) * std::sin((fConst29 * fSlow248)));
		float fSlow302 = (fConst8 * ((fSlow248 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow299)))) / fSlow301));
		float fSlow303 = (fConst8 * (fSlow248 / fSlow301));
		float fSlow304 = (iSlow300 ? fSlow303 : fSlow302);
		float fSlow305 = ((fSlow298 * (fSlow298 - fSlow304)) + 1.0f);
		float fSlow306 = ((fSlow298 * (fSlow298 + fSlow304)) + 1.0f);
		float fSlow307 = (iSlow300 ? fSlow302 : fSlow303);
		float fSlow308 = ((fSlow298 * (fSlow298 + fSlow307)) + 1.0f);
		float fSlow309 = ((fSlow298 * (fSlow298 - fSlow307)) + 1.0f);
		float fSlow310 = (1.0f / fSlow245);
		float fSlow311 = (((fSlow244 - fSlow242) / fSlow243) + 1.0f);
		float fSlow312 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow243))));
		float fSlow313 = (1.0f / float(fHslider74));
		float fSlow314 = std::tan((fConst8 * float(fHslider75)));
		float fSlow315 = (1.0f / fSlow314);
		float fSlow316 = (((fSlow313 + fSlow315) / fSlow314) + 1.0f);
		float fSlow317 = ((std::pow(10.0f, (0.0500000007f * float(fHslider73))) * (1.0f - float(fCheckbox3))) / fSlow316);
		float fSlow318 = (0.00100000005f * float(itbl1mydspSIG1[std::max<int>(0, int((iSlow9 + 35)))]));
		float fSlow319 = float(fHslider76);
		float fSlow320 = std::tan((fConst8 * fSlow319));
		float fSlow321 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow320))));
		float fSlow322 = float(fHslider77);
		float fSlow323 = std::tan((fConst8 * fSlow322));
		float fSlow324 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow323))));
		float fSlow325 = (fConst88 * fSlow47);
		float fSlow326 = std::floor(fSlow325);
		float fSlow327 = (fSlow325 - fSlow326);
		float fSlow328 = (float(fEntry3) + -1.0f);
		int iSlow329 = (fSlow328 >= 2.0f);
		int iSlow330 = (fSlow328 >= 1.0f);
		float fSlow331 = float(fHslider78);
		int iSlow332 = (fSlow331 > 0.0f);
		float fSlow333 = (0.0f - fSlow331);
		float fSlow334 = ((float(fHslider79) * fSlow50) * fSlow111);
		float fSlow335 = (fConst89 / fSlow334);
		float fSlow336 = float(((1.01160002f * fSlow334) > 600.0f));
		float fSlow337 = (fSlow335 + (-1.99999499f - fSlow336));
		float fSlow338 = (fSlow336 + std::floor(fSlow337));
		float fSlow339 = (fSlow335 + (-1.5f - fSlow338));
		float fSlow340 = (fSlow335 + (-2.5f - fSlow338));
		float fSlow341 = (fSlow335 + (-3.5f - fSlow338));
		float fSlow342 = (fSlow335 + (-4.5f - fSlow338));
		float fSlow343 = ((((0.0f - fSlow339) * (0.0f - (0.5f * fSlow340))) * (0.0f - (0.333333343f * fSlow341))) * (0.0f - (0.25f * fSlow342)));
		int iSlow344 = int(fSlow337);
		int iSlow345 = (std::min<int>(1024, int(std::max<int>(0, int(iSlow344)))) + 1);
		float fSlow346 = (fSlow335 + (-0.5f - fSlow338));
		float fSlow347 = (((0.0f - fSlow340) * (0.0f - (0.5f * fSlow341))) * (0.0f - (0.333333343f * fSlow342)));
		int iSlow348 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow344 + 1))))) + 1);
		float fSlow349 = (0.5f * ((fSlow339 * (0.0f - fSlow341)) * (0.0f - (0.5f * fSlow342))));
		int iSlow350 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow344 + 2))))) + 1);
		float fSlow351 = (fSlow339 * fSlow340);
		float fSlow352 = (0.166666672f * (fSlow351 * (0.0f - fSlow342)));
		int iSlow353 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow344 + 3))))) + 1);
		float fSlow354 = (0.0416666679f * (fSlow351 * fSlow341));
		int iSlow355 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow344 + 4))))) + 1);
		float fSlow356 = (fConst24 * fSlow334);
		float fSlow357 = std::max<float>(fSlow334, 23.4489498f);
		float fSlow358 = std::max<float>(20.0f, std::fabs(fSlow357));
		float fSlow359 = (fConst25 / fSlow358);
		float fSlow360 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fSlow357)));
		float fSlow361 = std::floor(fSlow360);
		float fSlow362 = (fSlow361 + (1.0f - fSlow360));
		int iSlow363 = int(fSlow360);
		float fSlow364 = (fSlow360 - fSlow361);
		int iSlow365 = (iSlow363 + 1);
		float fSlow366 = std::max<float>(1.00000001e-07f, std::fabs(fSlow334));
		float fSlow367 = (fConst17 * fSlow366);
		float fSlow368 = (1.0f - (fConst7 / fSlow366));
		int iSlow369 = int(fSlow325);
		int iSlow370 = std::min<int>(5001, int(std::max<int>(0, int((iSlow369 + 1)))));
		float fSlow371 = (fConst90 * fSlow47);
		float fSlow372 = std::floor(fSlow371);
		float fSlow373 = (fSlow371 - fSlow372);
		float fSlow374 = ((float(fHslider80) * fSlow50) * fSlow93);
		float fSlow375 = (fConst89 / fSlow374);
		float fSlow376 = float(((1.01160002f * fSlow374) > 600.0f));
		float fSlow377 = (fSlow375 + (-1.99999499f - fSlow376));
		float fSlow378 = (fSlow376 + std::floor(fSlow377));
		float fSlow379 = (fSlow375 + (-1.5f - fSlow378));
		float fSlow380 = (fSlow375 + (-2.5f - fSlow378));
		float fSlow381 = (fSlow375 + (-3.5f - fSlow378));
		float fSlow382 = (fSlow375 + (-4.5f - fSlow378));
		float fSlow383 = ((((0.0f - fSlow379) * (0.0f - (0.5f * fSlow380))) * (0.0f - (0.333333343f * fSlow381))) * (0.0f - (0.25f * fSlow382)));
		int iSlow384 = int(fSlow377);
		int iSlow385 = (std::min<int>(1024, int(std::max<int>(0, int(iSlow384)))) + 1);
		float fSlow386 = (fSlow375 + (-0.5f - fSlow378));
		float fSlow387 = (((0.0f - fSlow380) * (0.0f - (0.5f * fSlow381))) * (0.0f - (0.333333343f * fSlow382)));
		int iSlow388 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow384 + 1))))) + 1);
		float fSlow389 = (0.5f * ((fSlow379 * (0.0f - fSlow381)) * (0.0f - (0.5f * fSlow382))));
		int iSlow390 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow384 + 2))))) + 1);
		float fSlow391 = (fSlow379 * fSlow380);
		float fSlow392 = (0.166666672f * (fSlow391 * (0.0f - fSlow382)));
		int iSlow393 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow384 + 3))))) + 1);
		float fSlow394 = (0.0416666679f * (fSlow391 * fSlow381));
		int iSlow395 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow384 + 4))))) + 1);
		float fSlow396 = (fConst24 * fSlow374);
		float fSlow397 = std::max<float>(fSlow374, 23.4489498f);
		float fSlow398 = std::max<float>(20.0f, std::fabs(fSlow397));
		float fSlow399 = (fConst25 / fSlow398);
		float fSlow400 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fSlow397)));
		float fSlow401 = std::floor(fSlow400);
		float fSlow402 = (fSlow401 + (1.0f - fSlow400));
		int iSlow403 = int(fSlow400);
		float fSlow404 = (fSlow400 - fSlow401);
		int iSlow405 = (iSlow403 + 1);
		float fSlow406 = std::max<float>(1.00000001e-07f, std::fabs(fSlow374));
		float fSlow407 = (fConst17 * fSlow406);
		float fSlow408 = (1.0f - (fConst7 / fSlow406));
		int iSlow409 = int(fSlow371);
		int iSlow410 = std::min<int>(5001, int(std::max<int>(0, int((iSlow409 + 1)))));
		float fSlow411 = (fConst91 * fSlow47);
		float fSlow412 = std::floor(fSlow411);
		float fSlow413 = (fSlow411 - fSlow412);
		float fSlow414 = ((float(fHslider81) * fSlow50) * fSlow75);
		float fSlow415 = (fConst89 / fSlow414);
		float fSlow416 = float(((1.01160002f * fSlow414) > 600.0f));
		float fSlow417 = (fSlow415 + (-1.99999499f - fSlow416));
		float fSlow418 = (fSlow416 + std::floor(fSlow417));
		float fSlow419 = (fSlow415 + (-1.5f - fSlow418));
		float fSlow420 = (fSlow415 + (-2.5f - fSlow418));
		float fSlow421 = (fSlow415 + (-3.5f - fSlow418));
		float fSlow422 = (fSlow415 + (-4.5f - fSlow418));
		float fSlow423 = ((((0.0f - fSlow419) * (0.0f - (0.5f * fSlow420))) * (0.0f - (0.333333343f * fSlow421))) * (0.0f - (0.25f * fSlow422)));
		int iSlow424 = int(fSlow417);
		int iSlow425 = (std::min<int>(1024, int(std::max<int>(0, int(iSlow424)))) + 1);
		float fSlow426 = (fSlow415 + (-0.5f - fSlow418));
		float fSlow427 = (((0.0f - fSlow420) * (0.0f - (0.5f * fSlow421))) * (0.0f - (0.333333343f * fSlow422)));
		int iSlow428 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow424 + 1))))) + 1);
		float fSlow429 = (0.5f * ((fSlow419 * (0.0f - fSlow421)) * (0.0f - (0.5f * fSlow422))));
		int iSlow430 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow424 + 2))))) + 1);
		float fSlow431 = (fSlow419 * fSlow420);
		float fSlow432 = (0.166666672f * (fSlow431 * (0.0f - fSlow422)));
		int iSlow433 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow424 + 3))))) + 1);
		float fSlow434 = (0.0416666679f * (fSlow431 * fSlow421));
		int iSlow435 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow424 + 4))))) + 1);
		float fSlow436 = (fConst24 * fSlow414);
		float fSlow437 = std::max<float>(fSlow414, 23.4489498f);
		float fSlow438 = std::max<float>(20.0f, std::fabs(fSlow437));
		float fSlow439 = (fConst25 / fSlow438);
		float fSlow440 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fSlow437)));
		float fSlow441 = std::floor(fSlow440);
		float fSlow442 = (fSlow441 + (1.0f - fSlow440));
		int iSlow443 = int(fSlow440);
		float fSlow444 = (fSlow440 - fSlow441);
		int iSlow445 = (iSlow443 + 1);
		float fSlow446 = std::max<float>(1.00000001e-07f, std::fabs(fSlow414));
		float fSlow447 = (fConst17 * fSlow446);
		float fSlow448 = (1.0f - (fConst7 / fSlow446));
		int iSlow449 = int(fSlow411);
		int iSlow450 = std::min<int>(5001, int(std::max<int>(0, int((iSlow449 + 1)))));
		float fSlow451 = ((float(fHslider82) * fSlow50) * fSlow52);
		float fSlow452 = (fConst89 / fSlow451);
		float fSlow453 = float(((1.01160002f * fSlow451) > 600.0f));
		float fSlow454 = (fSlow452 + (-1.99999499f - fSlow453));
		float fSlow455 = (fSlow453 + std::floor(fSlow454));
		float fSlow456 = (fSlow452 + (-1.5f - fSlow455));
		float fSlow457 = (fSlow452 + (-2.5f - fSlow455));
		float fSlow458 = (fSlow452 + (-3.5f - fSlow455));
		float fSlow459 = (fSlow452 + (-4.5f - fSlow455));
		float fSlow460 = ((((0.0f - fSlow456) * (0.0f - (0.5f * fSlow457))) * (0.0f - (0.333333343f * fSlow458))) * (0.0f - (0.25f * fSlow459)));
		int iSlow461 = int(fSlow454);
		int iSlow462 = (std::min<int>(1024, int(std::max<int>(0, int(iSlow461)))) + 1);
		float fSlow463 = (fSlow452 + (-0.5f - fSlow455));
		float fSlow464 = (((0.0f - fSlow457) * (0.0f - (0.5f * fSlow458))) * (0.0f - (0.333333343f * fSlow459)));
		int iSlow465 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow461 + 1))))) + 1);
		float fSlow466 = (0.5f * ((fSlow456 * (0.0f - fSlow458)) * (0.0f - (0.5f * fSlow459))));
		int iSlow467 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow461 + 2))))) + 1);
		float fSlow468 = (fSlow456 * fSlow457);
		float fSlow469 = (0.166666672f * (fSlow468 * (0.0f - fSlow459)));
		int iSlow470 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow461 + 3))))) + 1);
		float fSlow471 = (0.0416666679f * (fSlow468 * fSlow458));
		int iSlow472 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow461 + 4))))) + 1);
		float fSlow473 = (fConst24 * fSlow451);
		float fSlow474 = std::max<float>(fSlow451, 23.4489498f);
		float fSlow475 = std::max<float>(20.0f, std::fabs(fSlow474));
		float fSlow476 = (fConst25 / fSlow475);
		float fSlow477 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fSlow474)));
		float fSlow478 = std::floor(fSlow477);
		float fSlow479 = (fSlow478 + (1.0f - fSlow477));
		int iSlow480 = int(fSlow477);
		float fSlow481 = (fSlow477 - fSlow478);
		int iSlow482 = (iSlow480 + 1);
		float fSlow483 = std::max<float>(1.00000001e-07f, std::fabs(fSlow451));
		float fSlow484 = (fConst17 * fSlow483);
		float fSlow485 = (1.0f - (fConst7 / fSlow483));
		float fSlow486 = (fSlow412 + (1.0f - fSlow411));
		int iSlow487 = std::min<int>(5001, int(std::max<int>(0, int(iSlow449))));
		float fSlow488 = (fSlow372 + (1.0f - fSlow371));
		int iSlow489 = std::min<int>(5001, int(std::max<int>(0, int(iSlow409))));
		float fSlow490 = (fSlow326 + (1.0f - fSlow325));
		int iSlow491 = std::min<int>(5001, int(std::max<int>(0, int(iSlow369))));
		float fSlow492 = (fConst28 * ((1.0f / float(fHslider83)) + -1.0f));
		float fSlow493 = float(fHslider84);
		int iSlow494 = (std::fabs(fSlow493) < 1.1920929e-07f);
		float fSlow495 = (iSlow494 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow494 ? 1.0f : fSlow493)))));
		float fSlow496 = float(fHslider85);
		int iSlow497 = (std::fabs(fSlow496) < 1.1920929e-07f);
		float fSlow498 = (iSlow497 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow497 ? 1.0f : fSlow496)))));
		float fSlow499 = (1.0f - fSlow498);
		float fSlow500 = (1.0f - fSlow495);
		float fSlow501 = float(fHslider86);
		float fSlow502 = (1.0f / float(fHslider87));
		float fSlow503 = std::tan((fConst8 * float(fHslider88)));
		float fSlow504 = (1.0f / fSlow503);
		float fSlow505 = (1.0f / (((fSlow502 + fSlow504) / fSlow503) + 1.0f));
		float fSlow506 = (((fSlow504 - fSlow502) / fSlow503) + 1.0f);
		float fSlow507 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow503))));
		float fSlow508 = (1.0f / fSlow323);
		float fSlow509 = float(fHslider89);
		int iSlow510 = (fSlow509 > 0.0f);
		float fSlow511 = (float(fHslider90) * std::sin((fConst29 * fSlow322)));
		float fSlow512 = (fConst8 * ((fSlow322 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow509)))) / fSlow511));
		float fSlow513 = (fConst8 * (fSlow322 / fSlow511));
		float fSlow514 = (iSlow510 ? fSlow513 : fSlow512);
		float fSlow515 = ((fSlow508 * (fSlow508 - fSlow514)) + 1.0f);
		float fSlow516 = ((fSlow508 * (fSlow508 + fSlow514)) + 1.0f);
		float fSlow517 = (iSlow510 ? fSlow512 : fSlow513);
		float fSlow518 = ((fSlow508 * (fSlow508 + fSlow517)) + 1.0f);
		float fSlow519 = ((fSlow508 * (fSlow508 - fSlow517)) + 1.0f);
		float fSlow520 = (1.0f / fSlow320);
		float fSlow521 = float(fHslider91);
		int iSlow522 = (fSlow521 > 0.0f);
		float fSlow523 = (float(fHslider92) * std::sin((fConst29 * fSlow319)));
		float fSlow524 = (fConst8 * ((fSlow319 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow521)))) / fSlow523));
		float fSlow525 = (fConst8 * (fSlow319 / fSlow523));
		float fSlow526 = (iSlow522 ? fSlow525 : fSlow524);
		float fSlow527 = ((fSlow520 * (fSlow520 - fSlow526)) + 1.0f);
		float fSlow528 = ((fSlow520 * (fSlow520 + fSlow526)) + 1.0f);
		float fSlow529 = (iSlow522 ? fSlow524 : fSlow525);
		float fSlow530 = ((fSlow520 * (fSlow520 + fSlow529)) + 1.0f);
		float fSlow531 = ((fSlow520 * (fSlow520 - fSlow529)) + 1.0f);
		float fSlow532 = (1.0f / fSlow316);
		float fSlow533 = (((fSlow315 - fSlow313) / fSlow314) + 1.0f);
		float fSlow534 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow314))));
		float fSlow535 = std::min<float>(((0.0500000007f * (150.0f - fSlow46)) + 0.300000012f), 1.85000002f);
		float fSlow536 = std::exp((fConst104 / fSlow535));
		float fSlow537 = mydsp_faustpower2_f(fSlow536);
		float fSlow538 = (1.0f - (fConst102 * fSlow537));
		float fSlow539 = (1.0f - fSlow537);
		float fSlow540 = (fSlow538 / fSlow539);
		float fSlow541 = std::sqrt(std::max<float>(0.0f, ((mydsp_faustpower2_f(fSlow538) / mydsp_faustpower2_f(fSlow539)) + -1.0f)));
		float fSlow542 = (fSlow540 - fSlow541);
		float fSlow543 = (fSlow536 * (fSlow541 + (1.0f - fSlow540)));
		float fSlow544 = ((fConst105 / fSlow536) + -1.0f);
		float fSlow545 = (fSlow53 + 0.5f);
		int iSlow546 = int((fConst7 / fSlow545));
		float fSlow547 = (fConst14 / fSlow545);
		float fSlow548 = (fConst15 / fSlow545);
		float fSlow549 = (fConst16 / fSlow545);
		float fSlow550 = (6.66666651f * (fSlow545 * (1.0f - (0.000500000024f * std::min<float>(fSlow545, 1000.0f)))));
		float fSlow551 = (fConst23 * fSlow545);
		float fSlow552 = (0.0133333337f * (fSlow53 + -299.5f));
		float fSlow553 = (fConst17 * fSlow545);
		float fSlow554 = (fSlow76 + 0.5f);
		int iSlow555 = int((fConst7 / fSlow554));
		float fSlow556 = (fConst14 / fSlow554);
		float fSlow557 = (fConst15 / fSlow554);
		float fSlow558 = (fConst16 / fSlow554);
		float fSlow559 = (6.66666651f * (fSlow554 * (1.0f - (0.000500000024f * std::min<float>(fSlow554, 1000.0f)))));
		float fSlow560 = (fConst23 * fSlow554);
		float fSlow561 = (0.0133333337f * (fSlow76 + -299.5f));
		float fSlow562 = (fConst17 * fSlow554);
		float fSlow563 = (fSlow94 + 0.5f);
		int iSlow564 = int((fConst7 / fSlow563));
		float fSlow565 = (fConst14 / fSlow563);
		float fSlow566 = (fConst15 / fSlow563);
		float fSlow567 = (fConst16 / fSlow563);
		float fSlow568 = (6.66666651f * (fSlow563 * (1.0f - (0.000500000024f * std::min<float>(fSlow563, 1000.0f)))));
		float fSlow569 = (fConst23 * fSlow563);
		float fSlow570 = (0.0133333337f * (fSlow94 + -299.5f));
		float fSlow571 = (fConst17 * fSlow563);
		float fSlow572 = (fSlow112 + 0.5f);
		int iSlow573 = int((fConst7 / fSlow572));
		float fSlow574 = (fConst14 / fSlow572);
		float fSlow575 = (fConst15 / fSlow572);
		float fSlow576 = (fConst16 / fSlow572);
		float fSlow577 = (6.66666651f * (fSlow572 * (1.0f - (0.000500000024f * std::min<float>(fSlow572, 1000.0f)))));
		float fSlow578 = (fConst23 * fSlow572);
		float fSlow579 = (0.0133333337f * (fSlow112 + -299.5f));
		float fSlow580 = (fConst17 * fSlow572);
		float fSlow581 = (fSlow334 + 0.699999988f);
		float fSlow582 = (fConst89 / fSlow581);
		float fSlow583 = float(((1.01160002f * fSlow581) > 600.0f));
		float fSlow584 = (fSlow582 + (-1.99999499f - fSlow583));
		float fSlow585 = (fSlow583 + std::floor(fSlow584));
		float fSlow586 = (fSlow582 + (-1.5f - fSlow585));
		float fSlow587 = (fSlow582 + (-2.5f - fSlow585));
		float fSlow588 = (fSlow582 + (-3.5f - fSlow585));
		float fSlow589 = (fSlow582 + (-4.5f - fSlow585));
		float fSlow590 = ((((0.0f - fSlow586) * (0.0f - (0.5f * fSlow587))) * (0.0f - (0.333333343f * fSlow588))) * (0.0f - (0.25f * fSlow589)));
		int iSlow591 = int(fSlow584);
		int iSlow592 = (std::min<int>(1024, int(std::max<int>(0, int(iSlow591)))) + 1);
		float fSlow593 = (fSlow582 + (-0.5f - fSlow585));
		float fSlow594 = (((0.0f - fSlow587) * (0.0f - (0.5f * fSlow588))) * (0.0f - (0.333333343f * fSlow589)));
		int iSlow595 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow591 + 1))))) + 1);
		float fSlow596 = (0.5f * ((fSlow586 * (0.0f - fSlow588)) * (0.0f - (0.5f * fSlow589))));
		int iSlow597 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow591 + 2))))) + 1);
		float fSlow598 = (fSlow586 * fSlow587);
		float fSlow599 = (0.166666672f * (fSlow598 * (0.0f - fSlow589)));
		int iSlow600 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow591 + 3))))) + 1);
		float fSlow601 = (0.0416666679f * (fSlow598 * fSlow588));
		int iSlow602 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow591 + 4))))) + 1);
		float fSlow603 = (fConst24 * fSlow581);
		float fSlow604 = std::max<float>(fSlow581, 23.4489498f);
		float fSlow605 = std::max<float>(20.0f, std::fabs(fSlow604));
		float fSlow606 = (fConst25 / fSlow605);
		float fSlow607 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fSlow604)));
		float fSlow608 = std::floor(fSlow607);
		float fSlow609 = (fSlow608 + (1.0f - fSlow607));
		int iSlow610 = int(fSlow607);
		float fSlow611 = (fSlow607 - fSlow608);
		int iSlow612 = (iSlow610 + 1);
		float fSlow613 = std::max<float>(1.00000001e-07f, std::fabs(fSlow581));
		float fSlow614 = (fConst17 * fSlow613);
		float fSlow615 = (1.0f - (fConst7 / fSlow613));
		float fSlow616 = (fSlow374 + 0.699999988f);
		float fSlow617 = (fConst89 / fSlow616);
		float fSlow618 = float(((1.01160002f * fSlow616) > 600.0f));
		float fSlow619 = (fSlow617 + (-1.99999499f - fSlow618));
		float fSlow620 = (fSlow618 + std::floor(fSlow619));
		float fSlow621 = (fSlow617 + (-1.5f - fSlow620));
		float fSlow622 = (fSlow617 + (-2.5f - fSlow620));
		float fSlow623 = (fSlow617 + (-3.5f - fSlow620));
		float fSlow624 = (fSlow617 + (-4.5f - fSlow620));
		float fSlow625 = ((((0.0f - fSlow621) * (0.0f - (0.5f * fSlow622))) * (0.0f - (0.333333343f * fSlow623))) * (0.0f - (0.25f * fSlow624)));
		int iSlow626 = int(fSlow619);
		int iSlow627 = (std::min<int>(1024, int(std::max<int>(0, int(iSlow626)))) + 1);
		float fSlow628 = (fSlow617 + (-0.5f - fSlow620));
		float fSlow629 = (((0.0f - fSlow622) * (0.0f - (0.5f * fSlow623))) * (0.0f - (0.333333343f * fSlow624)));
		int iSlow630 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow626 + 1))))) + 1);
		float fSlow631 = (0.5f * ((fSlow621 * (0.0f - fSlow623)) * (0.0f - (0.5f * fSlow624))));
		int iSlow632 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow626 + 2))))) + 1);
		float fSlow633 = (fSlow621 * fSlow622);
		float fSlow634 = (0.166666672f * (fSlow633 * (0.0f - fSlow624)));
		int iSlow635 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow626 + 3))))) + 1);
		float fSlow636 = (0.0416666679f * (fSlow633 * fSlow623));
		int iSlow637 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow626 + 4))))) + 1);
		float fSlow638 = (fConst24 * fSlow616);
		float fSlow639 = std::max<float>(fSlow616, 23.4489498f);
		float fSlow640 = std::max<float>(20.0f, std::fabs(fSlow639));
		float fSlow641 = (fConst25 / fSlow640);
		float fSlow642 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fSlow639)));
		float fSlow643 = std::floor(fSlow642);
		float fSlow644 = (fSlow643 + (1.0f - fSlow642));
		int iSlow645 = int(fSlow642);
		float fSlow646 = (fSlow642 - fSlow643);
		int iSlow647 = (iSlow645 + 1);
		float fSlow648 = std::max<float>(1.00000001e-07f, std::fabs(fSlow616));
		float fSlow649 = (fConst17 * fSlow648);
		float fSlow650 = (1.0f - (fConst7 / fSlow648));
		float fSlow651 = (fSlow414 + 0.699999988f);
		float fSlow652 = (fConst89 / fSlow651);
		float fSlow653 = float(((1.01160002f * fSlow651) > 600.0f));
		float fSlow654 = (fSlow652 + (-1.99999499f - fSlow653));
		float fSlow655 = (fSlow653 + std::floor(fSlow654));
		float fSlow656 = (fSlow652 + (-1.5f - fSlow655));
		float fSlow657 = (fSlow652 + (-2.5f - fSlow655));
		float fSlow658 = (fSlow652 + (-3.5f - fSlow655));
		float fSlow659 = (fSlow652 + (-4.5f - fSlow655));
		float fSlow660 = ((((0.0f - fSlow656) * (0.0f - (0.5f * fSlow657))) * (0.0f - (0.333333343f * fSlow658))) * (0.0f - (0.25f * fSlow659)));
		int iSlow661 = int(fSlow654);
		int iSlow662 = (std::min<int>(1024, int(std::max<int>(0, int(iSlow661)))) + 1);
		float fSlow663 = (fSlow652 + (-0.5f - fSlow655));
		float fSlow664 = (((0.0f - fSlow657) * (0.0f - (0.5f * fSlow658))) * (0.0f - (0.333333343f * fSlow659)));
		int iSlow665 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow661 + 1))))) + 1);
		float fSlow666 = (0.5f * ((fSlow656 * (0.0f - fSlow658)) * (0.0f - (0.5f * fSlow659))));
		int iSlow667 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow661 + 2))))) + 1);
		float fSlow668 = (fSlow656 * fSlow657);
		float fSlow669 = (0.166666672f * (fSlow668 * (0.0f - fSlow659)));
		int iSlow670 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow661 + 3))))) + 1);
		float fSlow671 = (0.0416666679f * (fSlow668 * fSlow658));
		int iSlow672 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow661 + 4))))) + 1);
		float fSlow673 = (fConst24 * fSlow651);
		float fSlow674 = std::max<float>(fSlow651, 23.4489498f);
		float fSlow675 = std::max<float>(20.0f, std::fabs(fSlow674));
		float fSlow676 = (fConst25 / fSlow675);
		float fSlow677 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fSlow674)));
		float fSlow678 = std::floor(fSlow677);
		float fSlow679 = (fSlow678 + (1.0f - fSlow677));
		int iSlow680 = int(fSlow677);
		float fSlow681 = (fSlow677 - fSlow678);
		int iSlow682 = (iSlow680 + 1);
		float fSlow683 = std::max<float>(1.00000001e-07f, std::fabs(fSlow651));
		float fSlow684 = (fConst17 * fSlow683);
		float fSlow685 = (1.0f - (fConst7 / fSlow683));
		float fSlow686 = (fSlow451 + 0.699999988f);
		float fSlow687 = (fConst89 / fSlow686);
		float fSlow688 = float(((1.01160002f * fSlow686) > 600.0f));
		float fSlow689 = (fSlow687 + (-1.99999499f - fSlow688));
		float fSlow690 = (fSlow688 + std::floor(fSlow689));
		float fSlow691 = (fSlow687 + (-1.5f - fSlow690));
		float fSlow692 = (fSlow687 + (-2.5f - fSlow690));
		float fSlow693 = (fSlow687 + (-3.5f - fSlow690));
		float fSlow694 = (fSlow687 + (-4.5f - fSlow690));
		float fSlow695 = ((((0.0f - fSlow691) * (0.0f - (0.5f * fSlow692))) * (0.0f - (0.333333343f * fSlow693))) * (0.0f - (0.25f * fSlow694)));
		int iSlow696 = int(fSlow689);
		int iSlow697 = (std::min<int>(1024, int(std::max<int>(0, int(iSlow696)))) + 1);
		float fSlow698 = (fSlow687 + (-0.5f - fSlow690));
		float fSlow699 = (((0.0f - fSlow692) * (0.0f - (0.5f * fSlow693))) * (0.0f - (0.333333343f * fSlow694)));
		int iSlow700 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow696 + 1))))) + 1);
		float fSlow701 = (0.5f * ((fSlow691 * (0.0f - fSlow693)) * (0.0f - (0.5f * fSlow694))));
		int iSlow702 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow696 + 2))))) + 1);
		float fSlow703 = (fSlow691 * fSlow692);
		float fSlow704 = (0.166666672f * (fSlow703 * (0.0f - fSlow694)));
		int iSlow705 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow696 + 3))))) + 1);
		float fSlow706 = (0.0416666679f * (fSlow703 * fSlow693));
		int iSlow707 = (std::min<int>(1024, int(std::max<int>(0, int((iSlow696 + 4))))) + 1);
		float fSlow708 = (fConst24 * fSlow686);
		float fSlow709 = std::max<float>(fSlow686, 23.4489498f);
		float fSlow710 = std::max<float>(20.0f, std::fabs(fSlow709));
		float fSlow711 = (fConst25 / fSlow710);
		float fSlow712 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fSlow709)));
		float fSlow713 = std::floor(fSlow712);
		float fSlow714 = (fSlow713 + (1.0f - fSlow712));
		int iSlow715 = int(fSlow712);
		float fSlow716 = (fSlow712 - fSlow713);
		int iSlow717 = (iSlow715 + 1);
		float fSlow718 = std::max<float>(1.00000001e-07f, std::fabs(fSlow686));
		float fSlow719 = (fConst17 * fSlow718);
		float fSlow720 = (1.0f - (fConst7 / fSlow718));
		float fSlow721 = (std::pow(10.0f, (0.0500000007f * float(fHslider93))) * (1.0f - float(fCheckbox4)));
		float fSlow722 = (0.398107171f * fSlow721);
		float fSlow723 = (0.00100000005f * float(itbl1mydspSIG1[std::max<int>(0, int(((iSlow7 + (6 * (iSlow8 + 1))) + -1)))]));
		float fSlow724 = (30.0f / fSlow46);
		int iSlow725 = (std::fabs(fSlow724) < 1.1920929e-07f);
		float fSlow726 = (iSlow725 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow725 ? 1.0f : fSlow724)))));
		float fSlow727 = ((fSlow22 + fSlow24) * (1.0f - fSlow726));
		float fSlow728 = (1.0f / float(fHslider94));
		float fSlow729 = std::tan((fConst8 * float(fHslider95)));
		float fSlow730 = (1.0f / fSlow729);
		float fSlow731 = (1.0f / (((fSlow728 + fSlow730) / fSlow729) + 1.0f));
		float fSlow732 = float(fHslider96);
		float fSlow733 = std::tan((fConst8 * fSlow732));
		float fSlow734 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow733))));
		float fSlow735 = float(fHslider97);
		float fSlow736 = std::tan((fConst8 * fSlow735));
		float fSlow737 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow736))));
		float fSlow738 = (float(fEntry4) + -1.0f);
		int iSlow739 = (fSlow738 >= 2.0f);
		int iSlow740 = (fSlow738 >= 1.0f);
		float fSlow741 = float(fHslider98);
		int iSlow742 = (fSlow741 > 0.49000001f);
		int iSlow743 = (2 * iSlow742);
		int iSlow744 = (1 - iSlow742);
		float fSlow745 = float(fHslider99);
		int iSlow746 = (iSlow42 * iSlow744);
		int iSlow747 = (fSlow745 > 0.0f);
		float fSlow748 = (0.0f - fSlow745);
		int iSlow749 = ((fSlow745 > 6.0f) + (fSlow745 > 3.0f));
		int iSlow750 = (std::fabs((fSlow741 + -0.800000012f)) < 0.0299999993f);
		Soundfile* fSoundfile0ca = fSoundfile0;
		int* fSoundfile0ca_le0 = fSoundfile0ca->fLength;
		int iSlow751 = (fSoundfile0ca_le0[0] + -1);
		int* fSoundfile0ca_of0 = fSoundfile0ca->fOffset;
		FAUSTFLOAT** fSoundfile0ca_bu0 = fSoundfile0ca->fBuffers;
		FAUSTFLOAT* fSoundfile0ca_bu_ch0 = fSoundfile0ca_bu0[0];
		int* fSoundfile0ca_le1 = fSoundfile0ca->fLength;
		int iSlow752 = (fSoundfile0ca_le1[1] + -1);
		int* fSoundfile0ca_of1 = fSoundfile0ca->fOffset;
		FAUSTFLOAT** fSoundfile0ca_bu1 = fSoundfile0ca->fBuffers;
		FAUSTFLOAT* fSoundfile0ca_bu_ch1 = fSoundfile0ca_bu1[0];
		int* fSoundfile0ca_le2 = fSoundfile0ca->fLength;
		int iSlow753 = (fSoundfile0ca_le2[2] + -1);
		int* fSoundfile0ca_of2 = fSoundfile0ca->fOffset;
		FAUSTFLOAT** fSoundfile0ca_bu2 = fSoundfile0ca->fBuffers;
		FAUSTFLOAT* fSoundfile0ca_bu_ch2 = fSoundfile0ca_bu2[0];
		Soundfile* fSoundfile1ca = fSoundfile1;
		int* fSoundfile1ca_le0 = fSoundfile1ca->fLength;
		int iSlow754 = (fSoundfile1ca_le0[0] + -1);
		int* fSoundfile1ca_of0 = fSoundfile1ca->fOffset;
		FAUSTFLOAT** fSoundfile1ca_bu0 = fSoundfile1ca->fBuffers;
		FAUSTFLOAT* fSoundfile1ca_bu_ch0 = fSoundfile1ca_bu0[0];
		int* fSoundfile1ca_le1 = fSoundfile1ca->fLength;
		int iSlow755 = (fSoundfile1ca_le1[1] + -1);
		int* fSoundfile1ca_of1 = fSoundfile1ca->fOffset;
		FAUSTFLOAT** fSoundfile1ca_bu1 = fSoundfile1ca->fBuffers;
		FAUSTFLOAT* fSoundfile1ca_bu_ch1 = fSoundfile1ca_bu1[0];
		int* fSoundfile1ca_le2 = fSoundfile1ca->fLength;
		int iSlow756 = (fSoundfile1ca_le2[2] + -1);
		int* fSoundfile1ca_of2 = fSoundfile1ca->fOffset;
		FAUSTFLOAT** fSoundfile1ca_bu2 = fSoundfile1ca->fBuffers;
		FAUSTFLOAT* fSoundfile1ca_bu_ch2 = fSoundfile1ca_bu2[0];
		Soundfile* fSoundfile2ca = fSoundfile2;
		int* fSoundfile2ca_le0 = fSoundfile2ca->fLength;
		int iSlow757 = (fSoundfile2ca_le0[0] + -1);
		int* fSoundfile2ca_of0 = fSoundfile2ca->fOffset;
		FAUSTFLOAT** fSoundfile2ca_bu0 = fSoundfile2ca->fBuffers;
		FAUSTFLOAT* fSoundfile2ca_bu_ch0 = fSoundfile2ca_bu0[0];
		int* fSoundfile2ca_le1 = fSoundfile2ca->fLength;
		int iSlow758 = (fSoundfile2ca_le1[1] + -1);
		int* fSoundfile2ca_of1 = fSoundfile2ca->fOffset;
		FAUSTFLOAT** fSoundfile2ca_bu1 = fSoundfile2ca->fBuffers;
		FAUSTFLOAT* fSoundfile2ca_bu_ch1 = fSoundfile2ca_bu1[0];
		int* fSoundfile2ca_le2 = fSoundfile2ca->fLength;
		int iSlow759 = (fSoundfile2ca_le2[2] + -1);
		int* fSoundfile2ca_of2 = fSoundfile2ca->fOffset;
		FAUSTFLOAT** fSoundfile2ca_bu2 = fSoundfile2ca->fBuffers;
		FAUSTFLOAT* fSoundfile2ca_bu_ch2 = fSoundfile2ca_bu2[0];
		float fSlow760 = (fConst28 * ((1.0f / float(fHslider100)) + -1.0f));
		float fSlow761 = float(fHslider101);
		int iSlow762 = (std::fabs(fSlow761) < 1.1920929e-07f);
		float fSlow763 = (iSlow762 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow762 ? 1.0f : fSlow761)))));
		float fSlow764 = float(fHslider102);
		int iSlow765 = (std::fabs(fSlow764) < 1.1920929e-07f);
		float fSlow766 = (iSlow765 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow765 ? 1.0f : fSlow764)))));
		float fSlow767 = (1.0f - fSlow766);
		float fSlow768 = (1.0f - fSlow763);
		float fSlow769 = float(fHslider103);
		float fSlow770 = (1.0f / float(fHslider104));
		float fSlow771 = std::tan((fConst8 * float(fHslider105)));
		float fSlow772 = (1.0f / fSlow771);
		float fSlow773 = (1.0f / (((fSlow770 + fSlow772) / fSlow771) + 1.0f));
		float fSlow774 = (((fSlow772 - fSlow770) / fSlow771) + 1.0f);
		float fSlow775 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow771))));
		float fSlow776 = (1.0f / fSlow736);
		float fSlow777 = float(fHslider106);
		int iSlow778 = (fSlow777 > 0.0f);
		float fSlow779 = (float(fHslider107) * std::sin((fConst29 * fSlow735)));
		float fSlow780 = (fConst8 * ((fSlow735 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow777)))) / fSlow779));
		float fSlow781 = (fConst8 * (fSlow735 / fSlow779));
		float fSlow782 = (iSlow778 ? fSlow781 : fSlow780);
		float fSlow783 = ((fSlow776 * (fSlow776 - fSlow782)) + 1.0f);
		float fSlow784 = ((fSlow776 * (fSlow776 + fSlow782)) + 1.0f);
		float fSlow785 = (iSlow778 ? fSlow780 : fSlow781);
		float fSlow786 = ((fSlow776 * (fSlow776 + fSlow785)) + 1.0f);
		float fSlow787 = ((fSlow776 * (fSlow776 - fSlow785)) + 1.0f);
		float fSlow788 = (1.0f / fSlow733);
		float fSlow789 = float(fHslider108);
		int iSlow790 = (fSlow789 > 0.0f);
		float fSlow791 = (float(fHslider109) * std::sin((fConst29 * fSlow732)));
		float fSlow792 = (fConst8 * ((fSlow732 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow789)))) / fSlow791));
		float fSlow793 = (fConst8 * (fSlow732 / fSlow791));
		float fSlow794 = (iSlow790 ? fSlow793 : fSlow792);
		float fSlow795 = ((fSlow788 * (fSlow788 - fSlow794)) + 1.0f);
		float fSlow796 = ((fSlow788 * (fSlow788 + fSlow794)) + 1.0f);
		float fSlow797 = (iSlow790 ? fSlow792 : fSlow793);
		float fSlow798 = ((fSlow788 * (fSlow788 + fSlow797)) + 1.0f);
		float fSlow799 = ((fSlow788 * (fSlow788 - fSlow797)) + 1.0f);
		float fSlow800 = (((fSlow730 - fSlow728) / fSlow729) + 1.0f);
		float fSlow801 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow729))));
		float fSlow802 = (fConst111 * fSlow46);
		float fSlow803 = (std::pow(10.0f, (0.0500000007f * float(fHslider110))) * (1.0f - float(fCheckbox5)));
		float fSlow804 = (0.316227764f * fSlow803);
		float fSlow805 = (0.00100000005f * float(itbl1mydspSIG1[std::max<int>(0, int((iSlow9 + 11)))]));
		float fSlow806 = (1.0f / float(fHslider111));
		float fSlow807 = std::tan((fConst8 * float(fHslider112)));
		float fSlow808 = (1.0f / fSlow807);
		float fSlow809 = (((fSlow806 + fSlow808) / fSlow807) + 1.0f);
		float fSlow810 = (0.300000012f / fSlow809);
		float fSlow811 = float(fHslider113);
		float fSlow812 = std::tan((fConst8 * fSlow811));
		float fSlow813 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow812))));
		float fSlow814 = float(fHslider114);
		float fSlow815 = std::tan((fConst8 * fSlow814));
		float fSlow816 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow815))));
		float fSlow817 = (float(fEntry5) + -1.0f);
		int iSlow818 = (fSlow817 >= 2.0f);
		int iSlow819 = (fSlow817 >= 1.0f);
		float fSlow820 = float(fHslider115);
		int iSlow821 = (fSlow820 > 0.0f);
		float fSlow822 = (0.0f - fSlow820);
		int iSlow823 = ((fSlow820 > 6.0f) + (fSlow820 > 3.0f));
		Soundfile* fSoundfile3ca = fSoundfile3;
		int* fSoundfile3ca_le0 = fSoundfile3ca->fLength;
		int iSlow824 = (fSoundfile3ca_le0[0] + -1);
		int* fSoundfile3ca_of0 = fSoundfile3ca->fOffset;
		FAUSTFLOAT** fSoundfile3ca_bu0 = fSoundfile3ca->fBuffers;
		FAUSTFLOAT* fSoundfile3ca_bu_ch0 = fSoundfile3ca_bu0[0];
		int* fSoundfile3ca_le1 = fSoundfile3ca->fLength;
		int iSlow825 = (fSoundfile3ca_le1[1] + -1);
		int* fSoundfile3ca_of1 = fSoundfile3ca->fOffset;
		FAUSTFLOAT** fSoundfile3ca_bu1 = fSoundfile3ca->fBuffers;
		FAUSTFLOAT* fSoundfile3ca_bu_ch1 = fSoundfile3ca_bu1[0];
		int* fSoundfile3ca_le2 = fSoundfile3ca->fLength;
		int iSlow826 = (fSoundfile3ca_le2[2] + -1);
		int* fSoundfile3ca_of2 = fSoundfile3ca->fOffset;
		FAUSTFLOAT** fSoundfile3ca_bu2 = fSoundfile3ca->fBuffers;
		FAUSTFLOAT* fSoundfile3ca_bu_ch2 = fSoundfile3ca_bu2[0];
		Soundfile* fSoundfile4ca = fSoundfile4;
		int* fSoundfile4ca_le0 = fSoundfile4ca->fLength;
		int iSlow827 = (fSoundfile4ca_le0[0] + -1);
		int* fSoundfile4ca_of0 = fSoundfile4ca->fOffset;
		FAUSTFLOAT** fSoundfile4ca_bu0 = fSoundfile4ca->fBuffers;
		FAUSTFLOAT* fSoundfile4ca_bu_ch0 = fSoundfile4ca_bu0[0];
		int* fSoundfile4ca_le1 = fSoundfile4ca->fLength;
		int iSlow828 = (fSoundfile4ca_le1[1] + -1);
		int* fSoundfile4ca_of1 = fSoundfile4ca->fOffset;
		FAUSTFLOAT** fSoundfile4ca_bu1 = fSoundfile4ca->fBuffers;
		FAUSTFLOAT* fSoundfile4ca_bu_ch1 = fSoundfile4ca_bu1[0];
		int* fSoundfile4ca_le2 = fSoundfile4ca->fLength;
		int iSlow829 = (fSoundfile4ca_le2[2] + -1);
		int* fSoundfile4ca_of2 = fSoundfile4ca->fOffset;
		FAUSTFLOAT** fSoundfile4ca_bu2 = fSoundfile4ca->fBuffers;
		FAUSTFLOAT* fSoundfile4ca_bu_ch2 = fSoundfile4ca_bu2[0];
		float fSlow830 = (fConst28 * ((1.0f / float(fHslider116)) + -1.0f));
		float fSlow831 = float(fHslider117);
		int iSlow832 = (std::fabs(fSlow831) < 1.1920929e-07f);
		float fSlow833 = (iSlow832 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow832 ? 1.0f : fSlow831)))));
		float fSlow834 = float(fHslider118);
		int iSlow835 = (std::fabs(fSlow834) < 1.1920929e-07f);
		float fSlow836 = (iSlow835 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow835 ? 1.0f : fSlow834)))));
		float fSlow837 = (1.0f - fSlow836);
		float fSlow838 = (1.0f - fSlow833);
		float fSlow839 = float(fHslider119);
		float fSlow840 = (1.0f / float(fHslider120));
		float fSlow841 = std::tan((fConst8 * float(fHslider121)));
		float fSlow842 = (1.0f / fSlow841);
		float fSlow843 = (1.0f / (((fSlow840 + fSlow842) / fSlow841) + 1.0f));
		float fSlow844 = (((fSlow842 - fSlow840) / fSlow841) + 1.0f);
		float fSlow845 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow841))));
		float fSlow846 = (1.0f / fSlow815);
		float fSlow847 = float(fHslider122);
		int iSlow848 = (fSlow847 > 0.0f);
		float fSlow849 = (float(fHslider123) * std::sin((fConst29 * fSlow814)));
		float fSlow850 = (fConst8 * ((fSlow814 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow847)))) / fSlow849));
		float fSlow851 = (fConst8 * (fSlow814 / fSlow849));
		float fSlow852 = (iSlow848 ? fSlow851 : fSlow850);
		float fSlow853 = ((fSlow846 * (fSlow846 - fSlow852)) + 1.0f);
		float fSlow854 = ((fSlow846 * (fSlow846 + fSlow852)) + 1.0f);
		float fSlow855 = (iSlow848 ? fSlow850 : fSlow851);
		float fSlow856 = ((fSlow846 * (fSlow846 + fSlow855)) + 1.0f);
		float fSlow857 = ((fSlow846 * (fSlow846 - fSlow855)) + 1.0f);
		float fSlow858 = (1.0f / fSlow812);
		float fSlow859 = float(fHslider124);
		int iSlow860 = (fSlow859 > 0.0f);
		float fSlow861 = (float(fHslider125) * std::sin((fConst29 * fSlow811)));
		float fSlow862 = (fConst8 * ((fSlow811 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow859)))) / fSlow861));
		float fSlow863 = (fConst8 * (fSlow811 / fSlow861));
		float fSlow864 = (iSlow860 ? fSlow863 : fSlow862);
		float fSlow865 = ((fSlow858 * (fSlow858 - fSlow864)) + 1.0f);
		float fSlow866 = ((fSlow858 * (fSlow858 + fSlow864)) + 1.0f);
		float fSlow867 = (iSlow860 ? fSlow862 : fSlow863);
		float fSlow868 = ((fSlow858 * (fSlow858 + fSlow867)) + 1.0f);
		float fSlow869 = ((fSlow858 * (fSlow858 - fSlow867)) + 1.0f);
		float fSlow870 = (1.0f / fSlow809);
		float fSlow871 = (((fSlow808 - fSlow806) / fSlow807) + 1.0f);
		float fSlow872 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow807))));
		int iSlow873 = (int(std::min<float>(100000.0f, std::max<float>(0.0f, (fConst349 / fSlow46)))) + 1);
		float fSlow874 = std::exp((fConst353 / fSlow535));
		float fSlow875 = mydsp_faustpower2_f(fSlow874);
		float fSlow876 = (1.0f - (fConst102 * fSlow875));
		float fSlow877 = (1.0f - fSlow875);
		float fSlow878 = (fSlow876 / fSlow877);
		float fSlow879 = std::sqrt(std::max<float>(0.0f, ((mydsp_faustpower2_f(fSlow876) / mydsp_faustpower2_f(fSlow877)) + -1.0f)));
		float fSlow880 = (fSlow878 - fSlow879);
		float fSlow881 = (fSlow874 * (fSlow879 + (1.0f - fSlow878)));
		float fSlow882 = ((fConst354 / fSlow874) + -1.0f);
		float fSlow883 = std::exp((fConst359 / fSlow535));
		float fSlow884 = mydsp_faustpower2_f(fSlow883);
		float fSlow885 = (1.0f - (fConst102 * fSlow884));
		float fSlow886 = (1.0f - fSlow884);
		float fSlow887 = (fSlow885 / fSlow886);
		float fSlow888 = std::sqrt(std::max<float>(0.0f, ((mydsp_faustpower2_f(fSlow885) / mydsp_faustpower2_f(fSlow886)) + -1.0f)));
		float fSlow889 = (fSlow887 - fSlow888);
		float fSlow890 = (fSlow883 * (fSlow888 + (1.0f - fSlow887)));
		float fSlow891 = ((fConst360 / fSlow883) + -1.0f);
		float fSlow892 = std::exp((fConst365 / fSlow535));
		float fSlow893 = mydsp_faustpower2_f(fSlow892);
		float fSlow894 = (1.0f - (fConst102 * fSlow893));
		float fSlow895 = (1.0f - fSlow893);
		float fSlow896 = (fSlow894 / fSlow895);
		float fSlow897 = std::sqrt(std::max<float>(0.0f, ((mydsp_faustpower2_f(fSlow894) / mydsp_faustpower2_f(fSlow895)) + -1.0f)));
		float fSlow898 = (fSlow896 - fSlow897);
		float fSlow899 = (fSlow892 * (fSlow897 + (1.0f - fSlow896)));
		float fSlow900 = ((fConst366 / fSlow892) + -1.0f);
		float fSlow901 = std::exp((fConst371 / fSlow535));
		float fSlow902 = mydsp_faustpower2_f(fSlow901);
		float fSlow903 = (1.0f - (fConst102 * fSlow902));
		float fSlow904 = (1.0f - fSlow902);
		float fSlow905 = (fSlow903 / fSlow904);
		float fSlow906 = std::sqrt(std::max<float>(0.0f, ((mydsp_faustpower2_f(fSlow903) / mydsp_faustpower2_f(fSlow904)) + -1.0f)));
		float fSlow907 = (fSlow905 - fSlow906);
		float fSlow908 = (fSlow901 * (fSlow906 + (1.0f - fSlow905)));
		float fSlow909 = ((fConst372 / fSlow901) + -1.0f);
		float fSlow910 = (0.949999988f / fSlow809);
		float fSlow911 = std::exp((fConst377 / fSlow535));
		float fSlow912 = mydsp_faustpower2_f(fSlow911);
		float fSlow913 = (1.0f - (fConst102 * fSlow912));
		float fSlow914 = (1.0f - fSlow912);
		float fSlow915 = (fSlow913 / fSlow914);
		float fSlow916 = std::sqrt(std::max<float>(0.0f, ((mydsp_faustpower2_f(fSlow913) / mydsp_faustpower2_f(fSlow914)) + -1.0f)));
		float fSlow917 = (fSlow915 - fSlow916);
		float fSlow918 = (fSlow911 * (fSlow916 + (1.0f - fSlow915)));
		float fSlow919 = ((fConst378 / fSlow911) + -1.0f);
		float fSlow920 = std::exp((fConst383 / fSlow535));
		float fSlow921 = mydsp_faustpower2_f(fSlow920);
		float fSlow922 = (1.0f - (fConst102 * fSlow921));
		float fSlow923 = (1.0f - fSlow921);
		float fSlow924 = (fSlow922 / fSlow923);
		float fSlow925 = std::sqrt(std::max<float>(0.0f, ((mydsp_faustpower2_f(fSlow922) / mydsp_faustpower2_f(fSlow923)) + -1.0f)));
		float fSlow926 = (fSlow924 - fSlow925);
		float fSlow927 = (fSlow920 * (fSlow925 + (1.0f - fSlow924)));
		float fSlow928 = ((fConst384 / fSlow920) + -1.0f);
		float fSlow929 = std::exp((fConst389 / fSlow535));
		float fSlow930 = mydsp_faustpower2_f(fSlow929);
		float fSlow931 = (1.0f - (fConst102 * fSlow930));
		float fSlow932 = (1.0f - fSlow930);
		float fSlow933 = (fSlow931 / fSlow932);
		float fSlow934 = std::sqrt(std::max<float>(0.0f, ((mydsp_faustpower2_f(fSlow931) / mydsp_faustpower2_f(fSlow932)) + -1.0f)));
		float fSlow935 = (fSlow933 - fSlow934);
		float fSlow936 = (fSlow929 * (fSlow934 + (1.0f - fSlow933)));
		float fSlow937 = ((fConst390 / fSlow929) + -1.0f);
		float fSlow938 = (0.00100000005f * float(fHslider126));
		float fSlow939 = (1.0f / float(fHslider128));
		float fSlow940 = std::tan((fConst8 * float(fHslider129)));
		float fSlow941 = (1.0f / fSlow940);
		float fSlow942 = (((fSlow939 + fSlow941) / fSlow940) + 1.0f);
		float fSlow943 = ((std::pow(10.0f, (0.0500000007f * float(fHslider127))) * (1.0f - float(fCheckbox6))) / fSlow942);
		float fSlow944 = (0.00100000005f * float(itbl1mydspSIG1[std::max<int>(0, int((iSlow9 + -1)))]));
		float fSlow945 = float(fHslider130);
		float fSlow946 = std::tan((fConst8 * fSlow945));
		float fSlow947 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow946))));
		float fSlow948 = float(fHslider131);
		float fSlow949 = std::tan((fConst8 * fSlow948));
		float fSlow950 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow949))));
		float fSlow951 = (float(fEntry6) + -1.0f);
		int iSlow952 = (fSlow951 >= 2.0f);
		int iSlow953 = (fSlow951 >= 1.0f);
		int iSlow954 = (std::fabs((fSlow741 + -0.699999988f)) < 0.0299999993f);
		float fSlow955 = float(fHslider132);
		int iSlow956 = (fSlow955 > 0.0f);
		float fSlow957 = (0.0f - fSlow955);
		Soundfile* fSoundfile5ca = fSoundfile5;
		int* fSoundfile5ca_le0 = fSoundfile5ca->fLength;
		int iSlow958 = (fSoundfile5ca_le0[0] + -1);
		int* fSoundfile5ca_of0 = fSoundfile5ca->fOffset;
		FAUSTFLOAT** fSoundfile5ca_bu0 = fSoundfile5ca->fBuffers;
		FAUSTFLOAT* fSoundfile5ca_bu_ch0 = fSoundfile5ca_bu0[0];
		int* fSoundfile5ca_le1 = fSoundfile5ca->fLength;
		int iSlow959 = (fSoundfile5ca_le1[1] + -1);
		int* fSoundfile5ca_of1 = fSoundfile5ca->fOffset;
		FAUSTFLOAT** fSoundfile5ca_bu1 = fSoundfile5ca->fBuffers;
		FAUSTFLOAT* fSoundfile5ca_bu_ch1 = fSoundfile5ca_bu1[0];
		int* fSoundfile5ca_le2 = fSoundfile5ca->fLength;
		int iSlow960 = (fSoundfile5ca_le2[2] + -1);
		int* fSoundfile5ca_of2 = fSoundfile5ca->fOffset;
		FAUSTFLOAT** fSoundfile5ca_bu2 = fSoundfile5ca->fBuffers;
		FAUSTFLOAT* fSoundfile5ca_bu_ch2 = fSoundfile5ca_bu2[0];
		float fSlow961 = (fConst28 * ((1.0f / float(fHslider133)) + -1.0f));
		float fSlow962 = float(fHslider134);
		int iSlow963 = (std::fabs(fSlow962) < 1.1920929e-07f);
		float fSlow964 = (iSlow963 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow963 ? 1.0f : fSlow962)))));
		float fSlow965 = float(fHslider135);
		int iSlow966 = (std::fabs(fSlow965) < 1.1920929e-07f);
		float fSlow967 = (iSlow966 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow966 ? 1.0f : fSlow965)))));
		float fSlow968 = (1.0f - fSlow967);
		float fSlow969 = (1.0f - fSlow964);
		float fSlow970 = float(fHslider136);
		float fSlow971 = (1.0f / float(fHslider137));
		float fSlow972 = std::tan((fConst8 * float(fHslider138)));
		float fSlow973 = (1.0f / fSlow972);
		float fSlow974 = (1.0f / (((fSlow971 + fSlow973) / fSlow972) + 1.0f));
		float fSlow975 = (((fSlow973 - fSlow971) / fSlow972) + 1.0f);
		float fSlow976 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow972))));
		float fSlow977 = (1.0f / fSlow949);
		float fSlow978 = float(fHslider139);
		int iSlow979 = (fSlow978 > 0.0f);
		float fSlow980 = (float(fHslider140) * std::sin((fConst29 * fSlow948)));
		float fSlow981 = (fConst8 * ((fSlow948 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow978)))) / fSlow980));
		float fSlow982 = (fConst8 * (fSlow948 / fSlow980));
		float fSlow983 = (iSlow979 ? fSlow982 : fSlow981);
		float fSlow984 = ((fSlow977 * (fSlow977 - fSlow983)) + 1.0f);
		float fSlow985 = ((fSlow977 * (fSlow977 + fSlow983)) + 1.0f);
		float fSlow986 = (iSlow979 ? fSlow981 : fSlow982);
		float fSlow987 = ((fSlow977 * (fSlow977 + fSlow986)) + 1.0f);
		float fSlow988 = ((fSlow977 * (fSlow977 - fSlow986)) + 1.0f);
		float fSlow989 = (1.0f / fSlow946);
		float fSlow990 = float(fHslider141);
		int iSlow991 = (fSlow990 > 0.0f);
		float fSlow992 = (float(fHslider142) * std::sin((fConst29 * fSlow945)));
		float fSlow993 = (fConst8 * ((fSlow945 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow990)))) / fSlow992));
		float fSlow994 = (fConst8 * (fSlow945 / fSlow992));
		float fSlow995 = (iSlow991 ? fSlow994 : fSlow993);
		float fSlow996 = ((fSlow989 * (fSlow989 - fSlow995)) + 1.0f);
		float fSlow997 = ((fSlow989 * (fSlow989 + fSlow995)) + 1.0f);
		float fSlow998 = (iSlow991 ? fSlow993 : fSlow994);
		float fSlow999 = ((fSlow989 * (fSlow989 + fSlow998)) + 1.0f);
		float fSlow1000 = ((fSlow989 * (fSlow989 - fSlow998)) + 1.0f);
		float fSlow1001 = (1.0f / fSlow942);
		float fSlow1002 = (((fSlow941 - fSlow939) / fSlow940) + 1.0f);
		float fSlow1003 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow940))));
		float fSlow1004 = (std::pow(10.0f, (0.0500000007f * float(fHslider143))) * (1.0f - float(fCheckbox7)));
		float fSlow1005 = (0.00100000005f * float(itbl1mydspSIG1[std::max<int>(0, int((iSlow9 + 41)))]));
		float fSlow1006 = (1.0f / float(fHslider144));
		float fSlow1007 = std::tan((fConst8 * float(fHslider145)));
		float fSlow1008 = (1.0f / fSlow1007);
		float fSlow1009 = (((fSlow1006 + fSlow1008) / fSlow1007) + 1.0f);
		float fSlow1010 = (0.300000012f / fSlow1009);
		float fSlow1011 = float(fHslider146);
		float fSlow1012 = std::tan((fConst8 * fSlow1011));
		float fSlow1013 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow1012))));
		float fSlow1014 = float(fHslider147);
		float fSlow1015 = std::tan((fConst8 * fSlow1014));
		float fSlow1016 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow1015))));
		float fSlow1017 = (float(fEntry7) + -1.0f);
		int iSlow1018 = (fSlow1017 >= 2.0f);
		int iSlow1019 = (fSlow1017 >= 1.0f);
		float fSlow1020 = float(fHslider148);
		int iSlow1021 = (fSlow1020 > 0.0f);
		float fSlow1022 = (0.0f - fSlow1020);
		Soundfile* fSoundfile6ca = fSoundfile6;
		int* fSoundfile6ca_le0 = fSoundfile6ca->fLength;
		int iSlow1023 = (fSoundfile6ca_le0[0] + -1);
		int* fSoundfile6ca_of0 = fSoundfile6ca->fOffset;
		FAUSTFLOAT** fSoundfile6ca_bu0 = fSoundfile6ca->fBuffers;
		FAUSTFLOAT* fSoundfile6ca_bu_ch0 = fSoundfile6ca_bu0[0];
		int* fSoundfile6ca_le1 = fSoundfile6ca->fLength;
		int iSlow1024 = (fSoundfile6ca_le1[1] + -1);
		int* fSoundfile6ca_of1 = fSoundfile6ca->fOffset;
		FAUSTFLOAT** fSoundfile6ca_bu1 = fSoundfile6ca->fBuffers;
		FAUSTFLOAT* fSoundfile6ca_bu_ch1 = fSoundfile6ca_bu1[0];
		int* fSoundfile6ca_le2 = fSoundfile6ca->fLength;
		int iSlow1025 = (fSoundfile6ca_le2[2] + -1);
		int* fSoundfile6ca_of2 = fSoundfile6ca->fOffset;
		FAUSTFLOAT** fSoundfile6ca_bu2 = fSoundfile6ca->fBuffers;
		FAUSTFLOAT* fSoundfile6ca_bu_ch2 = fSoundfile6ca_bu2[0];
		float fSlow1026 = (fConst28 * ((1.0f / float(fHslider149)) + -1.0f));
		float fSlow1027 = float(fHslider150);
		int iSlow1028 = (std::fabs(fSlow1027) < 1.1920929e-07f);
		float fSlow1029 = (iSlow1028 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow1028 ? 1.0f : fSlow1027)))));
		float fSlow1030 = float(fHslider151);
		int iSlow1031 = (std::fabs(fSlow1030) < 1.1920929e-07f);
		float fSlow1032 = (iSlow1031 ? 0.0f : std::exp((0.0f - (fConst17 / (iSlow1031 ? 1.0f : fSlow1030)))));
		float fSlow1033 = (1.0f - fSlow1032);
		float fSlow1034 = (1.0f - fSlow1029);
		float fSlow1035 = float(fHslider152);
		float fSlow1036 = (1.0f / float(fHslider153));
		float fSlow1037 = std::tan((fConst8 * float(fHslider154)));
		float fSlow1038 = (1.0f / fSlow1037);
		float fSlow1039 = (1.0f / (((fSlow1036 + fSlow1038) / fSlow1037) + 1.0f));
		float fSlow1040 = (((fSlow1038 - fSlow1036) / fSlow1037) + 1.0f);
		float fSlow1041 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow1037))));
		float fSlow1042 = (1.0f / fSlow1015);
		float fSlow1043 = float(fHslider155);
		int iSlow1044 = (fSlow1043 > 0.0f);
		float fSlow1045 = (float(fHslider156) * std::sin((fConst29 * fSlow1014)));
		float fSlow1046 = (fConst8 * ((fSlow1014 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow1043)))) / fSlow1045));
		float fSlow1047 = (fConst8 * (fSlow1014 / fSlow1045));
		float fSlow1048 = (iSlow1044 ? fSlow1047 : fSlow1046);
		float fSlow1049 = ((fSlow1042 * (fSlow1042 - fSlow1048)) + 1.0f);
		float fSlow1050 = ((fSlow1042 * (fSlow1042 + fSlow1048)) + 1.0f);
		float fSlow1051 = (iSlow1044 ? fSlow1046 : fSlow1047);
		float fSlow1052 = ((fSlow1042 * (fSlow1042 + fSlow1051)) + 1.0f);
		float fSlow1053 = ((fSlow1042 * (fSlow1042 - fSlow1051)) + 1.0f);
		float fSlow1054 = (1.0f / fSlow1012);
		float fSlow1055 = float(fHslider157);
		int iSlow1056 = (fSlow1055 > 0.0f);
		float fSlow1057 = (float(fHslider158) * std::sin((fConst29 * fSlow1011)));
		float fSlow1058 = (fConst8 * ((fSlow1011 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow1055)))) / fSlow1057));
		float fSlow1059 = (fConst8 * (fSlow1011 / fSlow1057));
		float fSlow1060 = (iSlow1056 ? fSlow1059 : fSlow1058);
		float fSlow1061 = ((fSlow1054 * (fSlow1054 - fSlow1060)) + 1.0f);
		float fSlow1062 = ((fSlow1054 * (fSlow1054 + fSlow1060)) + 1.0f);
		float fSlow1063 = (iSlow1056 ? fSlow1058 : fSlow1059);
		float fSlow1064 = ((fSlow1054 * (fSlow1054 + fSlow1063)) + 1.0f);
		float fSlow1065 = ((fSlow1054 * (fSlow1054 - fSlow1063)) + 1.0f);
		float fSlow1066 = (1.0f / fSlow1009);
		float fSlow1067 = (((fSlow1008 - fSlow1006) / fSlow1007) + 1.0f);
		float fSlow1068 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow1007))));
		float fSlow1069 = std::pow(10.0f, (0.0500000007f * float(fVslider3)));
		float fSlow1070 = (0.00100000005f * float(iSlow25));
		float fSlow1071 = std::max<float>(1.00000001e-07f, std::fabs(((4750.0f * mydsp_faustpower2_f(fSlow24)) + 250.0f)));
		float fSlow1072 = (fConst17 * fSlow1071);
		float fSlow1073 = (1.0f - (fConst7 / fSlow1071));
		float fSlow1074 = std::tan((fConst8 * ((19000.0f * mydsp_faustpower2_f(fSlow22)) + 1000.0f)));
		float fSlow1075 = (1.0f / fSlow1074);
		float fSlow1076 = (1.0f / (((fSlow1075 + 0.200000003f) / fSlow1074) + 1.0f));
		float fSlow1077 = (0.00100000005f * float(iSlow23));
		float fSlow1078 = (((fSlow1075 + -0.200000003f) / fSlow1074) + 1.0f);
		float fSlow1079 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow1074))));
		float fSlow1080 = float((iSlow4 == 3));
		float fSlow1081 = (fConst17 * (((0.150000006f * fSlow1080) + (1.39999998f * float((iSlow4 > 3)))) + (0.5f * float((iSlow4 > 4)))));
		float fSlow1082 = ((0.5f * fSlow1080) + (1.20000005f * float((iSlow4 == 4))));
		int iSlow1083 = (iSlow4 == 5);
		float fSlow1084 = (0.00100000005f * (fSlow1082 + (1.39999998f * float(iSlow1083))));
		float fSlow1085 = float(fHslider159);
		float fSlow1086 = (1.0f / float(fHslider160));
		float fSlow1087 = std::tan((fConst8 * float(fHslider161)));
		float fSlow1088 = (1.0f / fSlow1087);
		float fSlow1089 = (1.0f / (((fSlow1086 + fSlow1088) / fSlow1087) + 1.0f));
		float fSlow1090 = (((fSlow1088 - fSlow1086) / fSlow1087) + 1.0f);
		float fSlow1091 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow1087))));
		float fSlow1092 = (1.0f / fSlow19);
		float fSlow1093 = float(fHslider162);
		int iSlow1094 = (fSlow1093 > 0.0f);
		float fSlow1095 = (float(fHslider163) * std::sin((fConst29 * fSlow18)));
		float fSlow1096 = (fConst8 * ((fSlow18 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow1093)))) / fSlow1095));
		float fSlow1097 = (fConst8 * (fSlow18 / fSlow1095));
		float fSlow1098 = (iSlow1094 ? fSlow1097 : fSlow1096);
		float fSlow1099 = ((fSlow1092 * (fSlow1092 - fSlow1098)) + 1.0f);
		float fSlow1100 = ((fSlow1092 * (fSlow1092 + fSlow1098)) + 1.0f);
		float fSlow1101 = (iSlow1094 ? fSlow1096 : fSlow1097);
		float fSlow1102 = ((fSlow1092 * (fSlow1092 + fSlow1101)) + 1.0f);
		float fSlow1103 = ((fSlow1092 * (fSlow1092 - fSlow1101)) + 1.0f);
		float fSlow1104 = (1.0f / fSlow16);
		float fSlow1105 = float(fHslider164);
		int iSlow1106 = (fSlow1105 > 0.0f);
		float fSlow1107 = (float(fHslider165) * std::sin((fConst29 * fSlow15)));
		float fSlow1108 = (fConst8 * ((fSlow15 * std::pow(10.0f, (0.0500000007f * std::fabs(fSlow1105)))) / fSlow1107));
		float fSlow1109 = (fConst8 * (fSlow15 / fSlow1107));
		float fSlow1110 = (iSlow1106 ? fSlow1109 : fSlow1108);
		float fSlow1111 = ((fSlow1104 * (fSlow1104 - fSlow1110)) + 1.0f);
		float fSlow1112 = ((fSlow1104 * (fSlow1104 + fSlow1110)) + 1.0f);
		float fSlow1113 = (iSlow1106 ? fSlow1108 : fSlow1109);
		float fSlow1114 = ((fSlow1104 * (fSlow1104 + fSlow1113)) + 1.0f);
		float fSlow1115 = ((fSlow1104 * (fSlow1104 - fSlow1113)) + 1.0f);
		float fSlow1116 = (((fSlow13 - fSlow11) / fSlow12) + 1.0f);
		float fSlow1117 = (2.0f * (1.0f - (1.0f / mydsp_faustpower2_f(fSlow12))));
		float fSlow1118 = float(fHslider166);
		float fSlow1119 = (0.00100000005f * (20000.0f - (19800.0f * fSlow1118)));
		float fSlow1120 = (1.0f / (4.0f - (3.29999995f * mydsp_faustpower2_f(fSlow1118))));
		float fSlow1121 = (1.41400003f * std::sqrt(fSlow0));
		float fSlow1122 = (0.00100000005f * float((1 - (iSlow1083 + (iSlow9 == 5)))));
		float fSlow1123 = (0.949999988f / fSlow1009);
		float fSlow1124 = (0.00100000005f * (fSlow1082 + (1.39999998f * float(iSlow5))));
		for (int i = 0; (i < count); i = (i + 1)) {
			iVec0[0] = 1;
			fRec0[0] = ((0.999000013f * fRec0[1]) + fSlow10);
			fRec5[0] = ((0.999000013f * fRec5[1]) + fSlow21);
			fRec6[0] = (fSlow26 + (0.999000013f * fRec6[1]));
			fRec8[0] = ((0.999000013f * fRec8[1]) + fSlow32);
			fVec1[0] = fSlow43;
			fVec2[0] = fSlow45;
			int iTemp0 = (iSlow42 * ((fSlow43 > fVec1[1]) + (iSlow44 * (fSlow45 > fVec2[1]))));
			iVec3[0] = iTemp0;
			iRec13[0] = (((iRec13[1] + (iRec13[1] > 0)) * (iTemp0 <= iVec3[1])) + (iTemp0 > iVec3[1]));
			float fTemp1 = float(iRec13[0]);
			float fTemp2 = (fConst12 * fTemp1);
			float fTemp3 = (fConst11 - fTemp1);
			fRec12[0] = ((fConst9 * fRec12[1]) + (fConst10 * mydsp_faustpower6_f(std::max<float>(0.0f, std::min<float>(fTemp2, ((fSlow49 * fTemp3) + 1.0f))))));
			iRec15[0] = ((iVec0[1] + iRec15[1]) % iSlow54);
			float fTemp4 = float(iRec15[0]);
			int iTemp5 = (iTemp0 > 0);
			float fTemp6 = (0.144717798f * (iTemp5 ? 0.00100000005f : 1.60000002f));
			int iTemp7 = (std::fabs(fTemp6) < 1.1920929e-07f);
			float fTemp8 = (iTemp7 ? 0.0f : std::exp((0.0f - (fConst17 / (iTemp7 ? 1.0f : fTemp6)))));
			float fTemp9 = float(iTemp0);
			fRec17[0] = ((fRec17[1] * fTemp8) + ((iTemp5 ? fTemp9 : fSlow62) * (1.0f - fTemp8)));
			fRec16[0] = ((fConst9 * fRec16[1]) + (fSlow61 * fRec17[0]));
			float fTemp10 = (fRec16[0] + 0.00999999978f);
			float fTemp11 = std::tan((fConst8 * std::min<float>(20000.0f, std::max<float>(20.0f, (fSlow58 * fTemp10)))));
			float fTemp12 = (1.0f / fTemp11);
			float fTemp13 = (((fTemp12 + 1.41421354f) / fTemp11) + 1.0f);
			fRec14[0] = ((2.0f * (((float((fTemp4 < fSlow55)) + -0.5f) + (float((fTemp4 < fSlow56)) + -0.5f)) + (float((fTemp4 < fSlow57)) + -0.5f))) - (((fRec14[2] * (((fTemp12 + -1.41421354f) / fTemp11) + 1.0f)) + (2.0f * (fRec14[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp11)))))) / fTemp13));
			iRec20[0] = (iTemp0 ? 7 : iRec20[1]);
			float fTemp14 = std::pow(10.0f, (0.144444451f * float((iRec20[0] + -10))));
			float fTemp15 = std::max<float>(0.0f, std::min<float>(fTemp2, ((fTemp3 / std::max<float>(1.0f, (fSlow46 * ((2.0f * fTemp14) + 1.0f)))) + 1.0f)));
			fVec4[0] = fTemp15;
			int iTemp16 = ((fTemp15 > 0.5f) + (fTemp15 > fVec4[1]));
			iVec5[0] = iTemp16;
			iRec19[0] = (iTemp16 + (iRec19[1] * (iVec5[1] >= iTemp16)));
			float fTemp17 = float(iRec19[0]);
			iRec21[0] = ((iRec21[1] + 1) * (iTemp16 == 0));
			fRec18[0] = ((fConst18 * fRec18[1]) + (fConst19 * std::max<float>(0.0f, (std::min<float>((fConst12 * fTemp17), std::max<float>((1.5f - (fConst20 * fTemp17)), 0.5f)) - (fSlow63 * float(iRec21[0]))))));
			fRec24[0] = (fSlow64 + (fConst22 * fRec24[1]));
			float fTemp18 = float(iVec0[1]);
			float fTemp19 = std::max<float>((fSlow65 * fRec24[0]), 23.4489498f);
			float fTemp20 = std::max<float>(20.0f, std::fabs(fTemp19));
			fVec6[0] = fTemp20;
			float fTemp21 = (fRec26[1] + (fConst17 * fVec6[1]));
			fRec26[0] = (fTemp21 - std::floor(fTemp21));
			float fTemp22 = mydsp_faustpower2_f(((2.0f * fRec26[0]) + -1.0f));
			fVec7[0] = fTemp22;
			float fTemp23 = ((fTemp18 * (fTemp22 - fVec7[1])) / fTemp20);
			fVec8[(IOTA & 4095)] = fTemp23;
			float fTemp24 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp19)));
			int iTemp25 = int(fTemp24);
			float fTemp26 = std::floor(fTemp24);
			fRec25[0] = ((0.999000013f * fRec25[1]) + (fConst25 * ((fTemp23 - (fVec8[((IOTA - iTemp25) & 4095)] * (fTemp26 + (1.0f - fTemp24)))) - ((fTemp24 - fTemp26) * fVec8[((IOTA - (iTemp25 + 1)) & 4095)]))));
			float fTemp27 = (fSlow68 * (fTemp14 + 0.5f));
			float fTemp28 = (fRec23[1] + (fConst17 * (fRec24[0] * ((fSlow66 * (((fRec24[0] * fRec18[0]) * fRec25[0]) * ((fRec18[0] * (fSlow67 + fTemp27)) + 2.4000001f))) + 1.0f))));
			fRec23[0] = (fTemp28 - std::floor(fTemp28));
			float fTemp29 = (0.144717798f * (iTemp5 ? 0.00100000005f : fSlow69));
			int iTemp30 = (std::fabs(fTemp29) < 1.1920929e-07f);
			float fTemp31 = (iTemp30 ? 0.0f : std::exp((0.0f - (fConst17 / (iTemp30 ? 1.0f : fTemp29)))));
			fRec27[0] = ((fRec27[1] * fTemp31) + ((iTemp5 ? fTemp9 : 0.0f) * (1.0f - fTemp31)));
			fRec28[0] = (fSlow70 + (fRec28[1] - std::floor((fSlow70 + fRec28[1]))));
			float fTemp32 = (ftbl2mydspSIG2[int((65536.0f * fRec28[0]))] + 1.0f);
			float fTemp33 = (fSlow71 * fTemp32);
			fRec29[0] = (iTemp0 ? fSlow43 : fRec29[1]);
			float fTemp34 = std::pow(10.0f, (0.144444451f * (fRec29[0] + -10.0f)));
			fVec9[0] = fSlow72;
			fVec10[0] = fSlow74;
			int iTemp35 = (iSlow42 * ((fSlow72 > fVec9[1]) + (iSlow73 * (fSlow74 > fVec10[1]))));
			iVec11[0] = iTemp35;
			iRec31[0] = (((iRec31[1] + (iRec31[1] > 0)) * (iTemp35 <= iVec11[1])) + (iTemp35 > iVec11[1]));
			float fTemp36 = float(iRec31[0]);
			float fTemp37 = (fConst12 * fTemp36);
			float fTemp38 = (fConst11 - fTemp36);
			fRec30[0] = ((fConst9 * fRec30[1]) + (fConst10 * mydsp_faustpower6_f(std::max<float>(0.0f, std::min<float>(fTemp37, ((fSlow49 * fTemp38) + 1.0f))))));
			iRec33[0] = ((iVec0[1] + iRec33[1]) % iSlow77);
			float fTemp39 = float(iRec33[0]);
			int iTemp40 = (iTemp35 > 0);
			float fTemp41 = (0.144717798f * (iTemp40 ? 0.00100000005f : 1.60000002f));
			int iTemp42 = (std::fabs(fTemp41) < 1.1920929e-07f);
			float fTemp43 = (iTemp42 ? 0.0f : std::exp((0.0f - (fConst17 / (iTemp42 ? 1.0f : fTemp41)))));
			float fTemp44 = float(iTemp35);
			fRec35[0] = ((fRec35[1] * fTemp43) + ((iTemp40 ? fTemp44 : fSlow62) * (1.0f - fTemp43)));
			fRec34[0] = ((fConst9 * fRec34[1]) + (fSlow84 * fRec35[0]));
			float fTemp45 = (fRec34[0] + 0.00999999978f);
			float fTemp46 = std::tan((fConst8 * std::min<float>(20000.0f, std::max<float>(20.0f, (fSlow81 * fTemp45)))));
			float fTemp47 = (1.0f / fTemp46);
			float fTemp48 = (((fTemp47 + 1.41421354f) / fTemp46) + 1.0f);
			fRec32[0] = ((2.0f * (((float((fTemp39 < fSlow78)) + -0.5f) + (float((fTemp39 < fSlow79)) + -0.5f)) + (float((fTemp39 < fSlow80)) + -0.5f))) - (((fRec32[2] * (((fTemp47 + -1.41421354f) / fTemp46) + 1.0f)) + (2.0f * (fRec32[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp46)))))) / fTemp48));
			iRec38[0] = (iTemp35 ? 7 : iRec38[1]);
			float fTemp49 = std::pow(10.0f, (0.144444451f * float((iRec38[0] + -10))));
			float fTemp50 = std::max<float>(0.0f, std::min<float>(fTemp37, ((fTemp38 / std::max<float>(1.0f, (fSlow46 * ((2.0f * fTemp49) + 1.0f)))) + 1.0f)));
			fVec12[0] = fTemp50;
			int iTemp51 = ((fTemp50 > 0.5f) + (fTemp50 > fVec12[1]));
			iVec13[0] = iTemp51;
			iRec37[0] = (iTemp51 + (iRec37[1] * (iVec13[1] >= iTemp51)));
			float fTemp52 = float(iRec37[0]);
			iRec39[0] = ((iRec39[1] + 1) * (iTemp51 == 0));
			fRec36[0] = ((fConst18 * fRec36[1]) + (fConst19 * std::max<float>(0.0f, (std::min<float>((fConst12 * fTemp52), std::max<float>((1.5f - (fConst20 * fTemp52)), 0.5f)) - (fSlow63 * float(iRec39[0]))))));
			fRec41[0] = (fSlow85 + (fConst22 * fRec41[1]));
			float fTemp53 = std::max<float>((fSlow65 * fRec41[0]), 23.4489498f);
			float fTemp54 = std::max<float>(20.0f, std::fabs(fTemp53));
			fVec14[0] = fTemp54;
			float fTemp55 = (fRec43[1] + (fConst17 * fVec14[1]));
			fRec43[0] = (fTemp55 - std::floor(fTemp55));
			float fTemp56 = mydsp_faustpower2_f(((2.0f * fRec43[0]) + -1.0f));
			fVec15[0] = fTemp56;
			float fTemp57 = ((fTemp18 * (fTemp56 - fVec15[1])) / fTemp54);
			fVec16[(IOTA & 4095)] = fTemp57;
			float fTemp58 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp53)));
			int iTemp59 = int(fTemp58);
			float fTemp60 = std::floor(fTemp58);
			fRec42[0] = ((0.999000013f * fRec42[1]) + (fConst25 * ((fTemp57 - (fVec16[((IOTA - iTemp59) & 4095)] * (fTemp60 + (1.0f - fTemp58)))) - ((fTemp58 - fTemp60) * fVec16[((IOTA - (iTemp59 + 1)) & 4095)]))));
			float fTemp61 = (fSlow87 * (fTemp49 + 0.5f));
			float fTemp62 = (fRec40[1] + (fConst17 * (fRec41[0] * ((fSlow66 * (((fRec41[0] * fRec36[0]) * fRec42[0]) * ((fRec36[0] * (fSlow86 + fTemp61)) + 2.4000001f))) + 1.0f))));
			fRec40[0] = (fTemp62 - std::floor(fTemp62));
			float fTemp63 = (0.144717798f * (iTemp40 ? 0.00100000005f : fSlow69));
			int iTemp64 = (std::fabs(fTemp63) < 1.1920929e-07f);
			float fTemp65 = (iTemp64 ? 0.0f : std::exp((0.0f - (fConst17 / (iTemp64 ? 1.0f : fTemp63)))));
			fRec44[0] = ((fRec44[1] * fTemp65) + ((iTemp40 ? fTemp44 : 0.0f) * (1.0f - fTemp65)));
			fRec45[0] = (fSlow88 + (fRec45[1] - std::floor((fSlow88 + fRec45[1]))));
			float fTemp66 = (ftbl2mydspSIG2[int((65536.0f * fRec45[0]))] + 1.0f);
			float fTemp67 = (fSlow89 * fTemp66);
			fRec46[0] = (iTemp35 ? fSlow72 : fRec46[1]);
			float fTemp68 = std::pow(10.0f, (0.144444451f * (fRec46[0] + -10.0f)));
			fVec17[0] = fSlow90;
			fVec18[0] = fSlow92;
			int iTemp69 = (iSlow42 * ((fSlow90 > fVec17[1]) + (iSlow91 * (fSlow92 > fVec18[1]))));
			iVec19[0] = iTemp69;
			iRec48[0] = (((iRec48[1] + (iRec48[1] > 0)) * (iTemp69 <= iVec19[1])) + (iTemp69 > iVec19[1]));
			float fTemp70 = float(iRec48[0]);
			float fTemp71 = (fConst12 * fTemp70);
			float fTemp72 = (fConst11 - fTemp70);
			fRec47[0] = ((fConst9 * fRec47[1]) + (fConst10 * mydsp_faustpower6_f(std::max<float>(0.0f, std::min<float>(fTemp71, ((fSlow49 * fTemp72) + 1.0f))))));
			iRec50[0] = ((iVec0[1] + iRec50[1]) % iSlow95);
			float fTemp73 = float(iRec50[0]);
			int iTemp74 = (iTemp69 > 0);
			float fTemp75 = (0.144717798f * (iTemp74 ? 0.00100000005f : 1.60000002f));
			int iTemp76 = (std::fabs(fTemp75) < 1.1920929e-07f);
			float fTemp77 = (iTemp76 ? 0.0f : std::exp((0.0f - (fConst17 / (iTemp76 ? 1.0f : fTemp75)))));
			float fTemp78 = float(iTemp69);
			fRec52[0] = ((fRec52[1] * fTemp77) + ((iTemp74 ? fTemp78 : fSlow62) * (1.0f - fTemp77)));
			fRec51[0] = ((fConst9 * fRec51[1]) + (fSlow102 * fRec52[0]));
			float fTemp79 = (fRec51[0] + 0.00999999978f);
			float fTemp80 = std::tan((fConst8 * std::min<float>(20000.0f, std::max<float>(20.0f, (fSlow99 * fTemp79)))));
			float fTemp81 = (1.0f / fTemp80);
			float fTemp82 = (((fTemp81 + 1.41421354f) / fTemp80) + 1.0f);
			fRec49[0] = ((2.0f * (((float((fTemp73 < fSlow96)) + -0.5f) + (float((fTemp73 < fSlow97)) + -0.5f)) + (float((fTemp73 < fSlow98)) + -0.5f))) - (((fRec49[2] * (((fTemp81 + -1.41421354f) / fTemp80) + 1.0f)) + (2.0f * (fRec49[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp80)))))) / fTemp82));
			iRec55[0] = (iTemp69 ? 7 : iRec55[1]);
			float fTemp83 = std::pow(10.0f, (0.144444451f * float((iRec55[0] + -10))));
			float fTemp84 = std::max<float>(0.0f, std::min<float>(fTemp71, ((fTemp72 / std::max<float>(1.0f, (fSlow46 * ((2.0f * fTemp83) + 1.0f)))) + 1.0f)));
			fVec20[0] = fTemp84;
			int iTemp85 = ((fTemp84 > 0.5f) + (fTemp84 > fVec20[1]));
			iVec21[0] = iTemp85;
			iRec54[0] = (iTemp85 + (iRec54[1] * (iVec21[1] >= iTemp85)));
			float fTemp86 = float(iRec54[0]);
			iRec56[0] = ((iRec56[1] + 1) * (iTemp85 == 0));
			fRec53[0] = ((fConst18 * fRec53[1]) + (fConst19 * std::max<float>(0.0f, (std::min<float>((fConst12 * fTemp86), std::max<float>((1.5f - (fConst20 * fTemp86)), 0.5f)) - (fSlow63 * float(iRec56[0]))))));
			fRec58[0] = (fSlow103 + (fConst22 * fRec58[1]));
			float fTemp87 = std::max<float>((fSlow65 * fRec58[0]), 23.4489498f);
			float fTemp88 = std::max<float>(20.0f, std::fabs(fTemp87));
			fVec22[0] = fTemp88;
			float fTemp89 = (fRec60[1] + (fConst17 * fVec22[1]));
			fRec60[0] = (fTemp89 - std::floor(fTemp89));
			float fTemp90 = mydsp_faustpower2_f(((2.0f * fRec60[0]) + -1.0f));
			fVec23[0] = fTemp90;
			float fTemp91 = ((fTemp18 * (fTemp90 - fVec23[1])) / fTemp88);
			fVec24[(IOTA & 4095)] = fTemp91;
			float fTemp92 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp87)));
			int iTemp93 = int(fTemp92);
			float fTemp94 = std::floor(fTemp92);
			fRec59[0] = ((0.999000013f * fRec59[1]) + (fConst25 * ((fTemp91 - (fVec24[((IOTA - iTemp93) & 4095)] * (fTemp94 + (1.0f - fTemp92)))) - ((fTemp92 - fTemp94) * fVec24[((IOTA - (iTemp93 + 1)) & 4095)]))));
			float fTemp95 = (fSlow105 * (fTemp83 + 0.5f));
			float fTemp96 = (fRec57[1] + (fConst17 * (fRec58[0] * ((fSlow66 * (((fRec58[0] * fRec53[0]) * fRec59[0]) * ((fRec53[0] * (fSlow104 + fTemp95)) + 2.4000001f))) + 1.0f))));
			fRec57[0] = (fTemp96 - std::floor(fTemp96));
			float fTemp97 = (0.144717798f * (iTemp74 ? 0.00100000005f : fSlow69));
			int iTemp98 = (std::fabs(fTemp97) < 1.1920929e-07f);
			float fTemp99 = (iTemp98 ? 0.0f : std::exp((0.0f - (fConst17 / (iTemp98 ? 1.0f : fTemp97)))));
			fRec61[0] = ((fRec61[1] * fTemp99) + ((iTemp74 ? fTemp78 : 0.0f) * (1.0f - fTemp99)));
			fRec62[0] = (fSlow106 + (fRec62[1] - std::floor((fSlow106 + fRec62[1]))));
			float fTemp100 = (ftbl2mydspSIG2[int((65536.0f * fRec62[0]))] + 1.0f);
			float fTemp101 = (fSlow107 * fTemp100);
			fRec63[0] = (iTemp69 ? fSlow90 : fRec63[1]);
			float fTemp102 = std::pow(10.0f, (0.144444451f * (fRec63[0] + -10.0f)));
			fVec25[0] = fSlow108;
			fVec26[0] = fSlow110;
			int iTemp103 = (iSlow42 * ((fSlow108 > fVec25[1]) + (iSlow109 * (fSlow110 > fVec26[1]))));
			iVec27[0] = iTemp103;
			iRec65[0] = (((iRec65[1] + (iRec65[1] > 0)) * (iTemp103 <= iVec27[1])) + (iTemp103 > iVec27[1]));
			float fTemp104 = float(iRec65[0]);
			float fTemp105 = (fConst12 * fTemp104);
			float fTemp106 = (fConst11 - fTemp104);
			fRec64[0] = ((fConst9 * fRec64[1]) + (fConst10 * mydsp_faustpower6_f(std::max<float>(0.0f, std::min<float>(fTemp105, ((fSlow49 * fTemp106) + 1.0f))))));
			iRec67[0] = ((iVec0[1] + iRec67[1]) % iSlow113);
			float fTemp107 = float(iRec67[0]);
			int iTemp108 = (iTemp103 > 0);
			float fTemp109 = (0.144717798f * (iTemp108 ? 0.00100000005f : 1.60000002f));
			int iTemp110 = (std::fabs(fTemp109) < 1.1920929e-07f);
			float fTemp111 = (iTemp110 ? 0.0f : std::exp((0.0f - (fConst17 / (iTemp110 ? 1.0f : fTemp109)))));
			float fTemp112 = float(iTemp103);
			fRec69[0] = ((fRec69[1] * fTemp111) + ((iTemp108 ? fTemp112 : fSlow62) * (1.0f - fTemp111)));
			fRec68[0] = ((fConst9 * fRec68[1]) + (fSlow120 * fRec69[0]));
			float fTemp113 = (fRec68[0] + 0.00999999978f);
			float fTemp114 = std::tan((fConst8 * std::min<float>(20000.0f, std::max<float>(20.0f, (fSlow117 * fTemp113)))));
			float fTemp115 = (1.0f / fTemp114);
			float fTemp116 = (((fTemp115 + 1.41421354f) / fTemp114) + 1.0f);
			fRec66[0] = ((2.0f * (((float((fTemp107 < fSlow114)) + -0.5f) + (float((fTemp107 < fSlow115)) + -0.5f)) + (float((fTemp107 < fSlow116)) + -0.5f))) - (((fRec66[2] * (((fTemp115 + -1.41421354f) / fTemp114) + 1.0f)) + (2.0f * (fRec66[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp114)))))) / fTemp116));
			iRec72[0] = (iTemp103 ? 7 : iRec72[1]);
			float fTemp117 = std::pow(10.0f, (0.144444451f * float((iRec72[0] + -10))));
			float fTemp118 = std::max<float>(0.0f, std::min<float>(fTemp105, ((fTemp106 / std::max<float>(1.0f, (fSlow46 * ((2.0f * fTemp117) + 1.0f)))) + 1.0f)));
			fVec28[0] = fTemp118;
			int iTemp119 = ((fTemp118 > 0.5f) + (fTemp118 > fVec28[1]));
			iVec29[0] = iTemp119;
			iRec71[0] = (iTemp119 + (iRec71[1] * (iVec29[1] >= iTemp119)));
			float fTemp120 = float(iRec71[0]);
			iRec73[0] = ((iRec73[1] + 1) * (iTemp119 == 0));
			fRec70[0] = ((fConst18 * fRec70[1]) + (fConst19 * std::max<float>(0.0f, (std::min<float>((fConst12 * fTemp120), std::max<float>((1.5f - (fConst20 * fTemp120)), 0.5f)) - (fSlow63 * float(iRec73[0]))))));
			fRec75[0] = (fSlow121 + (fConst22 * fRec75[1]));
			float fTemp121 = std::max<float>((fSlow65 * fRec75[0]), 23.4489498f);
			float fTemp122 = std::max<float>(20.0f, std::fabs(fTemp121));
			fVec30[0] = fTemp122;
			float fTemp123 = (fRec77[1] + (fConst17 * fVec30[1]));
			fRec77[0] = (fTemp123 - std::floor(fTemp123));
			float fTemp124 = mydsp_faustpower2_f(((2.0f * fRec77[0]) + -1.0f));
			fVec31[0] = fTemp124;
			float fTemp125 = ((fTemp18 * (fTemp124 - fVec31[1])) / fTemp122);
			fVec32[(IOTA & 4095)] = fTemp125;
			float fTemp126 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp121)));
			int iTemp127 = int(fTemp126);
			float fTemp128 = std::floor(fTemp126);
			fRec76[0] = ((0.999000013f * fRec76[1]) + (fConst25 * ((fTemp125 - (fVec32[((IOTA - iTemp127) & 4095)] * (fTemp128 + (1.0f - fTemp126)))) - ((fTemp126 - fTemp128) * fVec32[((IOTA - (iTemp127 + 1)) & 4095)]))));
			float fTemp129 = (fSlow123 * (fTemp117 + 0.5f));
			float fTemp130 = (fRec74[1] + (fConst17 * (fRec75[0] * ((fSlow66 * (((fRec75[0] * fRec70[0]) * fRec76[0]) * ((fRec70[0] * (fSlow122 + fTemp129)) + 2.4000001f))) + 1.0f))));
			fRec74[0] = (fTemp130 - std::floor(fTemp130));
			float fTemp131 = (0.144717798f * (iTemp108 ? 0.00100000005f : fSlow69));
			int iTemp132 = (std::fabs(fTemp131) < 1.1920929e-07f);
			float fTemp133 = (iTemp132 ? 0.0f : std::exp((0.0f - (fConst17 / (iTemp132 ? 1.0f : fTemp131)))));
			fRec78[0] = ((fRec78[1] * fTemp133) + ((iTemp108 ? fTemp112 : 0.0f) * (1.0f - fTemp133)));
			fRec79[0] = (fSlow124 + (fRec79[1] - std::floor((fSlow124 + fRec79[1]))));
			float fTemp134 = (ftbl2mydspSIG2[int((65536.0f * fRec79[0]))] + 1.0f);
			float fTemp135 = (fSlow125 * fTemp134);
			fRec80[0] = (iTemp103 ? fSlow108 : fRec80[1]);
			float fTemp136 = std::pow(10.0f, (0.144444451f * (fRec80[0] + -10.0f)));
			float fTemp137 = (((((iSlow40 ? ((fRec27[0] * std::min<float>(1.0f, (2.0f * (1.0f - (0.5f * fTemp32))))) * std::sin((6.28318548f * (fTemp33 - std::floor(fTemp33))))) : (iSlow41 ? (fRec18[0] * ftbl2mydspSIG2[int((65536.0f * fRec23[0]))]) : ((fRec12[0] * (fRec14[2] + (fRec14[0] + (2.0f * fRec14[1])))) / fTemp13))) * fTemp34) + ((iSlow40 ? ((fRec44[0] * std::min<float>(1.0f, (2.0f * (1.0f - (0.5f * fTemp66))))) * std::sin((6.28318548f * (fTemp67 - std::floor(fTemp67))))) : (iSlow41 ? (fRec36[0] * ftbl2mydspSIG2[int((65536.0f * fRec40[0]))]) : ((fRec30[0] * (fRec32[2] + (fRec32[0] + (2.0f * fRec32[1])))) / fTemp48))) * fTemp68)) + ((iSlow40 ? ((fRec61[0] * std::min<float>(1.0f, (2.0f * (1.0f - (0.5f * fTemp100))))) * std::sin((6.28318548f * (fTemp101 - std::floor(fTemp101))))) : (iSlow41 ? (fRec53[0] * ftbl2mydspSIG2[int((65536.0f * fRec57[0]))]) : ((fRec47[0] * (fRec49[2] + (fRec49[0] + (2.0f * fRec49[1])))) / fTemp82))) * fTemp102)) + ((iSlow40 ? ((fRec78[0] * std::min<float>(1.0f, (2.0f * (1.0f - (0.5f * fTemp134))))) * std::sin((6.28318548f * (fTemp135 - std::floor(fTemp135))))) : (iSlow41 ? (fRec70[0] * ftbl2mydspSIG2[int((65536.0f * fRec74[0]))]) : ((fRec64[0] * (fRec66[2] + (fRec66[0] + (2.0f * fRec66[1])))) / fTemp116))) * fTemp136));
			float fTemp138 = std::fabs((0.25f * fTemp137));
			fRec83[0] = std::max<float>(fTemp138, ((fRec83[1] * fSlow132) + (fTemp138 * fSlow133)));
			fRec82[0] = ((fRec82[1] * fSlow129) + (fRec83[0] * fSlow134));
			fRec81[0] = ((fConst27 * fRec81[1]) + (fSlow126 * std::max<float>(((20.0f * std::log10(fRec82[0])) - fSlow135), 0.0f)));
			float fTemp139 = (0.25f * (fTemp137 * std::pow(10.0f, (0.0500000007f * fRec81[0]))));
			fRec84[0] = (fTemp139 - (fSlow139 * ((fSlow140 * fRec84[2]) + (fSlow141 * fRec84[1]))));
			float fTemp140 = (fSlow38 * fRec11[1]);
			fRec11[0] = (fTemp139 - ((fSlow139 * (fRec84[2] + (fRec84[0] + (2.0f * fRec84[1])))) + (((fRec11[2] * fSlow149) + fTemp140) / fSlow150)));
			float fTemp141 = (fSlow35 * fRec10[1]);
			fRec10[0] = ((((fTemp140 + (fRec11[0] * fSlow152)) + (fRec11[2] * fSlow153)) / fSlow150) - (((fRec10[2] * fSlow161) + fTemp141) / fSlow162));
			fRec9[0] = ((((fTemp141 + (fRec10[0] * fSlow164)) + (fRec10[2] * fSlow165)) / fSlow162) - (fSlow166 * ((fSlow167 * fRec9[2]) + (fSlow168 * fRec9[1]))));
			float fTemp142 = (fSlow31 * (fRec8[0] * (fRec9[2] + (fRec9[0] + (2.0f * fRec9[1])))));
			fRec85[0] = ((0.999000013f * fRec85[1]) + fSlow174);
			fVec33[0] = fSlow181;
			fVec34[0] = fSlow183;
			int iTemp143 = (iSlow42 * ((fSlow181 > fVec33[1]) + (iSlow182 * (fSlow183 > fVec34[1]))));
			iVec35[0] = iTemp143;
			fRec89[0] = (iTemp143 ? fSlow181 : fRec89[1]);
			float fTemp144 = std::pow(10.0f, (0.144444451f * (fRec89[0] + -10.0f)));
			iRec91[0] = (((iRec91[1] + (iRec91[1] > 0)) * (iTemp143 <= iVec35[1])) + (iTemp143 > iVec35[1]));
			float fTemp145 = float(iRec91[0]);
			fRec90[0] = ((fConst18 * fRec90[1]) + (fConst19 * std::sqrt(std::max<float>(0.0f, std::min<float>((fConst12 * fTemp145), ((fSlow187 * (fConst11 - fTemp145)) + 1.0f))))));
			fRec96[0] = (fSlow192 + (fRec96[1] - std::floor((fSlow192 + fRec96[1]))));
			float fTemp146 = (fRec95[1] + (fConst17 * (fSlow191 + (315.0f * (fRec90[0] * ftbl2mydspSIG2[int((65536.0f * fRec96[0]))])))));
			fRec95[0] = (fTemp146 - std::floor(fTemp146));
			float fTemp147 = (fRec94[1] + (fConst17 * (fSlow190 + (315.0f * (fRec90[0] * ftbl2mydspSIG2[int((65536.0f * fRec95[0]))])))));
			fRec94[0] = (fTemp147 - std::floor(fTemp147));
			float fTemp148 = (fRec93[1] + (fConst17 * (fSlow189 + (315.0f * (fRec90[0] * ftbl2mydspSIG2[int((65536.0f * fRec94[0]))])))));
			fRec93[0] = (fTemp148 - std::floor(fTemp148));
			float fTemp149 = (fRec92[1] + (fConst17 * (fSlow188 + (315.0f * (fRec90[0] * ftbl2mydspSIG2[int((65536.0f * fRec93[0]))])))));
			fRec92[0] = (fTemp149 - std::floor(fTemp149));
			float fTemp150 = ftbl2mydspSIG2[int((65536.0f * fRec92[0]))];
			float fTemp151 = std::max<float>(-1.0f, std::min<float>(1.0f, (25.1188641f * fTemp150)));
			float fTemp152 = std::max<float>(1.0f, (fSlow46 * ((2.0f * fTemp144) + 1.0f)));
			float fTemp153 = std::max<float>(0.0f, std::min<float>((fConst35 * fTemp145), (((fConst34 - fTemp145) / fTemp152) + 1.0f)));
			fVec36[0] = fTemp153;
			int iTemp154 = (((fTemp153 > 0.5f) + (fTemp153 > fVec36[1])) > 0);
			iRec99[0] = (iTemp154 * (iRec99[1] + 1));
			int iTemp155 = (iRec99[0] < iConst36);
			float fTemp156 = (0.144717798f * (iTemp154 ? (iTemp155 ? 0.00700000022f : 0.00100000005f) : fSlow193));
			int iTemp157 = (std::fabs(fTemp156) < 1.1920929e-07f);
			float fTemp158 = (iTemp157 ? 0.0f : std::exp((0.0f - (fConst17 / (iTemp157 ? 1.0f : fTemp156)))));
			float fTemp159 = float(iTemp154);
			fRec98[0] = ((fRec98[1] * fTemp158) + ((iTemp154 ? (iTemp155 ? fTemp159 : (0.655300021f * fTemp159)) : 0.0f) * (1.0f - fTemp158)));
			fRec97[0] = ((fConst31 * fRec97[1]) + (fConst32 * fRec98[0]));
			fRec101[0] = (fSlow194 + (fConst22 * fRec101[1]));
			float fTemp160 = std::max<float>((fSlow65 * fRec101[0]), 23.4489498f);
			float fTemp161 = std::max<float>(20.0f, std::fabs(fTemp160));
			fVec37[0] = fTemp161;
			float fTemp162 = (fRec103[1] + (fConst17 * fVec37[1]));
			fRec103[0] = (fTemp162 - std::floor(fTemp162));
			float fTemp163 = mydsp_faustpower2_f(((2.0f * fRec103[0]) + -1.0f));
			fVec38[0] = fTemp163;
			float fTemp164 = ((fTemp18 * (fTemp163 - fVec38[1])) / fTemp161);
			fVec39[(IOTA & 4095)] = fTemp164;
			float fTemp165 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp160)));
			int iTemp166 = int(fTemp165);
			float fTemp167 = std::floor(fTemp165);
			fRec102[0] = ((0.999000013f * fRec102[1]) + (fConst25 * ((fTemp164 - (fVec39[((IOTA - iTemp166) & 4095)] * (fTemp167 + (1.0f - fTemp165)))) - ((fTemp165 - fTemp167) * fVec39[((IOTA - (iTemp166 + 1)) & 4095)]))));
			float fTemp168 = (fTemp144 + 0.5f);
			float fTemp169 = (fRec100[1] + (fConst17 * (fRec101[0] * ((fSlow66 * (((fRec101[0] * fRec97[0]) * fRec102[0]) * ((fRec97[0] * (fSlow195 + (7.46000004f * (((0.200000003f * (float(input0[i]) + -5.0f)) + 1.0f) * fTemp168)))) + 6.75f))) + 1.0f))));
			fRec100[0] = (fTemp169 - std::floor(fTemp169));
			float fTemp170 = std::max<float>(0.0f, std::min<float>((fConst41 * fTemp145), (1.0f - ((fTemp145 - fConst40) / fTemp152))));
			fVec40[0] = fTemp170;
			int iTemp171 = (((fTemp170 > 0.5f) + (fTemp170 > fVec40[1])) > 0);
			iRec106[0] = (iTemp171 * (iRec106[1] + 1));
			int iTemp172 = (iRec106[0] < iConst42);
			float fTemp173 = (0.144717798f * (iTemp171 ? (iTemp172 ? 0.00999999978f : 9.99999975e-05f) : fSlow196));
			int iTemp174 = (std::fabs(fTemp173) < 1.1920929e-07f);
			float fTemp175 = (iTemp174 ? 0.0f : std::exp((0.0f - (fConst17 / (iTemp174 ? 1.0f : fTemp173)))));
			float fTemp176 = float(iTemp171);
			fRec105[0] = ((fRec105[1] * fTemp175) + ((iTemp171 ? (iTemp172 ? fTemp176 : (0.5f * fTemp176)) : 0.0f) * (1.0f - fTemp175)));
			fRec104[0] = ((fConst37 * fRec104[1]) + (fConst38 * fRec105[0]));
			float fTemp177 = std::max<float>((fSlow197 * fRec101[0]), 23.4489498f);
			float fTemp178 = std::max<float>(20.0f, std::fabs(fTemp177));
			fVec41[0] = fTemp178;
			float fTemp179 = (fRec109[1] + (fConst17 * fVec41[1]));
			fRec109[0] = (fTemp179 - std::floor(fTemp179));
			float fTemp180 = mydsp_faustpower2_f(((2.0f * fRec109[0]) + -1.0f));
			fVec42[0] = fTemp180;
			float fTemp181 = ((fTemp18 * (fTemp180 - fVec42[1])) / fTemp178);
			fVec43[(IOTA & 4095)] = fTemp181;
			float fTemp182 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp177)));
			int iTemp183 = int(fTemp182);
			float fTemp184 = std::floor(fTemp182);
			fRec108[0] = ((0.999000013f * fRec108[1]) + (fConst25 * ((fTemp181 - (fVec43[((IOTA - iTemp183) & 4095)] * (fTemp184 + (1.0f - fTemp182)))) - ((fTemp182 - fTemp184) * fVec43[((IOTA - (iTemp183 + 1)) & 4095)]))));
			float fTemp185 = (fRec107[1] + (fConst17 * (fRec101[0] * ((fSlow198 * (((fRec101[0] * fRec104[0]) * fRec108[0]) * ((fRec104[0] * (fSlow195 + (10.0f * (fTemp168 * ((0.200000003f * (float(input1[i]) + -5.0f)) + 1.0f))))) + 10.0f))) + 1.0f))));
			fRec107[0] = (fTemp185 - std::floor(fTemp185));
			float fTemp186 = (fTemp144 * (iSlow185 ? (fRec104[0] * ftbl2mydspSIG2[int((65536.0f * fRec107[0]))]) : (iSlow186 ? (fRec97[0] * ftbl2mydspSIG2[int((65536.0f * fRec100[0]))]) : (fRec90[0] * (fTemp150 + (0.0500000007f * (fTemp151 * (1.0f - (0.333333343f * mydsp_faustpower2_f(fTemp151))))))))));
			float fTemp187 = std::fabs((0.25f * fTemp186));
			fRec112[0] = std::max<float>(fTemp187, ((fRec112[1] * fSlow205) + (fTemp187 * fSlow206)));
			fRec111[0] = ((fRec111[1] * fSlow202) + (fRec112[0] * fSlow207));
			fRec110[0] = ((fConst27 * fRec110[1]) + (fSlow199 * std::max<float>(((20.0f * std::log10(fRec111[0])) - fSlow208), 0.0f)));
			float fTemp188 = (0.25f * (fTemp186 * std::pow(10.0f, (0.0500000007f * fRec110[0]))));
			fRec113[0] = (fTemp188 - (fSlow212 * ((fSlow213 * fRec113[2]) + (fSlow214 * fRec113[1]))));
			float fTemp189 = (fSlow180 * fRec88[1]);
			fRec88[0] = (fTemp188 - ((fSlow212 * (fRec113[2] + (fRec113[0] + (2.0f * fRec113[1])))) + (((fRec88[2] * fSlow222) + fTemp189) / fSlow223)));
			float fTemp190 = (fSlow177 * fRec87[1]);
			fRec87[0] = ((((fTemp189 + (fRec88[0] * fSlow225)) + (fRec88[2] * fSlow226)) / fSlow223) - (((fRec87[2] * fSlow234) + fTemp190) / fSlow235));
			fRec86[0] = ((((fTemp190 + (fRec87[0] * fSlow237)) + (fRec87[2] * fSlow238)) / fSlow235) - (fSlow239 * ((fSlow240 * fRec86[2]) + (fSlow241 * fRec86[1]))));
			float fTemp191 = (fSlow173 * (fRec85[0] * (fRec86[2] + (fRec86[0] + (2.0f * fRec86[1])))));
			fRec114[0] = ((0.999000013f * fRec114[1]) + fSlow247);
			fRec119[0] = (fRec118[((IOTA - iSlow254) & 131071)] - (fConst64 * ((((fConst69 * fRec119[1]) + (fConst70 * fRec119[2])) + (fConst71 * fRec119[3])) + (fConst72 * fRec119[4]))));
			fVec44[0] = fSlow255;
			fVec45[0] = fSlow257;
			int iTemp192 = (iSlow42 * ((fSlow255 > fVec44[1]) + (iSlow256 * (fSlow257 > fVec45[1]))));
			iVec46[0] = iTemp192;
			fRec120[0] = (iTemp192 ? fSlow255 : fRec120[1]);
			float fTemp193 = std::pow(10.0f, (0.144444451f * (fRec120[0] + -10.0f)));
			fRec123[0] = (fSlow263 + (fRec123[1] - std::floor((fSlow263 + fRec123[1]))));
			fRec122[0] = ((0.999000013f * fRec122[1]) + (0.00100000005f * ((fSlow262 * ftbl2mydspSIG2[int((65536.0f * fRec123[0]))]) + 1.0f)));
			fRec125[0] = (fSlow265 + (fRec125[1] - std::floor((fSlow265 + fRec125[1]))));
			float fTemp194 = ftbl2mydspSIG2[int((65536.0f * fRec125[0]))];
			fRec124[0] = ((fConst18 * fRec124[1]) + (fConst19 * ((fSlow264 * (fTemp193 * fTemp194)) + 1.0f)));
			float fTemp195 = std::min<float>(5000.0f, std::max<float>(20.0f, (fSlow261 * (fRec122[0] * fRec124[0]))));
			float fTemp196 = (0.5f * fTemp195);
			float fTemp197 = ((0.00366666657f * (400.0f - fTemp196)) + 3.0f);
			float fTemp198 = std::max<float>(1.00000001e-07f, std::fabs(fTemp196));
			float fTemp199 = (fRec127[1] + (fConst17 * fTemp198));
			float fTemp200 = (fTemp199 + -1.0f);
			int iTemp201 = (fTemp200 < 0.0f);
			fRec127[0] = (iTemp201 ? fTemp199 : fTemp200);
			float fRec128 = (iTemp201 ? fTemp199 : (fTemp199 + (fTemp200 * (1.0f - (fConst7 / fTemp198)))));
			float fTemp202 = (0.0399999991f * ((2.0f * fRec128) + -1.0f));
			iRec130[0] = (iTemp192 + iRec130[1]);
			fRec129[0] = ((fConst37 * fRec129[1]) + (fConst38 * (float((iRec130[0] % 4)) + 0.200000003f)));
			float fTemp203 = (fRec129[0] + 10.0f);
			int iTemp204 = (fTemp203 < 23.0f);
			int iTemp205 = (fTemp203 < 24.0f);
			float fTemp206 = (fRec129[0] + -13.0f);
			int iTemp207 = (fTemp203 < 22.0f);
			float fTemp208 = (fRec129[0] + -12.0f);
			int iTemp209 = (fTemp203 < 21.0f);
			float fTemp210 = (fRec129[0] + -11.0f);
			int iTemp211 = (fTemp203 < 20.0f);
			float fTemp212 = (fRec129[0] + -10.0f);
			int iTemp213 = (fTemp203 < 19.0f);
			float fTemp214 = (fRec129[0] + -9.0f);
			int iTemp215 = (fTemp203 < 18.0f);
			float fTemp216 = (fRec129[0] + -8.0f);
			int iTemp217 = (fTemp203 < 17.0f);
			float fTemp218 = (fRec129[0] + -7.0f);
			int iTemp219 = (fTemp203 < 16.0f);
			float fTemp220 = (fRec129[0] + -6.0f);
			float fTemp221 = (80.0f * fTemp220);
			int iTemp222 = (fTemp203 < 15.0f);
			float fTemp223 = (fRec129[0] + -5.0f);
			int iTemp224 = (fTemp203 < 14.0f);
			float fTemp225 = (fRec129[0] + -4.0f);
			int iTemp226 = (fTemp203 < 13.0f);
			float fTemp227 = (fRec129[0] + -3.0f);
			int iTemp228 = (fTemp203 < 12.0f);
			float fTemp229 = (fRec129[0] + -2.0f);
			int iTemp230 = (fTemp203 < 11.0f);
			float fTemp231 = (fRec129[0] + -1.0f);
			int iTemp232 = (fTemp203 < 10.0f);
			int iTemp233 = (fTemp203 < 9.0f);
			float fTemp234 = (fRec129[0] + 1.0f);
			int iTemp235 = (fTemp203 < 8.0f);
			float fTemp236 = (fRec129[0] + 2.0f);
			float fTemp237 = (50.0f * fTemp236);
			int iTemp238 = (fTemp203 < 7.0f);
			float fTemp239 = (fRec129[0] + 3.0f);
			int iTemp240 = (fTemp203 < 6.0f);
			float fTemp241 = (fRec129[0] + 4.0f);
			int iTemp242 = (fTemp203 < 5.0f);
			float fTemp243 = (fRec129[0] + 5.0f);
			int iTemp244 = (fTemp203 < 4.0f);
			float fTemp245 = (fRec129[0] + 6.0f);
			int iTemp246 = (fTemp203 < 3.0f);
			float fTemp247 = (fRec129[0] + 7.0f);
			int iTemp248 = (fTemp203 < 2.0f);
			float fTemp249 = (fRec129[0] + 8.0f);
			int iTemp250 = (fTemp203 < 1.0f);
			float fTemp251 = (fRec129[0] + 9.0f);
			int iTemp252 = (fTemp203 < 0.0f);
			float fTemp253 = (iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? (iTemp250 ? (iTemp252 ? 800.0f : (iTemp250 ? (800.0f - (400.0f * fTemp203)) : 400.0f)) : (iTemp248 ? (400.0f - (50.0f * fTemp251)) : 350.0f)) : (iTemp246 ? ((100.0f * fTemp249) + 350.0f) : 450.0f)) : (iTemp244 ? (450.0f - (125.0f * fTemp247)) : 325.0f)) : (iTemp242 ? ((275.0f * fTemp245) + 325.0f) : 600.0f)) : (iTemp240 ? (600.0f - (200.0f * fTemp243)) : 400.0f)) : (iTemp238 ? (400.0f - (150.0f * fTemp241)) : 250.0f)) : (iTemp235 ? ((150.0f * fTemp239) + 250.0f) : 400.0f)) : (iTemp233 ? (400.0f - fTemp237) : 350.0f)) : (iTemp232 ? ((310.0f * fTemp234) + 350.0f) : 660.0f)) : (iTemp230 ? (660.0f - (220.0f * fRec129[0])) : 440.0f)) : (iTemp228 ? (440.0f - (170.0f * fTemp231)) : 270.0f)) : (iTemp226 ? ((160.0f * fTemp229) + 270.0f) : 430.0f)) : (iTemp224 ? (430.0f - (60.0f * fTemp227)) : 370.0f)) : (iTemp222 ? ((430.0f * fTemp225) + 370.0f) : 800.0f)) : (iTemp219 ? (800.0f - (450.0f * fTemp223)) : 350.0f)) : (iTemp217 ? (350.0f - fTemp221) : 270.0f)) : (iTemp215 ? ((180.0f * fTemp218) + 270.0f) : 450.0f)) : (iTemp213 ? (450.0f - (125.0f * fTemp216)) : 325.0f)) : (iTemp211 ? (325.0f * (fTemp214 + 1.0f)) : 650.0f)) : (iTemp209 ? (650.0f - (250.0f * fTemp212)) : 400.0f)) : (iTemp207 ? (400.0f - (110.0f * fTemp210)) : 290.0f)) : (iTemp204 ? ((110.0f * fTemp208) + 290.0f) : 400.0f)) : (iTemp205 ? (400.0f - (50.0f * fTemp206)) : 350.0f));
			float fTemp254 = ((fTemp253 <= fTemp196) ? fTemp196 : fTemp253);
			float fTemp255 = std::tan((fConst8 * fTemp254));
			float fTemp256 = (1.0f / fTemp255);
			float fTemp257 = (20.0f * fTemp212);
			float fTemp258 = (20.0f * fTemp223);
			float fTemp259 = (10.0f * fRec129[0]);
			float fTemp260 = (10.0f * fTemp245);
			float fTemp261 = (20.0f * fTemp247);
			float fTemp262 = (20.0f * fTemp249);
			float fTemp263 = (20.0f * fTemp203);
			float fTemp264 = ((iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? (iTemp250 ? (iTemp252 ? 80.0f : (iTemp250 ? (80.0f - fTemp263) : 60.0f)) : (iTemp248 ? (60.0f - (10.0f * fTemp251)) : 50.0f)) : (iTemp246 ? (fTemp262 + 50.0f) : 70.0f)) : (iTemp244 ? (70.0f - fTemp261) : 50.0f)) : (iTemp242 ? (fTemp260 + 50.0f) : 60.0f)) : (iTemp240 ? (60.0f - (20.0f * fTemp243)) : 40.0f)) : (iTemp238 ? ((20.0f * fTemp241) + 40.0f) : 60.0f)) : (iTemp235 ? (60.0f - (20.0f * fTemp239)) : 40.0f)) : 40.0f) : (iTemp232 ? (40.0f * (fTemp234 + 1.0f)) : 80.0f)) : (iTemp230 ? (80.0f - fTemp259) : 70.0f)) : (iTemp228 ? (70.0f - (30.0f * fTemp231)) : 40.0f)) : 40.0f) : 40.0f) : (iTemp222 ? (40.0f * (fTemp225 + 1.0f)) : 80.0f)) : (iTemp219 ? (80.0f - fTemp258) : 60.0f)) : 60.0f) : (iTemp215 ? (60.0f - (20.0f * fTemp218)) : 40.0f)) : (iTemp213 ? ((10.0f * fTemp216) + 40.0f) : 50.0f)) : 50.0f) : (iTemp209 ? (fTemp257 + 50.0f) : 70.0f)) : (iTemp207 ? (70.0f - (30.0f * fTemp210)) : 40.0f)) : (iTemp204 ? ((30.0f * fTemp208) + 40.0f) : 70.0f)) : (iTemp205 ? (70.0f - (30.0f * fTemp206)) : 40.0f)) / fTemp254);
			float fTemp265 = (((fTemp256 + fTemp264) / fTemp255) + 1.0f);
			fRec126[0] = (fTemp202 - (((fRec126[2] * (((fTemp256 - fTemp264) / fTemp255) + 1.0f)) + (2.0f * (fRec126[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp255)))))) / fTemp265));
			float fTemp266 = (fTemp255 * fTemp265);
			float fTemp267 = (iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? (iTemp250 ? (iTemp252 ? 1150.0f : (iTemp250 ? ((450.0f * fTemp203) + 1150.0f) : 1600.0f)) : (iTemp248 ? ((100.0f * fTemp251) + 1600.0f) : 1700.0f)) : (iTemp246 ? (1700.0f - (900.0f * fTemp249)) : 800.0f)) : (iTemp244 ? (800.0f - (100.0f * fTemp247)) : 700.0f)) : (iTemp242 ? ((340.0f * fTemp245) + 700.0f) : 1040.0f)) : (iTemp240 ? ((580.0f * fTemp243) + 1040.0f) : 1620.0f)) : (iTemp238 ? ((130.0f * fTemp241) + 1620.0f) : 1750.0f)) : (iTemp235 ? (1750.0f - (1000.0f * fTemp239)) : 750.0f)) : (iTemp233 ? (750.0f - (150.0f * fTemp236)) : 600.0f)) : (iTemp232 ? ((520.0f * fTemp234) + 600.0f) : 1120.0f)) : (iTemp230 ? ((680.0f * fRec129[0]) + 1120.0f) : 1800.0f)) : (iTemp228 ? ((50.0f * fTemp231) + 1800.0f) : 1850.0f)) : (iTemp226 ? (1850.0f - (1030.0f * fTemp229)) : 820.0f)) : (iTemp224 ? (820.0f - (190.0f * fTemp227)) : 630.0f)) : (iTemp222 ? ((520.0f * fTemp225) + 630.0f) : 1150.0f)) : (iTemp219 ? ((850.0f * fTemp223) + 1150.0f) : 2000.0f)) : (iTemp217 ? ((140.0f * fTemp220) + 2000.0f) : 2140.0f)) : (iTemp215 ? (2140.0f - (1340.0f * fTemp218)) : 800.0f)) : (iTemp213 ? (800.0f - (100.0f * fTemp216)) : 700.0f)) : (iTemp211 ? ((380.0f * fTemp214) + 700.0f) : 1080.0f)) : (iTemp209 ? ((620.0f * fTemp212) + 1080.0f) : 1700.0f)) : (iTemp207 ? ((170.0f * fTemp210) + 1700.0f) : 1870.0f)) : (iTemp204 ? (1870.0f - (1070.0f * fTemp208)) : 800.0f)) : (iTemp205 ? (800.0f - (200.0f * fTemp206)) : 600.0f));
			float fTemp268 = std::tan((fConst8 * fTemp267));
			float fTemp269 = (1.0f / fTemp268);
			float fTemp270 = (10.0f * fTemp208);
			float fTemp271 = (10.0f * fTemp212);
			float fTemp272 = (10.0f * fTemp234);
			float fTemp273 = (10.0f * fTemp243);
			float fTemp274 = ((iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? (iTemp250 ? (iTemp252 ? 90.0f : (iTemp250 ? (90.0f - (10.0f * fTemp203)) : 80.0f)) : (iTemp248 ? ((20.0f * fTemp251) + 80.0f) : 100.0f)) : (iTemp246 ? (100.0f - fTemp262) : 80.0f)) : (iTemp244 ? (80.0f - fTemp261) : 60.0f)) : (iTemp242 ? (fTemp260 + 60.0f) : 70.0f)) : (iTemp240 ? (fTemp273 + 70.0f) : 80.0f)) : (iTemp238 ? ((10.0f * fTemp241) + 80.0f) : 90.0f)) : (iTemp235 ? (90.0f - (10.0f * fTemp239)) : 80.0f)) : 80.0f) : (iTemp232 ? (fTemp272 + 80.0f) : 90.0f)) : (iTemp230 ? (90.0f - fTemp259) : 80.0f)) : (iTemp228 ? ((10.0f * fTemp231) + 80.0f) : 90.0f)) : (iTemp226 ? (90.0f - (10.0f * fTemp229)) : 80.0f)) : (iTemp224 ? (80.0f - (20.0f * fTemp227)) : 60.0f)) : (iTemp222 ? ((30.0f * fTemp225) + 60.0f) : 90.0f)) : (iTemp219 ? ((10.0f * fTemp223) + 90.0f) : 100.0f)) : (iTemp217 ? (100.0f - (10.0f * fTemp220)) : 90.0f)) : (iTemp215 ? (90.0f - (10.0f * fTemp218)) : 80.0f)) : (iTemp213 ? (80.0f - (20.0f * fTemp216)) : 60.0f)) : (iTemp211 ? ((30.0f * fTemp214) + 60.0f) : 90.0f)) : (iTemp209 ? (90.0f - fTemp271) : 80.0f)) : (iTemp207 ? ((10.0f * fTemp210) + 80.0f) : 90.0f)) : (iTemp204 ? (90.0f - fTemp270) : 80.0f)) : (iTemp205 ? (80.0f - (20.0f * fTemp206)) : 60.0f)) / fTemp267);
			float fTemp275 = (((fTemp269 + fTemp274) / fTemp268) + 1.0f);
			fRec131[0] = (fTemp202 - (((fRec131[2] * (((fTemp269 - fTemp274) / fTemp268) + 1.0f)) + (2.0f * (fRec131[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp268)))))) / fTemp275));
			float fTemp276 = (iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? (iTemp250 ? (iTemp252 ? 0.630957007f : (iTemp250 ? (0.630957007f - (0.567861021f * fTemp203)) : 0.0630960017f)) : (iTemp248 ? ((0.0369039997f * fTemp251) + 0.0630960017f) : 0.100000001f)) : (iTemp246 ? ((0.254812986f * fTemp249) + 0.100000001f) : 0.35481301f)) : (iTemp244 ? (0.35481301f - (0.103624001f * fTemp247)) : 0.251188993f)) : (iTemp242 ? ((0.195494995f * fTemp245) + 0.251188993f) : 0.446684003f)) : (iTemp240 ? (0.446684003f - (0.195494995f * fTemp243)) : 0.251188993f)) : (iTemp238 ? (0.251188993f - (0.219566002f * fTemp241)) : 0.0316229984f)) : (iTemp235 ? ((0.250214994f * fTemp239) + 0.0316229984f) : 0.281838f)) : (iTemp233 ? (0.281838f - (0.181838006f * fTemp236)) : 0.100000001f)) : (iTemp232 ? ((0.401187003f * fTemp234) + 0.100000001f) : 0.501187027f)) : (iTemp230 ? (0.501187027f - (0.301661015f * fRec129[0])) : 0.199525997f)) : (iTemp228 ? (0.199525997f - (0.136429995f * fTemp231)) : 0.0630960017f)) : (iTemp226 ? ((0.253131986f * fTemp229) + 0.0630960017f) : 0.316228002f)) : (iTemp224 ? (0.316228002f - (0.216227993f * fTemp227)) : 0.100000001f)) : (iTemp222 ? ((0.401187003f * fTemp225) + 0.100000001f) : 0.501187027f)) : (iTemp219 ? (0.501187027f - (0.401187003f * fTemp223)) : 0.100000001f)) : (iTemp217 ? ((0.151188999f * fTemp220) + 0.100000001f) : 0.251188993f)) : (iTemp215 ? ((0.0306490008f * fTemp218) + 0.251188993f) : 0.281838f)) : (iTemp213 ? (0.281838f - (0.123349003f * fTemp216)) : 0.158489004f)) : (iTemp211 ? ((0.342698008f * fTemp214) + 0.158489004f) : 0.501187027f)) : (iTemp209 ? (0.501187027f - (0.301661015f * fTemp212)) : 0.199525997f)) : (iTemp207 ? (0.199525997f - (0.0216979999f * fTemp210)) : 0.177827999f)) : (iTemp204 ? ((0.138400003f * fTemp208) + 0.177827999f) : 0.316228002f)) : (iTemp205 ? (0.316228002f - (0.216227993f * fTemp206)) : 0.100000001f));
			float fTemp277 = (fTemp268 * fTemp275);
			float fTemp278 = (100.0f * fTemp206);
			float fTemp279 = (50.0f * fTemp214);
			float fTemp280 = (50.0f * fRec129[0]);
			float fTemp281 = (iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? (iTemp250 ? (iTemp252 ? 2800.0f : (iTemp250 ? (2800.0f - (100.0f * fTemp203)) : 2700.0f)) : 2700.0f) : (iTemp246 ? ((130.0f * fTemp249) + 2700.0f) : 2830.0f)) : (iTemp244 ? (2830.0f - (300.0f * fTemp247)) : 2530.0f)) : (iTemp242 ? (2530.0f - (280.0f * fTemp245)) : 2250.0f)) : (iTemp240 ? ((150.0f * fTemp243) + 2250.0f) : 2400.0f)) : (iTemp238 ? ((200.0f * fTemp241) + 2400.0f) : 2600.0f)) : (iTemp235 ? (2600.0f - (200.0f * fTemp239)) : 2400.0f)) : 2400.0f) : (iTemp232 ? ((350.0f * fTemp234) + 2400.0f) : 2750.0f)) : (iTemp230 ? (2750.0f - fTemp280) : 2700.0f)) : (iTemp228 ? ((200.0f * fTemp231) + 2700.0f) : 2900.0f)) : (iTemp226 ? (2900.0f - (200.0f * fTemp229)) : 2700.0f)) : (iTemp224 ? ((50.0f * fTemp227) + 2700.0f) : 2750.0f)) : (iTemp222 ? ((150.0f * fTemp225) + 2750.0f) : 2900.0f)) : (iTemp219 ? (2900.0f - (100.0f * fTemp223)) : 2800.0f)) : (iTemp217 ? ((150.0f * fTemp220) + 2800.0f) : 2950.0f)) : (iTemp215 ? (2950.0f - (120.0f * fTemp218)) : 2830.0f)) : (iTemp213 ? (2830.0f - (130.0f * fTemp216)) : 2700.0f)) : (iTemp211 ? (2700.0f - fTemp279) : 2650.0f)) : (iTemp209 ? (2650.0f - (50.0f * fTemp212)) : 2600.0f)) : (iTemp207 ? ((200.0f * fTemp210) + 2600.0f) : 2800.0f)) : (iTemp204 ? (2800.0f - (200.0f * fTemp208)) : 2600.0f)) : (iTemp205 ? (fTemp278 + 2600.0f) : 2700.0f));
			float fTemp282 = std::tan((fConst8 * fTemp281));
			float fTemp283 = (1.0f / fTemp282);
			float fTemp284 = (20.0f * fTemp225);
			float fTemp285 = (20.0f * fRec129[0]);
			float fTemp286 = (20.0f * fTemp234);
			float fTemp287 = (60.0f * fTemp245);
			float fTemp288 = ((iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? 120.0f : (iTemp246 ? (120.0f - fTemp262) : 100.0f)) : (iTemp244 ? ((70.0f * fTemp247) + 100.0f) : 170.0f)) : (iTemp242 ? (170.0f - fTemp287) : 110.0f)) : (iTemp240 ? (110.0f - fTemp273) : 100.0f)) : 100.0f) : 100.0f) : 100.0f) : (iTemp232 ? (fTemp286 + 100.0f) : 120.0f)) : (iTemp230 ? (120.0f - fTemp285) : 100.0f)) : 100.0f) : 100.0f) : 100.0f) : (iTemp222 ? (fTemp284 + 100.0f) : 120.0f)) : 120.0f) : (iTemp217 ? (120.0f - (20.0f * fTemp220)) : 100.0f)) : 100.0f) : (iTemp213 ? ((70.0f * fTemp216) + 100.0f) : 170.0f)) : (iTemp211 ? (170.0f - fTemp279) : 120.0f)) : (iTemp209 ? (120.0f - fTemp257) : 100.0f)) : 100.0f) : 100.0f) : 100.0f) / fTemp281);
			float fTemp289 = (((fTemp283 + fTemp288) / fTemp282) + 1.0f);
			fRec132[0] = (fTemp202 - (((fRec132[2] * (((fTemp283 - fTemp288) / fTemp282) + 1.0f)) + (2.0f * (fRec132[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp282)))))) / fTemp289));
			float fTemp290 = (iTemp215 ? ((0.0293140002f * fTemp218) + 0.0501190014f) : 0.0794330016f);
			float fTemp291 = (iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? (iTemp250 ? (iTemp252 ? 0.100000001f : (iTemp250 ? (0.100000001f - (0.0683770031f * fTemp203)) : 0.0316229984f)) : 0.0316229984f) : (iTemp246 ? ((0.126865998f * fTemp249) + 0.0316229984f) : 0.158489004f)) : (iTemp244 ? (0.158489004f - (0.126865998f * fTemp247)) : 0.0316229984f)) : (iTemp242 ? ((0.323190004f * fTemp245) + 0.0316229984f) : 0.35481301f)) : 0.35481301f) : (iTemp238 ? (0.35481301f - (0.196324006f * fTemp241)) : 0.158489004f)) : (iTemp235 ? (0.158489004f - (0.0693639964f * fTemp239)) : 0.0891249999f)) : (iTemp233 ? (0.0891249999f - (0.0640060008f * fTemp236)) : 0.0251189992f)) : (iTemp232 ? ((0.0456760004f * fTemp234) + 0.0251189992f) : 0.0707949996f)) : (iTemp230 ? ((0.0550980009f * fRec129[0]) + 0.0707949996f) : 0.125892997f)) : (iTemp228 ? (0.125892997f - (0.0627970025f * fTemp231)) : 0.0630960017f)) : (iTemp226 ? (0.0630960017f - (0.0129770003f * fTemp229)) : 0.0501190014f)) : (iTemp224 ? ((0.020676f * fTemp227) + 0.0501190014f) : 0.0707949996f)) : (iTemp222 ? (0.0707949996f - (0.0456760004f * fTemp225)) : 0.0251189992f)) : (iTemp219 ? ((0.152709007f * fTemp223) + 0.0251189992f) : 0.177827999f)) : (iTemp217 ? (0.177827999f - (0.127709001f * fTemp220)) : 0.0501190014f)) : fTemp290) : (iTemp213 ? (0.0794330016f - (0.0616500005f * fTemp216)) : 0.0177829992f)) : (iTemp211 ? ((0.428900987f * fTemp214) + 0.0177829992f) : 0.446684003f)) : (iTemp209 ? (0.446684003f - (0.195494995f * fTemp212)) : 0.251188993f)) : (iTemp207 ? (0.251188993f - (0.125295997f * fTemp210)) : 0.125892997f)) : (iTemp204 ? ((0.125295997f * fTemp208) + 0.125892997f) : 0.251188993f)) : (iTemp205 ? (0.251188993f - (0.109935001f * fTemp206)) : 0.141253993f));
			float fTemp292 = (fTemp282 * fTemp289);
			float fTemp293 = (350.0f * fTemp243);
			float fTemp294 = (iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? (iTemp250 ? (iTemp252 ? 3500.0f : (iTemp250 ? (3500.0f - (200.0f * fTemp203)) : 3300.0f)) : (iTemp248 ? ((400.0f * fTemp251) + 3300.0f) : 3700.0f)) : (iTemp246 ? (3700.0f - (200.0f * fTemp249)) : 3500.0f)) : 3500.0f) : (iTemp242 ? (3500.0f - (1050.0f * fTemp245)) : 2450.0f)) : (iTemp240 ? (fTemp293 + 2450.0f) : 2800.0f)) : (iTemp238 ? ((250.0f * fTemp241) + 2800.0f) : 3050.0f)) : (iTemp235 ? (3050.0f - (450.0f * fTemp239)) : 2600.0f)) : (iTemp233 ? ((75.0f * fTemp236) + 2600.0f) : 2675.0f)) : (iTemp232 ? ((325.0f * fTemp234) + 2675.0f) : 3000.0f)) : 3000.0f) : (iTemp228 ? ((350.0f * fTemp231) + 3000.0f) : 3350.0f)) : (iTemp226 ? (3350.0f - (350.0f * fTemp229)) : 3000.0f)) : 3000.0f) : (iTemp222 ? ((900.0f * fTemp225) + 3000.0f) : 3900.0f)) : (iTemp219 ? (3900.0f - (300.0f * fTemp223)) : 3600.0f)) : (iTemp217 ? ((300.0f * fTemp220) + 3600.0f) : 3900.0f)) : (iTemp215 ? (3900.0f - (100.0f * fTemp218)) : 3800.0f)) : 3800.0f) : (iTemp211 ? (3800.0f - (900.0f * fTemp214)) : 2900.0f)) : (iTemp209 ? ((300.0f * fTemp212) + 2900.0f) : 3200.0f)) : (iTemp207 ? ((50.0f * fTemp210) + 3200.0f) : 3250.0f)) : (iTemp204 ? (3250.0f - (450.0f * fTemp208)) : 2800.0f)) : (iTemp205 ? (fTemp278 + 2800.0f) : 2900.0f));
			float fTemp295 = std::tan((fConst8 * fTemp294));
			float fTemp296 = (1.0f / fTemp295);
			float fTemp297 = ((iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? (iTemp250 ? (iTemp252 ? 130.0f : (iTemp250 ? (fTemp263 + 130.0f) : 150.0f)) : 150.0f) : (iTemp246 ? (150.0f - fTemp262) : 130.0f)) : (iTemp244 ? ((50.0f * fTemp247) + 130.0f) : 180.0f)) : (iTemp242 ? (180.0f - fTemp287) : 120.0f)) : 120.0f) : 120.0f) : 120.0f) : 120.0f) : (iTemp232 ? (fTemp272 + 120.0f) : 130.0f)) : (iTemp230 ? (130.0f - fTemp259) : 120.0f)) : 120.0f) : 120.0f) : 120.0f) : (iTemp222 ? ((10.0f * fTemp225) + 120.0f) : 130.0f)) : (iTemp219 ? (fTemp258 + 130.0f) : 150.0f)) : (iTemp217 ? (150.0f - (30.0f * fTemp220)) : 120.0f)) : 120.0f) : (iTemp213 ? ((60.0f * fTemp216) + 120.0f) : 180.0f)) : (iTemp211 ? (180.0f - fTemp279) : 130.0f)) : (iTemp209 ? (130.0f - fTemp271) : 120.0f)) : 120.0f) : (iTemp204 ? (fTemp270 + 120.0f) : 130.0f)) : (iTemp205 ? (130.0f - (10.0f * fTemp206)) : 120.0f)) / fTemp294);
			float fTemp298 = (((fTemp296 + fTemp297) / fTemp295) + 1.0f);
			fRec133[0] = (fTemp202 - (((fRec133[2] * (((fTemp296 - fTemp297) / fTemp295) + 1.0f)) + (2.0f * (fRec133[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp295)))))) / fTemp298));
			float fTemp299 = (iTemp228 ? (0.100000001f - (0.0841509998f * fTemp231)) : 0.0158489998f);
			float fTemp300 = (iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? (iTemp250 ? (iTemp252 ? 0.0158489998f : (iTemp250 ? ((0.00193400006f * fTemp203) + 0.0158489998f) : 0.0177829992f)) : (iTemp248 ? (0.0177829992f - (0.00193400006f * fTemp251)) : 0.0158489998f)) : (iTemp246 ? ((0.0239620004f * fTemp249) + 0.0158489998f) : 0.0398110002f)) : (iTemp244 ? (0.0398110002f - (0.0298110005f * fTemp247)) : 0.00999999978f)) : (iTemp242 ? ((0.344812989f * fTemp245) + 0.00999999978f) : 0.35481301f)) : (iTemp240 ? (0.35481301f - (0.103624001f * fTemp243)) : 0.251188993f)) : (iTemp238 ? (0.251188993f - (0.171755999f * fTemp241)) : 0.0794330016f)) : (iTemp235 ? ((0.0205669999f * fTemp239) + 0.0794330016f) : 0.100000001f)) : (iTemp233 ? (0.100000001f - (0.0601890013f * fTemp236)) : 0.0398110002f)) : (iTemp232 ? ((0.0232849997f * fTemp234) + 0.0398110002f) : 0.0630960017f)) : (iTemp230 ? ((0.0369039997f * fRec129[0]) + 0.0630960017f) : 0.100000001f)) : fTemp299) : (iTemp226 ? ((0.0635839999f * fTemp229) + 0.0158489998f) : 0.0794330016f)) : (iTemp224 ? (0.0794330016f - (0.0478099994f * fTemp227)) : 0.0316229984f)) : (iTemp222 ? ((0.0683770031f * fTemp225) + 0.0316229984f) : 0.100000001f)) : (iTemp219 ? (0.100000001f - (0.0900000036f * fTemp223)) : 0.00999999978f)) : (iTemp217 ? ((0.0401189998f * fTemp220) + 0.00999999978f) : 0.0501190014f)) : fTemp290) : (iTemp213 ? (0.0794330016f - (0.0694330037f * fTemp216)) : 0.00999999978f)) : (iTemp211 ? ((0.388107002f * fTemp214) + 0.00999999978f) : 0.398106992f)) : (iTemp209 ? (0.398106992f - (0.198580995f * fTemp212)) : 0.199525997f)) : (iTemp207 ? (0.199525997f - (0.099526003f * fTemp210)) : 0.100000001f)) : (iTemp204 ? ((0.151188999f * fTemp208) + 0.100000001f) : 0.251188993f)) : (iTemp205 ? (0.251188993f - (0.0516630001f * fTemp206)) : 0.199525997f));
			float fTemp301 = (fTemp295 * fTemp298);
			float fTemp302 = (iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? 4950.0f : (iTemp242 ? (4950.0f - (2200.0f * fTemp245)) : 2750.0f)) : (iTemp240 ? (fTemp293 + 2750.0f) : 3100.0f)) : (iTemp238 ? ((240.0f * fTemp241) + 3100.0f) : 3340.0f)) : (iTemp235 ? (3340.0f - (440.0f * fTemp239)) : 2900.0f)) : (iTemp233 ? (fTemp237 + 2900.0f) : 2950.0f)) : (iTemp232 ? ((400.0f * fTemp234) + 2950.0f) : 3350.0f)) : (iTemp230 ? (3350.0f - fTemp280) : 3300.0f)) : (iTemp228 ? ((290.0f * fTemp231) + 3300.0f) : 3590.0f)) : (iTemp226 ? (3590.0f - (290.0f * fTemp229)) : 3300.0f)) : (iTemp224 ? ((100.0f * fTemp227) + 3300.0f) : 3400.0f)) : (iTemp222 ? ((1550.0f * fTemp225) + 3400.0f) : 4950.0f)) : 4950.0f) : 4950.0f) : 4950.0f) : 4950.0f) : (iTemp211 ? (4950.0f - (1700.0f * fTemp214)) : 3250.0f)) : (iTemp209 ? ((330.0f * fTemp212) + 3250.0f) : 3580.0f)) : (iTemp207 ? (3580.0f - (40.0f * fTemp210)) : 3540.0f)) : (iTemp204 ? (3540.0f - (540.0f * fTemp208)) : 3000.0f)) : (iTemp205 ? ((300.0f * fTemp206) + 3000.0f) : 3300.0f));
			float fTemp303 = std::tan((fConst8 * fTemp302));
			float fTemp304 = (1.0f / fTemp303);
			float fTemp305 = ((iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? (iTemp250 ? (iTemp252 ? 140.0f : (iTemp250 ? ((60.0f * fTemp203) + 140.0f) : 200.0f)) : 200.0f) : (iTemp246 ? (200.0f - (65.0f * fTemp249)) : 135.0f)) : (iTemp244 ? ((65.0f * fTemp247) + 135.0f) : 200.0f)) : (iTemp242 ? (200.0f - (70.0f * fTemp245)) : 130.0f)) : (iTemp240 ? (130.0f - fTemp273) : 120.0f)) : 120.0f) : 120.0f) : 120.0f) : (iTemp232 ? (fTemp286 + 120.0f) : 140.0f)) : (iTemp230 ? (140.0f - fTemp285) : 120.0f)) : 120.0f) : 120.0f) : 120.0f) : (iTemp222 ? (fTemp284 + 120.0f) : 140.0f)) : (iTemp219 ? ((60.0f * fTemp223) + 140.0f) : 200.0f)) : (iTemp217 ? (200.0f - fTemp221) : 120.0f)) : 120.0f) : (iTemp213 ? ((80.0f * fTemp216) + 120.0f) : 200.0f)) : (iTemp211 ? (200.0f - (60.0f * fTemp214)) : 140.0f)) : (iTemp209 ? (140.0f - fTemp257) : 120.0f)) : 120.0f) : (iTemp204 ? ((15.0f * fTemp208) + 120.0f) : 135.0f)) : (iTemp205 ? (135.0f - (15.0f * fTemp206)) : 120.0f)) / fTemp302);
			float fTemp306 = (((fTemp304 + fTemp305) / fTemp303) + 1.0f);
			fRec134[0] = (fTemp202 - (((fRec134[2] * (((fTemp304 - fTemp305) / fTemp303) + 1.0f)) + (2.0f * (fRec134[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp303)))))) / fTemp306));
			float fTemp307 = (iTemp204 ? (iTemp207 ? (iTemp209 ? (iTemp211 ? (iTemp213 ? (iTemp215 ? (iTemp217 ? (iTemp219 ? (iTemp222 ? (iTemp224 ? (iTemp226 ? (iTemp228 ? (iTemp230 ? (iTemp232 ? (iTemp233 ? (iTemp235 ? (iTemp238 ? (iTemp240 ? (iTemp242 ? (iTemp244 ? (iTemp246 ? (iTemp248 ? 0.00100000005f : (iTemp246 ? ((0.000777999987f * fTemp249) + 0.00100000005f) : 0.00177800003f)) : (iTemp244 ? (0.00177800003f - (0.001147f * fTemp247)) : 0.000630999974f)) : (iTemp242 ? ((0.0993689969f * fTemp245) + 0.000630999974f) : 0.100000001f)) : (iTemp240 ? ((0.0258930009f * fTemp243) + 0.100000001f) : 0.125892997f)) : (iTemp238 ? (0.125892997f - (0.0860819966f * fTemp241)) : 0.0398110002f)) : (iTemp235 ? (0.0398110002f - (0.0298110005f * fTemp239)) : 0.00999999978f)) : (iTemp233 ? ((0.00584900007f * fTemp236) + 0.00999999978f) : 0.0158489998f)) : (iTemp232 ? (0.0158489998f - (0.00325999991f * fTemp234)) : 0.0125890002f)) : (iTemp230 ? ((0.0874110013f * fRec129[0]) + 0.0125890002f) : 0.100000001f)) : fTemp299) : (iTemp226 ? ((0.00410400005f * fTemp229) + 0.0158489998f) : 0.0199529994f)) : 0.0199529994f) : (iTemp222 ? (0.0199529994f - (0.0167909991f * fTemp225)) : 0.0031620001f)) : (iTemp219 ? (0.0031620001f - (0.00157700002f * fTemp223)) : 0.00158499996f)) : (iTemp217 ? ((0.00472499989f * fTemp220) + 0.00158499996f) : 0.00631000008f)) : (iTemp215 ? (0.00631000008f - (0.00314799999f * fTemp218)) : 0.0031620001f)) : (iTemp213 ? (0.0031620001f - (0.00216199993f * fTemp216)) : 0.00100000005f)) : (iTemp211 ? ((0.0784329996f * fTemp214) + 0.00100000005f) : 0.0794330016f)) : (iTemp209 ? ((0.0205669999f * fTemp212) + 0.0794330016f) : 0.100000001f)) : (iTemp207 ? (0.100000001f - (0.0683770031f * fTemp210)) : 0.0316229984f)) : (iTemp204 ? ((0.0184959993f * fTemp208) + 0.0316229984f) : 0.0501190014f)) : 0.0501190014f);
			float fTemp308 = (fTemp303 * fTemp306);
			iRec135[0] = (((iRec135[1] + (iRec135[1] > 0)) * (iTemp192 <= iVec46[1])) + (iTemp192 > iVec46[1]));
			float fTemp309 = float(iRec135[0]);
			fRec121[0] = ((((fTemp197 * (((((fRec126[0] / fTemp266) + ((fRec131[0] * fTemp276) / fTemp277)) + ((fRec132[0] * fTemp291) / fTemp292)) + ((fRec133[0] * fTemp300) / fTemp301)) + ((fRec134[0] * fTemp307) / fTemp308))) + (((((fRec126[2] * (0.0f - (fTemp197 / fTemp266))) + (fRec131[2] * (0.0f - ((fTemp197 * fTemp276) / fTemp277)))) + (fRec132[2] * (0.0f - ((fTemp197 * fTemp291) / fTemp292)))) + (fRec133[2] * (0.0f - ((fTemp197 * fTemp300) / fTemp301)))) + (fRec134[2] * (0.0f - ((fTemp197 * fTemp307) / fTemp308))))) * std::max<float>(0.0f, std::min<float>((fConst79 * fTemp309), ((fSlow266 * (fConst78 - fTemp309)) + 1.0f)))) - (fConst75 * ((fConst81 * fRec121[2]) + (fConst82 * fRec121[1]))));
			float fTemp310 = (fConst75 * (fRec121[2] + (fRec121[0] + (2.0f * fRec121[1]))));
			float fTemp311 = (fConst12 * fTemp309);
			float fTemp312 = (fConst11 - fTemp309);
			float fTemp313 = std::max<float>(1.0f, (fSlow46 * ((2.0f * fTemp193) + 1.0f)));
			float fTemp314 = std::max<float>(0.0f, std::min<float>(fTemp311, ((fTemp312 / fTemp313) + 1.0f)));
			fVec47[0] = fTemp314;
			int iTemp315 = ((fTemp314 > 0.5f) + (fTemp314 > fVec47[1]));
			iVec48[0] = iTemp315;
			iRec137[0] = (iTemp315 + (iRec137[1] * (iVec48[1] >= iTemp315)));
			float fTemp316 = float(iRec137[0]);
			iRec138[0] = ((iRec138[1] + 1) * (iTemp315 == 0));
			fRec136[0] = ((fConst18 * fRec136[1]) + (fConst19 * std::max<float>(0.0f, (std::min<float>((fConst12 * fTemp316), std::max<float>((1.5f - (fConst20 * fTemp316)), 0.5f)) - (fSlow63 * float(iRec138[0]))))));
			fRec140[0] = ((fConst22 * fRec140[1]) + (fConst23 * fTemp195));
			float fTemp317 = std::max<float>((fSlow65 * fRec140[0]), 23.4489498f);
			float fTemp318 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp317)));
			float fTemp319 = std::floor(fTemp318);
			float fTemp320 = std::max<float>(20.0f, std::fabs(fTemp317));
			fVec49[0] = fTemp320;
			float fTemp321 = (fRec142[1] + (fConst17 * fVec49[1]));
			fRec142[0] = (fTemp321 - std::floor(fTemp321));
			float fTemp322 = mydsp_faustpower2_f(((2.0f * fRec142[0]) + -1.0f));
			fVec50[0] = fTemp322;
			float fTemp323 = ((fTemp18 * (fTemp322 - fVec50[1])) / fTemp320);
			fVec51[(IOTA & 4095)] = fTemp323;
			int iTemp324 = int(fTemp318);
			fRec141[0] = ((0.999000013f * fRec141[1]) - (fConst25 * (((fTemp318 - fTemp319) * fVec51[((IOTA - (iTemp324 + 1)) & 4095)]) - (fTemp323 - (fVec51[((IOTA - iTemp324) & 4095)] * (fTemp319 + (1.0f - fTemp318)))))));
			float fTemp325 = ((fRec140[0] * fRec136[0]) * fRec141[0]);
			float fTemp326 = (fTemp193 + 0.5f);
			float fTemp327 = (0.0133333337f * (fTemp195 + -300.0f));
			float fTemp328 = (fRec139[1] + (fConst17 * (fRec140[0] * ((fSlow66 * (fTemp325 * ((fRec136[0] * ((6.86000013f * (((0.200000003f * (float(input2[i]) + -5.0f)) + 1.0f) * fTemp326)) + fTemp327)) + 2.4000001f))) + 1.0f))));
			fRec139[0] = (fTemp328 - std::floor(fTemp328));
			float fTemp329 = std::max<float>(0.0f, std::min<float>((fConst85 * fTemp309), (1.0f - ((fTemp309 - fConst84) / fTemp313))));
			fVec52[0] = fTemp329;
			int iTemp330 = (((fTemp329 > 0.5f) + (fTemp329 > fVec52[1])) > 0);
			iRec145[0] = (iTemp330 * (iRec145[1] + 1));
			int iTemp331 = (iRec145[0] < iConst86);
			float fTemp332 = (0.144717798f * (iTemp330 ? (iTemp331 ? 0.0500000007f : 9.99999975e-05f) : fSlow267));
			int iTemp333 = (std::fabs(fTemp332) < 1.1920929e-07f);
			float fTemp334 = (iTemp333 ? 0.0f : std::exp((0.0f - (fConst17 / (iTemp333 ? 1.0f : fTemp332)))));
			float fTemp335 = float(iTemp330);
			fRec144[0] = ((fRec144[1] * fTemp334) + ((iTemp330 ? (iTemp331 ? fTemp335 : (0.5f * fTemp335)) : 0.0f) * (1.0f - fTemp334)));
			fRec143[0] = ((fConst27 * fRec143[1]) + (fConst28 * fRec144[0]));
			float fTemp336 = std::max<float>((fSlow268 * fRec140[0]), 23.4489498f);
			float fTemp337 = std::max<float>(20.0f, std::fabs(fTemp336));
			fVec53[0] = fTemp337;
			float fTemp338 = (fRec148[1] + (fConst17 * fVec53[1]));
			fRec148[0] = (fTemp338 - std::floor(fTemp338));
			float fTemp339 = mydsp_faustpower2_f(((2.0f * fRec148[0]) + -1.0f));
			fVec54[0] = fTemp339;
			float fTemp340 = ((fTemp18 * (fTemp339 - fVec54[1])) / fTemp337);
			fVec55[(IOTA & 4095)] = fTemp340;
			float fTemp341 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp336)));
			int iTemp342 = int(fTemp341);
			float fTemp343 = std::floor(fTemp341);
			fRec147[0] = ((0.999000013f * fRec147[1]) + (fConst25 * ((fTemp340 - (fVec55[((IOTA - iTemp342) & 4095)] * (fTemp343 + (1.0f - fTemp341)))) - ((fTemp341 - fTemp343) * fVec55[((IOTA - (iTemp342 + 1)) & 4095)]))));
			float fTemp344 = ((fRec140[0] * fRec143[0]) * fRec147[0]);
			float fTemp345 = (fRec146[1] + (fConst17 * (fRec140[0] * ((fSlow269 * (fTemp344 * ((fRec143[0] * (fTemp327 + (10.0f * (fTemp326 * ((0.200000003f * (float(input3[i]) + -5.0f)) + 1.0f))))) + 10.0f))) + 1.0f))));
			fRec146[0] = (fTemp345 - std::floor(fTemp345));
			float fTemp346 = std::max<float>(0.0f, std::min<float>(fTemp311, ((fSlow49 * fTemp312) + 1.0f)));
			fRec118[(IOTA & 131071)] = ((fConst60 * (((fConst62 * fRec119[2]) + (fConst52 * fRec119[0])) + (fConst52 * fRec119[4]))) + ((fTemp193 * (iSlow259 ? (fRec143[0] * ftbl2mydspSIG2[int((65536.0f * fRec146[0]))]) : (iSlow260 ? (fRec136[0] * ftbl2mydspSIG2[int((65536.0f * fRec139[0]))]) : fTemp310))) * fTemp346));
			float fTemp347 = fRec118[((IOTA - 0) & 131071)];
			float fTemp348 = std::fabs((0.25f * fTemp347));
			fRec151[0] = std::max<float>(fTemp348, ((fRec151[1] * fSlow276) + (fTemp348 * fSlow277)));
			fRec150[0] = ((fRec150[1] * fSlow273) + (fRec151[0] * fSlow278));
			fRec149[0] = ((fConst27 * fRec149[1]) + (fSlow270 * std::max<float>(((20.0f * std::log10(fRec150[0])) - fSlow279), 0.0f)));
			float fTemp349 = (0.25f * (fTemp347 * std::pow(10.0f, (0.0500000007f * fRec149[0]))));
			fRec152[0] = (fTemp349 - (fSlow283 * ((fSlow284 * fRec152[2]) + (fSlow285 * fRec152[1]))));
			float fTemp350 = (fSlow253 * fRec117[1]);
			fRec117[0] = (fTemp349 - ((fSlow283 * (fRec152[2] + (fRec152[0] + (2.0f * fRec152[1])))) + (((fRec117[2] * fSlow293) + fTemp350) / fSlow294)));
			float fTemp351 = (fSlow250 * fRec116[1]);
			fRec116[0] = ((((fTemp350 + (fRec117[0] * fSlow296)) + (fRec117[2] * fSlow297)) / fSlow294) - (((fRec116[2] * fSlow305) + fTemp351) / fSlow306));
			fRec115[0] = ((((fTemp351 + (fRec116[0] * fSlow308)) + (fRec116[2] * fSlow309)) / fSlow306) - (fSlow310 * ((fSlow311 * fRec115[2]) + (fSlow312 * fRec115[1]))));
			fRec153[0] = ((0.999000013f * fRec153[1]) + fSlow318);
			fRec158[0] = (fRec157[((IOTA - iSlow254) & 131071)] - (fConst64 * ((((fConst69 * fRec158[1]) + (fConst70 * fRec158[2])) + (fConst71 * fRec158[3])) + (fConst72 * fRec158[4]))));
			iRec160[0] = ((1103515245 * iRec160[1]) + 12345);
			float fTemp352 = float(iRec160[0]);
			fVec56[0] = fSlow331;
			fVec57[0] = fSlow333;
			int iTemp353 = (iSlow42 * ((fSlow331 > fVec56[1]) + (iSlow332 * (fSlow333 > fVec57[1]))));
			iVec58[0] = iTemp353;
			iRec161[0] = (((iRec161[1] + (iRec161[1] > 0)) * (iTemp353 <= iVec58[1])) + (iTemp353 > iVec58[1]));
			float fTemp354 = float(iRec161[0]);
			float fTemp355 = (fConst12 * fTemp354);
			float fTemp356 = (4.65661287e-10f * (fTemp352 * std::max<float>(0.0f, std::min<float>(fTemp355, (2.0f - fTemp355)))));
			float fTemp357 = ((fSlow343 * fRec159[((IOTA - iSlow345) & 2047)]) + (fSlow346 * ((((fSlow347 * fRec159[((IOTA - iSlow348) & 2047)]) + (fSlow349 * fRec159[((IOTA - iSlow350) & 2047)])) + (fSlow352 * fRec159[((IOTA - iSlow353) & 2047)])) + (fSlow354 * fRec159[((IOTA - iSlow355) & 2047)]))));
			fVec59[0] = fTemp357;
			fRec159[(IOTA & 2047)] = (fTemp356 + (0.495000005f * (fTemp357 + fVec59[1])));
			fVec60[0] = fSlow358;
			float fTemp358 = (fRec163[1] + (fConst17 * fVec60[1]));
			fRec163[0] = (fTemp358 - std::floor(fTemp358));
			float fTemp359 = mydsp_faustpower2_f(((2.0f * fRec163[0]) + -1.0f));
			fVec61[0] = fTemp359;
			float fTemp360 = (fSlow359 * (fTemp18 * (fTemp359 - fVec61[1])));
			fVec62[(IOTA & 4095)] = fTemp360;
			fRec162[0] = (((0.999000013f * fRec162[1]) + fTemp360) - ((fSlow362 * fVec62[((IOTA - iSlow363) & 4095)]) + (fSlow364 * fVec62[((IOTA - iSlow365) & 4095)])));
			float fTemp361 = (fSlow367 + (fRec164[1] + -1.0f));
			int iTemp362 = (fTemp361 < 0.0f);
			float fTemp363 = (fSlow367 + fRec164[1]);
			fRec164[0] = (iTemp362 ? fTemp363 : fTemp361);
			float fRec165 = (iTemp362 ? fTemp363 : (fSlow367 + (fRec164[1] + (fSlow368 * fTemp361))));
			float fTemp364 = (iSlow329 ? ((2.0f * fRec165) + -1.0f) : (iSlow330 ? (fSlow356 * fRec162[0]) : fRec159[((IOTA - 0) & 2047)]));
			fVec63[(IOTA & 8191)] = fTemp364;
			float fTemp365 = ((fSlow383 * fRec166[((IOTA - iSlow385) & 2047)]) + (fSlow386 * ((((fSlow387 * fRec166[((IOTA - iSlow388) & 2047)]) + (fSlow389 * fRec166[((IOTA - iSlow390) & 2047)])) + (fSlow392 * fRec166[((IOTA - iSlow393) & 2047)])) + (fSlow394 * fRec166[((IOTA - iSlow395) & 2047)]))));
			fVec64[0] = fTemp365;
			fRec166[(IOTA & 2047)] = (fTemp356 + (0.495000005f * (fTemp365 + fVec64[1])));
			fVec65[0] = fSlow398;
			float fTemp366 = (fRec168[1] + (fConst17 * fVec65[1]));
			fRec168[0] = (fTemp366 - std::floor(fTemp366));
			float fTemp367 = mydsp_faustpower2_f(((2.0f * fRec168[0]) + -1.0f));
			fVec66[0] = fTemp367;
			float fTemp368 = (fSlow399 * (fTemp18 * (fTemp367 - fVec66[1])));
			fVec67[(IOTA & 4095)] = fTemp368;
			fRec167[0] = (((0.999000013f * fRec167[1]) + fTemp368) - ((fSlow402 * fVec67[((IOTA - iSlow403) & 4095)]) + (fSlow404 * fVec67[((IOTA - iSlow405) & 4095)])));
			float fTemp369 = (fSlow407 + (fRec169[1] + -1.0f));
			int iTemp370 = (fTemp369 < 0.0f);
			float fTemp371 = (fSlow407 + fRec169[1]);
			fRec169[0] = (iTemp370 ? fTemp371 : fTemp369);
			float fRec170 = (iTemp370 ? fTemp371 : (fSlow407 + (fRec169[1] + (fSlow408 * fTemp369))));
			float fTemp372 = (iSlow329 ? ((2.0f * fRec170) + -1.0f) : (iSlow330 ? (fSlow396 * fRec167[0]) : fRec166[((IOTA - 0) & 2047)]));
			fVec68[(IOTA & 8191)] = fTemp372;
			float fTemp373 = ((fSlow423 * fRec171[((IOTA - iSlow425) & 2047)]) + (fSlow426 * ((((fSlow427 * fRec171[((IOTA - iSlow428) & 2047)]) + (fSlow429 * fRec171[((IOTA - iSlow430) & 2047)])) + (fSlow432 * fRec171[((IOTA - iSlow433) & 2047)])) + (fSlow434 * fRec171[((IOTA - iSlow435) & 2047)]))));
			fVec69[0] = fTemp373;
			fRec171[(IOTA & 2047)] = (fTemp356 + (0.495000005f * (fTemp373 + fVec69[1])));
			fVec70[0] = fSlow438;
			float fTemp374 = (fRec173[1] + (fConst17 * fVec70[1]));
			fRec173[0] = (fTemp374 - std::floor(fTemp374));
			float fTemp375 = mydsp_faustpower2_f(((2.0f * fRec173[0]) + -1.0f));
			fVec71[0] = fTemp375;
			float fTemp376 = (fSlow439 * (fTemp18 * (fTemp375 - fVec71[1])));
			fVec72[(IOTA & 4095)] = fTemp376;
			fRec172[0] = (((0.999000013f * fRec172[1]) + fTemp376) - ((fSlow442 * fVec72[((IOTA - iSlow443) & 4095)]) + (fSlow444 * fVec72[((IOTA - iSlow445) & 4095)])));
			float fTemp377 = (fSlow447 + (fRec174[1] + -1.0f));
			int iTemp378 = (fTemp377 < 0.0f);
			float fTemp379 = (fSlow447 + fRec174[1]);
			fRec174[0] = (iTemp378 ? fTemp379 : fTemp377);
			float fRec175 = (iTemp378 ? fTemp379 : (fSlow447 + (fRec174[1] + (fSlow448 * fTemp377))));
			float fTemp380 = (iSlow329 ? ((2.0f * fRec175) + -1.0f) : (iSlow330 ? (fSlow436 * fRec172[0]) : fRec171[((IOTA - 0) & 2047)]));
			fVec73[(IOTA & 4095)] = fTemp380;
			float fTemp381 = ((fSlow460 * fRec176[((IOTA - iSlow462) & 2047)]) + (fSlow463 * ((((fSlow464 * fRec176[((IOTA - iSlow465) & 2047)]) + (fSlow466 * fRec176[((IOTA - iSlow467) & 2047)])) + (fSlow469 * fRec176[((IOTA - iSlow470) & 2047)])) + (fSlow471 * fRec176[((IOTA - iSlow472) & 2047)]))));
			fVec74[0] = fTemp381;
			fRec176[(IOTA & 2047)] = ((0.495000005f * (fTemp381 + fVec74[1])) + fTemp356);
			fVec75[0] = fSlow475;
			float fTemp382 = (fRec178[1] + (fConst17 * fVec75[1]));
			fRec178[0] = (fTemp382 - std::floor(fTemp382));
			float fTemp383 = mydsp_faustpower2_f(((2.0f * fRec178[0]) + -1.0f));
			fVec76[0] = fTemp383;
			float fTemp384 = (fSlow476 * (fTemp18 * (fTemp383 - fVec76[1])));
			fVec77[(IOTA & 4095)] = fTemp384;
			fRec177[0] = (((0.999000013f * fRec177[1]) + fTemp384) - ((fSlow479 * fVec77[((IOTA - iSlow480) & 4095)]) + (fSlow481 * fVec77[((IOTA - iSlow482) & 4095)])));
			float fTemp385 = (fSlow484 + (fRec179[1] + -1.0f));
			int iTemp386 = (fTemp385 < 0.0f);
			float fTemp387 = (fSlow484 + fRec179[1]);
			fRec179[0] = (iTemp386 ? fTemp387 : fTemp385);
			float fRec180 = (iTemp386 ? fTemp387 : (fSlow484 + (fRec179[1] + (fSlow485 * fTemp385))));
			float fTemp388 = std::max<float>(0.0f, std::min<float>(fTemp355, ((fConst92 * (fConst11 - fTemp354)) + 1.0f)));
			fRec157[(IOTA & 131071)] = ((fConst87 * (((fConst62 * fRec158[2]) + (fConst52 * fRec158[0])) + (fConst52 * fRec158[4]))) + (0.300000012f * (((fSlow327 * fVec63[((IOTA - iSlow370) & 8191)]) + (((fSlow373 * fVec68[((IOTA - iSlow410) & 8191)]) + (((fSlow413 * fVec73[((IOTA - iSlow450) & 4095)]) + ((iSlow329 ? ((2.0f * fRec180) + -1.0f) : (iSlow330 ? (fSlow473 * fRec177[0]) : fRec176[((IOTA - 0) & 2047)])) + (fSlow486 * fVec73[((IOTA - iSlow487) & 4095)]))) + (fSlow488 * fVec68[((IOTA - iSlow489) & 8191)]))) + (fSlow490 * fVec63[((IOTA - iSlow491) & 8191)]))) * fTemp388)));
			float fTemp389 = fRec157[((IOTA - 0) & 131071)];
			float fTemp390 = std::fabs((0.25f * fTemp389));
			fRec183[0] = std::max<float>(fTemp390, ((fRec183[1] * fSlow498) + (fTemp390 * fSlow499)));
			fRec182[0] = ((fRec182[1] * fSlow495) + (fRec183[0] * fSlow500));
			fRec181[0] = ((fConst27 * fRec181[1]) + (fSlow492 * std::max<float>(((20.0f * std::log10(fRec182[0])) - fSlow501), 0.0f)));
			float fTemp391 = (0.25f * (fTemp389 * std::pow(10.0f, (0.0500000007f * fRec181[0]))));
			fRec184[0] = (fTemp391 - (fSlow505 * ((fSlow506 * fRec184[2]) + (fSlow507 * fRec184[1]))));
			float fTemp392 = (fSlow324 * fRec156[1]);
			fRec156[0] = (fTemp391 - ((fSlow505 * (fRec184[2] + (fRec184[0] + (2.0f * fRec184[1])))) + (((fRec156[2] * fSlow515) + fTemp392) / fSlow516)));
			float fTemp393 = (fSlow321 * fRec155[1]);
			fRec155[0] = ((((fTemp392 + (fRec156[0] * fSlow518)) + (fRec156[2] * fSlow519)) / fSlow516) - (((fRec155[2] * fSlow527) + fTemp393) / fSlow528));
			fRec154[0] = ((((fTemp393 + (fRec155[0] * fSlow530)) + (fRec155[2] * fSlow531)) / fSlow528) - (fSlow532 * ((fSlow533 * fRec154[2]) + (fSlow534 * fRec154[1]))));
			float fTemp394 = (fSlow317 * (fRec153[0] * (fRec154[2] + (fRec154[0] + (2.0f * fRec154[1])))));
			fRec197[0] = (0.0f - (fConst107 * ((fConst108 * fRec197[1]) - (fRec193[1] + fRec193[2]))));
			fRec196[0] = ((fSlow542 * fRec196[1]) + (fSlow543 * (fRec193[1] + (fSlow544 * fRec197[0]))));
			fVec78[(IOTA & 32767)] = ((0.353553385f * fRec196[0]) + 9.99999968e-21f);
			iRec202[0] = ((iVec0[1] + iRec202[1]) % iSlow546);
			float fTemp395 = float(iRec202[0]);
			float fTemp396 = std::tan((fConst8 * std::min<float>(20000.0f, std::max<float>(20.0f, (fSlow550 * fTemp10)))));
			float fTemp397 = (1.0f / fTemp396);
			float fTemp398 = (((fTemp397 + 1.41421354f) / fTemp396) + 1.0f);
			fRec201[0] = ((2.0f * (((float((fTemp395 < fSlow547)) + -0.5f) + (float((fTemp395 < fSlow548)) + -0.5f)) + (float((fTemp395 < fSlow549)) + -0.5f))) - (((fRec201[2] * (((fTemp397 + -1.41421354f) / fTemp396) + 1.0f)) + (2.0f * (fRec201[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp396)))))) / fTemp398));
			fRec204[0] = (fSlow551 + (fConst22 * fRec204[1]));
			float fTemp399 = std::max<float>((fSlow65 * fRec204[0]), 23.4489498f);
			float fTemp400 = std::max<float>(20.0f, std::fabs(fTemp399));
			fVec79[0] = fTemp400;
			float fTemp401 = (fRec206[1] + (fConst17 * fVec79[1]));
			fRec206[0] = (fTemp401 - std::floor(fTemp401));
			float fTemp402 = mydsp_faustpower2_f(((2.0f * fRec206[0]) + -1.0f));
			fVec80[0] = fTemp402;
			float fTemp403 = ((fTemp18 * (fTemp402 - fVec80[1])) / fTemp400);
			fVec81[(IOTA & 4095)] = fTemp403;
			float fTemp404 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp399)));
			int iTemp405 = int(fTemp404);
			float fTemp406 = std::floor(fTemp404);
			fRec205[0] = ((0.999000013f * fRec205[1]) + (fConst25 * ((fTemp403 - (fVec81[((IOTA - iTemp405) & 4095)] * (fTemp406 + (1.0f - fTemp404)))) - ((fTemp404 - fTemp406) * fVec81[((IOTA - (iTemp405 + 1)) & 4095)]))));
			float fTemp407 = (fRec203[1] + (fConst17 * (fRec204[0] * ((fSlow66 * (((fRec18[0] * fRec204[0]) * fRec205[0]) * ((fRec18[0] * (fSlow552 + fTemp27)) + 2.4000001f))) + 1.0f))));
			fRec203[0] = (fTemp407 - std::floor(fTemp407));
			fRec207[0] = (fSlow553 + (fRec207[1] - std::floor((fSlow553 + fRec207[1]))));
			float fTemp408 = (ftbl2mydspSIG2[int((65536.0f * fRec207[0]))] + 1.0f);
			float fTemp409 = (fSlow71 * fTemp408);
			iRec209[0] = ((iVec0[1] + iRec209[1]) % iSlow555);
			float fTemp410 = float(iRec209[0]);
			float fTemp411 = std::tan((fConst8 * std::min<float>(20000.0f, std::max<float>(20.0f, (fSlow559 * fTemp45)))));
			float fTemp412 = (1.0f / fTemp411);
			float fTemp413 = (((fTemp412 + 1.41421354f) / fTemp411) + 1.0f);
			fRec208[0] = ((2.0f * (((float((fTemp410 < fSlow556)) + -0.5f) + (float((fTemp410 < fSlow557)) + -0.5f)) + (float((fTemp410 < fSlow558)) + -0.5f))) - (((fRec208[2] * (((fTemp412 + -1.41421354f) / fTemp411) + 1.0f)) + (2.0f * (fRec208[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp411)))))) / fTemp413));
			fRec211[0] = (fSlow560 + (fConst22 * fRec211[1]));
			float fTemp414 = std::max<float>((fSlow65 * fRec211[0]), 23.4489498f);
			float fTemp415 = std::max<float>(20.0f, std::fabs(fTemp414));
			fVec82[0] = fTemp415;
			float fTemp416 = (fRec213[1] + (fConst17 * fVec82[1]));
			fRec213[0] = (fTemp416 - std::floor(fTemp416));
			float fTemp417 = mydsp_faustpower2_f(((2.0f * fRec213[0]) + -1.0f));
			fVec83[0] = fTemp417;
			float fTemp418 = ((fTemp18 * (fTemp417 - fVec83[1])) / fTemp415);
			fVec84[(IOTA & 4095)] = fTemp418;
			float fTemp419 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp414)));
			int iTemp420 = int(fTemp419);
			float fTemp421 = std::floor(fTemp419);
			fRec212[0] = ((0.999000013f * fRec212[1]) + (fConst25 * ((fTemp418 - (fVec84[((IOTA - iTemp420) & 4095)] * (fTemp421 + (1.0f - fTemp419)))) - ((fTemp419 - fTemp421) * fVec84[((IOTA - (iTemp420 + 1)) & 4095)]))));
			float fTemp422 = (fRec210[1] + (fConst17 * (fRec211[0] * ((fSlow66 * (((fRec36[0] * fRec211[0]) * fRec212[0]) * ((fRec36[0] * (fSlow561 + fTemp61)) + 2.4000001f))) + 1.0f))));
			fRec210[0] = (fTemp422 - std::floor(fTemp422));
			fRec214[0] = (fSlow562 + (fRec214[1] - std::floor((fSlow562 + fRec214[1]))));
			float fTemp423 = (ftbl2mydspSIG2[int((65536.0f * fRec214[0]))] + 1.0f);
			float fTemp424 = (fSlow89 * fTemp423);
			iRec216[0] = ((iVec0[1] + iRec216[1]) % iSlow564);
			float fTemp425 = float(iRec216[0]);
			float fTemp426 = std::tan((fConst8 * std::min<float>(20000.0f, std::max<float>(20.0f, (fSlow568 * fTemp79)))));
			float fTemp427 = (1.0f / fTemp426);
			float fTemp428 = (((fTemp427 + 1.41421354f) / fTemp426) + 1.0f);
			fRec215[0] = ((2.0f * (((float((fTemp425 < fSlow565)) + -0.5f) + (float((fTemp425 < fSlow566)) + -0.5f)) + (float((fTemp425 < fSlow567)) + -0.5f))) - (((fRec215[2] * (((fTemp427 + -1.41421354f) / fTemp426) + 1.0f)) + (2.0f * (fRec215[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp426)))))) / fTemp428));
			fRec218[0] = (fSlow569 + (fConst22 * fRec218[1]));
			float fTemp429 = std::max<float>((fSlow65 * fRec218[0]), 23.4489498f);
			float fTemp430 = std::max<float>(20.0f, std::fabs(fTemp429));
			fVec85[0] = fTemp430;
			float fTemp431 = (fRec220[1] + (fConst17 * fVec85[1]));
			fRec220[0] = (fTemp431 - std::floor(fTemp431));
			float fTemp432 = mydsp_faustpower2_f(((2.0f * fRec220[0]) + -1.0f));
			fVec86[0] = fTemp432;
			float fTemp433 = ((fTemp18 * (fTemp432 - fVec86[1])) / fTemp430);
			fVec87[(IOTA & 4095)] = fTemp433;
			float fTemp434 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp429)));
			int iTemp435 = int(fTemp434);
			float fTemp436 = std::floor(fTemp434);
			fRec219[0] = ((0.999000013f * fRec219[1]) + (fConst25 * ((fTemp433 - (fVec87[((IOTA - iTemp435) & 4095)] * (fTemp436 + (1.0f - fTemp434)))) - ((fTemp434 - fTemp436) * fVec87[((IOTA - (iTemp435 + 1)) & 4095)]))));
			float fTemp437 = (fRec217[1] + (fConst17 * (fRec218[0] * ((fSlow66 * (((fRec53[0] * fRec218[0]) * fRec219[0]) * ((fRec53[0] * (fSlow570 + fTemp95)) + 2.4000001f))) + 1.0f))));
			fRec217[0] = (fTemp437 - std::floor(fTemp437));
			fRec221[0] = (fSlow571 + (fRec221[1] - std::floor((fSlow571 + fRec221[1]))));
			float fTemp438 = (ftbl2mydspSIG2[int((65536.0f * fRec221[0]))] + 1.0f);
			float fTemp439 = (fSlow107 * fTemp438);
			iRec223[0] = ((iVec0[1] + iRec223[1]) % iSlow573);
			float fTemp440 = float(iRec223[0]);
			float fTemp441 = std::tan((fConst8 * std::min<float>(20000.0f, std::max<float>(20.0f, (fSlow577 * fTemp113)))));
			float fTemp442 = (1.0f / fTemp441);
			float fTemp443 = (((fTemp442 + 1.41421354f) / fTemp441) + 1.0f);
			fRec222[0] = ((2.0f * (((float((fTemp440 < fSlow574)) + -0.5f) + (float((fTemp440 < fSlow575)) + -0.5f)) + (float((fTemp440 < fSlow576)) + -0.5f))) - (((fRec222[2] * (((fTemp442 + -1.41421354f) / fTemp441) + 1.0f)) + (2.0f * (fRec222[1] * (1.0f - (1.0f / mydsp_faustpower2_f(fTemp441)))))) / fTemp443));
			fRec225[0] = (fSlow578 + (fConst22 * fRec225[1]));
			float fTemp444 = std::max<float>((fSlow65 * fRec225[0]), 23.4489498f);
			float fTemp445 = std::max<float>(20.0f, std::fabs(fTemp444));
			fVec88[0] = fTemp445;
			float fTemp446 = (fRec227[1] + (fConst17 * fVec88[1]));
			fRec227[0] = (fTemp446 - std::floor(fTemp446));
			float fTemp447 = mydsp_faustpower2_f(((2.0f * fRec227[0]) + -1.0f));
			fVec89[0] = fTemp447;
			float fTemp448 = ((fTemp18 * (fTemp447 - fVec89[1])) / fTemp445);
			fVec90[(IOTA & 4095)] = fTemp448;
			float fTemp449 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp444)));
			int iTemp450 = int(fTemp449);
			float fTemp451 = std::floor(fTemp449);
			fRec226[0] = ((0.999000013f * fRec226[1]) + (fConst25 * ((fTemp448 - (fVec90[((IOTA - iTemp450) & 4095)] * (fTemp451 + (1.0f - fTemp449)))) - ((fTemp449 - fTemp451) * fVec90[((IOTA - (iTemp450 + 1)) & 4095)]))));
			float fTemp452 = (fRec224[1] + (fConst17 * (fRec225[0] * ((fSlow66 * (((fRec70[0] * fRec225[0]) * fRec226[0]) * ((fRec70[0] * (fSlow579 + fTemp129)) + 2.4000001f))) + 1.0f))));
			fRec224[0] = (fTemp452 - std::floor(fTemp452));
			fRec228[0] = (fSlow580 + (fRec228[1] - std::floor((fSlow580 + fRec228[1]))));
			float fTemp453 = (ftbl2mydspSIG2[int((65536.0f * fRec228[0]))] + 1.0f);
			float fTemp454 = (fSlow125 * fTemp453);
			float fTemp455 = ((((fTemp34 * (iSlow40 ? ((fRec27[0] * std::min<float>(1.0f, (2.0f * (1.0f - (0.5f * fTemp408))))) * std::sin((6.28318548f * (fTemp409 - std::floor(fTemp409))))) : (iSlow41 ? (fRec18[0] * ftbl2mydspSIG2[int((65536.0f * fRec203[0]))]) : ((fRec12[0] * (fRec201[2] + (fRec201[0] + (2.0f * fRec201[1])))) / fTemp398)))) + (fTemp68 * (iSlow40 ? ((fRec44[0] * std::min<float>(1.0f, (2.0f * (1.0f - (0.5f * fTemp423))))) * std::sin((6.28318548f * (fTemp424 - std::floor(fTemp424))))) : (iSlow41 ? (fRec36[0] * ftbl2mydspSIG2[int((65536.0f * fRec210[0]))]) : ((fRec30[0] * (fRec208[2] + (fRec208[0] + (2.0f * fRec208[1])))) / fTemp413))))) + (fTemp102 * (iSlow40 ? ((fRec61[0] * std::min<float>(1.0f, (2.0f * (1.0f - (0.5f * fTemp438))))) * std::sin((6.28318548f * (fTemp439 - std::floor(fTemp439))))) : (iSlow41 ? (fRec53[0] * ftbl2mydspSIG2[int((65536.0f * fRec217[0]))]) : ((fRec47[0] * (fRec215[2] + (fRec215[0] + (2.0f * fRec215[1])))) / fTemp428))))) + (fTemp136 * (iSlow40 ? ((fRec78[0] * std::min<float>(1.0f, (2.0f * (1.0f - (0.5f * fTemp453))))) * std::sin((6.28318548f * (fTemp454 - std::floor(fTemp454))))) : (iSlow41 ? (fRec70[0] * ftbl2mydspSIG2[int((65536.0f * fRec224[0]))]) : ((fRec64[0] * (fRec222[2] + (fRec222[0] + (2.0f * fRec222[1])))) / fTemp443)))));
			float fTemp456 = std::fabs((0.25f * fTemp455));
			fRec231[0] = std::max<float>(fTemp456, ((fSlow132 * fRec231[1]) + (fSlow133 * fTemp456)));
			fRec230[0] = ((fSlow129 * fRec230[1]) + (fRec231[0] * fSlow134));
			fRec229[0] = ((fConst27 * fRec229[1]) + (fSlow126 * std::max<float>(((20.0f * std::log10(fRec230[0])) - fSlow135), 0.0f)));
			float fTemp457 = (0.25f * (fTemp455 * std::pow(10.0f, (0.0500000007f * fRec229[0]))));
			fRec232[0] = (fTemp457 - (fSlow139 * ((fSlow140 * fRec232[2]) + (fSlow141 * fRec232[1]))));
			float fTemp458 = (fSlow38 * fRec200[1]);
			fRec200[0] = (fTemp457 - ((fSlow139 * (fRec232[2] + (fRec232[0] + (2.0f * fRec232[1])))) + (((fSlow149 * fRec200[2]) + fTemp458) / fSlow150)));
			float fTemp459 = (fSlow35 * fRec199[1]);
			fRec199[0] = ((((fTemp458 + (fRec200[0] * fSlow152)) + (fSlow153 * fRec200[2])) / fSlow150) - (((fSlow161 * fRec199[2]) + fTemp459) / fSlow162));
			fRec198[0] = ((((fTemp459 + (fRec199[0] * fSlow164)) + (fSlow165 * fRec199[2])) / fSlow162) - (fSlow166 * ((fSlow167 * fRec198[2]) + (fSlow168 * fRec198[1]))));
			float fTemp460 = (fSlow31 * (fRec8[0] * (fRec198[2] + (fRec198[0] + (2.0f * fRec198[1])))));
			fRec237[0] = (fRec236[((IOTA - iSlow254) & 131071)] - (fConst64 * ((((fConst69 * fRec237[1]) + (fConst70 * fRec237[2])) + (fConst71 * fRec237[3])) + (fConst72 * fRec237[4]))));
			float fTemp461 = ((fSlow590 * fRec238[((IOTA - iSlow592) & 2047)]) + (fSlow593 * ((((fSlow594 * fRec238[((IOTA - iSlow595) & 2047)]) + (fSlow596 * fRec238[((IOTA - iSlow597) & 2047)])) + (fSlow599 * fRec238[((IOTA - iSlow600) & 2047)])) + (fSlow601 * fRec238[((IOTA - iSlow602) & 2047)]))));
			fVec91[0] = fTemp461;
			fRec238[(IOTA & 2047)] = (fTemp356 + (0.495000005f * (fTemp461 + fVec91[1])));
			fVec92[0] = fSlow605;
			float fTemp462 = (fRec240[1] + (fConst17 * fVec92[1]));
			fRec240[0] = (fTemp462 - std::floor(fTemp462));
			float fTemp463 = mydsp_faustpower2_f(((2.0f * fRec240[0]) + -1.0f));
			fVec93[0] = fTemp463;
			float fTemp464 = (fSlow606 * (fTemp18 * (fTemp463 - fVec93[1])));
			fVec94[(IOTA & 4095)] = fTemp464;
			fRec239[0] = (((0.999000013f * fRec239[1]) + fTemp464) - ((fSlow609 * fVec94[((IOTA - iSlow610) & 4095)]) + (fSlow611 * fVec94[((IOTA - iSlow612) & 4095)])));
			float fTemp465 = (fSlow614 + (fRec241[1] + -1.0f));
			int iTemp466 = (fTemp465 < 0.0f);
			float fTemp467 = (fSlow614 + fRec241[1]);
			fRec241[0] = (iTemp466 ? fTemp467 : fTemp465);
			float fRec242 = (iTemp466 ? fTemp467 : (fSlow614 + (fRec241[1] + (fSlow615 * fTemp465))));
			float fTemp468 = (iSlow329 ? ((2.0f * fRec242) + -1.0f) : (iSlow330 ? (fSlow603 * fRec239[0]) : fRec238[((IOTA - 0) & 2047)]));
			fVec95[(IOTA & 8191)] = fTemp468;
			float fTemp469 = ((fSlow625 * fRec243[((IOTA - iSlow627) & 2047)]) + (fSlow628 * ((((fSlow629 * fRec243[((IOTA - iSlow630) & 2047)]) + (fSlow631 * fRec243[((IOTA - iSlow632) & 2047)])) + (fSlow634 * fRec243[((IOTA - iSlow635) & 2047)])) + (fSlow636 * fRec243[((IOTA - iSlow637) & 2047)]))));
			fVec96[0] = fTemp469;
			fRec243[(IOTA & 2047)] = (fTemp356 + (0.495000005f * (fTemp469 + fVec96[1])));
			fVec97[0] = fSlow640;
			float fTemp470 = (fRec245[1] + (fConst17 * fVec97[1]));
			fRec245[0] = (fTemp470 - std::floor(fTemp470));
			float fTemp471 = mydsp_faustpower2_f(((2.0f * fRec245[0]) + -1.0f));
			fVec98[0] = fTemp471;
			float fTemp472 = (fSlow641 * (fTemp18 * (fTemp471 - fVec98[1])));
			fVec99[(IOTA & 4095)] = fTemp472;
			fRec244[0] = (((0.999000013f * fRec244[1]) + fTemp472) - ((fSlow644 * fVec99[((IOTA - iSlow645) & 4095)]) + (fSlow646 * fVec99[((IOTA - iSlow647) & 4095)])));
			float fTemp473 = (fSlow649 + (fRec246[1] + -1.0f));
			int iTemp474 = (fTemp473 < 0.0f);
			float fTemp475 = (fSlow649 + fRec246[1]);
			fRec246[0] = (iTemp474 ? fTemp475 : fTemp473);
			float fRec247 = (iTemp474 ? fTemp475 : (fSlow649 + (fRec246[1] + (fSlow650 * fTemp473))));
			float fTemp476 = (iSlow329 ? ((2.0f * fRec247) + -1.0f) : (iSlow330 ? (fSlow638 * fRec244[0]) : fRec243[((IOTA - 0) & 2047)]));
			fVec100[(IOTA & 8191)] = fTemp476;
			float fTemp477 = ((fSlow660 * fRec248[((IOTA - iSlow662) & 2047)]) + (fSlow663 * ((((fSlow664 * fRec248[((IOTA - iSlow665) & 2047)]) + (fSlow666 * fRec248[((IOTA - iSlow667) & 2047)])) + (fSlow669 * fRec248[((IOTA - iSlow670) & 2047)])) + (fSlow671 * fRec248[((IOTA - iSlow672) & 2047)]))));
			fVec101[0] = fTemp477;
			fRec248[(IOTA & 2047)] = (fTemp356 + (0.495000005f * (fTemp477 + fVec101[1])));
			fVec102[0] = fSlow675;
			float fTemp478 = (fRec250[1] + (fConst17 * fVec102[1]));
			fRec250[0] = (fTemp478 - std::floor(fTemp478));
			float fTemp479 = mydsp_faustpower2_f(((2.0f * fRec250[0]) + -1.0f));
			fVec103[0] = fTemp479;
			float fTemp480 = (fSlow676 * (fTemp18 * (fTemp479 - fVec103[1])));
			fVec104[(IOTA & 4095)] = fTemp480;
			fRec249[0] = (((0.999000013f * fRec249[1]) + fTemp480) - ((fSlow679 * fVec104[((IOTA - iSlow680) & 4095)]) + (fSlow681 * fVec104[((IOTA - iSlow682) & 4095)])));
			float fTemp481 = (fSlow684 + (fRec251[1] + -1.0f));
			int iTemp482 = (fTemp481 < 0.0f);
			float fTemp483 = (fSlow684 + fRec251[1]);
			fRec251[0] = (iTemp482 ? fTemp483 : fTemp481);
			float fRec252 = (iTemp482 ? fTemp483 : (fSlow684 + (fRec251[1] + (fSlow685 * fTemp481))));
			float fTemp484 = (iSlow329 ? ((2.0f * fRec252) + -1.0f) : (iSlow330 ? (fSlow673 * fRec249[0]) : fRec248[((IOTA - 0) & 2047)]));
			fVec105[(IOTA & 4095)] = fTemp484;
			float fTemp485 = ((fSlow695 * fRec253[((IOTA - iSlow697) & 2047)]) + (fSlow698 * ((((fSlow699 * fRec253[((IOTA - iSlow700) & 2047)]) + (fSlow701 * fRec253[((IOTA - iSlow702) & 2047)])) + (fSlow704 * fRec253[((IOTA - iSlow705) & 2047)])) + (fSlow706 * fRec253[((IOTA - iSlow707) & 2047)]))));
			fVec106[0] = fTemp485;
			fRec253[(IOTA & 2047)] = (fTemp356 + (0.495000005f * (fTemp485 + fVec106[1])));
			fVec107[0] = fSlow710;
			float fTemp486 = (fRec255[1] + (fConst17 * fVec107[1]));
			fRec255[0] = (fTemp486 - std::floor(fTemp486));
			float fTemp487 = mydsp_faustpower2_f(((2.0f * fRec255[0]) + -1.0f));
			fVec108[0] = fTemp487;
			float fTemp488 = (fSlow711 * (fTemp18 * (fTemp487 - fVec108[1])));
			fVec109[(IOTA & 4095)] = fTemp488;
			fRec254[0] = (((0.999000013f * fRec254[1]) + fTemp488) - ((fSlow714 * fVec109[((IOTA - iSlow715) & 4095)]) + (fSlow716 * fVec109[((IOTA - iSlow717) & 4095)])));
			float fTemp489 = (fSlow719 + (fRec256[1] + -1.0f));
			int iTemp490 = (fTemp489 < 0.0f);
			float fTemp491 = (fSlow719 + fRec256[1]);
			fRec256[0] = (iTemp490 ? fTemp491 : fTemp489);
			float fRec257 = (iTemp490 ? fTemp491 : (fSlow719 + (fRec256[1] + (fSlow720 * fTemp489))));
			fRec236[(IOTA & 131071)] = ((fConst87 * (((fConst62 * fRec237[2]) + (fConst52 * fRec237[0])) + (fConst52 * fRec237[4]))) + (0.300000012f * (fTemp388 * ((fSlow327 * fVec95[((IOTA - iSlow370) & 8191)]) + (((fSlow373 * fVec100[((IOTA - iSlow410) & 8191)]) + (((fSlow413 * fVec105[((IOTA - iSlow450) & 4095)]) + ((iSlow329 ? ((2.0f * fRec257) + -1.0f) : (iSlow330 ? (fSlow708 * fRec254[0]) : fRec253[((IOTA - 0) & 2047)])) + (fSlow486 * fVec105[((IOTA - iSlow487) & 4095)]))) + (fSlow488 * fVec100[((IOTA - iSlow489) & 8191)]))) + (fSlow490 * fVec95[((IOTA - iSlow491) & 8191)]))))));
			float fTemp492 = fRec236[((IOTA - 0) & 131071)];
			float fTemp493 = std::fabs((0.25f * fTemp492));
			fRec260[0] = std::max<float>(fTemp493, ((fSlow498 * fRec260[1]) + (fSlow499 * fTemp493)));
			fRec259[0] = ((fSlow495 * fRec259[1]) + (fRec260[0] * fSlow500));
			fRec258[0] = ((fConst27 * fRec258[1]) + (fSlow492 * std::max<float>(((20.0f * std::log10(fRec259[0])) - fSlow501), 0.0f)));
			float fTemp494 = (0.25f * (fTemp492 * std::pow(10.0f, (0.0500000007f * fRec258[0]))));
			fRec261[0] = (fTemp494 - (fSlow505 * ((fSlow506 * fRec261[2]) + (fSlow507 * fRec261[1]))));
			float fTemp495 = (fSlow324 * fRec235[1]);
			fRec235[0] = (fTemp494 - ((fSlow505 * (fRec261[2] + (fRec261[0] + (2.0f * fRec261[1])))) + (((fSlow515 * fRec235[2]) + fTemp495) / fSlow516)));
			float fTemp496 = (fSlow321 * fRec234[1]);
			fRec234[0] = ((((fTemp495 + (fRec235[0] * fSlow518)) + (fSlow519 * fRec235[2])) / fSlow516) - (((fSlow527 * fRec234[2]) + fTemp496) / fSlow528));
			fRec233[0] = ((((fTemp496 + (fRec234[0] * fSlow530)) + (fSlow531 * fRec234[2])) / fSlow528) - (fSlow532 * ((fSlow533 * fRec233[2]) + (fSlow534 * fRec233[1]))));
			float fTemp497 = (fSlow317 * (fRec153[0] * (fRec233[2] + (fRec233[0] + (2.0f * fRec233[1])))));
			float fTemp498 = (0.562341332f * (fTemp460 + fTemp497));
			fRec262[0] = ((0.999000013f * fRec262[1]) + fSlow723);
			fRec263[0] = ((fRec263[1] * fSlow726) + fSlow727);
			float fTemp499 = (fRec263[0] + 1.0f);
			float fTemp500 = std::tan((fConst44 * fTemp499));
			float fTemp501 = (1.0f - (1.0f / mydsp_faustpower2_f(fTemp500)));
			fVec110[0] = fSlow745;
			fVec111[0] = fSlow748;
			int iTemp502 = (iSlow746 * ((fSlow745 > fVec110[1]) + (iSlow747 * (fSlow748 > fVec111[1]))));
			iRec268[0] = (int((fSlow745 * float(iTemp502))) ? iSlow749 : iRec268[1]);
			int iTemp503 = (iSlow743 + (iSlow744 * iRec268[0]));
			int iTemp504 = (iTemp503 >= 2);
			int iTemp505 = (iTemp503 >= 1);
			iVec112[0] = iSlow750;
			iRec269[0] = ((((iSlow750 > iVec112[1]) + iTemp502) > 0) ? 0 : std::min<int>(96000, (iRec269[1] + 1)));
			fRec270[0] = (iTemp502 ? fSlow745 : fRec270[1]);
			float fTemp506 = ((iSlow739 ? (iTemp504 ? fSoundfile2ca_bu_ch2[(fSoundfile2ca_of2[2] + std::max<int>(0, std::min<int>(iRec269[0], iSlow759)))] : (iTemp505 ? fSoundfile2ca_bu_ch1[(fSoundfile2ca_of1[1] + std::max<int>(0, std::min<int>(iRec269[0], iSlow758)))] : fSoundfile2ca_bu_ch0[(fSoundfile2ca_of0[0] + std::max<int>(0, std::min<int>(iRec269[0], iSlow757)))])) : (iSlow740 ? (iTemp504 ? fSoundfile1ca_bu_ch2[(fSoundfile1ca_of2[2] + std::max<int>(0, std::min<int>(iRec269[0], iSlow756)))] : (iTemp505 ? fSoundfile1ca_bu_ch1[(fSoundfile1ca_of1[1] + std::max<int>(0, std::min<int>(iRec269[0], iSlow755)))] : fSoundfile1ca_bu_ch0[(fSoundfile1ca_of0[0] + std::max<int>(0, std::min<int>(iRec269[0], iSlow754)))])) : (iTemp504 ? fSoundfile0ca_bu_ch2[(fSoundfile0ca_of2[2] + std::max<int>(0, std::min<int>(iRec269[0], iSlow753)))] : (iTemp505 ? fSoundfile0ca_bu_ch1[(fSoundfile0ca_of1[1] + std::max<int>(0, std::min<int>(iRec269[0], iSlow752)))] : fSoundfile0ca_bu_ch0[(fSoundfile0ca_of0[0] + std::max<int>(0, std::min<int>(iRec269[0], iSlow751)))])))) * (std::pow(10.0f, (0.144444451f * (fRec270[0] + -10.0f))) + 1.39999998f));
			float fTemp507 = std::fabs((0.25f * fTemp506));
			fRec273[0] = std::max<float>(fTemp507, ((fRec273[1] * fSlow766) + (fTemp507 * fSlow767)));
			fRec272[0] = ((fRec272[1] * fSlow763) + (fRec273[0] * fSlow768));
			fRec271[0] = ((fConst27 * fRec271[1]) + (fSlow760 * std::max<float>(((20.0f * std::log10(fRec272[0])) - fSlow769), 0.0f)));
			float fTemp508 = (0.25f * (fTemp506 * std::pow(10.0f, (0.0500000007f * fRec271[0]))));
			fRec274[0] = (fTemp508 - (fSlow773 * ((fSlow774 * fRec274[2]) + (fSlow775 * fRec274[1]))));
			float fTemp509 = (fSlow737 * fRec267[1]);
			fRec267[0] = (fTemp508 - ((fSlow773 * (fRec274[2] + (fRec274[0] + (2.0f * fRec274[1])))) + (((fRec267[2] * fSlow783) + fTemp509) / fSlow784)));
			float fTemp510 = (fSlow734 * fRec266[1]);
			fRec266[0] = ((((fTemp509 + (fRec267[0] * fSlow786)) + (fRec267[2] * fSlow787)) / fSlow784) - (((fRec266[2] * fSlow795) + fTemp510) / fSlow796));
			fRec265[0] = ((((fTemp510 + (fRec266[0] * fSlow798)) + (fRec266[2] * fSlow799)) / fSlow796) - (fSlow731 * ((fSlow800 * fRec265[2]) + (fSlow801 * fRec265[1]))));
			fVec113[(IOTA & 262143)] = (fSlow731 * (fRec265[2] + (fRec265[0] + (2.0f * fRec265[1]))));
			fRec275[0] = (fSlow802 + (fRec275[1] - std::floor((fSlow802 + fRec275[1]))));
			int iTemp511 = int(std::min<float>(fConst7, std::max<float>(0.0f, (fConst26 * (fRec263[0] * (ftbl2mydspSIG2[int((65536.0f * fRec275[0]))] + 1.0f))))));
			float fTemp512 = fVec113[((IOTA - iTemp511) & 262143)];
			float fTemp513 = (1.0f / fTemp500);
			float fTemp514 = (10.0f * fRec263[0]);
			int iTemp515 = (fTemp514 > 0.0f);
			float fTemp516 = std::sin((fConst101 * fTemp499));
			float fTemp517 = (fConst112 * ((fTemp499 * std::pow(10.0f, (0.0500000007f * std::fabs(fTemp514)))) / fTemp516));
			float fTemp518 = (fConst112 * (fTemp499 / fTemp516));
			float fTemp519 = (iTemp515 ? fTemp518 : fTemp517);
			float fTemp520 = (((fTemp513 - fTemp519) / fTemp500) + 1.0f);
			float fTemp521 = (2.0f * (fTemp501 * fRec264[1]));
			float fTemp522 = (((fTemp513 + fTemp519) / fTemp500) + 1.0f);
			fRec264[0] = (fTemp512 - (((fTemp520 * fRec264[2]) + fTemp521) / fTemp522));
			float fTemp523 = (iTemp515 ? fTemp517 : fTemp518);
			float fTemp524 = (((fTemp513 + fTemp523) / fTemp500) + 1.0f);
			float fTemp525 = (((fTemp513 - fTemp523) / fTemp500) + 1.0f);
			float fTemp526 = (fRec262[0] * ((fTemp521 + (fRec264[0] * fTemp524)) + (fTemp525 * fRec264[2])));
			fRec276[0] = ((0.999000013f * fRec276[1]) + fSlow805);
			fVec114[0] = fSlow820;
			fVec115[0] = fSlow822;
			int iTemp527 = (iSlow42 * ((fSlow820 > fVec114[1]) + (iSlow821 * (fSlow822 > fVec115[1]))));
			iVec116[0] = iTemp527;
			iRec281[0] = (int((fSlow820 * float(iTemp527))) ? iSlow823 : iRec281[1]);
			int iTemp528 = (iRec281[0] >= 2);
			int iTemp529 = (iRec281[0] >= 1);
			iRec282[0] = ((iTemp527 > 0) ? 0 : std::min<int>(96000, (iRec282[1] + 1)));
			iRec283[0] = 0;
			fRec287[0] = ((0.949999988f * fRec287[1]) + (0.0500000007f * fRec286[1]));
			float fTemp530 = ((0.99000001f * fRec287[0]) + float(iRec283[1]));
			fVec117[(IOTA & 127)] = fTemp530;
			fRec285[0] = ((fConst120 * fVec117[((IOTA - iConst123) & 127)]) + (fConst124 * ((((fConst125 * fVec117[((IOTA - iConst126) & 127)]) + (fConst127 * fVec117[((IOTA - iConst128) & 127)])) + (fConst130 * fVec117[((IOTA - iConst131) & 127)])) + (fConst132 * fVec117[((IOTA - iConst133) & 127)]))));
			fRec288[0] = ((0.949999988f * fRec288[1]) + (0.0500000007f * fRec285[1]));
			float fTemp531 = (4.65661287e-10f * fTemp352);
			fRec291[0] = (fTemp531 - (fConst139 * ((fConst142 * fRec291[2]) + (fConst143 * fRec291[1]))));
			float fTemp532 = (fConst139 * (((fConst141 * fRec291[0]) + (fConst144 * fRec291[1])) + (fConst141 * fRec291[2])));
			fRec290[0] = (fTemp532 - (fConst136 * ((fConst145 * fRec290[2]) + (fConst146 * fRec290[1]))));
			iRec292[0] = (((iRec292[1] + (iRec292[1] > 0)) * (iTemp527 <= iVec116[1])) + (iTemp527 > iVec116[1]));
			float fTemp533 = (fConst147 * float(iRec292[0]));
			float fTemp534 = (fConst136 * ((fRec290[2] + (fRec290[0] + (2.0f * fRec290[1]))) * std::max<float>(0.0f, std::min<float>(fTemp533, (2.0f - fTemp533)))));
			fRec289[0] = (fTemp534 - ((fConst149 * fRec289[1]) + (fConst150 * fRec289[2])));
			fRec293[0] = (fTemp534 - ((fConst154 * fRec293[1]) + (fConst155 * fRec293[2])));
			fRec294[0] = (fTemp534 - ((fConst158 * fRec294[1]) + (fConst159 * fRec294[2])));
			fRec295[0] = (fTemp534 - ((fConst162 * fRec295[1]) + (fConst163 * fRec295[2])));
			fRec296[0] = (fTemp534 - ((fConst166 * fRec296[1]) + (fConst167 * fRec296[2])));
			fRec297[0] = (fTemp534 - ((fConst170 * fRec297[1]) + (fConst171 * fRec297[2])));
			fRec298[0] = (fTemp534 - ((fConst174 * fRec298[1]) + (fConst175 * fRec298[2])));
			fRec299[0] = (fTemp534 - ((fConst178 * fRec299[1]) + (fConst179 * fRec299[2])));
			fRec300[0] = (fTemp534 - ((fConst182 * fRec300[1]) + (fConst183 * fRec300[2])));
			fRec301[0] = (fTemp534 - ((fConst186 * fRec301[1]) + (fConst187 * fRec301[2])));
			fRec302[0] = (fTemp534 - ((fConst190 * fRec302[1]) + (fConst191 * fRec302[2])));
			fRec303[0] = (fTemp534 - ((fConst194 * fRec303[1]) + (fConst195 * fRec303[2])));
			fRec304[0] = (fTemp534 - ((fConst198 * fRec304[1]) + (fConst199 * fRec304[2])));
			fRec305[0] = (fTemp534 - ((fConst202 * fRec305[1]) + (fConst203 * fRec305[2])));
			fRec306[0] = (fTemp534 - ((fConst206 * fRec306[1]) + (fConst207 * fRec306[2])));
			fRec307[0] = (fTemp534 - ((fConst210 * fRec307[1]) + (fConst211 * fRec307[2])));
			fRec308[0] = (fTemp534 - ((fConst214 * fRec308[1]) + (fConst215 * fRec308[2])));
			fRec309[0] = (fTemp534 - ((fConst218 * fRec309[1]) + (fConst219 * fRec309[2])));
			fRec310[0] = (fTemp534 - ((fConst222 * fRec310[1]) + (fConst223 * fRec310[2])));
			fRec311[0] = (fTemp534 - ((fConst226 * fRec311[1]) + (fConst227 * fRec311[2])));
			fRec312[0] = (fTemp534 - ((fConst230 * fRec312[1]) + (fConst231 * fRec312[2])));
			fRec313[0] = (fTemp534 - ((fConst234 * fRec313[1]) + (fConst235 * fRec313[2])));
			fRec314[0] = (fTemp534 - ((fConst238 * fRec314[1]) + (fConst239 * fRec314[2])));
			fRec315[0] = (fTemp534 - ((fConst242 * fRec315[1]) + (fConst243 * fRec315[2])));
			fRec316[0] = (fTemp534 - ((fConst246 * fRec316[1]) + (fConst247 * fRec316[2])));
			fRec317[0] = (fTemp534 - ((fConst250 * fRec317[1]) + (fConst251 * fRec317[2])));
			fRec318[0] = (fTemp534 - ((fConst254 * fRec318[1]) + (fConst255 * fRec318[2])));
			fRec319[0] = (fTemp534 - ((fConst258 * fRec319[1]) + (fConst259 * fRec319[2])));
			fRec320[0] = (fTemp534 - ((fConst262 * fRec320[1]) + (fConst263 * fRec320[2])));
			fRec321[0] = (fTemp534 - ((fConst266 * fRec321[1]) + (fConst267 * fRec321[2])));
			fRec322[0] = (fTemp534 - ((fConst270 * fRec322[1]) + (fConst271 * fRec322[2])));
			fRec323[0] = (fTemp534 - ((fConst274 * fRec323[1]) + (fConst275 * fRec323[2])));
			fRec324[0] = (fTemp534 - ((fConst278 * fRec324[1]) + (fConst279 * fRec324[2])));
			fRec325[0] = (fTemp534 - ((fConst282 * fRec325[1]) + (fConst283 * fRec325[2])));
			fRec326[0] = (fTemp534 - ((fConst286 * fRec326[1]) + (fConst287 * fRec326[2])));
			fRec327[0] = (fTemp534 - ((fConst290 * fRec327[1]) + (fConst291 * fRec327[2])));
			fRec328[0] = (fTemp534 - ((fConst294 * fRec328[1]) + (fConst295 * fRec328[2])));
			fRec329[0] = (fTemp534 - ((fConst298 * fRec329[1]) + (fConst299 * fRec329[2])));
			fRec330[0] = (fTemp534 - ((fConst302 * fRec330[1]) + (fConst303 * fRec330[2])));
			fRec331[0] = (fTemp534 - ((fConst306 * fRec331[1]) + (fConst307 * fRec331[2])));
			fRec332[0] = (fTemp534 - ((fConst310 * fRec332[1]) + (fConst311 * fRec332[2])));
			fRec333[0] = (fTemp534 - ((fConst314 * fRec333[1]) + (fConst315 * fRec333[2])));
			fRec334[0] = (fTemp534 - ((fConst318 * fRec334[1]) + (fConst319 * fRec334[2])));
			fRec335[0] = (fTemp534 - ((fConst322 * fRec335[1]) + (fConst323 * fRec335[2])));
			fRec336[0] = (fTemp534 - ((fConst326 * fRec336[1]) + (fConst327 * fRec336[2])));
			fRec337[0] = (fTemp534 - ((fConst330 * fRec337[1]) + (fConst331 * fRec337[2])));
			fRec338[0] = (fTemp534 - ((fConst334 * fRec338[1]) + (fConst335 * fRec338[2])));
			fRec339[0] = (fTemp534 - ((fConst338 * fRec339[1]) + (fConst339 * fRec339[2])));
			fRec340[0] = (fTemp534 - ((fConst342 * fRec340[1]) + (fConst343 * fRec340[2])));
			fRec341[0] = (fTemp534 - ((fConst346 * fRec341[1]) + (fConst347 * fRec341[2])));
			fVec118[0] = (((((((((((((((((((((((((((((((((((((((((((((((((((fRec289[0] - fRec289[2]) * fConst152) + ((fRec293[0] - fRec293[2]) * fConst156)) + ((fRec294[0] - fRec294[2]) * fConst160)) + ((fRec295[0] - fRec295[2]) * fConst164)) + ((fRec296[0] - fRec296[2]) * fConst168)) + ((fRec297[0] - fRec297[2]) * fConst172)) + ((fRec298[0] - fRec298[2]) * fConst176)) + ((fRec299[0] - fRec299[2]) * fConst180)) + ((fRec300[0] - fRec300[2]) * fConst184)) + ((fRec301[0] - fRec301[2]) * fConst188)) + ((fRec302[0] - fRec302[2]) * fConst192)) + ((fRec303[0] - fRec303[2]) * fConst196)) + ((fRec304[0] - fRec304[2]) * fConst200)) + ((fRec305[0] - fRec305[2]) * fConst204)) + ((fRec306[0] - fRec306[2]) * fConst208)) + ((fRec307[0] - fRec307[2]) * fConst212)) + ((fRec308[0] - fRec308[2]) * fConst216)) + ((fRec309[0] - fRec309[2]) * fConst220)) + ((fRec310[0] - fRec310[2]) * fConst224)) + ((fRec311[0] - fRec311[2]) * fConst228)) + ((fRec312[0] - fRec312[2]) * fConst232)) + ((fRec313[0] - fRec313[2]) * fConst236)) + ((fRec314[0] - fRec314[2]) * fConst240)) + ((fRec315[0] - fRec315[2]) * fConst244)) + ((fRec316[0] - fRec316[2]) * fConst248)) + ((fRec317[0] - fRec317[2]) * fConst252)) + ((fRec318[0] - fRec318[2]) * fConst256)) + ((fRec319[0] - fRec319[2]) * fConst260)) + ((fRec320[0] - fRec320[2]) * fConst264)) + ((fRec321[0] - fRec321[2]) * fConst268)) + ((fRec322[0] - fRec322[2]) * fConst272)) + ((fRec323[0] - fRec323[2]) * fConst276)) + ((fRec324[0] - fRec324[2]) * fConst280)) + ((fRec325[0] - fRec325[2]) * fConst284)) + ((fRec326[0] - fRec326[2]) * fConst288)) + ((fRec327[0] - fRec327[2]) * fConst292)) + ((fRec328[0] - fRec328[2]) * fConst296)) + ((fRec329[0] - fRec329[2]) * fConst300)) + ((fRec330[0] - fRec330[2]) * fConst304)) + ((fRec331[0] - fRec331[2]) * fConst308)) + ((fRec332[0] - fRec332[2]) * fConst312)) + ((fRec333[0] - fRec333[2]) * fConst316)) + ((fRec334[0] - fRec334[2]) * fConst320)) + ((fRec335[0] - fRec335[2]) * fConst324)) + ((fRec336[0] - fRec336[2]) * fConst328)) + ((fRec337[0] - fRec337[2]) * fConst332)) + ((fRec338[0] - fRec338[2]) * fConst336)) + ((fRec339[0] - fRec339[2]) * fConst340)) + ((fRec340[0] - fRec340[2]) * fConst344)) + ((fRec341[0] - fRec341[2]) * fConst348));
			float fTemp535 = ((0.99000001f * fRec288[0]) + (0.0199999996f * fVec118[1]));
			fVec119[(IOTA & 127)] = fTemp535;
			fRec286[0] = ((fConst120 * fVec119[((IOTA - iConst123) & 127)]) + (fConst124 * ((((fConst125 * fVec119[((IOTA - iConst126) & 127)]) + (fConst127 * fVec119[((IOTA - iConst128) & 127)])) + (fConst130 * fVec119[((IOTA - iConst131) & 127)])) + (fConst132 * fVec119[((IOTA - iConst133) & 127)]))));
			float fRec284 = fRec286[0];
			fRec342[0] = (iTemp527 ? fSlow820 : fRec342[1]);
			float fTemp536 = ((iSlow818 ? (10.0f * fRec284) : (iSlow819 ? (iTemp528 ? fSoundfile4ca_bu_ch2[(fSoundfile4ca_of2[2] + std::max<int>(0, std::min<int>(iRec282[0], iSlow829)))] : (iTemp529 ? fSoundfile4ca_bu_ch1[(fSoundfile4ca_of1[1] + std::max<int>(0, std::min<int>(iRec282[0], iSlow828)))] : fSoundfile4ca_bu_ch0[(fSoundfile4ca_of0[0] + std::max<int>(0, std::min<int>(iRec282[0], iSlow827)))])) : (iTemp528 ? fSoundfile3ca_bu_ch2[(fSoundfile3ca_of2[2] + std::max<int>(0, std::min<int>(iRec282[0], iSlow826)))] : (iTemp529 ? fSoundfile3ca_bu_ch1[(fSoundfile3ca_of1[1] + std::max<int>(0, std::min<int>(iRec282[0], iSlow825)))] : fSoundfile3ca_bu_ch0[(fSoundfile3ca_of0[0] + std::max<int>(0, std::min<int>(iRec282[0], iSlow824)))])))) * std::pow(10.0f, (0.144444451f * (fRec342[0] + -10.0f))));
			float fTemp537 = std::fabs((0.25f * fTemp536));
			fRec345[0] = std::max<float>(fTemp537, ((fRec345[1] * fSlow836) + (fTemp537 * fSlow837)));
			fRec344[0] = ((fRec344[1] * fSlow833) + (fRec345[0] * fSlow838));
			fRec343[0] = ((fConst27 * fRec343[1]) + (fSlow830 * std::max<float>(((20.0f * std::log10(fRec344[0])) - fSlow839), 0.0f)));
			float fTemp538 = (0.25f * (fTemp536 * std::pow(10.0f, (0.0500000007f * fRec343[0]))));
			fRec346[0] = (fTemp538 - (fSlow843 * ((fSlow844 * fRec346[2]) + (fSlow845 * fRec346[1]))));
			float fTemp539 = (fSlow816 * fRec280[1]);
			fRec280[0] = (fTemp538 - ((fSlow843 * (fRec346[2] + (fRec346[0] + (2.0f * fRec346[1])))) + (((fRec280[2] * fSlow853) + fTemp539) / fSlow854)));
			float fTemp540 = (fSlow813 * fRec279[1]);
			fRec279[0] = ((((fTemp539 + (fRec280[0] * fSlow856)) + (fRec280[2] * fSlow857)) / fSlow854) - (((fRec279[2] * fSlow865) + fTemp540) / fSlow866));
			fRec278[0] = ((((fTemp540 + (fRec279[0] * fSlow868)) + (fRec279[2] * fSlow869)) / fSlow866) - (fSlow870 * ((fSlow871 * fRec278[2]) + (fSlow872 * fRec278[1]))));
			float fTemp541 = (fRec278[2] + (fRec278[0] + (2.0f * fRec278[1])));
			fVec120[(IOTA & 262143)] = (fSlow810 * fTemp541);
			float fTemp542 = (2.0f * (fTemp501 * fRec277[1]));
			fRec277[0] = (fVec120[((IOTA - iTemp511) & 262143)] - (((fTemp520 * fRec277[2]) + fTemp542) / fTemp522));
			float fTemp543 = (fRec276[0] * ((fTemp542 + (fRec277[0] * fTemp524)) + (fTemp525 * fRec277[2])));
			float fTemp544 = (((fSlow722 * fTemp526) + (fSlow804 * fTemp543)) / fTemp522);
			fRec351[0] = (fRec350[((IOTA - iSlow873) & 131071)] - (fConst64 * ((((fConst69 * fRec351[1]) + (fConst70 * fRec351[2])) + (fConst71 * fRec351[3])) + (fConst72 * fRec351[4]))));
			float fTemp545 = (fTemp193 * fTemp346);
			float fTemp546 = (fRec352[1] + (fConst17 * (fRec140[0] * ((fSlow66 * (fTemp325 * ((fRec136[0] * (fTemp327 + (6.86000013f * (fTemp326 * ((0.200000003f * (float(input8[i]) + -5.0f)) + 1.0f))))) + 2.4000001f))) + 1.0f))));
			fRec352[0] = (fTemp546 - std::floor(fTemp546));
			float fTemp547 = (fRec353[1] + (fConst17 * (fRec140[0] * ((fSlow269 * (fTemp344 * ((fRec143[0] * (fTemp327 + (10.0f * (fTemp326 * ((0.200000003f * (float(input9[i]) + -5.0f)) + 1.0f))))) + 10.0f))) + 1.0f))));
			fRec353[0] = (fTemp547 - std::floor(fTemp547));
			fRec350[(IOTA & 131071)] = ((fConst60 * (((fConst62 * fRec351[2]) + (fConst52 * fRec351[0])) + (fConst52 * fRec351[4]))) + (fTemp545 * (iSlow259 ? (fRec143[0] * ftbl2mydspSIG2[int((65536.0f * fRec353[0]))]) : (iSlow260 ? (fRec136[0] * ftbl2mydspSIG2[int((65536.0f * fRec352[0]))]) : fTemp310))));
			float fTemp548 = fRec350[((IOTA - 0) & 131071)];
			float fTemp549 = std::fabs((0.25f * fTemp548));
			fRec356[0] = std::max<float>(fTemp549, ((fSlow276 * fRec356[1]) + (fSlow277 * fTemp549)));
			fRec355[0] = ((fSlow273 * fRec355[1]) + (fRec356[0] * fSlow278));
			fRec354[0] = ((fConst27 * fRec354[1]) + (fSlow270 * std::max<float>(((20.0f * std::log10(fRec355[0])) - fSlow279), 0.0f)));
			float fTemp550 = (0.25f * (fTemp548 * std::pow(10.0f, (0.0500000007f * fRec354[0]))));
			fRec357[0] = (fTemp550 - (fSlow283 * ((fSlow284 * fRec357[2]) + (fSlow285 * fRec357[1]))));
			float fTemp551 = (fSlow253 * fRec349[1]);
			fRec349[0] = (fTemp550 - ((fSlow283 * (fRec357[2] + (fRec357[0] + (2.0f * fRec357[1])))) + (((fSlow293 * fRec349[2]) + fTemp551) / fSlow294)));
			float fTemp552 = (fSlow250 * fRec348[1]);
			fRec348[0] = ((((fTemp551 + (fRec349[0] * fSlow296)) + (fSlow297 * fRec349[2])) / fSlow294) - (((fSlow305 * fRec348[2]) + fTemp552) / fSlow306));
			fRec347[0] = ((((fTemp552 + (fRec348[0] * fSlow308)) + (fSlow309 * fRec348[2])) / fSlow306) - (fSlow310 * ((fSlow311 * fRec347[2]) + (fSlow312 * fRec347[1]))));
			fVec121[(IOTA & 2047)] = (fTemp498 + (fTemp544 + (fSlow246 * (fRec114[0] * (fRec347[2] + (fRec347[0] + (2.0f * fRec347[1])))))));
			float fTemp553 = (0.300000012f * fVec121[((IOTA - iConst350) & 2047)]);
			float fTemp554 = (((0.600000024f * fRec194[1]) + fVec78[((IOTA - iConst110) & 32767)]) - fTemp553);
			fVec122[(IOTA & 2047)] = fTemp554;
			fRec194[0] = fVec122[((IOTA - iConst351) & 2047)];
			float fRec195 = (0.0f - (0.600000024f * fTemp554));
			fRec361[0] = (0.0f - (fConst107 * ((fConst108 * fRec361[1]) - (fRec189[1] + fRec189[2]))));
			fRec360[0] = ((fSlow880 * fRec360[1]) + (fSlow881 * (fRec189[1] + (fSlow882 * fRec361[0]))));
			fVec123[(IOTA & 32767)] = ((0.353553385f * fRec360[0]) + 9.99999968e-21f);
			float fTemp555 = (((0.600000024f * fRec358[1]) + fVec123[((IOTA - iConst356) & 32767)]) - fTemp553);
			fVec124[(IOTA & 4095)] = fTemp555;
			fRec358[0] = fVec124[((IOTA - iConst357) & 4095)];
			float fRec359 = (0.0f - (0.600000024f * fTemp555));
			fRec365[0] = (0.0f - (fConst107 * ((fConst108 * fRec365[1]) - (fRec191[1] + fRec191[2]))));
			fRec364[0] = ((fSlow889 * fRec364[1]) + (fSlow890 * (fRec191[1] + (fSlow891 * fRec365[0]))));
			fVec125[(IOTA & 16383)] = ((0.353553385f * fRec364[0]) + 9.99999968e-21f);
			float fTemp556 = (fVec125[((IOTA - iConst362) & 16383)] + (fTemp553 + (0.600000024f * fRec362[1])));
			fVec126[(IOTA & 4095)] = fTemp556;
			fRec362[0] = fVec126[((IOTA - iConst363) & 4095)];
			float fRec363 = (0.0f - (0.600000024f * fTemp556));
			fRec369[0] = (0.0f - (fConst107 * ((fConst108 * fRec369[1]) - (fRec187[1] + fRec187[2]))));
			fRec368[0] = ((fSlow898 * fRec368[1]) + (fSlow899 * (fRec187[1] + (fSlow900 * fRec369[0]))));
			fVec127[(IOTA & 32767)] = ((0.353553385f * fRec368[0]) + 9.99999968e-21f);
			float fTemp557 = (fTemp553 + ((0.600000024f * fRec366[1]) + fVec127[((IOTA - iConst368) & 32767)]));
			fVec128[(IOTA & 4095)] = fTemp557;
			fRec366[0] = fVec128[((IOTA - iConst369) & 4095)];
			float fRec367 = (0.0f - (0.600000024f * fTemp557));
			fRec373[0] = (0.0f - (fConst107 * ((fConst108 * fRec373[1]) - (fRec192[1] + fRec192[2]))));
			fRec372[0] = ((fSlow907 * fRec372[1]) + (fSlow908 * (fRec192[1] + (fSlow909 * fRec373[0]))));
			fVec129[(IOTA & 16383)] = ((0.353553385f * fRec372[0]) + 9.99999968e-21f);
			float fTemp558 = (0.562341332f * (fTemp142 + fTemp394));
			float fTemp559 = (2.0f * (fRec374[1] * fTemp501));
			fRec374[0] = (fTemp512 - (((fRec374[2] * fTemp520) + fTemp559) / fTemp522));
			float fTemp560 = (fRec262[0] * ((fTemp559 + (fRec374[0] * fTemp524)) + (fRec374[2] * fTemp525)));
			fVec130[(IOTA & 262143)] = (fSlow910 * fTemp541);
			float fTemp561 = (2.0f * (fTemp501 * fRec375[1]));
			fRec375[0] = (fVec130[((IOTA - iTemp511) & 262143)] - (((fTemp520 * fRec375[2]) + fTemp561) / fTemp522));
			float fTemp562 = (fRec276[0] * ((fTemp561 + (fRec375[0] * fTemp524)) + (fTemp525 * fRec375[2])));
			float fTemp563 = (((fSlow722 * fTemp560) + (fSlow804 * fTemp562)) / fTemp522);
			fRec380[0] = (fRec379[((IOTA - iSlow254) & 131071)] - (fConst64 * ((((fConst69 * fRec380[1]) + (fConst70 * fRec380[2])) + (fConst71 * fRec380[3])) + (fConst72 * fRec380[4]))));
			float fTemp564 = (fRec381[1] + (fConst17 * (fRec140[0] * ((fSlow66 * (fTemp325 * ((fRec136[0] * (fTemp327 + (6.86000013f * (fTemp326 * ((0.200000003f * (float(input6[i]) + -5.0f)) + 1.0f))))) + 2.4000001f))) + 1.0f))));
			fRec381[0] = (fTemp564 - std::floor(fTemp564));
			float fTemp565 = (fRec382[1] + (fConst17 * (fRec140[0] * ((fSlow269 * (fTemp344 * ((fRec143[0] * (fTemp327 + (10.0f * (fTemp326 * ((0.200000003f * (float(input7[i]) + -5.0f)) + 1.0f))))) + 10.0f))) + 1.0f))));
			fRec382[0] = (fTemp565 - std::floor(fTemp565));
			fRec379[(IOTA & 131071)] = ((fConst60 * (((fConst62 * fRec380[2]) + (fConst52 * fRec380[0])) + (fConst52 * fRec380[4]))) + (fTemp545 * (iSlow259 ? (fRec143[0] * ftbl2mydspSIG2[int((65536.0f * fRec382[0]))]) : (iSlow260 ? (fRec136[0] * ftbl2mydspSIG2[int((65536.0f * fRec381[0]))]) : fTemp310))));
			float fTemp566 = fRec379[((IOTA - 0) & 131071)];
			float fTemp567 = std::fabs((0.25f * fTemp566));
			fRec385[0] = std::max<float>(fTemp567, ((fSlow276 * fRec385[1]) + (fSlow277 * fTemp567)));
			fRec384[0] = ((fSlow273 * fRec384[1]) + (fRec385[0] * fSlow278));
			fRec383[0] = ((fConst27 * fRec383[1]) + (fSlow270 * std::max<float>(((20.0f * std::log10(fRec384[0])) - fSlow279), 0.0f)));
			float fTemp568 = (0.25f * (fTemp566 * std::pow(10.0f, (0.0500000007f * fRec383[0]))));
			fRec386[0] = (fTemp568 - (fSlow283 * ((fSlow284 * fRec386[2]) + (fSlow285 * fRec386[1]))));
			float fTemp569 = (fSlow253 * fRec378[1]);
			fRec378[0] = (fTemp568 - ((fSlow283 * (fRec386[2] + (fRec386[0] + (2.0f * fRec386[1])))) + (((fSlow293 * fRec378[2]) + fTemp569) / fSlow294)));
			float fTemp570 = (fSlow250 * fRec377[1]);
			fRec377[0] = ((((fTemp569 + (fRec378[0] * fSlow296)) + (fSlow297 * fRec378[2])) / fSlow294) - (((fSlow305 * fRec377[2]) + fTemp570) / fSlow306));
			fRec376[0] = ((((fTemp570 + (fRec377[0] * fSlow308)) + (fSlow309 * fRec377[2])) / fSlow306) - (fSlow310 * ((fSlow311 * fRec376[2]) + (fSlow312 * fRec376[1]))));
			fVec131[(IOTA & 2047)] = (fTemp558 + (fTemp563 + (fSlow246 * (fRec114[0] * (fRec376[2] + (fRec376[0] + (2.0f * fRec376[1])))))));
			float fTemp571 = (0.300000012f * fVec131[((IOTA - iConst350) & 2047)]);
			float fTemp572 = (fVec129[((IOTA - iConst374) & 16383)] - (fTemp571 + (0.600000024f * fRec370[1])));
			fVec132[(IOTA & 2047)] = fTemp572;
			fRec370[0] = fVec132[((IOTA - iConst375) & 2047)];
			float fRec371 = (0.600000024f * fTemp572);
			fRec390[0] = (0.0f - (fConst107 * ((fConst108 * fRec390[1]) - (fRec188[1] + fRec188[2]))));
			fRec389[0] = ((fSlow917 * fRec389[1]) + (fSlow918 * (fRec188[1] + (fSlow919 * fRec390[0]))));
			fVec133[(IOTA & 16383)] = ((0.353553385f * fRec389[0]) + 9.99999968e-21f);
			float fTemp573 = (fVec133[((IOTA - iConst380) & 16383)] - (fTemp571 + (0.600000024f * fRec387[1])));
			fVec134[(IOTA & 4095)] = fTemp573;
			fRec387[0] = fVec134[((IOTA - iConst381) & 4095)];
			float fRec388 = (0.600000024f * fTemp573);
			fRec394[0] = (0.0f - (fConst107 * ((fConst108 * fRec394[1]) - (fRec190[1] + fRec190[2]))));
			fRec393[0] = ((fSlow926 * fRec393[1]) + (fSlow927 * (fRec190[1] + (fSlow928 * fRec394[0]))));
			fVec135[(IOTA & 16383)] = ((0.353553385f * fRec393[0]) + 9.99999968e-21f);
			float fTemp574 = ((fTemp571 + fVec135[((IOTA - iConst386) & 16383)]) - (0.600000024f * fRec391[1]));
			fVec136[(IOTA & 4095)] = fTemp574;
			fRec391[0] = fVec136[((IOTA - iConst387) & 4095)];
			float fRec392 = (0.600000024f * fTemp574);
			fRec398[0] = (0.0f - (fConst107 * ((fConst108 * fRec398[1]) - (fRec186[1] + fRec186[2]))));
			fRec397[0] = ((fSlow935 * fRec397[1]) + (fSlow936 * (fRec186[1] + (fSlow937 * fRec398[0]))));
			fVec137[(IOTA & 16383)] = ((0.353553385f * fRec397[0]) + 9.99999968e-21f);
			float fTemp575 = ((fVec137[((IOTA - iConst392) & 16383)] + fTemp571) - (0.600000024f * fRec395[1]));
			fVec138[(IOTA & 2047)] = fTemp575;
			fRec395[0] = fVec138[((IOTA - iConst393) & 2047)];
			float fRec396 = (0.600000024f * fTemp575);
			float fTemp576 = (fRec396 + fRec392);
			float fTemp577 = (fRec371 + (fRec388 + fTemp576));
			fRec186[0] = (fRec194[1] + (fRec358[1] + (fRec362[1] + (fRec366[1] + (fRec370[1] + (fRec387[1] + (fRec391[1] + (fRec395[1] + (fRec195 + (fRec359 + (fRec363 + (fRec367 + fTemp577))))))))))));
			fRec187[0] = ((fRec370[1] + (fRec387[1] + (fRec391[1] + (fRec395[1] + fTemp577)))) - (fRec194[1] + (fRec358[1] + (fRec362[1] + (fRec366[1] + (fRec195 + (fRec359 + (fRec367 + fRec363))))))));
			float fTemp578 = (fRec388 + fRec371);
			fRec188[0] = ((fRec362[1] + (fRec366[1] + (fRec391[1] + (fRec395[1] + (fRec363 + (fRec367 + fTemp576)))))) - (fRec194[1] + (fRec358[1] + (fRec370[1] + (fRec387[1] + (fRec195 + (fRec359 + fTemp578)))))));
			fRec189[0] = ((fRec194[1] + (fRec358[1] + (fRec391[1] + (fRec395[1] + (fRec195 + (fRec359 + fTemp576)))))) - (fRec362[1] + (fRec366[1] + (fRec370[1] + (fRec387[1] + (fRec363 + (fRec367 + fTemp578)))))));
			float fTemp579 = (fRec396 + fRec388);
			float fTemp580 = (fRec392 + fRec371);
			fRec190[0] = ((fRec358[1] + (fRec366[1] + (fRec387[1] + (fRec395[1] + (fRec359 + (fRec367 + fTemp579)))))) - (fRec194[1] + (fRec362[1] + (fRec370[1] + (fRec391[1] + (fRec195 + (fRec363 + fTemp580)))))));
			fRec191[0] = ((fRec194[1] + (fRec362[1] + (fRec387[1] + (fRec395[1] + (fRec195 + (fRec363 + fTemp579)))))) - (fRec358[1] + (fRec366[1] + (fRec370[1] + (fRec391[1] + (fRec359 + (fRec367 + fTemp580)))))));
			float fTemp581 = (fRec396 + fRec371);
			float fTemp582 = (fRec392 + fRec388);
			fRec192[0] = ((fRec194[1] + (fRec366[1] + (fRec370[1] + (fRec395[1] + (fRec195 + (fRec367 + fTemp581)))))) - (fRec358[1] + (fRec362[1] + (fRec387[1] + (fRec391[1] + (fRec359 + (fRec363 + fTemp582)))))));
			fRec193[0] = ((fRec358[1] + (fRec362[1] + (fRec370[1] + (fRec395[1] + (fRec359 + (fRec363 + fTemp581)))))) - (fRec194[1] + (fRec366[1] + (fRec387[1] + (fRec391[1] + (fRec195 + (fRec367 + fTemp582)))))));
			fRec185[0] = ((0.370000005f * (fRec187[0] + fRec188[0])) - (fConst394 * ((fConst395 * fRec185[1]) + (fConst396 * fRec185[2]))));
			float fTemp583 = ((2375.0f * (fTemp194 + 1.0f)) + 250.0f);
			float fTemp584 = std::tan((fConst8 * fTemp583));
			float fTemp585 = (1.0f / fTemp584);
			fRec399[0] = (fSlow938 + (0.999000013f * fRec399[1]));
			float fTemp586 = (22.0f * fRec399[0]);
			int iTemp587 = (fTemp586 > 0.0f);
			float fTemp588 = std::sin((fConst29 * fTemp583));
			float fTemp589 = (fConst398 * ((fTemp583 * std::pow(10.0f, (0.0500000007f * std::fabs(fTemp586)))) / fTemp588));
			float fTemp590 = (fConst398 * (fTemp583 / fTemp588));
			float fTemp591 = (iTemp587 ? fTemp590 : fTemp589);
			float fTemp592 = (((fTemp585 - fTemp591) / fTemp584) + 1.0f);
			float fTemp593 = (1.0f - (1.0f / mydsp_faustpower2_f(fTemp584)));
			float fTemp594 = (2.0f * (fRec7[1] * fTemp593));
			float fTemp595 = (((fTemp585 + fTemp591) / fTemp584) + 1.0f);
			fRec7[0] = (((((fTemp142 + fTemp191) + (fSlow246 * (fRec114[0] * (fRec115[2] + (fRec115[0] + (2.0f * fRec115[1])))))) + fTemp394) + (fRec6[0] * ((fConst100 * fRec185[0]) + (fConst397 * fRec185[2])))) - (((fRec7[2] * fTemp592) + fTemp594) / fTemp595));
			float fTemp596 = (iTemp587 ? fTemp589 : fTemp590);
			float fTemp597 = (((fTemp585 + fTemp596) / fTemp584) + 1.0f);
			float fTemp598 = (((fTemp585 - fTemp596) / fTemp584) + 1.0f);
			float fTemp599 = std::pow(10.0f, (0.0500000007f * (0.0f - (8.80000019f * fRec399[0]))));
			fRec412[0] = (0.0f - (fConst107 * ((fConst108 * fRec412[1]) - (fRec408[1] + fRec408[2]))));
			fRec411[0] = ((fSlow542 * fRec411[1]) + (fSlow543 * (fRec408[1] + (fSlow544 * fRec412[0]))));
			fVec139[(IOTA & 32767)] = ((0.353553385f * fRec411[0]) + 9.99999968e-21f);
			fRec417[0] = (fRec416[((IOTA - iSlow873) & 131071)] - (fConst64 * ((((fConst69 * fRec417[1]) + (fConst70 * fRec417[2])) + (fConst71 * fRec417[3])) + (fConst72 * fRec417[4]))));
			float fTemp600 = (fRec418[1] + (fConst17 * (fRec140[0] * ((fSlow66 * (fTemp325 * ((fRec136[0] * (fTemp327 + (6.86000013f * (fTemp326 * ((0.200000003f * (float(input12[i]) + -5.0f)) + 1.0f))))) + 2.4000001f))) + 1.0f))));
			fRec418[0] = (fTemp600 - std::floor(fTemp600));
			float fTemp601 = (fRec419[1] + (fConst17 * (fRec140[0] * ((fSlow269 * (fTemp344 * ((fRec143[0] * (fTemp327 + (10.0f * (fTemp326 * ((0.200000003f * (float(input13[i]) + -5.0f)) + 1.0f))))) + 10.0f))) + 1.0f))));
			fRec419[0] = (fTemp601 - std::floor(fTemp601));
			fRec416[(IOTA & 131071)] = ((fConst60 * (((fConst62 * fRec417[2]) + (fConst52 * fRec417[0])) + (fConst52 * fRec417[4]))) + (fTemp545 * (iSlow259 ? (fRec143[0] * ftbl2mydspSIG2[int((65536.0f * fRec419[0]))]) : (iSlow260 ? (fRec136[0] * ftbl2mydspSIG2[int((65536.0f * fRec418[0]))]) : fTemp310))));
			float fTemp602 = fRec416[((IOTA - 0) & 131071)];
			float fTemp603 = std::fabs((0.25f * fTemp602));
			fRec422[0] = std::max<float>(fTemp603, ((fSlow276 * fRec422[1]) + (fSlow277 * fTemp603)));
			fRec421[0] = ((fSlow273 * fRec421[1]) + (fRec422[0] * fSlow278));
			fRec420[0] = ((fConst27 * fRec420[1]) + (fSlow270 * std::max<float>(((20.0f * std::log10(fRec421[0])) - fSlow279), 0.0f)));
			float fTemp604 = (0.25f * (fTemp602 * std::pow(10.0f, (0.0500000007f * fRec420[0]))));
			fRec423[0] = (fTemp604 - (fSlow283 * ((fSlow284 * fRec423[2]) + (fSlow285 * fRec423[1]))));
			float fTemp605 = (fSlow253 * fRec415[1]);
			fRec415[0] = (fTemp604 - ((fSlow283 * (fRec423[2] + (fRec423[0] + (2.0f * fRec423[1])))) + (((fSlow293 * fRec415[2]) + fTemp605) / fSlow294)));
			float fTemp606 = (fSlow250 * fRec414[1]);
			fRec414[0] = ((((fTemp605 + (fRec415[0] * fSlow296)) + (fSlow297 * fRec415[2])) / fSlow294) - (((fSlow305 * fRec414[2]) + fTemp606) / fSlow306));
			fRec413[0] = ((((fTemp606 + (fRec414[0] * fSlow308)) + (fSlow309 * fRec414[2])) / fSlow306) - (fSlow310 * ((fSlow311 * fRec413[2]) + (fSlow312 * fRec413[1]))));
			fVec140[(IOTA & 2047)] = ((fSlow246 * (fRec114[0] * (fRec413[2] + (fRec413[0] + (2.0f * fRec413[1]))))) + (fTemp544 + fTemp498));
			float fTemp607 = (0.300000012f * fVec140[((IOTA - iConst350) & 2047)]);
			float fTemp608 = (((0.600000024f * fRec409[1]) + fVec139[((IOTA - iConst110) & 32767)]) - fTemp607);
			fVec141[(IOTA & 2047)] = fTemp608;
			fRec409[0] = fVec141[((IOTA - iConst351) & 2047)];
			float fRec410 = (0.0f - (0.600000024f * fTemp608));
			fRec427[0] = (0.0f - (fConst107 * ((fConst108 * fRec427[1]) - (fRec404[1] + fRec404[2]))));
			fRec426[0] = ((fSlow880 * fRec426[1]) + (fSlow881 * (fRec404[1] + (fSlow882 * fRec427[0]))));
			fVec142[(IOTA & 32767)] = ((0.353553385f * fRec426[0]) + 9.99999968e-21f);
			float fTemp609 = (((0.600000024f * fRec424[1]) + fVec142[((IOTA - iConst356) & 32767)]) - fTemp607);
			fVec143[(IOTA & 4095)] = fTemp609;
			fRec424[0] = fVec143[((IOTA - iConst357) & 4095)];
			float fRec425 = (0.0f - (0.600000024f * fTemp609));
			fRec431[0] = (0.0f - (fConst107 * ((fConst108 * fRec431[1]) - (fRec406[1] + fRec406[2]))));
			fRec430[0] = ((fSlow889 * fRec430[1]) + (fSlow890 * (fRec406[1] + (fSlow891 * fRec431[0]))));
			fVec144[(IOTA & 16383)] = ((0.353553385f * fRec430[0]) + 9.99999968e-21f);
			float fTemp610 = (fVec144[((IOTA - iConst362) & 16383)] + (fTemp607 + (0.600000024f * fRec428[1])));
			fVec145[(IOTA & 4095)] = fTemp610;
			fRec428[0] = fVec145[((IOTA - iConst363) & 4095)];
			float fRec429 = (0.0f - (0.600000024f * fTemp610));
			fRec435[0] = (0.0f - (fConst107 * ((fConst108 * fRec435[1]) - (fRec402[1] + fRec402[2]))));
			fRec434[0] = ((fSlow898 * fRec434[1]) + (fSlow899 * (fRec402[1] + (fSlow900 * fRec435[0]))));
			fVec146[(IOTA & 32767)] = ((0.353553385f * fRec434[0]) + 9.99999968e-21f);
			float fTemp611 = (fTemp607 + ((0.600000024f * fRec432[1]) + fVec146[((IOTA - iConst368) & 32767)]));
			fVec147[(IOTA & 4095)] = fTemp611;
			fRec432[0] = fVec147[((IOTA - iConst369) & 4095)];
			float fRec433 = (0.0f - (0.600000024f * fTemp611));
			fRec439[0] = (0.0f - (fConst107 * ((fConst108 * fRec439[1]) - (fRec407[1] + fRec407[2]))));
			fRec438[0] = ((fSlow907 * fRec438[1]) + (fSlow908 * (fRec407[1] + (fSlow909 * fRec439[0]))));
			fVec148[(IOTA & 16383)] = ((0.353553385f * fRec438[0]) + 9.99999968e-21f);
			fRec444[0] = (fRec443[((IOTA - iSlow254) & 131071)] - (fConst64 * ((((fConst69 * fRec444[1]) + (fConst70 * fRec444[2])) + (fConst71 * fRec444[3])) + (fConst72 * fRec444[4]))));
			float fTemp612 = (fRec445[1] + (fConst17 * (fRec140[0] * ((fSlow66 * (fTemp325 * ((fRec136[0] * (fTemp327 + (6.86000013f * (fTemp326 * ((0.200000003f * (float(input10[i]) + -5.0f)) + 1.0f))))) + 2.4000001f))) + 1.0f))));
			fRec445[0] = (fTemp612 - std::floor(fTemp612));
			float fTemp613 = (fRec446[1] + (fConst17 * (fRec140[0] * ((fSlow269 * (fTemp344 * ((fRec143[0] * (fTemp327 + (10.0f * (fTemp326 * ((0.200000003f * (float(input11[i]) + -5.0f)) + 1.0f))))) + 10.0f))) + 1.0f))));
			fRec446[0] = (fTemp613 - std::floor(fTemp613));
			fRec443[(IOTA & 131071)] = ((fConst60 * (((fConst62 * fRec444[2]) + (fConst52 * fRec444[0])) + (fConst52 * fRec444[4]))) + (fTemp545 * (iSlow259 ? (fRec143[0] * ftbl2mydspSIG2[int((65536.0f * fRec446[0]))]) : (iSlow260 ? (fRec136[0] * ftbl2mydspSIG2[int((65536.0f * fRec445[0]))]) : fTemp310))));
			float fTemp614 = fRec443[((IOTA - 0) & 131071)];
			float fTemp615 = std::fabs((0.25f * fTemp614));
			fRec449[0] = std::max<float>(fTemp615, ((fSlow276 * fRec449[1]) + (fSlow277 * fTemp615)));
			fRec448[0] = ((fSlow273 * fRec448[1]) + (fRec449[0] * fSlow278));
			fRec447[0] = ((fConst27 * fRec447[1]) + (fSlow270 * std::max<float>(((20.0f * std::log10(fRec448[0])) - fSlow279), 0.0f)));
			float fTemp616 = (0.25f * (fTemp614 * std::pow(10.0f, (0.0500000007f * fRec447[0]))));
			fRec450[0] = (fTemp616 - (fSlow283 * ((fSlow284 * fRec450[2]) + (fSlow285 * fRec450[1]))));
			float fTemp617 = (fSlow253 * fRec442[1]);
			fRec442[0] = (fTemp616 - ((fSlow283 * (fRec450[2] + (fRec450[0] + (2.0f * fRec450[1])))) + (((fSlow293 * fRec442[2]) + fTemp617) / fSlow294)));
			float fTemp618 = (fSlow250 * fRec441[1]);
			fRec441[0] = ((((fTemp617 + (fRec442[0] * fSlow296)) + (fSlow297 * fRec442[2])) / fSlow294) - (((fSlow305 * fRec441[2]) + fTemp618) / fSlow306));
			fRec440[0] = ((((fTemp618 + (fRec441[0] * fSlow308)) + (fSlow309 * fRec441[2])) / fSlow306) - (fSlow310 * ((fSlow311 * fRec440[2]) + (fSlow312 * fRec440[1]))));
			fVec149[(IOTA & 2047)] = ((fSlow246 * (fRec114[0] * (fRec440[2] + (fRec440[0] + (2.0f * fRec440[1]))))) + (fTemp563 + fTemp558));
			float fTemp619 = (0.300000012f * fVec149[((IOTA - iConst350) & 2047)]);
			float fTemp620 = (fVec148[((IOTA - iConst374) & 16383)] - (fTemp619 + (0.600000024f * fRec436[1])));
			fVec150[(IOTA & 2047)] = fTemp620;
			fRec436[0] = fVec150[((IOTA - iConst375) & 2047)];
			float fRec437 = (0.600000024f * fTemp620);
			fRec454[0] = (0.0f - (fConst107 * ((fConst108 * fRec454[1]) - (fRec403[1] + fRec403[2]))));
			fRec453[0] = ((fSlow917 * fRec453[1]) + (fSlow918 * (fRec403[1] + (fSlow919 * fRec454[0]))));
			fVec151[(IOTA & 16383)] = ((0.353553385f * fRec453[0]) + 9.99999968e-21f);
			float fTemp621 = (fVec151[((IOTA - iConst380) & 16383)] - (fTemp619 + (0.600000024f * fRec451[1])));
			fVec152[(IOTA & 4095)] = fTemp621;
			fRec451[0] = fVec152[((IOTA - iConst381) & 4095)];
			float fRec452 = (0.600000024f * fTemp621);
			fRec458[0] = (0.0f - (fConst107 * ((fConst108 * fRec458[1]) - (fRec405[1] + fRec405[2]))));
			fRec457[0] = ((fSlow926 * fRec457[1]) + (fSlow927 * (fRec405[1] + (fSlow928 * fRec458[0]))));
			fVec153[(IOTA & 16383)] = ((0.353553385f * fRec457[0]) + 9.99999968e-21f);
			float fTemp622 = ((fTemp619 + fVec153[((IOTA - iConst386) & 16383)]) - (0.600000024f * fRec455[1]));
			fVec154[(IOTA & 4095)] = fTemp622;
			fRec455[0] = fVec154[((IOTA - iConst387) & 4095)];
			float fRec456 = (0.600000024f * fTemp622);
			fRec462[0] = (0.0f - (fConst107 * ((fConst108 * fRec462[1]) - (fRec401[1] + fRec401[2]))));
			fRec461[0] = ((fSlow935 * fRec461[1]) + (fSlow936 * (fRec401[1] + (fSlow937 * fRec462[0]))));
			fVec155[(IOTA & 16383)] = ((0.353553385f * fRec461[0]) + 9.99999968e-21f);
			float fTemp623 = ((fVec155[((IOTA - iConst392) & 16383)] + fTemp619) - (0.600000024f * fRec459[1]));
			fVec156[(IOTA & 2047)] = fTemp623;
			fRec459[0] = fVec156[((IOTA - iConst393) & 2047)];
			float fRec460 = (0.600000024f * fTemp623);
			float fTemp624 = (fRec460 + fRec456);
			float fTemp625 = (fRec437 + (fRec452 + fTemp624));
			fRec401[0] = (fRec409[1] + (fRec424[1] + (fRec428[1] + (fRec432[1] + (fRec436[1] + (fRec451[1] + (fRec455[1] + (fRec459[1] + (fRec410 + (fRec425 + (fRec429 + (fRec433 + fTemp625))))))))))));
			fRec402[0] = ((fRec436[1] + (fRec451[1] + (fRec455[1] + (fRec459[1] + fTemp625)))) - (fRec409[1] + (fRec424[1] + (fRec428[1] + (fRec432[1] + (fRec410 + (fRec425 + (fRec433 + fRec429))))))));
			float fTemp626 = (fRec452 + fRec437);
			fRec403[0] = ((fRec428[1] + (fRec432[1] + (fRec455[1] + (fRec459[1] + (fRec429 + (fRec433 + fTemp624)))))) - (fRec409[1] + (fRec424[1] + (fRec436[1] + (fRec451[1] + (fRec410 + (fRec425 + fTemp626)))))));
			fRec404[0] = ((fRec409[1] + (fRec424[1] + (fRec455[1] + (fRec459[1] + (fRec410 + (fRec425 + fTemp624)))))) - (fRec428[1] + (fRec432[1] + (fRec436[1] + (fRec451[1] + (fRec429 + (fRec433 + fTemp626)))))));
			float fTemp627 = (fRec460 + fRec452);
			float fTemp628 = (fRec456 + fRec437);
			fRec405[0] = ((fRec424[1] + (fRec432[1] + (fRec451[1] + (fRec459[1] + (fRec425 + (fRec433 + fTemp627)))))) - (fRec409[1] + (fRec428[1] + (fRec436[1] + (fRec455[1] + (fRec410 + (fRec429 + fTemp628)))))));
			fRec406[0] = ((fRec409[1] + (fRec428[1] + (fRec451[1] + (fRec459[1] + (fRec410 + (fRec429 + fTemp627)))))) - (fRec424[1] + (fRec432[1] + (fRec436[1] + (fRec455[1] + (fRec425 + (fRec433 + fTemp628)))))));
			float fTemp629 = (fRec460 + fRec437);
			float fTemp630 = (fRec456 + fRec452);
			fRec407[0] = ((fRec409[1] + (fRec432[1] + (fRec436[1] + (fRec459[1] + (fRec410 + (fRec433 + fTemp629)))))) - (fRec424[1] + (fRec428[1] + (fRec451[1] + (fRec455[1] + (fRec425 + (fRec429 + fTemp630)))))));
			fRec408[0] = ((fRec424[1] + (fRec428[1] + (fRec436[1] + (fRec459[1] + (fRec425 + (fRec429 + fTemp629)))))) - (fRec409[1] + (fRec432[1] + (fRec451[1] + (fRec455[1] + (fRec410 + (fRec433 + fTemp630)))))));
			fRec400[0] = ((0.370000005f * (fRec402[0] + fRec403[0])) - (fConst394 * ((fConst395 * fRec400[1]) + (fConst396 * fRec400[2]))));
			fRec463[0] = ((0.999000013f * fRec463[1]) + fSlow944);
			iVec157[0] = iSlow954;
			fVec158[0] = fSlow955;
			fVec159[0] = fSlow957;
			int iTemp631 = (iSlow746 * ((fSlow955 > fVec158[1]) + (iSlow956 * (fSlow957 > fVec159[1]))));
			iRec467[0] = ((((iSlow954 > iVec157[1]) + iTemp631) > 0) ? 0 : std::min<int>(96000, (iRec467[1] + 1)));
			fRec468[0] = (iTemp631 ? fSlow955 : fRec468[1]);
			float fTemp632 = ((iSlow952 ? fSoundfile5ca_bu_ch2[(fSoundfile5ca_of2[2] + std::max<int>(0, std::min<int>(iRec467[0], iSlow960)))] : (iSlow953 ? fSoundfile5ca_bu_ch1[(fSoundfile5ca_of1[1] + std::max<int>(0, std::min<int>(iRec467[0], iSlow959)))] : fSoundfile5ca_bu_ch0[(fSoundfile5ca_of0[0] + std::max<int>(0, std::min<int>(iRec467[0], iSlow958)))])) * (std::pow(10.0f, (0.144444451f * (fRec468[0] + -10.0f))) + 1.39999998f));
			float fTemp633 = std::fabs((0.25f * fTemp632));
			fRec471[0] = std::max<float>(fTemp633, ((fRec471[1] * fSlow967) + (fTemp633 * fSlow968)));
			fRec470[0] = ((fRec470[1] * fSlow964) + (fRec471[0] * fSlow969));
			fRec469[0] = ((fConst27 * fRec469[1]) + (fSlow961 * std::max<float>(((20.0f * std::log10(fRec470[0])) - fSlow970), 0.0f)));
			float fTemp634 = (0.25f * (fTemp632 * std::pow(10.0f, (0.0500000007f * fRec469[0]))));
			fRec472[0] = (fTemp634 - (fSlow974 * ((fSlow975 * fRec472[2]) + (fSlow976 * fRec472[1]))));
			float fTemp635 = (fSlow950 * fRec466[1]);
			fRec466[0] = (fTemp634 - ((fSlow974 * (fRec472[2] + (fRec472[0] + (2.0f * fRec472[1])))) + (((fRec466[2] * fSlow984) + fTemp635) / fSlow985)));
			float fTemp636 = (fSlow947 * fRec465[1]);
			fRec465[0] = ((((fTemp635 + (fRec466[0] * fSlow987)) + (fRec466[2] * fSlow988)) / fSlow985) - (((fRec465[2] * fSlow996) + fTemp636) / fSlow997));
			fRec464[0] = ((((fTemp636 + (fRec465[0] * fSlow999)) + (fRec465[2] * fSlow1000)) / fSlow997) - (fSlow1001 * ((fSlow1002 * fRec464[2]) + (fSlow1003 * fRec464[1]))));
			float fTemp637 = (fSlow943 * (fRec463[0] * (fRec464[2] + (fRec464[0] + (2.0f * fRec464[1])))));
			fRec473[0] = ((0.999000013f * fRec473[1]) + fSlow1005);
			fVec160[0] = fSlow1020;
			fVec161[0] = fSlow1022;
			int iTemp638 = (iSlow42 * ((fSlow1020 > fVec160[1]) + (iSlow1021 * (fSlow1022 > fVec161[1]))));
			iRec478[0] = ((iTemp638 > 0) ? 0 : std::min<int>(96000, (iRec478[1] + 1)));
			fRec479[0] = (iTemp638 ? fSlow1020 : fRec479[1]);
			float fTemp639 = ((iSlow1018 ? fSoundfile6ca_bu_ch2[(fSoundfile6ca_of2[2] + std::max<int>(0, std::min<int>(iRec478[0], iSlow1025)))] : (iSlow1019 ? fSoundfile6ca_bu_ch1[(fSoundfile6ca_of1[1] + std::max<int>(0, std::min<int>(iRec478[0], iSlow1024)))] : fSoundfile6ca_bu_ch0[(fSoundfile6ca_of0[0] + std::max<int>(0, std::min<int>(iRec478[0], iSlow1023)))])) * std::pow(10.0f, (0.144444451f * (fRec479[0] + -10.0f))));
			float fTemp640 = std::fabs((0.25f * fTemp639));
			fRec482[0] = std::max<float>(fTemp640, ((fRec482[1] * fSlow1032) + (fTemp640 * fSlow1033)));
			fRec481[0] = ((fRec481[1] * fSlow1029) + (fRec482[0] * fSlow1034));
			fRec480[0] = ((fConst27 * fRec480[1]) + (fSlow1026 * std::max<float>(((20.0f * std::log10(fRec481[0])) - fSlow1035), 0.0f)));
			float fTemp641 = (0.25f * (fTemp639 * std::pow(10.0f, (0.0500000007f * fRec480[0]))));
			fRec483[0] = (fTemp641 - (fSlow1039 * ((fSlow1040 * fRec483[2]) + (fSlow1041 * fRec483[1]))));
			float fTemp642 = (fSlow1016 * fRec477[1]);
			fRec477[0] = (fTemp641 - ((fSlow1039 * (fRec483[2] + (fRec483[0] + (2.0f * fRec483[1])))) + (((fRec477[2] * fSlow1049) + fTemp642) / fSlow1050)));
			float fTemp643 = (fSlow1013 * fRec476[1]);
			fRec476[0] = ((((fTemp642 + (fRec477[0] * fSlow1052)) + (fRec477[2] * fSlow1053)) / fSlow1050) - (((fRec476[2] * fSlow1061) + fTemp643) / fSlow1062));
			fRec475[0] = ((((fTemp643 + (fRec476[0] * fSlow1064)) + (fRec476[2] * fSlow1065)) / fSlow1062) - (fSlow1066 * ((fSlow1067 * fRec475[2]) + (fSlow1068 * fRec475[1]))));
			float fTemp644 = (fRec475[2] + (fRec475[0] + (2.0f * fRec475[1])));
			fVec162[(IOTA & 262143)] = (fSlow1010 * fTemp644);
			float fTemp645 = (2.0f * (fTemp501 * fRec474[1]));
			fRec474[0] = (fVec162[((IOTA - iTemp511) & 262143)] - (((fTemp520 * fRec474[2]) + fTemp645) / fTemp522));
			fRec484[0] = (fSlow1070 + (0.999000013f * fRec484[1]));
			float fTemp646 = (fSlow1072 + (fRec485[1] + -1.0f));
			int iTemp647 = (fTemp646 < 0.0f);
			float fTemp648 = (fSlow1072 + fRec485[1]);
			fRec485[0] = (iTemp647 ? fTemp648 : fTemp646);
			float fRec486 = (iTemp647 ? fTemp648 : (fSlow1072 + (fRec485[1] + (fSlow1073 * fTemp646))));
			fRec487[0] = (fSlow1077 + (0.999000013f * fRec487[1]));
			fRec489[0] = (fTemp531 - (fConst401 * ((fConst402 * fRec489[2]) + (fConst403 * fRec489[1]))));
			fRec488[0] = (fTemp531 - ((fConst401 * (fRec489[2] + (fRec489[0] + (2.0f * fRec489[1])))) + (fSlow1076 * ((fSlow1078 * fRec488[2]) + (fSlow1079 * fRec488[1])))));
			float fTemp649 = ((fRec484[0] * ((2.0f * fRec486) + -1.0f)) + (fSlow1076 * (fRec487[0] * (fRec488[2] + (fRec488[0] + (2.0f * fRec488[1]))))));
			float fTemp650 = (fRec492[1] + fSlow1081);
			fRec492[0] = (fTemp650 - std::floor(fTemp650));
			float fTemp651 = (std::fabs(ftbl2mydspSIG2[int((65536.0f * fRec492[0]))]) + 0.5f);
			float fTemp652 = std::max<float>((925.0f * fTemp651), 23.4489498f);
			float fTemp653 = std::max<float>(20.0f, std::fabs(fTemp652));
			fVec163[0] = fTemp653;
			float fTemp654 = (fRec491[1] + (fConst17 * fVec163[1]));
			fRec491[0] = (fTemp654 - std::floor(fTemp654));
			float fTemp655 = mydsp_faustpower2_f(((2.0f * fRec491[0]) + -1.0f));
			fVec164[0] = fTemp655;
			float fTemp656 = ((fTemp18 * (fTemp655 - fVec164[1])) / fTemp653);
			fVec165[(IOTA & 255)] = fTemp656;
			float fTemp657 = std::max<float>(0.0f, std::min<float>(2047.0f, (fConst26 / fTemp652)));
			int iTemp658 = int(fTemp657);
			float fTemp659 = std::floor(fTemp657);
			fRec490[0] = ((0.999000013f * fRec490[1]) + (fConst25 * ((fTemp656 - (fVec165[((IOTA - iTemp658) & 255)] * (fTemp659 + (1.0f - fTemp657)))) - ((fTemp657 - fTemp659) * fVec165[((IOTA - (iTemp658 + 1)) & 255)]))));
			fRec493[0] = ((0.999000013f * fRec493[1]) + fSlow1084);
			fRec495[0] = (fTemp532 - (fConst408 * ((fConst409 * fRec495[2]) + (fConst410 * fRec495[1]))));
			fVec166[0] = fSlow1085;
			int iTemp660 = (fSlow1085 > fVec166[1]);
			iVec167[0] = iTemp660;
			iRec496[0] = (((iRec496[1] + (iRec496[1] > 0)) * (iTemp660 <= iVec167[1])) + (iTemp660 > iVec167[1]));
			float fTemp661 = float(iRec496[0]);
			float fTemp662 = (fConst411 * fTemp661);
			float fTemp663 = (fConst408 * ((fRec495[2] + (fRec495[0] + (2.0f * fRec495[1]))) * std::max<float>(0.0f, std::min<float>(fTemp662, (2.0f - fTemp662)))));
			fRec494[0] = (fTemp663 - ((fConst413 * fRec494[1]) + (fConst414 * fRec494[2])));
			fRec497[0] = (fTemp663 - ((fConst417 * fRec497[1]) + (fConst418 * fRec497[2])));
			fRec498[0] = (fTemp663 - ((fConst421 * fRec498[1]) + (fConst422 * fRec498[2])));
			fRec499[0] = (fTemp663 - ((fConst425 * fRec499[1]) + (fConst426 * fRec499[2])));
			fRec500[0] = (fTemp663 - ((fConst429 * fRec500[1]) + (fConst430 * fRec500[2])));
			fRec501[0] = (fTemp663 - ((fConst433 * fRec501[1]) + (fConst434 * fRec501[2])));
			fRec502[0] = (fTemp663 - ((fConst437 * fRec502[1]) + (fConst438 * fRec502[2])));
			fRec503[0] = (fTemp663 - ((fConst441 * fRec503[1]) + (fConst442 * fRec503[2])));
			fRec504[0] = (fTemp663 - ((fConst445 * fRec504[1]) + (fConst446 * fRec504[2])));
			fRec505[0] = (fTemp663 - ((fConst449 * fRec505[1]) + (fConst450 * fRec505[2])));
			fRec506[0] = (fTemp663 - ((fConst453 * fRec506[1]) + (fConst454 * fRec506[2])));
			fRec507[0] = (fTemp663 - ((fConst457 * fRec507[1]) + (fConst458 * fRec507[2])));
			fRec508[0] = (fTemp663 - ((fConst461 * fRec508[1]) + (fConst462 * fRec508[2])));
			fRec509[0] = (fTemp663 - ((fConst465 * fRec509[1]) + (fConst466 * fRec509[2])));
			fRec510[0] = (fTemp663 - ((fConst469 * fRec510[1]) + (fConst470 * fRec510[2])));
			fRec511[0] = (fTemp663 - ((fConst473 * fRec511[1]) + (fConst474 * fRec511[2])));
			fRec512[0] = (fTemp663 - ((fConst477 * fRec512[1]) + (fConst478 * fRec512[2])));
			fRec513[0] = (fTemp663 - ((fConst481 * fRec513[1]) + (fConst482 * fRec513[2])));
			fRec514[0] = (fTemp663 - ((fConst485 * fRec514[1]) + (fConst486 * fRec514[2])));
			fRec515[0] = (fTemp663 - ((fConst489 * fRec515[1]) + (fConst490 * fRec515[2])));
			fRec516[0] = (fTemp663 - ((fConst493 * fRec516[1]) + (fConst494 * fRec516[2])));
			fRec517[0] = (fTemp663 - ((fConst497 * fRec517[1]) + (fConst498 * fRec517[2])));
			fRec518[0] = (fTemp663 - ((fConst501 * fRec518[1]) + (fConst502 * fRec518[2])));
			fRec519[0] = (fTemp663 - ((fConst505 * fRec519[1]) + (fConst506 * fRec519[2])));
			fRec520[0] = (fTemp663 - ((fConst509 * fRec520[1]) + (fConst510 * fRec520[2])));
			fRec521[0] = (fTemp663 - ((fConst513 * fRec521[1]) + (fConst514 * fRec521[2])));
			fRec522[0] = (fTemp663 - ((fConst517 * fRec522[1]) + (fConst518 * fRec522[2])));
			fRec523[0] = (fTemp663 - ((fConst521 * fRec523[1]) + (fConst522 * fRec523[2])));
			fRec524[0] = (fTemp663 - ((fConst525 * fRec524[1]) + (fConst526 * fRec524[2])));
			fRec525[0] = (fTemp663 - ((fConst529 * fRec525[1]) + (fConst530 * fRec525[2])));
			fRec526[0] = (fTemp663 - ((fConst533 * fRec526[1]) + (fConst534 * fRec526[2])));
			fRec527[0] = (fTemp663 - ((fConst537 * fRec527[1]) + (fConst538 * fRec527[2])));
			fRec528[0] = (fTemp663 - ((fConst541 * fRec528[1]) + (fConst542 * fRec528[2])));
			fRec529[0] = (fTemp663 - ((fConst545 * fRec529[1]) + (fConst546 * fRec529[2])));
			fRec530[0] = (fTemp663 - ((fConst549 * fRec530[1]) + (fConst550 * fRec530[2])));
			fRec531[0] = (fTemp663 - ((fConst553 * fRec531[1]) + (fConst554 * fRec531[2])));
			fRec532[0] = (fTemp663 - ((fConst557 * fRec532[1]) + (fConst558 * fRec532[2])));
			fRec533[0] = (fTemp663 - ((fConst561 * fRec533[1]) + (fConst562 * fRec533[2])));
			fRec534[0] = (fTemp663 - ((fConst565 * fRec534[1]) + (fConst566 * fRec534[2])));
			fRec535[0] = (fTemp663 - ((fConst569 * fRec535[1]) + (fConst570 * fRec535[2])));
			fRec536[0] = (fTemp663 - ((fConst573 * fRec536[1]) + (fConst574 * fRec536[2])));
			fRec537[0] = (fTemp663 - ((fConst577 * fRec537[1]) + (fConst578 * fRec537[2])));
			fRec538[0] = (fTemp663 - ((fConst581 * fRec538[1]) + (fConst582 * fRec538[2])));
			fRec539[0] = (fTemp663 - ((fConst585 * fRec539[1]) + (fConst586 * fRec539[2])));
			fRec540[0] = (fTemp663 - ((fConst589 * fRec540[1]) + (fConst590 * fRec540[2])));
			fRec541[0] = (fTemp663 - ((fConst593 * fRec541[1]) + (fConst594 * fRec541[2])));
			fRec542[0] = (fTemp663 - ((fConst597 * fRec542[1]) + (fConst598 * fRec542[2])));
			fRec543[0] = (fTemp663 - ((fConst601 * fRec543[1]) + (fConst602 * fRec543[2])));
			fRec544[0] = (fTemp663 - ((fConst605 * fRec544[1]) + (fConst606 * fRec544[2])));
			fRec545[0] = (fTemp663 - ((fConst609 * fRec545[1]) + (fConst610 * fRec545[2])));
			float fTemp664 = (0.112468265f * (((((((((((((((((((((((((((((((((((((((((((((((((((fConst405 * (fRec494[0] - fRec494[2])) + (fConst415 * (fRec497[0] - fRec497[2]))) + (fConst419 * (fRec498[0] - fRec498[2]))) + (fConst423 * (fRec499[0] - fRec499[2]))) + (fConst427 * (fRec500[0] - fRec500[2]))) + (fConst431 * (fRec501[0] - fRec501[2]))) + (fConst435 * (fRec502[0] - fRec502[2]))) + (fConst439 * (fRec503[0] - fRec503[2]))) + (fConst443 * (fRec504[0] - fRec504[2]))) + (fConst447 * (fRec505[0] - fRec505[2]))) + (fConst451 * (fRec506[0] - fRec506[2]))) + (fConst455 * (fRec507[0] - fRec507[2]))) + (fConst459 * (fRec508[0] - fRec508[2]))) + (fConst463 * (fRec509[0] - fRec509[2]))) + (fConst467 * (fRec510[0] - fRec510[2]))) + (fConst471 * (fRec511[0] - fRec511[2]))) + (fConst475 * (fRec512[0] - fRec512[2]))) + (fConst479 * (fRec513[0] - fRec513[2]))) + (fConst483 * (fRec514[0] - fRec514[2]))) + (fConst487 * (fRec515[0] - fRec515[2]))) + (fConst491 * (fRec516[0] - fRec516[2]))) + (fConst495 * (fRec517[0] - fRec517[2]))) + (fConst499 * (fRec518[0] - fRec518[2]))) + (fConst503 * (fRec519[0] - fRec519[2]))) + (fConst507 * (fRec520[0] - fRec520[2]))) + (fConst511 * (fRec521[0] - fRec521[2]))) + (fConst515 * (fRec522[0] - fRec522[2]))) + (fConst519 * (fRec523[0] - fRec523[2]))) + (fConst523 * (fRec524[0] - fRec524[2]))) + (fConst527 * (fRec525[0] - fRec525[2]))) + (fConst531 * (fRec526[0] - fRec526[2]))) + (fConst535 * (fRec527[0] - fRec527[2]))) + (fConst539 * (fRec528[0] - fRec528[2]))) + (fConst543 * (fRec529[0] - fRec529[2]))) + (fConst547 * (fRec530[0] - fRec530[2]))) + (fConst551 * (fRec531[0] - fRec531[2]))) + (fConst555 * (fRec532[0] - fRec532[2]))) + (fConst559 * (fRec533[0] - fRec533[2]))) + (fConst563 * (fRec534[0] - fRec534[2]))) + (fConst567 * (fRec535[0] - fRec535[2]))) + (fConst571 * (fRec536[0] - fRec536[2]))) + (fConst575 * (fRec537[0] - fRec537[2]))) + (fConst579 * (fRec538[0] - fRec538[2]))) + (fConst583 * (fRec539[0] - fRec539[2]))) + (fConst587 * (fRec540[0] - fRec540[2]))) + (fConst591 * (fRec541[0] - fRec541[2]))) + (fConst595 * (fRec542[0] - fRec542[2]))) + (fConst599 * (fRec543[0] - fRec543[2]))) + (fConst603 * (fRec544[0] - fRec544[2]))) + (fConst607 * (fRec545[0] - fRec545[2]))) * std::max<float>(0.0f, std::min<float>((fConst12 * fTemp661), ((fConst611 * (fConst11 - fTemp661)) + 1.0f)))));
			float fTemp665 = ((fRec5[0] * ((fRec6[0] * (((((fTemp594 + (fRec7[0] * fTemp597)) + (fRec7[2] * fTemp598)) * fTemp599) / fTemp595) + ((fConst100 * fRec400[0]) + (fConst397 * fRec400[2])))) + (fTemp637 + ((((fSlow721 * fTemp560) + (fSlow803 * fTemp562)) + (fSlow1004 * (fRec473[0] * ((fTemp645 + (fRec474[0] * fTemp524)) + (fTemp525 * fRec474[2]))))) / fTemp522)))) + (fSlow1069 * ((fTemp649 + (fConst404 * ((fRec490[0] * fRec493[0]) * fTemp651))) + fTemp664)));
			float fTemp666 = std::fabs(fTemp665);
			fRec548[0] = std::max<float>(fTemp666, ((fConst614 * fRec548[1]) + (fConst615 * fTemp666)));
			fRec547[0] = ((fConst612 * fRec547[1]) + (fConst613 * fRec548[0]));
			fRec546[0] = ((fConst27 * fRec546[1]) + (fConst28 * (0.0f - (0.00990098994f * std::max<float>((20.0f * (std::log10(fRec547[0]) + 1.0f)), 0.0f)))));
			float fTemp667 = (fTemp665 * std::pow(10.0f, (0.0500000007f * fRec546[0])));
			float fTemp668 = std::fabs(fTemp667);
			fRec551[0] = std::max<float>(fTemp668, ((fConst618 * fRec551[1]) + (fConst619 * fTemp668)));
			fRec550[0] = ((fConst616 * fRec550[1]) + (fConst617 * fRec551[0]));
			fRec549[0] = ((fConst27 * fRec549[1]) + (fConst28 * (0.0f - (0.0909090936f * std::max<float>(((20.0f * std::log10(fRec550[0])) + 5.0f), 0.0f)))));
			float fTemp669 = (1.25892544f * (fTemp667 * std::pow(10.0f, (0.0500000007f * fRec549[0]))));
			fRec552[0] = (fTemp669 - (fSlow1089 * ((fSlow1090 * fRec552[2]) + (fSlow1091 * fRec552[1]))));
			float fTemp670 = (fSlow20 * fRec4[1]);
			fRec4[0] = (fTemp669 - ((fSlow1089 * (fRec552[2] + (fRec552[0] + (2.0f * fRec552[1])))) + (((fRec4[2] * fSlow1099) + fTemp670) / fSlow1100)));
			float fTemp671 = (fSlow17 * fRec3[1]);
			fRec3[0] = ((((fTemp670 + (fRec4[0] * fSlow1102)) + (fRec4[2] * fSlow1103)) / fSlow1100) - (((fRec3[2] * fSlow1111) + fTemp671) / fSlow1112));
			fRec2[0] = ((((fTemp671 + (fRec3[0] * fSlow1114)) + (fRec3[2] * fSlow1115)) / fSlow1112) - (fSlow14 * ((fSlow1116 * fRec2[2]) + (fSlow1117 * fRec2[1]))));
			fRec553[0] = (fSlow1119 + (0.999000013f * fRec553[1]));
			float fTemp672 = std::tan((fConst8 * fRec553[0]));
			float fTemp673 = (1.0f / fTemp672);
			float fTemp674 = (((fTemp673 - fSlow1120) / fTemp672) + 1.0f);
			float fTemp675 = (1.0f - (1.0f / mydsp_faustpower2_f(fTemp672)));
			float fTemp676 = (((fSlow1120 + fTemp673) / fTemp672) + 1.0f);
			fRec1[0] = ((fSlow14 * (fRec2[2] + (fRec2[0] + (2.0f * fRec2[1])))) - (((fRec1[2] * fTemp674) + (2.0f * (fRec1[1] * fTemp675))) / fTemp676));
			float fTemp677 = (fRec0[0] * (fRec1[2] + (fRec1[0] + (2.0f * fRec1[1]))));
			float fTemp678 = std::fabs((fSlow2 * (fTemp677 / fTemp676)));
			fRec556[0] = std::max<float>(fTemp678, ((fConst27 * fRec556[1]) + (fConst28 * fTemp678)));
			fRec555[0] = ((fConst18 * fRec555[1]) + (fConst19 * fRec556[0]));
			fRec554[0] = ((fConst27 * fRec554[1]) + (fConst28 * (0.0f - (0.899999976f * std::max<float>((20.0f * std::log10(fRec555[0])), 0.0f)))));
			output0[i] = FAUSTFLOAT((fSlow1 * std::max<float>(-1.0f, std::min<float>(1.0f, (fSlow2 * ((fTemp677 * std::pow(10.0f, (0.0500000007f * fRec554[0]))) / fTemp676))))));
			fRec557[0] = ((0.999000013f * fRec557[1]) + fSlow1122);
			fRec567[0] = (fRec566[((IOTA - iSlow873) & 131071)] - (fConst64 * ((((fConst69 * fRec567[1]) + (fConst70 * fRec567[2])) + (fConst71 * fRec567[3])) + (fConst72 * fRec567[4]))));
			float fTemp679 = (fRec568[1] + (fConst17 * (fRec140[0] * ((fSlow66 * (fTemp325 * ((fRec136[0] * (fTemp327 + (6.86000013f * (fTemp326 * ((0.200000003f * (float(input4[i]) + -5.0f)) + 1.0f))))) + 2.4000001f))) + 1.0f))));
			fRec568[0] = (fTemp679 - std::floor(fTemp679));
			float fTemp680 = (fRec569[1] + (fConst17 * (fRec140[0] * ((fSlow269 * (fTemp344 * ((fRec143[0] * (fTemp327 + (10.0f * (fTemp326 * ((0.200000003f * (float(input5[i]) + -5.0f)) + 1.0f))))) + 10.0f))) + 1.0f))));
			fRec569[0] = (fTemp680 - std::floor(fTemp680));
			fRec566[(IOTA & 131071)] = ((fConst60 * (((fConst62 * fRec567[2]) + (fConst52 * fRec567[0])) + (fConst52 * fRec567[4]))) + (fTemp545 * (iSlow259 ? (fRec143[0] * ftbl2mydspSIG2[int((65536.0f * fRec569[0]))]) : (iSlow260 ? (fRec136[0] * ftbl2mydspSIG2[int((65536.0f * fRec568[0]))]) : fTemp310))));
			float fTemp681 = fRec566[((IOTA - 0) & 131071)];
			float fTemp682 = std::fabs((0.25f * fTemp681));
			fRec572[0] = std::max<float>(fTemp682, ((fSlow276 * fRec572[1]) + (fSlow277 * fTemp682)));
			fRec571[0] = ((fSlow273 * fRec571[1]) + (fRec572[0] * fSlow278));
			fRec570[0] = ((fConst27 * fRec570[1]) + (fSlow270 * std::max<float>(((20.0f * std::log10(fRec571[0])) - fSlow279), 0.0f)));
			float fTemp683 = (0.25f * (fTemp681 * std::pow(10.0f, (0.0500000007f * fRec570[0]))));
			fRec573[0] = (fTemp683 - (fSlow283 * ((fSlow284 * fRec573[2]) + (fSlow285 * fRec573[1]))));
			float fTemp684 = (fSlow253 * fRec565[1]);
			fRec565[0] = (fTemp683 - ((fSlow283 * (fRec573[2] + (fRec573[0] + (2.0f * fRec573[1])))) + (((fSlow293 * fRec565[2]) + fTemp684) / fSlow294)));
			float fTemp685 = (fSlow250 * fRec564[1]);
			fRec564[0] = ((((fTemp684 + (fRec565[0] * fSlow296)) + (fSlow297 * fRec565[2])) / fSlow294) - (((fSlow305 * fRec564[2]) + fTemp685) / fSlow306));
			fRec563[0] = ((((fTemp685 + (fRec564[0] * fSlow308)) + (fSlow309 * fRec564[2])) / fSlow306) - (fSlow310 * ((fSlow311 * fRec563[2]) + (fSlow312 * fRec563[1]))));
			fRec574[0] = ((0.370000005f * (fRec187[0] - fRec188[0])) - (fConst394 * ((fConst395 * fRec574[1]) + (fConst396 * fRec574[2]))));
			float fTemp686 = (2.0f * (fTemp593 * fRec562[1]));
			fRec562[0] = ((((fSlow246 * (fRec114[0] * (fRec563[2] + (fRec563[0] + (2.0f * fRec563[1]))))) + (fTemp497 + (fTemp191 + fTemp460))) + (fRec6[0] * ((fConst100 * fRec574[0]) + (fConst397 * fRec574[2])))) - (((fTemp592 * fRec562[2]) + fTemp686) / fTemp595));
			fRec575[0] = ((0.370000005f * (fRec402[0] - fRec403[0])) - (fConst394 * ((fConst395 * fRec575[1]) + (fConst396 * fRec575[2]))));
			fVec168[(IOTA & 262143)] = (fSlow1123 * fTemp644);
			float fTemp687 = (2.0f * (fTemp501 * fRec576[1]));
			fRec576[0] = (fVec168[((IOTA - iTemp511) & 262143)] - (((fTemp520 * fRec576[2]) + fTemp687) / fTemp522));
			fRec577[0] = ((0.999000013f * fRec577[1]) + fSlow1124);
			float fTemp688 = ((fRec5[0] * ((fRec6[0] * (((fTemp599 * ((fTemp686 + (fRec562[0] * fTemp597)) + (fTemp598 * fRec562[2]))) / fTemp595) + ((fConst100 * fRec575[0]) + (fConst397 * fRec575[2])))) + (fTemp637 + ((((fSlow721 * fTemp526) + (fSlow803 * fTemp543)) + (fSlow1004 * (fRec473[0] * ((fTemp687 + (fRec576[0] * fTemp524)) + (fTemp525 * fRec576[2]))))) / fTemp522)))) + (fSlow1069 * ((fConst404 * ((fRec490[0] * fRec577[0]) * fTemp651)) + (fTemp649 + fTemp664))));
			float fTemp689 = std::fabs(fTemp688);
			fRec580[0] = std::max<float>(fTemp689, ((fConst614 * fRec580[1]) + (fConst615 * fTemp689)));
			fRec579[0] = ((fConst612 * fRec579[1]) + (fConst613 * fRec580[0]));
			fRec578[0] = ((fConst27 * fRec578[1]) + (fConst28 * (0.0f - (0.00990098994f * std::max<float>((20.0f * (std::log10(fRec579[0]) + 1.0f)), 0.0f)))));
			float fTemp690 = (fTemp688 * std::pow(10.0f, (0.0500000007f * fRec578[0])));
			float fTemp691 = std::fabs(fTemp690);
			fRec583[0] = std::max<float>(fTemp691, ((fConst618 * fRec583[1]) + (fConst619 * fTemp691)));
			fRec582[0] = ((fConst616 * fRec582[1]) + (fConst617 * fRec583[0]));
			fRec581[0] = ((fConst27 * fRec581[1]) + (fConst28 * (0.0f - (0.0909090936f * std::max<float>(((20.0f * std::log10(fRec582[0])) + 5.0f), 0.0f)))));
			float fTemp692 = (1.25892544f * (fTemp690 * std::pow(10.0f, (0.0500000007f * fRec581[0]))));
			fRec584[0] = (fTemp692 - (fSlow1089 * ((fSlow1090 * fRec584[2]) + (fSlow1091 * fRec584[1]))));
			float fTemp693 = (fSlow20 * fRec561[1]);
			fRec561[0] = (fTemp692 - ((fSlow1089 * (fRec584[2] + (fRec584[0] + (2.0f * fRec584[1])))) + (((fSlow1099 * fRec561[2]) + fTemp693) / fSlow1100)));
			float fTemp694 = (fSlow17 * fRec560[1]);
			fRec560[0] = ((((fTemp693 + (fRec561[0] * fSlow1102)) + (fSlow1103 * fRec561[2])) / fSlow1100) - (((fSlow1111 * fRec560[2]) + fTemp694) / fSlow1112));
			fRec559[0] = ((((fTemp694 + (fRec560[0] * fSlow1114)) + (fSlow1115 * fRec560[2])) / fSlow1112) - (fSlow14 * ((fSlow1116 * fRec559[2]) + (fSlow1117 * fRec559[1]))));
			fRec558[0] = ((fSlow14 * (fRec559[2] + (fRec559[0] + (2.0f * fRec559[1])))) - (((fTemp674 * fRec558[2]) + (2.0f * (fTemp675 * fRec558[1]))) / fTemp676));
			float fTemp695 = (fRec557[0] * (fRec558[2] + (fRec558[0] + (2.0f * fRec558[1]))));
			float fTemp696 = std::fabs((fSlow2 * (fTemp695 / fTemp676)));
			fRec587[0] = std::max<float>(fTemp696, ((fConst27 * fRec587[1]) + (fConst28 * fTemp696)));
			fRec586[0] = ((fConst18 * fRec586[1]) + (fConst19 * fRec587[0]));
			fRec585[0] = ((fConst27 * fRec585[1]) + (fConst28 * (0.0f - (0.899999976f * std::max<float>((20.0f * std::log10(fRec586[0])), 0.0f)))));
			output1[i] = FAUSTFLOAT((fSlow1121 * std::max<float>(-1.0f, std::min<float>(1.0f, (fSlow2 * ((fTemp695 * std::pow(10.0f, (0.0500000007f * fRec585[0]))) / fTemp676))))));
			iVec0[1] = iVec0[0];
			fRec0[1] = fRec0[0];
			fRec5[1] = fRec5[0];
			fRec6[1] = fRec6[0];
			fRec8[1] = fRec8[0];
			fVec1[1] = fVec1[0];
			fVec2[1] = fVec2[0];
			iVec3[1] = iVec3[0];
			iRec13[1] = iRec13[0];
			fRec12[1] = fRec12[0];
			iRec15[1] = iRec15[0];
			fRec17[1] = fRec17[0];
			fRec16[1] = fRec16[0];
			fRec14[2] = fRec14[1];
			fRec14[1] = fRec14[0];
			iRec20[1] = iRec20[0];
			fVec4[1] = fVec4[0];
			iVec5[1] = iVec5[0];
			iRec19[1] = iRec19[0];
			iRec21[1] = iRec21[0];
			fRec18[1] = fRec18[0];
			fRec24[1] = fRec24[0];
			fVec6[1] = fVec6[0];
			fRec26[1] = fRec26[0];
			fVec7[1] = fVec7[0];
			IOTA = (IOTA + 1);
			fRec25[1] = fRec25[0];
			fRec23[1] = fRec23[0];
			fRec27[1] = fRec27[0];
			fRec28[1] = fRec28[0];
			fRec29[1] = fRec29[0];
			fVec9[1] = fVec9[0];
			fVec10[1] = fVec10[0];
			iVec11[1] = iVec11[0];
			iRec31[1] = iRec31[0];
			fRec30[1] = fRec30[0];
			iRec33[1] = iRec33[0];
			fRec35[1] = fRec35[0];
			fRec34[1] = fRec34[0];
			fRec32[2] = fRec32[1];
			fRec32[1] = fRec32[0];
			iRec38[1] = iRec38[0];
			fVec12[1] = fVec12[0];
			iVec13[1] = iVec13[0];
			iRec37[1] = iRec37[0];
			iRec39[1] = iRec39[0];
			fRec36[1] = fRec36[0];
			fRec41[1] = fRec41[0];
			fVec14[1] = fVec14[0];
			fRec43[1] = fRec43[0];
			fVec15[1] = fVec15[0];
			fRec42[1] = fRec42[0];
			fRec40[1] = fRec40[0];
			fRec44[1] = fRec44[0];
			fRec45[1] = fRec45[0];
			fRec46[1] = fRec46[0];
			fVec17[1] = fVec17[0];
			fVec18[1] = fVec18[0];
			iVec19[1] = iVec19[0];
			iRec48[1] = iRec48[0];
			fRec47[1] = fRec47[0];
			iRec50[1] = iRec50[0];
			fRec52[1] = fRec52[0];
			fRec51[1] = fRec51[0];
			fRec49[2] = fRec49[1];
			fRec49[1] = fRec49[0];
			iRec55[1] = iRec55[0];
			fVec20[1] = fVec20[0];
			iVec21[1] = iVec21[0];
			iRec54[1] = iRec54[0];
			iRec56[1] = iRec56[0];
			fRec53[1] = fRec53[0];
			fRec58[1] = fRec58[0];
			fVec22[1] = fVec22[0];
			fRec60[1] = fRec60[0];
			fVec23[1] = fVec23[0];
			fRec59[1] = fRec59[0];
			fRec57[1] = fRec57[0];
			fRec61[1] = fRec61[0];
			fRec62[1] = fRec62[0];
			fRec63[1] = fRec63[0];
			fVec25[1] = fVec25[0];
			fVec26[1] = fVec26[0];
			iVec27[1] = iVec27[0];
			iRec65[1] = iRec65[0];
			fRec64[1] = fRec64[0];
			iRec67[1] = iRec67[0];
			fRec69[1] = fRec69[0];
			fRec68[1] = fRec68[0];
			fRec66[2] = fRec66[1];
			fRec66[1] = fRec66[0];
			iRec72[1] = iRec72[0];
			fVec28[1] = fVec28[0];
			iVec29[1] = iVec29[0];
			iRec71[1] = iRec71[0];
			iRec73[1] = iRec73[0];
			fRec70[1] = fRec70[0];
			fRec75[1] = fRec75[0];
			fVec30[1] = fVec30[0];
			fRec77[1] = fRec77[0];
			fVec31[1] = fVec31[0];
			fRec76[1] = fRec76[0];
			fRec74[1] = fRec74[0];
			fRec78[1] = fRec78[0];
			fRec79[1] = fRec79[0];
			fRec80[1] = fRec80[0];
			fRec83[1] = fRec83[0];
			fRec82[1] = fRec82[0];
			fRec81[1] = fRec81[0];
			fRec84[2] = fRec84[1];
			fRec84[1] = fRec84[0];
			fRec11[2] = fRec11[1];
			fRec11[1] = fRec11[0];
			fRec10[2] = fRec10[1];
			fRec10[1] = fRec10[0];
			fRec9[2] = fRec9[1];
			fRec9[1] = fRec9[0];
			fRec85[1] = fRec85[0];
			fVec33[1] = fVec33[0];
			fVec34[1] = fVec34[0];
			iVec35[1] = iVec35[0];
			fRec89[1] = fRec89[0];
			iRec91[1] = iRec91[0];
			fRec90[1] = fRec90[0];
			fRec96[1] = fRec96[0];
			fRec95[1] = fRec95[0];
			fRec94[1] = fRec94[0];
			fRec93[1] = fRec93[0];
			fRec92[1] = fRec92[0];
			fVec36[1] = fVec36[0];
			iRec99[1] = iRec99[0];
			fRec98[1] = fRec98[0];
			fRec97[1] = fRec97[0];
			fRec101[1] = fRec101[0];
			fVec37[1] = fVec37[0];
			fRec103[1] = fRec103[0];
			fVec38[1] = fVec38[0];
			fRec102[1] = fRec102[0];
			fRec100[1] = fRec100[0];
			fVec40[1] = fVec40[0];
			iRec106[1] = iRec106[0];
			fRec105[1] = fRec105[0];
			fRec104[1] = fRec104[0];
			fVec41[1] = fVec41[0];
			fRec109[1] = fRec109[0];
			fVec42[1] = fVec42[0];
			fRec108[1] = fRec108[0];
			fRec107[1] = fRec107[0];
			fRec112[1] = fRec112[0];
			fRec111[1] = fRec111[0];
			fRec110[1] = fRec110[0];
			fRec113[2] = fRec113[1];
			fRec113[1] = fRec113[0];
			fRec88[2] = fRec88[1];
			fRec88[1] = fRec88[0];
			fRec87[2] = fRec87[1];
			fRec87[1] = fRec87[0];
			fRec86[2] = fRec86[1];
			fRec86[1] = fRec86[0];
			fRec114[1] = fRec114[0];
			for (int j0 = 4; (j0 > 0); j0 = (j0 - 1)) {
				fRec119[j0] = fRec119[(j0 - 1)];
			}
			fVec44[1] = fVec44[0];
			fVec45[1] = fVec45[0];
			iVec46[1] = iVec46[0];
			fRec120[1] = fRec120[0];
			fRec123[1] = fRec123[0];
			fRec122[1] = fRec122[0];
			fRec125[1] = fRec125[0];
			fRec124[1] = fRec124[0];
			fRec127[1] = fRec127[0];
			iRec130[1] = iRec130[0];
			fRec129[1] = fRec129[0];
			fRec126[2] = fRec126[1];
			fRec126[1] = fRec126[0];
			fRec131[2] = fRec131[1];
			fRec131[1] = fRec131[0];
			fRec132[2] = fRec132[1];
			fRec132[1] = fRec132[0];
			fRec133[2] = fRec133[1];
			fRec133[1] = fRec133[0];
			fRec134[2] = fRec134[1];
			fRec134[1] = fRec134[0];
			iRec135[1] = iRec135[0];
			fRec121[2] = fRec121[1];
			fRec121[1] = fRec121[0];
			fVec47[1] = fVec47[0];
			iVec48[1] = iVec48[0];
			iRec137[1] = iRec137[0];
			iRec138[1] = iRec138[0];
			fRec136[1] = fRec136[0];
			fRec140[1] = fRec140[0];
			fVec49[1] = fVec49[0];
			fRec142[1] = fRec142[0];
			fVec50[1] = fVec50[0];
			fRec141[1] = fRec141[0];
			fRec139[1] = fRec139[0];
			fVec52[1] = fVec52[0];
			iRec145[1] = iRec145[0];
			fRec144[1] = fRec144[0];
			fRec143[1] = fRec143[0];
			fVec53[1] = fVec53[0];
			fRec148[1] = fRec148[0];
			fVec54[1] = fVec54[0];
			fRec147[1] = fRec147[0];
			fRec146[1] = fRec146[0];
			fRec151[1] = fRec151[0];
			fRec150[1] = fRec150[0];
			fRec149[1] = fRec149[0];
			fRec152[2] = fRec152[1];
			fRec152[1] = fRec152[0];
			fRec117[2] = fRec117[1];
			fRec117[1] = fRec117[0];
			fRec116[2] = fRec116[1];
			fRec116[1] = fRec116[0];
			fRec115[2] = fRec115[1];
			fRec115[1] = fRec115[0];
			fRec153[1] = fRec153[0];
			for (int j1 = 4; (j1 > 0); j1 = (j1 - 1)) {
				fRec158[j1] = fRec158[(j1 - 1)];
			}
			iRec160[1] = iRec160[0];
			fVec56[1] = fVec56[0];
			fVec57[1] = fVec57[0];
			iVec58[1] = iVec58[0];
			iRec161[1] = iRec161[0];
			fVec59[1] = fVec59[0];
			fVec60[1] = fVec60[0];
			fRec163[1] = fRec163[0];
			fVec61[1] = fVec61[0];
			fRec162[1] = fRec162[0];
			fRec164[1] = fRec164[0];
			fVec64[1] = fVec64[0];
			fVec65[1] = fVec65[0];
			fRec168[1] = fRec168[0];
			fVec66[1] = fVec66[0];
			fRec167[1] = fRec167[0];
			fRec169[1] = fRec169[0];
			fVec69[1] = fVec69[0];
			fVec70[1] = fVec70[0];
			fRec173[1] = fRec173[0];
			fVec71[1] = fVec71[0];
			fRec172[1] = fRec172[0];
			fRec174[1] = fRec174[0];
			fVec74[1] = fVec74[0];
			fVec75[1] = fVec75[0];
			fRec178[1] = fRec178[0];
			fVec76[1] = fVec76[0];
			fRec177[1] = fRec177[0];
			fRec179[1] = fRec179[0];
			fRec183[1] = fRec183[0];
			fRec182[1] = fRec182[0];
			fRec181[1] = fRec181[0];
			fRec184[2] = fRec184[1];
			fRec184[1] = fRec184[0];
			fRec156[2] = fRec156[1];
			fRec156[1] = fRec156[0];
			fRec155[2] = fRec155[1];
			fRec155[1] = fRec155[0];
			fRec154[2] = fRec154[1];
			fRec154[1] = fRec154[0];
			fRec197[1] = fRec197[0];
			fRec196[1] = fRec196[0];
			iRec202[1] = iRec202[0];
			fRec201[2] = fRec201[1];
			fRec201[1] = fRec201[0];
			fRec204[1] = fRec204[0];
			fVec79[1] = fVec79[0];
			fRec206[1] = fRec206[0];
			fVec80[1] = fVec80[0];
			fRec205[1] = fRec205[0];
			fRec203[1] = fRec203[0];
			fRec207[1] = fRec207[0];
			iRec209[1] = iRec209[0];
			fRec208[2] = fRec208[1];
			fRec208[1] = fRec208[0];
			fRec211[1] = fRec211[0];
			fVec82[1] = fVec82[0];
			fRec213[1] = fRec213[0];
			fVec83[1] = fVec83[0];
			fRec212[1] = fRec212[0];
			fRec210[1] = fRec210[0];
			fRec214[1] = fRec214[0];
			iRec216[1] = iRec216[0];
			fRec215[2] = fRec215[1];
			fRec215[1] = fRec215[0];
			fRec218[1] = fRec218[0];
			fVec85[1] = fVec85[0];
			fRec220[1] = fRec220[0];
			fVec86[1] = fVec86[0];
			fRec219[1] = fRec219[0];
			fRec217[1] = fRec217[0];
			fRec221[1] = fRec221[0];
			iRec223[1] = iRec223[0];
			fRec222[2] = fRec222[1];
			fRec222[1] = fRec222[0];
			fRec225[1] = fRec225[0];
			fVec88[1] = fVec88[0];
			fRec227[1] = fRec227[0];
			fVec89[1] = fVec89[0];
			fRec226[1] = fRec226[0];
			fRec224[1] = fRec224[0];
			fRec228[1] = fRec228[0];
			fRec231[1] = fRec231[0];
			fRec230[1] = fRec230[0];
			fRec229[1] = fRec229[0];
			fRec232[2] = fRec232[1];
			fRec232[1] = fRec232[0];
			fRec200[2] = fRec200[1];
			fRec200[1] = fRec200[0];
			fRec199[2] = fRec199[1];
			fRec199[1] = fRec199[0];
			fRec198[2] = fRec198[1];
			fRec198[1] = fRec198[0];
			for (int j2 = 4; (j2 > 0); j2 = (j2 - 1)) {
				fRec237[j2] = fRec237[(j2 - 1)];
			}
			fVec91[1] = fVec91[0];
			fVec92[1] = fVec92[0];
			fRec240[1] = fRec240[0];
			fVec93[1] = fVec93[0];
			fRec239[1] = fRec239[0];
			fRec241[1] = fRec241[0];
			fVec96[1] = fVec96[0];
			fVec97[1] = fVec97[0];
			fRec245[1] = fRec245[0];
			fVec98[1] = fVec98[0];
			fRec244[1] = fRec244[0];
			fRec246[1] = fRec246[0];
			fVec101[1] = fVec101[0];
			fVec102[1] = fVec102[0];
			fRec250[1] = fRec250[0];
			fVec103[1] = fVec103[0];
			fRec249[1] = fRec249[0];
			fRec251[1] = fRec251[0];
			fVec106[1] = fVec106[0];
			fVec107[1] = fVec107[0];
			fRec255[1] = fRec255[0];
			fVec108[1] = fVec108[0];
			fRec254[1] = fRec254[0];
			fRec256[1] = fRec256[0];
			fRec260[1] = fRec260[0];
			fRec259[1] = fRec259[0];
			fRec258[1] = fRec258[0];
			fRec261[2] = fRec261[1];
			fRec261[1] = fRec261[0];
			fRec235[2] = fRec235[1];
			fRec235[1] = fRec235[0];
			fRec234[2] = fRec234[1];
			fRec234[1] = fRec234[0];
			fRec233[2] = fRec233[1];
			fRec233[1] = fRec233[0];
			fRec262[1] = fRec262[0];
			fRec263[1] = fRec263[0];
			fVec110[1] = fVec110[0];
			fVec111[1] = fVec111[0];
			iRec268[1] = iRec268[0];
			iVec112[1] = iVec112[0];
			iRec269[1] = iRec269[0];
			fRec270[1] = fRec270[0];
			fRec273[1] = fRec273[0];
			fRec272[1] = fRec272[0];
			fRec271[1] = fRec271[0];
			fRec274[2] = fRec274[1];
			fRec274[1] = fRec274[0];
			fRec267[2] = fRec267[1];
			fRec267[1] = fRec267[0];
			fRec266[2] = fRec266[1];
			fRec266[1] = fRec266[0];
			fRec265[2] = fRec265[1];
			fRec265[1] = fRec265[0];
			fRec275[1] = fRec275[0];
			fRec264[2] = fRec264[1];
			fRec264[1] = fRec264[0];
			fRec276[1] = fRec276[0];
			fVec114[1] = fVec114[0];
			fVec115[1] = fVec115[0];
			iVec116[1] = iVec116[0];
			iRec281[1] = iRec281[0];
			iRec282[1] = iRec282[0];
			iRec283[1] = iRec283[0];
			fRec287[1] = fRec287[0];
			fRec285[1] = fRec285[0];
			fRec288[1] = fRec288[0];
			fRec291[2] = fRec291[1];
			fRec291[1] = fRec291[0];
			fRec290[2] = fRec290[1];
			fRec290[1] = fRec290[0];
			iRec292[1] = iRec292[0];
			fRec289[2] = fRec289[1];
			fRec289[1] = fRec289[0];
			fRec293[2] = fRec293[1];
			fRec293[1] = fRec293[0];
			fRec294[2] = fRec294[1];
			fRec294[1] = fRec294[0];
			fRec295[2] = fRec295[1];
			fRec295[1] = fRec295[0];
			fRec296[2] = fRec296[1];
			fRec296[1] = fRec296[0];
			fRec297[2] = fRec297[1];
			fRec297[1] = fRec297[0];
			fRec298[2] = fRec298[1];
			fRec298[1] = fRec298[0];
			fRec299[2] = fRec299[1];
			fRec299[1] = fRec299[0];
			fRec300[2] = fRec300[1];
			fRec300[1] = fRec300[0];
			fRec301[2] = fRec301[1];
			fRec301[1] = fRec301[0];
			fRec302[2] = fRec302[1];
			fRec302[1] = fRec302[0];
			fRec303[2] = fRec303[1];
			fRec303[1] = fRec303[0];
			fRec304[2] = fRec304[1];
			fRec304[1] = fRec304[0];
			fRec305[2] = fRec305[1];
			fRec305[1] = fRec305[0];
			fRec306[2] = fRec306[1];
			fRec306[1] = fRec306[0];
			fRec307[2] = fRec307[1];
			fRec307[1] = fRec307[0];
			fRec308[2] = fRec308[1];
			fRec308[1] = fRec308[0];
			fRec309[2] = fRec309[1];
			fRec309[1] = fRec309[0];
			fRec310[2] = fRec310[1];
			fRec310[1] = fRec310[0];
			fRec311[2] = fRec311[1];
			fRec311[1] = fRec311[0];
			fRec312[2] = fRec312[1];
			fRec312[1] = fRec312[0];
			fRec313[2] = fRec313[1];
			fRec313[1] = fRec313[0];
			fRec314[2] = fRec314[1];
			fRec314[1] = fRec314[0];
			fRec315[2] = fRec315[1];
			fRec315[1] = fRec315[0];
			fRec316[2] = fRec316[1];
			fRec316[1] = fRec316[0];
			fRec317[2] = fRec317[1];
			fRec317[1] = fRec317[0];
			fRec318[2] = fRec318[1];
			fRec318[1] = fRec318[0];
			fRec319[2] = fRec319[1];
			fRec319[1] = fRec319[0];
			fRec320[2] = fRec320[1];
			fRec320[1] = fRec320[0];
			fRec321[2] = fRec321[1];
			fRec321[1] = fRec321[0];
			fRec322[2] = fRec322[1];
			fRec322[1] = fRec322[0];
			fRec323[2] = fRec323[1];
			fRec323[1] = fRec323[0];
			fRec324[2] = fRec324[1];
			fRec324[1] = fRec324[0];
			fRec325[2] = fRec325[1];
			fRec325[1] = fRec325[0];
			fRec326[2] = fRec326[1];
			fRec326[1] = fRec326[0];
			fRec327[2] = fRec327[1];
			fRec327[1] = fRec327[0];
			fRec328[2] = fRec328[1];
			fRec328[1] = fRec328[0];
			fRec329[2] = fRec329[1];
			fRec329[1] = fRec329[0];
			fRec330[2] = fRec330[1];
			fRec330[1] = fRec330[0];
			fRec331[2] = fRec331[1];
			fRec331[1] = fRec331[0];
			fRec332[2] = fRec332[1];
			fRec332[1] = fRec332[0];
			fRec333[2] = fRec333[1];
			fRec333[1] = fRec333[0];
			fRec334[2] = fRec334[1];
			fRec334[1] = fRec334[0];
			fRec335[2] = fRec335[1];
			fRec335[1] = fRec335[0];
			fRec336[2] = fRec336[1];
			fRec336[1] = fRec336[0];
			fRec337[2] = fRec337[1];
			fRec337[1] = fRec337[0];
			fRec338[2] = fRec338[1];
			fRec338[1] = fRec338[0];
			fRec339[2] = fRec339[1];
			fRec339[1] = fRec339[0];
			fRec340[2] = fRec340[1];
			fRec340[1] = fRec340[0];
			fRec341[2] = fRec341[1];
			fRec341[1] = fRec341[0];
			fVec118[1] = fVec118[0];
			fRec286[1] = fRec286[0];
			fRec342[1] = fRec342[0];
			fRec345[1] = fRec345[0];
			fRec344[1] = fRec344[0];
			fRec343[1] = fRec343[0];
			fRec346[2] = fRec346[1];
			fRec346[1] = fRec346[0];
			fRec280[2] = fRec280[1];
			fRec280[1] = fRec280[0];
			fRec279[2] = fRec279[1];
			fRec279[1] = fRec279[0];
			fRec278[2] = fRec278[1];
			fRec278[1] = fRec278[0];
			fRec277[2] = fRec277[1];
			fRec277[1] = fRec277[0];
			for (int j3 = 4; (j3 > 0); j3 = (j3 - 1)) {
				fRec351[j3] = fRec351[(j3 - 1)];
			}
			fRec352[1] = fRec352[0];
			fRec353[1] = fRec353[0];
			fRec356[1] = fRec356[0];
			fRec355[1] = fRec355[0];
			fRec354[1] = fRec354[0];
			fRec357[2] = fRec357[1];
			fRec357[1] = fRec357[0];
			fRec349[2] = fRec349[1];
			fRec349[1] = fRec349[0];
			fRec348[2] = fRec348[1];
			fRec348[1] = fRec348[0];
			fRec347[2] = fRec347[1];
			fRec347[1] = fRec347[0];
			fRec194[1] = fRec194[0];
			fRec361[1] = fRec361[0];
			fRec360[1] = fRec360[0];
			fRec358[1] = fRec358[0];
			fRec365[1] = fRec365[0];
			fRec364[1] = fRec364[0];
			fRec362[1] = fRec362[0];
			fRec369[1] = fRec369[0];
			fRec368[1] = fRec368[0];
			fRec366[1] = fRec366[0];
			fRec373[1] = fRec373[0];
			fRec372[1] = fRec372[0];
			fRec374[2] = fRec374[1];
			fRec374[1] = fRec374[0];
			fRec375[2] = fRec375[1];
			fRec375[1] = fRec375[0];
			for (int j4 = 4; (j4 > 0); j4 = (j4 - 1)) {
				fRec380[j4] = fRec380[(j4 - 1)];
			}
			fRec381[1] = fRec381[0];
			fRec382[1] = fRec382[0];
			fRec385[1] = fRec385[0];
			fRec384[1] = fRec384[0];
			fRec383[1] = fRec383[0];
			fRec386[2] = fRec386[1];
			fRec386[1] = fRec386[0];
			fRec378[2] = fRec378[1];
			fRec378[1] = fRec378[0];
			fRec377[2] = fRec377[1];
			fRec377[1] = fRec377[0];
			fRec376[2] = fRec376[1];
			fRec376[1] = fRec376[0];
			fRec370[1] = fRec370[0];
			fRec390[1] = fRec390[0];
			fRec389[1] = fRec389[0];
			fRec387[1] = fRec387[0];
			fRec394[1] = fRec394[0];
			fRec393[1] = fRec393[0];
			fRec391[1] = fRec391[0];
			fRec398[1] = fRec398[0];
			fRec397[1] = fRec397[0];
			fRec395[1] = fRec395[0];
			fRec186[2] = fRec186[1];
			fRec186[1] = fRec186[0];
			fRec187[2] = fRec187[1];
			fRec187[1] = fRec187[0];
			fRec188[2] = fRec188[1];
			fRec188[1] = fRec188[0];
			fRec189[2] = fRec189[1];
			fRec189[1] = fRec189[0];
			fRec190[2] = fRec190[1];
			fRec190[1] = fRec190[0];
			fRec191[2] = fRec191[1];
			fRec191[1] = fRec191[0];
			fRec192[2] = fRec192[1];
			fRec192[1] = fRec192[0];
			fRec193[2] = fRec193[1];
			fRec193[1] = fRec193[0];
			fRec185[2] = fRec185[1];
			fRec185[1] = fRec185[0];
			fRec399[1] = fRec399[0];
			fRec7[2] = fRec7[1];
			fRec7[1] = fRec7[0];
			fRec412[1] = fRec412[0];
			fRec411[1] = fRec411[0];
			for (int j5 = 4; (j5 > 0); j5 = (j5 - 1)) {
				fRec417[j5] = fRec417[(j5 - 1)];
			}
			fRec418[1] = fRec418[0];
			fRec419[1] = fRec419[0];
			fRec422[1] = fRec422[0];
			fRec421[1] = fRec421[0];
			fRec420[1] = fRec420[0];
			fRec423[2] = fRec423[1];
			fRec423[1] = fRec423[0];
			fRec415[2] = fRec415[1];
			fRec415[1] = fRec415[0];
			fRec414[2] = fRec414[1];
			fRec414[1] = fRec414[0];
			fRec413[2] = fRec413[1];
			fRec413[1] = fRec413[0];
			fRec409[1] = fRec409[0];
			fRec427[1] = fRec427[0];
			fRec426[1] = fRec426[0];
			fRec424[1] = fRec424[0];
			fRec431[1] = fRec431[0];
			fRec430[1] = fRec430[0];
			fRec428[1] = fRec428[0];
			fRec435[1] = fRec435[0];
			fRec434[1] = fRec434[0];
			fRec432[1] = fRec432[0];
			fRec439[1] = fRec439[0];
			fRec438[1] = fRec438[0];
			for (int j6 = 4; (j6 > 0); j6 = (j6 - 1)) {
				fRec444[j6] = fRec444[(j6 - 1)];
			}
			fRec445[1] = fRec445[0];
			fRec446[1] = fRec446[0];
			fRec449[1] = fRec449[0];
			fRec448[1] = fRec448[0];
			fRec447[1] = fRec447[0];
			fRec450[2] = fRec450[1];
			fRec450[1] = fRec450[0];
			fRec442[2] = fRec442[1];
			fRec442[1] = fRec442[0];
			fRec441[2] = fRec441[1];
			fRec441[1] = fRec441[0];
			fRec440[2] = fRec440[1];
			fRec440[1] = fRec440[0];
			fRec436[1] = fRec436[0];
			fRec454[1] = fRec454[0];
			fRec453[1] = fRec453[0];
			fRec451[1] = fRec451[0];
			fRec458[1] = fRec458[0];
			fRec457[1] = fRec457[0];
			fRec455[1] = fRec455[0];
			fRec462[1] = fRec462[0];
			fRec461[1] = fRec461[0];
			fRec459[1] = fRec459[0];
			fRec401[2] = fRec401[1];
			fRec401[1] = fRec401[0];
			fRec402[2] = fRec402[1];
			fRec402[1] = fRec402[0];
			fRec403[2] = fRec403[1];
			fRec403[1] = fRec403[0];
			fRec404[2] = fRec404[1];
			fRec404[1] = fRec404[0];
			fRec405[2] = fRec405[1];
			fRec405[1] = fRec405[0];
			fRec406[2] = fRec406[1];
			fRec406[1] = fRec406[0];
			fRec407[2] = fRec407[1];
			fRec407[1] = fRec407[0];
			fRec408[2] = fRec408[1];
			fRec408[1] = fRec408[0];
			fRec400[2] = fRec400[1];
			fRec400[1] = fRec400[0];
			fRec463[1] = fRec463[0];
			iVec157[1] = iVec157[0];
			fVec158[1] = fVec158[0];
			fVec159[1] = fVec159[0];
			iRec467[1] = iRec467[0];
			fRec468[1] = fRec468[0];
			fRec471[1] = fRec471[0];
			fRec470[1] = fRec470[0];
			fRec469[1] = fRec469[0];
			fRec472[2] = fRec472[1];
			fRec472[1] = fRec472[0];
			fRec466[2] = fRec466[1];
			fRec466[1] = fRec466[0];
			fRec465[2] = fRec465[1];
			fRec465[1] = fRec465[0];
			fRec464[2] = fRec464[1];
			fRec464[1] = fRec464[0];
			fRec473[1] = fRec473[0];
			fVec160[1] = fVec160[0];
			fVec161[1] = fVec161[0];
			iRec478[1] = iRec478[0];
			fRec479[1] = fRec479[0];
			fRec482[1] = fRec482[0];
			fRec481[1] = fRec481[0];
			fRec480[1] = fRec480[0];
			fRec483[2] = fRec483[1];
			fRec483[1] = fRec483[0];
			fRec477[2] = fRec477[1];
			fRec477[1] = fRec477[0];
			fRec476[2] = fRec476[1];
			fRec476[1] = fRec476[0];
			fRec475[2] = fRec475[1];
			fRec475[1] = fRec475[0];
			fRec474[2] = fRec474[1];
			fRec474[1] = fRec474[0];
			fRec484[1] = fRec484[0];
			fRec485[1] = fRec485[0];
			fRec487[1] = fRec487[0];
			fRec489[2] = fRec489[1];
			fRec489[1] = fRec489[0];
			fRec488[2] = fRec488[1];
			fRec488[1] = fRec488[0];
			fRec492[1] = fRec492[0];
			fVec163[1] = fVec163[0];
			fRec491[1] = fRec491[0];
			fVec164[1] = fVec164[0];
			fRec490[1] = fRec490[0];
			fRec493[1] = fRec493[0];
			fRec495[2] = fRec495[1];
			fRec495[1] = fRec495[0];
			fVec166[1] = fVec166[0];
			iVec167[1] = iVec167[0];
			iRec496[1] = iRec496[0];
			fRec494[2] = fRec494[1];
			fRec494[1] = fRec494[0];
			fRec497[2] = fRec497[1];
			fRec497[1] = fRec497[0];
			fRec498[2] = fRec498[1];
			fRec498[1] = fRec498[0];
			fRec499[2] = fRec499[1];
			fRec499[1] = fRec499[0];
			fRec500[2] = fRec500[1];
			fRec500[1] = fRec500[0];
			fRec501[2] = fRec501[1];
			fRec501[1] = fRec501[0];
			fRec502[2] = fRec502[1];
			fRec502[1] = fRec502[0];
			fRec503[2] = fRec503[1];
			fRec503[1] = fRec503[0];
			fRec504[2] = fRec504[1];
			fRec504[1] = fRec504[0];
			fRec505[2] = fRec505[1];
			fRec505[1] = fRec505[0];
			fRec506[2] = fRec506[1];
			fRec506[1] = fRec506[0];
			fRec507[2] = fRec507[1];
			fRec507[1] = fRec507[0];
			fRec508[2] = fRec508[1];
			fRec508[1] = fRec508[0];
			fRec509[2] = fRec509[1];
			fRec509[1] = fRec509[0];
			fRec510[2] = fRec510[1];
			fRec510[1] = fRec510[0];
			fRec511[2] = fRec511[1];
			fRec511[1] = fRec511[0];
			fRec512[2] = fRec512[1];
			fRec512[1] = fRec512[0];
			fRec513[2] = fRec513[1];
			fRec513[1] = fRec513[0];
			fRec514[2] = fRec514[1];
			fRec514[1] = fRec514[0];
			fRec515[2] = fRec515[1];
			fRec515[1] = fRec515[0];
			fRec516[2] = fRec516[1];
			fRec516[1] = fRec516[0];
			fRec517[2] = fRec517[1];
			fRec517[1] = fRec517[0];
			fRec518[2] = fRec518[1];
			fRec518[1] = fRec518[0];
			fRec519[2] = fRec519[1];
			fRec519[1] = fRec519[0];
			fRec520[2] = fRec520[1];
			fRec520[1] = fRec520[0];
			fRec521[2] = fRec521[1];
			fRec521[1] = fRec521[0];
			fRec522[2] = fRec522[1];
			fRec522[1] = fRec522[0];
			fRec523[2] = fRec523[1];
			fRec523[1] = fRec523[0];
			fRec524[2] = fRec524[1];
			fRec524[1] = fRec524[0];
			fRec525[2] = fRec525[1];
			fRec525[1] = fRec525[0];
			fRec526[2] = fRec526[1];
			fRec526[1] = fRec526[0];
			fRec527[2] = fRec527[1];
			fRec527[1] = fRec527[0];
			fRec528[2] = fRec528[1];
			fRec528[1] = fRec528[0];
			fRec529[2] = fRec529[1];
			fRec529[1] = fRec529[0];
			fRec530[2] = fRec530[1];
			fRec530[1] = fRec530[0];
			fRec531[2] = fRec531[1];
			fRec531[1] = fRec531[0];
			fRec532[2] = fRec532[1];
			fRec532[1] = fRec532[0];
			fRec533[2] = fRec533[1];
			fRec533[1] = fRec533[0];
			fRec534[2] = fRec534[1];
			fRec534[1] = fRec534[0];
			fRec535[2] = fRec535[1];
			fRec535[1] = fRec535[0];
			fRec536[2] = fRec536[1];
			fRec536[1] = fRec536[0];
			fRec537[2] = fRec537[1];
			fRec537[1] = fRec537[0];
			fRec538[2] = fRec538[1];
			fRec538[1] = fRec538[0];
			fRec539[2] = fRec539[1];
			fRec539[1] = fRec539[0];
			fRec540[2] = fRec540[1];
			fRec540[1] = fRec540[0];
			fRec541[2] = fRec541[1];
			fRec541[1] = fRec541[0];
			fRec542[2] = fRec542[1];
			fRec542[1] = fRec542[0];
			fRec543[2] = fRec543[1];
			fRec543[1] = fRec543[0];
			fRec544[2] = fRec544[1];
			fRec544[1] = fRec544[0];
			fRec545[2] = fRec545[1];
			fRec545[1] = fRec545[0];
			fRec548[1] = fRec548[0];
			fRec547[1] = fRec547[0];
			fRec546[1] = fRec546[0];
			fRec551[1] = fRec551[0];
			fRec550[1] = fRec550[0];
			fRec549[1] = fRec549[0];
			fRec552[2] = fRec552[1];
			fRec552[1] = fRec552[0];
			fRec4[2] = fRec4[1];
			fRec4[1] = fRec4[0];
			fRec3[2] = fRec3[1];
			fRec3[1] = fRec3[0];
			fRec2[2] = fRec2[1];
			fRec2[1] = fRec2[0];
			fRec553[1] = fRec553[0];
			fRec1[2] = fRec1[1];
			fRec1[1] = fRec1[0];
			fRec556[1] = fRec556[0];
			fRec555[1] = fRec555[0];
			fRec554[1] = fRec554[0];
			fRec557[1] = fRec557[0];
			for (int j7 = 4; (j7 > 0); j7 = (j7 - 1)) {
				fRec567[j7] = fRec567[(j7 - 1)];
			}
			fRec568[1] = fRec568[0];
			fRec569[1] = fRec569[0];
			fRec572[1] = fRec572[0];
			fRec571[1] = fRec571[0];
			fRec570[1] = fRec570[0];
			fRec573[2] = fRec573[1];
			fRec573[1] = fRec573[0];
			fRec565[2] = fRec565[1];
			fRec565[1] = fRec565[0];
			fRec564[2] = fRec564[1];
			fRec564[1] = fRec564[0];
			fRec563[2] = fRec563[1];
			fRec563[1] = fRec563[0];
			fRec574[2] = fRec574[1];
			fRec574[1] = fRec574[0];
			fRec562[2] = fRec562[1];
			fRec562[1] = fRec562[0];
			fRec575[2] = fRec575[1];
			fRec575[1] = fRec575[0];
			fRec576[2] = fRec576[1];
			fRec576[1] = fRec576[0];
			fRec577[1] = fRec577[0];
			fRec580[1] = fRec580[0];
			fRec579[1] = fRec579[0];
			fRec578[1] = fRec578[0];
			fRec583[1] = fRec583[0];
			fRec582[1] = fRec582[0];
			fRec581[1] = fRec581[0];
			fRec584[2] = fRec584[1];
			fRec584[1] = fRec584[0];
			fRec561[2] = fRec561[1];
			fRec561[1] = fRec561[0];
			fRec560[2] = fRec560[1];
			fRec560[1] = fRec560[0];
			fRec559[2] = fRec559[1];
			fRec559[1] = fRec559[0];
			fRec558[2] = fRec558[1];
			fRec558[1] = fRec558[0];
			fRec587[1] = fRec587[0];
			fRec586[1] = fRec586[0];
			fRec585[1] = fRec585[0];
		}
	}

};

//**************************************************************
// Polyphony
//**************************************************************

/************************** BEGIN faust-poly-engine.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2013 GRAME, Romain Michon, CCRMA - Stanford University
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __faust_poly_engine__
#define __faust_poly_engine__

#include <math.h>
#include <stdio.h>
#include <string.h>

/************************** BEGIN audio.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __audio__
#define __audio__

#include <set>
#include <utility>

class dsp;

typedef void (* shutdown_callback)(const char* message, void* arg);

typedef void (* compute_callback)(void* arg);

class audio {
    
    protected:
    
        shutdown_callback fShutdown;    // Shutdown callback
        void* fShutdownArg;             // Shutdown callback data
    
        std::set<std::pair<compute_callback, void*> > fComputeCallbackList;
    
    public:
    
        audio():fShutdown(nullptr), fShutdownArg(nullptr) {}
        virtual ~audio() {}

        virtual bool init(const char* name, dsp* dsp) = 0;
    
        virtual bool start() = 0;
        virtual void stop() = 0;
    
        void setShutdownCallback(shutdown_callback cb, void* arg)
        {
            fShutdown = cb;
            fShutdownArg = arg;
        }
    
        void addControlCallback(compute_callback cb, void* arg)
        {
            fComputeCallbackList.insert(std::make_pair(cb, arg));
        }
        bool removeControlCallback(compute_callback cb, void* arg)
        {
            return (fComputeCallbackList.erase(std::make_pair(cb, arg)) == 1);
        }
        void runControlCallbacks()
        {
            for (auto& it : fComputeCallbackList) {
                it.first(it.second);
            }
        }
    
        virtual int getBufferSize() = 0;
        virtual int getSampleRate() = 0;

        virtual int getNumInputs() = 0;
        virtual int getNumOutputs() = 0;
    
        // Returns the average proportion of available CPU being spent inside the audio callbacks (between 0 and 1.0).
        virtual float getCPULoad() { return 0.f; }
};
					
#endif
/**************************  END  audio.h **************************/
/************************** BEGIN JSONUI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/
 
#ifndef FAUST_JSONUI_H
#define FAUST_JSONUI_H

#include <vector>
#include <map>
#include <string>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>

/************************** BEGIN PathBuilder.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef FAUST_PATHBUILDER_H
#define FAUST_PATHBUILDER_H

#include <vector>
#include <string>
#include <algorithm>

/*******************************************************************************
 * PathBuilder : Faust User Interface
 * Helper class to build complete hierarchical path for UI items.
 ******************************************************************************/

class PathBuilder
{

    protected:
    
        std::vector<std::string> fControlsLevel;
       
    public:
    
        PathBuilder() {}
        virtual ~PathBuilder() {}
    
        std::string buildPath(const std::string& label) 
        {
            std::string res = "/";
            for (size_t i = 0; i < fControlsLevel.size(); i++) {
                res += fControlsLevel[i];
                res += "/";
            }
            res += label;
            std::replace(res.begin(), res.end(), ' ', '_');
            return res;
        }
    
        void pushLabel(const std::string& label) { fControlsLevel.push_back(label); }
        void popLabel() { fControlsLevel.pop_back(); }
    
};

#endif  // FAUST_PATHBUILDER_H
/**************************  END  PathBuilder.h **************************/

/*******************************************************************************
 * JSONUI : Faust User Interface
 * This class produce a complete JSON decription of the DSP instance.
 ******************************************************************************/

template <typename REAL>
class JSONUIAux : public PathBuilder, public Meta, public UIReal<REAL>
{

    protected:
    
        std::stringstream fUI;
        std::stringstream fMeta;
        std::vector<std::pair <std::string, std::string> > fMetaAux;
        std::string fVersion;           // Compiler version
        std::string fCompileOptions;    // Compilation options
        std::vector<std::string> fLibraryList;
        std::vector<std::string> fIncludePathnames;
        std::string fName;
        std::string fFileName;
        std::string fExpandedCode;
        std::string fSHAKey;
        int fDSPSize;                   // In bytes
        std::map<std::string, int> fPathTable;
        bool fExtended;
    
        char fCloseUIPar;
        char fCloseMetaPar;
        int fTab;
    
        int fInputs, fOutputs, fSRIndex;
         
        void tab(int n, std::ostream& fout)
        {
            fout << '\n';
            while (n-- > 0) {
                fout << '\t';
            }
        }
    
        std::string flatten(const std::string& src)
        {
            std::string dst;
            for (size_t i = 0; i < src.size(); i++) {
                switch (src[i]) {
                    case '\n':
                    case '\t':
                        break;
                    default:
                        dst += src[i];
                        break;
                }
            }
            return dst;
        }
    
        void addMeta(int tab_val, bool quote = true)
        {
            if (fMetaAux.size() > 0) {
                tab(tab_val, fUI); fUI << "\"meta\": [";
                std::string sep = "";
                for (size_t i = 0; i < fMetaAux.size(); i++) {
                    fUI << sep;
                    tab(tab_val + 1, fUI); fUI << "{ \"" << fMetaAux[i].first << "\": \"" << fMetaAux[i].second << "\" }";
                    sep = ",";
                }
                tab(tab_val, fUI); fUI << ((quote) ? "],": "]");
                fMetaAux.clear();
            }
        }
    
        int getAddressIndex(const std::string& path)
        {
            return (fPathTable.find(path) != fPathTable.end()) ? fPathTable[path] : -1;
        }
      
     public:
     
        JSONUIAux(const std::string& name,
                  const std::string& filename,
                  int inputs,
                  int outputs,
                  int sr_index,
                  const std::string& sha_key,
                  const std::string& dsp_code,
                  const std::string& version,
                  const std::string& compile_options,
                  const std::vector<std::string>& library_list,
                  const std::vector<std::string>& include_pathnames,
                  int size,
                  const std::map<std::string, int>& path_table)
        {
            init(name, filename, inputs, outputs, sr_index, sha_key, dsp_code, version, compile_options, library_list, include_pathnames, size, path_table);
        }

        JSONUIAux(const std::string& name, const std::string& filename, int inputs, int outputs)
        {
            init(name, filename, inputs, outputs, -1, "", "", "", "", std::vector<std::string>(), std::vector<std::string>(), -1, std::map<std::string, int>());
        }

        JSONUIAux(int inputs, int outputs)
        {
            init("", "", inputs, outputs, -1, "", "","", "", std::vector<std::string>(), std::vector<std::string>(), -1, std::map<std::string, int>());
        }
        
        JSONUIAux()
        {
            init("", "", -1, -1, -1, "", "", "", "", std::vector<std::string>(), std::vector<std::string>(), -1, std::map<std::string, int>());
        }
 
        virtual ~JSONUIAux() {}
        
        void setInputs(int inputs) { fInputs = inputs; }
        void setOutputs(int outputs) { fOutputs = outputs; }
    
        void setSRIndex(int sr_index) { fSRIndex = sr_index; }
    
        // Init may be called multiple times so fMeta and fUI are reinitialized
        void init(const std::string& name,
                  const std::string& filename,
                  int inputs,
                  int outputs,
                  int sr_index,
                  const std::string& sha_key,
                  const std::string& dsp_code,
                  const std::string& version,
                  const std::string& compile_options,
                  const std::vector<std::string>& library_list,
                  const std::vector<std::string>& include_pathnames,
                  int size,
                  const std::map<std::string, int>& path_table,
                  bool extended = false)
        {
            fTab = 1;
            fExtended = extended;
            if (fExtended) {
                fUI << std::setprecision(std::numeric_limits<REAL>::max_digits10);
                fMeta << std::setprecision(std::numeric_limits<REAL>::max_digits10);
            }
            
            // Start Meta generation
            fMeta.str("");
            tab(fTab, fMeta); fMeta << "\"meta\": [";
            fCloseMetaPar = ' ';
            
            // Start UI generation
            fUI.str("");
            tab(fTab, fUI); fUI << "\"ui\": [";
            fCloseUIPar = ' ';
            fTab += 1;
            
            fName = name;
            fFileName = filename;
            fInputs = inputs;
            fOutputs = outputs;
            fSRIndex = sr_index;
            fExpandedCode = dsp_code;
            fSHAKey = sha_key;
            fDSPSize = size;
            fPathTable = path_table;
            fVersion = version;
            fCompileOptions = compile_options;
            fLibraryList = library_list;
            fIncludePathnames = include_pathnames;
        }
   
        // -- widget's layouts
    
        virtual void openGenericGroup(const char* label, const char* name)
        {
            pushLabel(label);
            fUI << fCloseUIPar;
            tab(fTab, fUI); fUI << "{";
            fTab += 1;
            tab(fTab, fUI); fUI << "\"type\": \"" << name << "\",";
            tab(fTab, fUI); fUI << "\"label\": \"" << label << "\",";
            addMeta(fTab);
            tab(fTab, fUI); fUI << "\"items\": [";
            fCloseUIPar = ' ';
            fTab += 1;
        }

        virtual void openTabBox(const char* label)
        {
            openGenericGroup(label, "tgroup");
        }
    
        virtual void openHorizontalBox(const char* label)
        {
            openGenericGroup(label, "hgroup");
        }
    
        virtual void openVerticalBox(const char* label)
        {
            openGenericGroup(label, "vgroup");
        }
    
        virtual void closeBox()
        {
            popLabel();
            fTab -= 1;
            tab(fTab, fUI); fUI << "]";
            fTab -= 1;
            tab(fTab, fUI); fUI << "}";
            fCloseUIPar = ',';
        }
    
        // -- active widgets
  
        virtual void addGenericButton(const char* label, const char* name)
        {
            std::string path = buildPath(label);
            
            fUI << fCloseUIPar;
            tab(fTab, fUI); fUI << "{";
            fTab += 1;
            tab(fTab, fUI); fUI << "\"type\": \"" << name << "\",";
            tab(fTab, fUI); fUI << "\"label\": \"" << label << "\",";
            if (fPathTable.size() > 0) {
                tab(fTab, fUI); fUI << "\"address\": \"" << path << "\",";
                tab(fTab, fUI); fUI << "\"index\": " << getAddressIndex(path) << ((fMetaAux.size() > 0) ? "," : "");
            } else {
                tab(fTab, fUI); fUI << "\"address\": \"" << path << "\"" << ((fMetaAux.size() > 0) ? "," : "");
            }
            addMeta(fTab, false);
            fTab -= 1;
            tab(fTab, fUI); fUI << "}";
            fCloseUIPar = ',';
        }

        virtual void addButton(const char* label, REAL* zone)
        {
            addGenericButton(label, "button");
        }
    
        virtual void addCheckButton(const char* label, REAL* zone)
        {
            addGenericButton(label, "checkbox");
        }

        virtual void addGenericEntry(const char* label, const char* name, REAL init, REAL min, REAL max, REAL step)
        {
            std::string path = buildPath(label);
            
            fUI << fCloseUIPar;
            tab(fTab, fUI); fUI << "{";
            fTab += 1;
            tab(fTab, fUI); fUI << "\"type\": \"" << name << "\",";
            tab(fTab, fUI); fUI << "\"label\": \"" << label << "\",";
            tab(fTab, fUI); fUI << "\"address\": \"" << path << "\",";
            if (fPathTable.size() > 0) {
                tab(fTab, fUI); fUI << "\"index\": " << getAddressIndex(path) << ",";
            }
            addMeta(fTab);
            tab(fTab, fUI); fUI << "\"init\": " << init << ",";
            tab(fTab, fUI); fUI << "\"min\": " << min << ",";
            tab(fTab, fUI); fUI << "\"max\": " << max << ",";
            tab(fTab, fUI); fUI << "\"step\": " << step;
            fTab -= 1;
            tab(fTab, fUI); fUI << "}";
            fCloseUIPar = ',';
        }
    
        virtual void addVerticalSlider(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step)
        {
            addGenericEntry(label, "vslider", init, min, max, step);
        }
    
        virtual void addHorizontalSlider(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step)
        {
            addGenericEntry(label, "hslider", init, min, max, step);
        }
    
        virtual void addNumEntry(const char* label, REAL* zone, REAL init, REAL min, REAL max, REAL step)
        {
            addGenericEntry(label, "nentry", init, min, max, step);
        }

        // -- passive widgets
    
        virtual void addGenericBargraph(const char* label, const char* name, REAL min, REAL max) 
        {
            std::string path = buildPath(label);
            
            fUI << fCloseUIPar;
            tab(fTab, fUI); fUI << "{";
            fTab += 1;
            tab(fTab, fUI); fUI << "\"type\": \"" << name << "\",";
            tab(fTab, fUI); fUI << "\"label\": \"" << label << "\",";
            tab(fTab, fUI); fUI << "\"address\": \"" << path << "\",";
            if (fPathTable.size() > 0) {
                tab(fTab, fUI); fUI << "\"index\": " << getAddressIndex(path) << ",";
            }
            addMeta(fTab);
            tab(fTab, fUI); fUI << "\"min\": " << min << ",";
            tab(fTab, fUI); fUI << "\"max\": " << max;
            fTab -= 1;
            tab(fTab, fUI); fUI << "}";
            fCloseUIPar = ',';
        }

        virtual void addHorizontalBargraph(const char* label, REAL* zone, REAL min, REAL max) 
        {
            addGenericBargraph(label, "hbargraph", min, max);
        }
    
        virtual void addVerticalBargraph(const char* label, REAL* zone, REAL min, REAL max)
        {
            addGenericBargraph(label, "vbargraph", min, max);
        }
    
        virtual void addSoundfile(const char* label, const char* url, Soundfile** zone)
        {
            std::string path = buildPath(label);
            
            fUI << fCloseUIPar;
            tab(fTab, fUI); fUI << "{";
            fTab += 1;
            tab(fTab, fUI); fUI << "\"type\": \"" << "soundfile" << "\",";
            tab(fTab, fUI); fUI << "\"label\": \"" << label << "\"" << ",";
            tab(fTab, fUI); fUI << "\"url\": \"" << url << "\"" << ",";
            tab(fTab, fUI); fUI << "\"address\": \"" << path << "\"" << ((fPathTable.size() > 0) ? "," : "");
            if (fPathTable.size() > 0) {
                tab(fTab, fUI); fUI << "\"index\": " << getAddressIndex(path);
            }
            fTab -= 1;
            tab(fTab, fUI); fUI << "}";
            fCloseUIPar = ',';
        }

        // -- metadata declarations

        virtual void declare(REAL* zone, const char* key, const char* val)
        {
            fMetaAux.push_back(std::make_pair(key, val));
        }
    
        // Meta interface
        virtual void declare(const char* key, const char* value)
        {
            fMeta << fCloseMetaPar;
            // fName found in metadata
            if ((strcmp(key, "name") == 0) && (fName == "")) fName = value;
            // fFileName found in metadata
            if ((strcmp(key, "filename") == 0) && (fFileName == "")) fFileName = value;
            tab(fTab, fMeta); fMeta << "{ " << "\"" << key << "\"" << ": " << "\"" << value << "\" }";
            fCloseMetaPar = ',';
        }
    
        std::string JSON(bool flat = false)
        {
            fTab = 0;
            std::stringstream JSON;
            if (fExtended) {
                JSON << std::setprecision(std::numeric_limits<REAL>::max_digits10);
            }
            JSON << "{";
            fTab += 1;
            tab(fTab, JSON); JSON << "\"name\": \"" << fName << "\",";
            tab(fTab, JSON); JSON << "\"filename\": \"" << fFileName << "\",";
            if (fVersion != "") { tab(fTab, JSON); JSON << "\"version\": \"" << fVersion << "\","; }
            if (fCompileOptions != "") { tab(fTab, JSON); JSON << "\"compile_options\": \"" <<  fCompileOptions << "\","; }
            if (fLibraryList.size() > 0) {
                tab(fTab, JSON);
                JSON << "\"library_list\": [";
                for (size_t i = 0; i < fLibraryList.size(); i++) {
                    JSON << "\"" << fLibraryList[i] << "\"";
                    if (i < (fLibraryList.size() - 1)) JSON << ",";
                }
                JSON << "],";
            }
            if (fIncludePathnames.size() > 0) {
                tab(fTab, JSON);
                JSON << "\"include_pathnames\": [";
                for (size_t i = 0; i < fIncludePathnames.size(); i++) {
                    JSON << "\"" << fIncludePathnames[i] << "\"";
                    if (i < (fIncludePathnames.size() - 1)) JSON << ",";
                }
                JSON << "],";
            }
            if (fDSPSize != -1) { tab(fTab, JSON); JSON << "\"size\": " << fDSPSize << ","; }
            if (fSHAKey != "") { tab(fTab, JSON); JSON << "\"sha_key\": \"" << fSHAKey << "\","; }
            if (fExpandedCode != "") { tab(fTab, JSON); JSON << "\"code\": \"" << fExpandedCode << "\","; }
            tab(fTab, JSON); JSON << "\"inputs\": " << fInputs << ",";
            tab(fTab, JSON); JSON << "\"outputs\": " << fOutputs << ",";
            if (fSRIndex != -1) { tab(fTab, JSON); JSON << "\"sr_index\": " << fSRIndex << ","; }
            tab(fTab, fMeta); fMeta << "],";
            tab(fTab, fUI); fUI << "]";
            fTab -= 1;
            if (fCloseMetaPar == ',') { // If "declare" has been called, fCloseMetaPar state is now ','
                JSON << fMeta.str() << fUI.str();
            } else {
                JSON << fUI.str();
            }
            tab(fTab, JSON); JSON << "}";
            return (flat) ? flatten(JSON.str()) : JSON.str();
        }
    
};

// Externally available class using FAUSTFLOAT

struct JSONUI : public JSONUIAux<FAUSTFLOAT>, public UI
{
    
    JSONUI(const std::string& name,
           const std::string& filename,
           int inputs,
           int outputs,
           int sr_index,
           const std::string& sha_key,
           const std::string& dsp_code,
           const std::string& version,
           const std::string& compile_options,
           const std::vector<std::string>& library_list,
           const std::vector<std::string>& include_pathnames,
           int size,
           const std::map<std::string, int>& path_table):
    JSONUIAux<FAUSTFLOAT>(name, filename,
                          inputs, outputs,
                          sr_index,
                          sha_key, dsp_code,
                          version, compile_options,
                          library_list, include_pathnames,
                          size, path_table)
    {}
    
    JSONUI(const std::string& name, const std::string& filename, int inputs, int outputs):
    JSONUIAux<FAUSTFLOAT>(name, filename, inputs, outputs)
    {}
    
    JSONUI(int inputs, int outputs):JSONUIAux<FAUSTFLOAT>(inputs, outputs)
    {}
    
    JSONUI():JSONUIAux<FAUSTFLOAT>()
    {}

    virtual void openTabBox(const char* label)
    {
        JSONUIAux<FAUSTFLOAT>::openTabBox(label);
    }
    virtual void openHorizontalBox(const char* label)
    {
        JSONUIAux<FAUSTFLOAT>::openHorizontalBox(label);
    }
    virtual void openVerticalBox(const char* label)
    {
        JSONUIAux<FAUSTFLOAT>::openVerticalBox(label);
    }
    virtual void closeBox()
    {
        JSONUIAux<FAUSTFLOAT>::closeBox();
    }
    
    // -- active widgets
    
    virtual void addButton(const char* label, FAUSTFLOAT* zone)
    {
        JSONUIAux<FAUSTFLOAT>::addButton(label, zone);
    }
    virtual void addCheckButton(const char* label, FAUSTFLOAT* zone)
    {
        JSONUIAux<FAUSTFLOAT>::addCheckButton(label, zone);
    }
    virtual void addVerticalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
    {
        JSONUIAux<FAUSTFLOAT>::addVerticalSlider(label, zone, init, min, max, step);
    }
    virtual void addHorizontalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
    {
        JSONUIAux<FAUSTFLOAT>::addHorizontalSlider(label, zone, init, min, max, step);
    }
    virtual void addNumEntry(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
    {
        JSONUIAux<FAUSTFLOAT>::addNumEntry(label, zone, init, min, max, step);
    }
    
    // -- passive widgets
    
    virtual void addHorizontalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max)
    {
        JSONUIAux<FAUSTFLOAT>::addHorizontalBargraph(label, zone, min, max);
    }
    virtual void addVerticalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max)
    {
        JSONUIAux<FAUSTFLOAT>::addVerticalBargraph(label, zone, min, max);
    }
    
    // -- soundfiles
    
    virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone)
    {
        JSONUIAux<FAUSTFLOAT>::addSoundfile(label, filename, sf_zone);
    }
    
    // -- metadata declarations
    
    virtual void declare(FAUSTFLOAT* zone, const char* key, const char* val)
    {
        JSONUIAux<FAUSTFLOAT>::declare(zone, key, val);
    }

    virtual void declare(const char* key, const char* val)
    {
        JSONUIAux<FAUSTFLOAT>::declare(key, val);
    }

    virtual ~JSONUI() {}
    
};

#endif // FAUST_JSONUI_H
/**************************  END  JSONUI.h **************************/
/************************** BEGIN APIUI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef API_UI_H
#define API_UI_H

#include <sstream>
#include <string>
#include <vector>
#include <iostream>
#include <map>

/************************** BEGIN ValueConverter.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __ValueConverter__
#define __ValueConverter__

/***************************************************************************************
								ValueConverter.h
                            (GRAME, Copyright 2015-2019)

Set of conversion objects used to map user interface values (for example a gui slider
delivering values between 0 and 1) to faust values (for example a vslider between
20 and 20000) using a log scale.

-- Utilities

Range(lo,hi) : clip a value x between lo and hi
Interpolator(lo,hi,v1,v2) : Maps a value x between lo and hi to a value y between v1 and v2
Interpolator3pt(lo,mi,hi,v1,vm,v2) : Map values between lo mid hi to values between v1 vm v2

-- Value Converters

ValueConverter::ui2faust(x)
ValueConverter::faust2ui(x)

-- ValueConverters used for sliders depending of the scale

LinearValueConverter(umin, umax, fmin, fmax)
LinearValueConverter2(lo, mi, hi, v1, vm, v2) using 2 segments
LogValueConverter(umin, umax, fmin, fmax)
ExpValueConverter(umin, umax, fmin, fmax)

-- ValueConverters used for accelerometers based on 3 points

AccUpConverter(amin, amid, amax, fmin, fmid, fmax)		-- curve 0
AccDownConverter(amin, amid, amax, fmin, fmid, fmax)	-- curve 1
AccUpDownConverter(amin, amid, amax, fmin, fmid, fmax)	-- curve 2
AccDownUpConverter(amin, amid, amax, fmin, fmid, fmax)	-- curve 3

-- lists of ZoneControl are used to implement accelerometers metadata for each axes

ZoneControl(zone, valueConverter) : a zone with an accelerometer data converter

-- ZoneReader are used to implement screencolor metadata

ZoneReader(zone, valueConverter) : a zone with a data converter

****************************************************************************************/

#include <float.h>
#include <algorithm>    // std::max
#include <cmath>
#include <vector>
#include <assert.h>

//--------------------------------------------------------------------------------------
// Interpolator(lo,hi,v1,v2)
// Maps a value x between lo and hi to a value y between v1 and v2
// y = v1 + (x-lo)/(hi-lo)*(v2-v1)
// y = v1 + (x-lo) * coef   		with coef = (v2-v1)/(hi-lo)
// y = v1 + x*coef - lo*coef
// y = v1 - lo*coef + x*coef
// y = offset + x*coef				with offset = v1 - lo*coef
//--------------------------------------------------------------------------------------
class Interpolator
{
    private:

        //--------------------------------------------------------------------------------------
        // Range(lo,hi) clip a value between lo and hi
        //--------------------------------------------------------------------------------------
        struct Range
        {
            double fLo;
            double fHi;

            Range(double x, double y) : fLo(std::min<double>(x,y)), fHi(std::max<double>(x,y)) {}
            double operator()(double x) { return (x<fLo) ? fLo : (x>fHi) ? fHi : x; }
        };


        Range fRange;
        double fCoef;
        double fOffset;

    public:

        Interpolator(double lo, double hi, double v1, double v2) : fRange(lo,hi)
        {
            if (hi != lo) {
                // regular case
                fCoef = (v2-v1)/(hi-lo);
                fOffset = v1 - lo*fCoef;
            } else {
                // degenerate case, avoids division by zero
                fCoef = 0;
                fOffset = (v1+v2)/2;
            }
        }
        double operator()(double v)
        {
            double x = fRange(v);
            return  fOffset + x*fCoef;
        }

        void getLowHigh(double& amin, double& amax)
        {
            amin = fRange.fLo;
            amax = fRange.fHi;
        }
};

//--------------------------------------------------------------------------------------
// Interpolator3pt(lo,mi,hi,v1,vm,v2)
// Map values between lo mid hi to values between v1 vm v2
//--------------------------------------------------------------------------------------
class Interpolator3pt
{

    private:

        Interpolator fSegment1;
        Interpolator fSegment2;
        double fMid;

    public:

        Interpolator3pt(double lo, double mi, double hi, double v1, double vm, double v2) :
            fSegment1(lo, mi, v1, vm),
            fSegment2(mi, hi, vm, v2),
            fMid(mi) {}
        double operator()(double x) { return  (x < fMid) ? fSegment1(x) : fSegment2(x); }

        void getMappingValues(double& amin, double& amid, double& amax)
        {
            fSegment1.getLowHigh(amin, amid);
            fSegment2.getLowHigh(amid, amax);
        }
};

//--------------------------------------------------------------------------------------
// Abstract ValueConverter class. Converts values between UI and Faust representations
//--------------------------------------------------------------------------------------
class ValueConverter
{

    public:

        virtual ~ValueConverter() {}
        virtual double ui2faust(double x) = 0;
        virtual double faust2ui(double x) = 0;
};

//--------------------------------------------------------------------------------------
// A converter than can be updated
//--------------------------------------------------------------------------------------

class UpdatableValueConverter : public ValueConverter {
    
    protected:
        
        bool fActive;
        
    public:
        
        UpdatableValueConverter():fActive(true)
        {}
        virtual ~UpdatableValueConverter()
        {}
        
        virtual void setMappingValues(double amin, double amid, double amax, double min, double init, double max) = 0;
        virtual void getMappingValues(double& amin, double& amid, double& amax) = 0;
        
        void setActive(bool on_off) { fActive = on_off; }
        bool getActive() { return fActive; }
    
};


//--------------------------------------------------------------------------------------
// Linear conversion between ui and Faust values
//--------------------------------------------------------------------------------------
class LinearValueConverter : public ValueConverter
{
    
    private:
        
        Interpolator fUI2F;
        Interpolator fF2UI;
        
    public:
        
        LinearValueConverter(double umin, double umax, double fmin, double fmax) :
            fUI2F(umin,umax,fmin,fmax), fF2UI(fmin,fmax,umin,umax)
        {}
        
        LinearValueConverter() : fUI2F(0.,0.,0.,0.), fF2UI(0.,0.,0.,0.)
        {}
        virtual double ui2faust(double x) { return fUI2F(x); }
        virtual double faust2ui(double x) { return fF2UI(x); }
    
};

//--------------------------------------------------------------------------------------
// Two segments linear conversion between ui and Faust values
//--------------------------------------------------------------------------------------
class LinearValueConverter2 : public UpdatableValueConverter
{
    
    private:
    
        Interpolator3pt fUI2F;
        Interpolator3pt fF2UI;
        
    public:
    
        LinearValueConverter2(double amin, double amid, double amax, double min, double init, double max) :
            fUI2F(amin, amid, amax, min, init, max), fF2UI(min, init, max, amin, amid, amax)
        {}
        
        LinearValueConverter2() : fUI2F(0.,0.,0.,0.,0.,0.), fF2UI(0.,0.,0.,0.,0.,0.)
        {}
    
        virtual double ui2faust(double x) { return fUI2F(x); }
        virtual double faust2ui(double x) { return fF2UI(x); }
    
        virtual void setMappingValues(double amin, double amid, double amax, double min, double init, double max)
        {
            fUI2F = Interpolator3pt(amin, amid, amax, min, init, max);
            fF2UI = Interpolator3pt(min, init, max, amin, amid, amax);
        }

        virtual void getMappingValues(double& amin, double& amid, double& amax)
        {
            fUI2F.getMappingValues(amin, amid, amax);
        }
    
};

//--------------------------------------------------------------------------------------
// Logarithmic conversion between ui and Faust values
//--------------------------------------------------------------------------------------
class LogValueConverter : public LinearValueConverter
{

    public:

        LogValueConverter(double umin, double umax, double fmin, double fmax) :
        LinearValueConverter(umin, umax, log(std::max<double>(DBL_MIN, fmin)), std::log(std::max<double>(DBL_MIN, fmax)))
        {}

        virtual double ui2faust(double x) { return std::exp(LinearValueConverter::ui2faust(x)); }
        virtual double faust2ui(double x) { return LinearValueConverter::faust2ui(std::log(std::max<double>(x, DBL_MIN))); }

};

//--------------------------------------------------------------------------------------
// Exponential conversion between ui and Faust values
//--------------------------------------------------------------------------------------
class ExpValueConverter : public LinearValueConverter
{

    public:

        ExpValueConverter(double umin, double umax, double fmin, double fmax) :
            LinearValueConverter(umin, umax, exp(fmin), exp(fmax))
        {}

        virtual double ui2faust(double x) { return std::log(LinearValueConverter::ui2faust(x)); }
        virtual double faust2ui(double x) { return LinearValueConverter::faust2ui(std::exp(x)); }

};

//--------------------------------------------------------------------------------------
// Convert accelerometer or gyroscope values to Faust values
// Using an Up curve (curve 0)
//--------------------------------------------------------------------------------------
class AccUpConverter : public UpdatableValueConverter
{

    private:

        Interpolator3pt fA2F;
        Interpolator3pt fF2A;

    public:

        AccUpConverter(double amin, double amid, double amax, double fmin, double fmid, double fmax) :
            fA2F(amin,amid,amax,fmin,fmid,fmax),
            fF2A(fmin,fmid,fmax,amin,amid,amax)
        {}

        virtual double ui2faust(double x) { return fA2F(x); }
        virtual double faust2ui(double x) { return fF2A(x); }

        virtual void setMappingValues(double amin, double amid, double amax, double fmin, double fmid, double fmax)
        {
            //__android_log_print(ANDROID_LOG_ERROR, "Faust", "AccUpConverter update %f %f %f %f %f %f", amin,amid,amax,fmin,fmid,fmax);
            fA2F = Interpolator3pt(amin, amid, amax, fmin, fmid, fmax);
            fF2A = Interpolator3pt(fmin, fmid, fmax, amin, amid, amax);
        }

        virtual void getMappingValues(double& amin, double& amid, double& amax)
        {
            fA2F.getMappingValues(amin, amid, amax);
        }

};

//--------------------------------------------------------------------------------------
// Convert accelerometer or gyroscope values to Faust values
// Using a Down curve (curve 1)
//--------------------------------------------------------------------------------------
class AccDownConverter : public UpdatableValueConverter
{

    private:

        Interpolator3pt	fA2F;
        Interpolator3pt	fF2A;

    public:

        AccDownConverter(double amin, double amid, double amax, double fmin, double fmid, double fmax) :
            fA2F(amin,amid,amax,fmax,fmid,fmin),
            fF2A(fmin,fmid,fmax,amax,amid,amin)
        {}

        virtual double ui2faust(double x) { return fA2F(x); }
        virtual double faust2ui(double x) { return fF2A(x); }

        virtual void setMappingValues(double amin, double amid, double amax, double fmin, double fmid, double fmax)
        {
             //__android_log_print(ANDROID_LOG_ERROR, "Faust", "AccDownConverter update %f %f %f %f %f %f", amin,amid,amax,fmin,fmid,fmax);
            fA2F = Interpolator3pt(amin, amid, amax, fmax, fmid, fmin);
            fF2A = Interpolator3pt(fmin, fmid, fmax, amax, amid, amin);
        }

        virtual void getMappingValues(double& amin, double& amid, double& amax)
        {
            fA2F.getMappingValues(amin, amid, amax);
        }
};

//--------------------------------------------------------------------------------------
// Convert accelerometer or gyroscope values to Faust values
// Using an Up-Down curve (curve 2)
//--------------------------------------------------------------------------------------
class AccUpDownConverter : public UpdatableValueConverter
{

    private:

        Interpolator3pt	fA2F;
        Interpolator fF2A;

    public:

        AccUpDownConverter(double amin, double amid, double amax, double fmin, double fmid, double fmax) :
            fA2F(amin,amid,amax,fmin,fmax,fmin),
            fF2A(fmin,fmax,amin,amax)				// Special, pseudo inverse of a non monotonic function
        {}

        virtual double ui2faust(double x) { return fA2F(x); }
        virtual double faust2ui(double x) { return fF2A(x); }

        virtual void setMappingValues(double amin, double amid, double amax, double fmin, double fmid, double fmax)
        {
            //__android_log_print(ANDROID_LOG_ERROR, "Faust", "AccUpDownConverter update %f %f %f %f %f %f", amin,amid,amax,fmin,fmid,fmax);
            fA2F = Interpolator3pt(amin, amid, amax, fmin, fmax, fmin);
            fF2A = Interpolator(fmin, fmax, amin, amax);
        }

        virtual void getMappingValues(double& amin, double& amid, double& amax)
        {
            fA2F.getMappingValues(amin, amid, amax);
        }
};

//--------------------------------------------------------------------------------------
// Convert accelerometer or gyroscope values to Faust values
// Using a Down-Up curve (curve 3)
//--------------------------------------------------------------------------------------
class AccDownUpConverter : public UpdatableValueConverter
{

    private:

        Interpolator3pt	fA2F;
        Interpolator fF2A;

    public:

        AccDownUpConverter(double amin, double amid, double amax, double fmin, double fmid, double fmax) :
            fA2F(amin,amid,amax,fmax,fmin,fmax),
            fF2A(fmin,fmax,amin,amax)				// Special, pseudo inverse of a non monotonic function
        {}

        virtual double ui2faust(double x) { return fA2F(x); }
        virtual double faust2ui(double x) { return fF2A(x); }

        virtual void setMappingValues(double amin, double amid, double amax, double fmin, double fmid, double fmax)
        {
            //__android_log_print(ANDROID_LOG_ERROR, "Faust", "AccDownUpConverter update %f %f %f %f %f %f", amin,amid,amax,fmin,fmid,fmax);
            fA2F = Interpolator3pt(amin, amid, amax, fmax, fmin, fmax);
            fF2A = Interpolator(fmin, fmax, amin, amax);
        }

        virtual void getMappingValues(double& amin, double& amid, double& amax)
        {
            fA2F.getMappingValues(amin, amid, amax);
        }
};

//--------------------------------------------------------------------------------------
// Base class for ZoneControl
//--------------------------------------------------------------------------------------
class ZoneControl
{

    protected:

        FAUSTFLOAT*	fZone;

    public:

        ZoneControl(FAUSTFLOAT* zone) : fZone(zone) {}
        virtual ~ZoneControl() {}

        virtual void update(double v) {}

        virtual void setMappingValues(int curve, double amin, double amid, double amax, double min, double init, double max) {}
        virtual void getMappingValues(double& amin, double& amid, double& amax) {}

        FAUSTFLOAT* getZone() { return fZone; }

        virtual void setActive(bool on_off) {}
        virtual bool getActive() { return false; }

        virtual int getCurve() { return -1; }

};

//--------------------------------------------------------------------------------------
//  Useful to implement accelerometers metadata as a list of ZoneControl for each axes
//--------------------------------------------------------------------------------------
class ConverterZoneControl : public ZoneControl
{

    private:

        ValueConverter* fValueConverter;

    public:

        ConverterZoneControl(FAUSTFLOAT* zone, ValueConverter* valueConverter) : ZoneControl(zone), fValueConverter(valueConverter) {}
        virtual ~ConverterZoneControl() { delete fValueConverter; } // Assuming fValueConverter is not kept elsewhere...

        void update(double v) { *fZone = fValueConverter->ui2faust(v); }

        ValueConverter* getConverter() { return fValueConverter; }

};

//--------------------------------------------------------------------------------------
// Association of a zone and a four value converter, each one for each possible curve.
// Useful to implement accelerometers metadata as a list of ZoneControl for each axes
//--------------------------------------------------------------------------------------
class CurveZoneControl : public ZoneControl
{

    private:

        std::vector<UpdatableValueConverter*> fValueConverters;
        int fCurve;

    public:

        CurveZoneControl(FAUSTFLOAT* zone, int curve, double amin, double amid, double amax, double min, double init, double max) : ZoneControl(zone), fCurve(0)
        {
            assert(curve >= 0 && curve <= 3);
            fValueConverters.push_back(new AccUpConverter(amin, amid, amax, min, init, max));
            fValueConverters.push_back(new AccDownConverter(amin, amid, amax, min, init, max));
            fValueConverters.push_back(new AccUpDownConverter(amin, amid, amax, min, init, max));
            fValueConverters.push_back(new AccDownUpConverter(amin, amid, amax, min, init, max));
            fCurve = curve;
        }
        virtual ~CurveZoneControl()
        {
            std::vector<UpdatableValueConverter*>::iterator it;
            for (it = fValueConverters.begin(); it != fValueConverters.end(); it++) {
                delete(*it);
            }
        }
        void update(double v) { if (fValueConverters[fCurve]->getActive()) *fZone = fValueConverters[fCurve]->ui2faust(v); }

        void setMappingValues(int curve, double amin, double amid, double amax, double min, double init, double max)
        {
            fValueConverters[curve]->setMappingValues(amin, amid, amax, min, init, max);
            fCurve = curve;
        }

        void getMappingValues(double& amin, double& amid, double& amax)
        {
            fValueConverters[fCurve]->getMappingValues(amin, amid, amax);
        }

        void setActive(bool on_off)
        {
            std::vector<UpdatableValueConverter*>::iterator it;
            for (it = fValueConverters.begin(); it != fValueConverters.end(); it++) {
                (*it)->setActive(on_off);
            }
        }

        int getCurve() { return fCurve; }
};

class ZoneReader
{

    private:

        FAUSTFLOAT* fZone;
        Interpolator fInterpolator;

    public:

        ZoneReader(FAUSTFLOAT* zone, double lo, double hi) : fZone(zone), fInterpolator(lo, hi, 0, 255) {}

        virtual ~ZoneReader() {}

        int getValue()
        {
            return (fZone != nullptr) ? int(fInterpolator(*fZone)) : 127;
        }

};

#endif
/**************************  END  ValueConverter.h **************************/

class APIUI : public PathBuilder, public Meta, public UI
{
    public:
    
        enum ItemType { kButton = 0, kCheckButton, kVSlider, kHSlider, kNumEntry, kHBargraph, kVBargraph };
  
    protected:
    
        enum { kLin = 0, kLog = 1, kExp = 2 };
    
        int fNumParameters;
        std::vector<std::string> fPaths;
        std::vector<std::string> fLabels;
        std::map<std::string, int> fPathMap;
        std::map<std::string, int> fLabelMap;
        std::vector<ValueConverter*> fConversion;
        std::vector<FAUSTFLOAT*> fZone;
        std::vector<FAUSTFLOAT> fInit;
        std::vector<FAUSTFLOAT> fMin;
        std::vector<FAUSTFLOAT> fMax;
        std::vector<FAUSTFLOAT> fStep;
        std::vector<ItemType> fItemType;
        std::vector<std::map<std::string, std::string> > fMetaData;
        std::vector<ZoneControl*> fAcc[3];
        std::vector<ZoneControl*> fGyr[3];

        // Screen color control
        // "...[screencolor:red]..." etc.
        bool fHasScreenControl;      // true if control screen color metadata
        ZoneReader* fRedReader;
        ZoneReader* fGreenReader;
        ZoneReader* fBlueReader;

        // Current values controlled by metadata
        std::string fCurrentUnit;
        int fCurrentScale;
        std::string fCurrentAcc;
        std::string fCurrentGyr;
        std::string fCurrentColor;
        std::string fCurrentTooltip;
        std::map<std::string, std::string> fCurrentMetadata;
    
        // Add a generic parameter
        virtual void addParameter(const char* label,
                                FAUSTFLOAT* zone,
                                FAUSTFLOAT init,
                                FAUSTFLOAT min,
                                FAUSTFLOAT max,
                                FAUSTFLOAT step,
                                ItemType type)
        {
            std::string path = buildPath(label);
            fPathMap[path] = fLabelMap[label] = fNumParameters++;
            fPaths.push_back(path);
            fLabels.push_back(label);
            fZone.push_back(zone);
            fInit.push_back(init);
            fMin.push_back(min);
            fMax.push_back(max);
            fStep.push_back(step);
            fItemType.push_back(type);
            
            // handle scale metadata
            switch (fCurrentScale) {
                case kLin:
                    fConversion.push_back(new LinearValueConverter(0, 1, min, max));
                    break;
                case kLog:
                    fConversion.push_back(new LogValueConverter(0, 1, min, max));
                    break;
                case kExp: fConversion.push_back(new ExpValueConverter(0, 1, min, max));
                    break;
            }
            fCurrentScale = kLin;
            
            if (fCurrentAcc.size() > 0 && fCurrentGyr.size() > 0) {
                std::cerr << "warning : 'acc' and 'gyr' metadata used for the same " << label << " parameter !!\n";
            }

            // handle acc metadata "...[acc : <axe> <curve> <amin> <amid> <amax>]..."
            if (fCurrentAcc.size() > 0) {
                std::istringstream iss(fCurrentAcc);
                int axe, curve;
                double amin, amid, amax;
                iss >> axe >> curve >> amin >> amid >> amax;

                if ((0 <= axe) && (axe < 3) &&
                    (0 <= curve) && (curve < 4) &&
                    (amin < amax) && (amin <= amid) && (amid <= amax))
                {
                    fAcc[axe].push_back(new CurveZoneControl(zone, curve, amin, amid, amax, min, init, max));
                } else {
                    std::cerr << "incorrect acc metadata : " << fCurrentAcc << std::endl;
                }
                fCurrentAcc = "";
            }
       
            // handle gyr metadata "...[gyr : <axe> <curve> <amin> <amid> <amax>]..."
            if (fCurrentGyr.size() > 0) {
                std::istringstream iss(fCurrentGyr);
                int axe, curve;
                double amin, amid, amax;
                iss >> axe >> curve >> amin >> amid >> amax;

                if ((0 <= axe) && (axe < 3) &&
                    (0 <= curve) && (curve < 4) &&
                    (amin < amax) && (amin <= amid) && (amid <= amax))
                {
                    fGyr[axe].push_back(new CurveZoneControl(zone, curve, amin, amid, amax, min, init, max));
                } else {
                    std::cerr << "incorrect gyr metadata : " << fCurrentGyr << std::endl;
                }
                fCurrentGyr = "";
            }
        
            // handle screencolor metadata "...[screencolor:red|green|blue|white]..."
            if (fCurrentColor.size() > 0) {
                if ((fCurrentColor == "red") && (fRedReader == 0)) {
                    fRedReader = new ZoneReader(zone, min, max);
                    fHasScreenControl = true;
                } else if ((fCurrentColor == "green") && (fGreenReader == 0)) {
                    fGreenReader = new ZoneReader(zone, min, max);
                    fHasScreenControl = true;
                } else if ((fCurrentColor == "blue") && (fBlueReader == 0)) {
                    fBlueReader = new ZoneReader(zone, min, max);
                    fHasScreenControl = true;
                } else if ((fCurrentColor == "white") && (fRedReader == 0) && (fGreenReader == 0) && (fBlueReader == 0)) {
                    fRedReader = new ZoneReader(zone, min, max);
                    fGreenReader = new ZoneReader(zone, min, max);
                    fBlueReader = new ZoneReader(zone, min, max);
                    fHasScreenControl = true;
                } else {
                    std::cerr << "incorrect screencolor metadata : " << fCurrentColor << std::endl;
                }
            }
            fCurrentColor = "";
            
            fMetaData.push_back(fCurrentMetadata);
            fCurrentMetadata.clear();
        }

        int getZoneIndex(std::vector<ZoneControl*>* table, int p, int val)
        {
            FAUSTFLOAT* zone = fZone[p];
            for (size_t i = 0; i < table[val].size(); i++) {
                if (zone == table[val][i]->getZone()) return int(i);
            }
            return -1;
        }
    
        void setConverter(std::vector<ZoneControl*>* table, int p, int val, int curve, double amin, double amid, double amax)
        {
            int id1 = getZoneIndex(table, p, 0);
            int id2 = getZoneIndex(table, p, 1);
            int id3 = getZoneIndex(table, p, 2);
            
            // Deactivates everywhere..
            if (id1 != -1) table[0][id1]->setActive(false);
            if (id2 != -1) table[1][id2]->setActive(false);
            if (id3 != -1) table[2][id3]->setActive(false);
            
            if (val == -1) { // Means: no more mapping...
                // So stay all deactivated...
            } else {
                int id4 = getZoneIndex(table, p, val);
                if (id4 != -1) {
                    // Reactivate the one we edit...
                    table[val][id4]->setMappingValues(curve, amin, amid, amax, fMin[p], fInit[p], fMax[p]);
                    table[val][id4]->setActive(true);
                } else {
                    // Allocate a new CurveZoneControl which is 'active' by default
                    FAUSTFLOAT* zone = fZone[p];
                    table[val].push_back(new CurveZoneControl(zone, curve, amin, amid, amax, fMin[p], fInit[p], fMax[p]));
                }
            }
        }
    
        void getConverter(std::vector<ZoneControl*>* table, int p, int& val, int& curve, double& amin, double& amid, double& amax)
        {
            int id1 = getZoneIndex(table, p, 0);
            int id2 = getZoneIndex(table, p, 1);
            int id3 = getZoneIndex(table, p, 2);
            
            if (id1 != -1) {
                val = 0;
                curve = table[val][id1]->getCurve();
                table[val][id1]->getMappingValues(amin, amid, amax);
            } else if (id2 != -1) {
                val = 1;
                curve = table[val][id2]->getCurve();
                table[val][id2]->getMappingValues(amin, amid, amax);
            } else if (id3 != -1) {
                val = 2;
                curve = table[val][id3]->getCurve();
                table[val][id3]->getMappingValues(amin, amid, amax);
            } else {
                val = -1; // No mapping
                curve = 0;
                amin = -100.;
                amid = 0.;
                amax = 100.;
            }
        }

     public:
    
        enum Type { kAcc = 0, kGyr = 1, kNoType };
   
        APIUI() : fNumParameters(0), fHasScreenControl(false), fRedReader(0), fGreenReader(0), fBlueReader(0), fCurrentScale(kLin)
        {}

        virtual ~APIUI()
        {
            for (auto& it : fConversion) delete it;
            for (int i = 0; i < 3; i++) {
                for (auto& it : fAcc[i]) delete it;
                for (auto& it : fGyr[i]) delete it;
            }
            delete fRedReader;
            delete fGreenReader;
            delete fBlueReader;
        }
    
        // -- widget's layouts

        virtual void openTabBox(const char* label) { pushLabel(label); }
        virtual void openHorizontalBox(const char* label) { pushLabel(label); }
        virtual void openVerticalBox(const char* label) { pushLabel(label); }
        virtual void closeBox() { popLabel(); }

        // -- active widgets

        virtual void addButton(const char* label, FAUSTFLOAT* zone)
        {
            addParameter(label, zone, 0, 0, 1, 1, kButton);
        }

        virtual void addCheckButton(const char* label, FAUSTFLOAT* zone)
        {
            addParameter(label, zone, 0, 0, 1, 1, kCheckButton);
        }

        virtual void addVerticalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        {
            addParameter(label, zone, init, min, max, step, kVSlider);
        }

        virtual void addHorizontalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        {
            addParameter(label, zone, init, min, max, step, kHSlider);
        }

        virtual void addNumEntry(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        {
            addParameter(label, zone, init, min, max, step, kNumEntry);
        }

        // -- passive widgets

        virtual void addHorizontalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max)
        {
            addParameter(label, zone, min, min, max, (max-min)/1000.0, kHBargraph);
        }

        virtual void addVerticalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max)
        {
            addParameter(label, zone, min, min, max, (max-min)/1000.0, kVBargraph);
        }
    
        // -- soundfiles
    
        virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) {}

        // -- metadata declarations

        virtual void declare(FAUSTFLOAT* zone, const char* key, const char* val)
        {
            // Keep matadata
            fCurrentMetadata[key] = val;
            
            if (strcmp(key, "scale") == 0) {
                if (strcmp(val, "log") == 0) {
                    fCurrentScale = kLog;
                } else if (strcmp(val, "exp") == 0) {
                    fCurrentScale = kExp;
                } else {
                    fCurrentScale = kLin;
                }
            } else if (strcmp(key, "unit") == 0) {
                fCurrentUnit = val;
            } else if (strcmp(key, "acc") == 0) {
                fCurrentAcc = val;
            } else if (strcmp(key, "gyr") == 0) {
                fCurrentGyr = val;
            } else if (strcmp(key, "screencolor") == 0) {
                fCurrentColor = val; // val = "red", "green", "blue" or "white"
            } else if (strcmp(key, "tooltip") == 0) {
                fCurrentTooltip = val;
            }
        }

        virtual void declare(const char* key, const char* val)
        {}

		//-------------------------------------------------------------------------------
		// Simple API part
		//-------------------------------------------------------------------------------
		int getParamsCount() { return fNumParameters; }
        int getParamIndex(const char* path)
        {
            if (fPathMap.find(path) != fPathMap.end()) {
                return fPathMap[path];
            } else if (fLabelMap.find(path) != fLabelMap.end()) {
                return fLabelMap[path];
            } else {
                return -1;
            }
        }
        const char* getParamAddress(int p) { return fPaths[p].c_str(); }
        const char* getParamLabel(int p) { return fLabels[p].c_str(); }
        std::map<const char*, const char*> getMetadata(int p)
        {
            std::map<const char*, const char*> res;
            std::map<std::string, std::string> metadata = fMetaData[p];
            std::map<std::string, std::string>::iterator it;
            for (it = metadata.begin(); it != metadata.end(); ++it) {
                res[(*it).first.c_str()] = (*it).second.c_str();
            }
            return res;
        }

        const char* getMetadata(int p, const char* key)
        {
            return (fMetaData[p].find(key) != fMetaData[p].end()) ? fMetaData[p][key].c_str() : "";
        }
        FAUSTFLOAT getParamMin(int p) { return fMin[p]; }
        FAUSTFLOAT getParamMax(int p) { return fMax[p]; }
        FAUSTFLOAT getParamStep(int p) { return fStep[p]; }
        FAUSTFLOAT getParamInit(int p) { return fInit[p]; }

        FAUSTFLOAT* getParamZone(int p) { return fZone[p]; }
        FAUSTFLOAT getParamValue(int p) { return *fZone[p]; }
        void setParamValue(int p, FAUSTFLOAT v) { *fZone[p] = v; }

        double getParamRatio(int p) { return fConversion[p]->faust2ui(*fZone[p]); }
        void setParamRatio(int p, double r) { *fZone[p] = fConversion[p]->ui2faust(r); }

        double value2ratio(int p, double r)	{ return fConversion[p]->faust2ui(r); }
        double ratio2value(int p, double r)	{ return fConversion[p]->ui2faust(r); }
    
        /**
         * Return the control type (kAcc, kGyr, or -1) for a given parameter
         *
         * @param p - the UI parameter index
         *
         * @return the type
         */
        Type getParamType(int p)
        {
            if (p >= 0) {
                if (getZoneIndex(fAcc, p, 0) != -1
                    || getZoneIndex(fAcc, p, 1) != -1
                    || getZoneIndex(fAcc, p, 2) != -1) {
                    return kAcc;
                } else if (getZoneIndex(fGyr, p, 0) != -1
                           || getZoneIndex(fGyr, p, 1) != -1
                           || getZoneIndex(fGyr, p, 2) != -1) {
                    return kGyr;
                }
            }
            return kNoType;
        }
    
        /**
         * Return the Item type (kButton = 0, kCheckButton, kVSlider, kHSlider, kNumEntry, kHBargraph, kVBargraph) for a given parameter
         *
         * @param p - the UI parameter index
         *
         * @return the Item type
         */
        ItemType getParamItemType(int p)
        {
            return fItemType[p];
        }
   
        /**
         * Set a new value coming from an accelerometer, propagate it to all relevant FAUSTFLOAT* zones.
         *
         * @param acc - 0 for X accelerometer, 1 for Y accelerometer, 2 for Z accelerometer
         * @param value - the new value
         *
         */
        void propagateAcc(int acc, double value)
        {
            for (size_t i = 0; i < fAcc[acc].size(); i++) {
                fAcc[acc][i]->update(value);
            }
        }
    
        /**
         * Used to edit accelerometer curves and mapping. Set curve and related mapping for a given UI parameter.
         *
         * @param p - the UI parameter index
         * @param acc - 0 for X accelerometer, 1 for Y accelerometer, 2 for Z accelerometer (-1 means "no mapping")
         * @param curve - between 0 and 3
         * @param amin - mapping 'min' point
         * @param amid - mapping 'middle' point
         * @param amax - mapping 'max' point
         *
         */
        void setAccConverter(int p, int acc, int curve, double amin, double amid, double amax)
        {
            setConverter(fAcc, p, acc, curve, amin, amid, amax);
        }
    
        /**
         * Used to edit gyroscope curves and mapping. Set curve and related mapping for a given UI parameter.
         *
         * @param p - the UI parameter index
         * @param acc - 0 for X gyroscope, 1 for Y gyroscope, 2 for Z gyroscope (-1 means "no mapping")
         * @param curve - between 0 and 3
         * @param amin - mapping 'min' point
         * @param amid - mapping 'middle' point
         * @param amax - mapping 'max' point
         *
         */
        void setGyrConverter(int p, int gyr, int curve, double amin, double amid, double amax)
        {
             setConverter(fGyr, p, gyr, curve, amin, amid, amax);
        }
    
        /**
         * Used to edit accelerometer curves and mapping. Get curve and related mapping for a given UI parameter.
         *
         * @param p - the UI parameter index
         * @param acc - the acc value to be retrieved (-1 means "no mapping")
         * @param curve - the curve value to be retrieved
         * @param amin - the amin value to be retrieved
         * @param amid - the amid value to be retrieved
         * @param amax - the amax value to be retrieved
         *
         */
        void getAccConverter(int p, int& acc, int& curve, double& amin, double& amid, double& amax)
        {
            getConverter(fAcc, p, acc, curve, amin, amid, amax);
        }

        /**
         * Used to edit gyroscope curves and mapping. Get curve and related mapping for a given UI parameter.
         *
         * @param p - the UI parameter index
         * @param gyr - the gyr value to be retrieved (-1 means "no mapping")
         * @param curve - the curve value to be retrieved
         * @param amin - the amin value to be retrieved
         * @param amid - the amid value to be retrieved
         * @param amax - the amax value to be retrieved
         *
         */
        void getGyrConverter(int p, int& gyr, int& curve, double& amin, double& amid, double& amax)
        {
            getConverter(fGyr, p, gyr, curve, amin, amid, amax);
        }
    
        /**
         * Set a new value coming from an gyroscope, propagate it to all relevant FAUSTFLOAT* zones.
         *
         * @param gyr - 0 for X gyroscope, 1 for Y gyroscope, 2 for Z gyroscope
         * @param value - the new value
         *
         */
        void propagateGyr(int gyr, double value)
        {
            for (size_t i = 0; i < fGyr[gyr].size(); i++) {
                fGyr[gyr][i]->update(value);
            }
        }
    
        /**
         * Get the number of FAUSTFLOAT* zones controlled with the accelerometer
         *
         * @param acc - 0 for X accelerometer, 1 for Y accelerometer, 2 for Z accelerometer
         * @return the number of zones
         *
         */
        int getAccCount(int acc)
        {
            return (acc >= 0 && acc < 3) ? int(fAcc[acc].size()) : 0;
        }
    
        /**
         * Get the number of FAUSTFLOAT* zones controlled with the gyroscope
         *
         * @param gyr - 0 for X gyroscope, 1 for Y gyroscope, 2 for Z gyroscope
         * @param the number of zones
         *
         */
        int getGyrCount(int gyr)
        {
            return (gyr >= 0 && gyr < 3) ? int(fGyr[gyr].size()) : 0;
        }
   
        // getScreenColor() : -1 means no screen color control (no screencolor metadata found)
        // otherwise return 0x00RRGGBB a ready to use color
        int getScreenColor()
        {
            if (fHasScreenControl) {
                int r = (fRedReader) ? fRedReader->getValue() : 0;
                int g = (fGreenReader) ? fGreenReader->getValue() : 0;
                int b = (fBlueReader) ? fBlueReader->getValue() : 0;
                return (r<<16) | (g<<8) | b;
            } else {
                return -1;
            }
        }
 
};

#endif
/**************************  END  APIUI.h **************************/
/************************** BEGIN MidiUI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef FAUST_MIDIUI_H
#define FAUST_MIDIUI_H

#include <vector>
#include <string>
#include <utility>
#include <iostream>
#include <cstdlib>
#include <cmath>

/************************** BEGIN GUI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/
 
#ifndef __GUI_H__
#define __GUI_H__

#include <list>
#include <map>
#include <vector>
#include <iostream>
#include <assert.h>

#ifdef _WIN32
# pragma warning (disable: 4100)
#else
# pragma GCC diagnostic ignored "-Wunused-parameter"
#endif

/************************** BEGIN ring-buffer.h **************************/
/*
  Copyright (C) 2000 Paul Davis
  Copyright (C) 2003 Rohan Drape
  Copyright (C) 2016 GRAME (renaming for internal use)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation; either version 2.1 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

  ISO/POSIX C version of Paul Davis's lock free ringbuffer C++ code.
  This is safe for the case of one read thread and one write thread.
*/

#ifndef __ring_buffer__
#define __ring_buffer__

#include <stdlib.h>
#include <string.h>

#ifdef WIN32
# pragma warning (disable: 4334)
#else
# pragma GCC diagnostic ignored "-Wunused-function"
#endif

typedef struct {
    char *buf;
    size_t len;
}
ringbuffer_data_t;

typedef struct {
    char *buf;
    volatile size_t write_ptr;
    volatile size_t read_ptr;
    size_t	size;
    size_t	size_mask;
    int	mlocked;
}
ringbuffer_t;

static ringbuffer_t *ringbuffer_create(size_t sz);
static void ringbuffer_free(ringbuffer_t *rb);
static void ringbuffer_get_read_vector(const ringbuffer_t *rb,
                                         ringbuffer_data_t *vec);
static void ringbuffer_get_write_vector(const ringbuffer_t *rb,
                                          ringbuffer_data_t *vec);
static size_t ringbuffer_read(ringbuffer_t *rb, char *dest, size_t cnt);
static size_t ringbuffer_peek(ringbuffer_t *rb, char *dest, size_t cnt);
static void ringbuffer_read_advance(ringbuffer_t *rb, size_t cnt);
static size_t ringbuffer_read_space(const ringbuffer_t *rb);
static int ringbuffer_mlock(ringbuffer_t *rb);
static void ringbuffer_reset(ringbuffer_t *rb);
static void ringbuffer_reset_size (ringbuffer_t * rb, size_t sz);
static size_t ringbuffer_write(ringbuffer_t *rb, const char *src,
                                 size_t cnt);
static void ringbuffer_write_advance(ringbuffer_t *rb, size_t cnt);
static size_t ringbuffer_write_space(const ringbuffer_t *rb);

/* Create a new ringbuffer to hold at least `sz' bytes of data. The
   actual buffer size is rounded up to the next power of two. */

static ringbuffer_t *
ringbuffer_create (size_t sz)
{
	size_t power_of_two;
	ringbuffer_t *rb;

	if ((rb = (ringbuffer_t *) malloc (sizeof (ringbuffer_t))) == NULL) {
		return NULL;
	}

	for (power_of_two = 1u; 1u << power_of_two < sz; power_of_two++);

	rb->size = 1u << power_of_two;
	rb->size_mask = rb->size;
	rb->size_mask -= 1;
	rb->write_ptr = 0;
	rb->read_ptr = 0;
	if ((rb->buf = (char *) malloc (rb->size)) == NULL) {
		free (rb);
		return NULL;
	}
	rb->mlocked = 0;

	return rb;
}

/* Free all data associated with the ringbuffer `rb'. */

static void
ringbuffer_free (ringbuffer_t * rb)
{
#ifdef USE_MLOCK
	if (rb->mlocked) {
		munlock (rb->buf, rb->size);
	}
#endif /* USE_MLOCK */
	free (rb->buf);
	free (rb);
}

/* Lock the data block of `rb' using the system call 'mlock'.  */

static int
ringbuffer_mlock (ringbuffer_t * rb)
{
#ifdef USE_MLOCK
	if (mlock (rb->buf, rb->size)) {
		return -1;
	}
#endif /* USE_MLOCK */
	rb->mlocked = 1;
	return 0;
}

/* Reset the read and write pointers to zero. This is not thread
   safe. */

static void
ringbuffer_reset (ringbuffer_t * rb)
{
	rb->read_ptr = 0;
	rb->write_ptr = 0;
    memset(rb->buf, 0, rb->size);
}

/* Reset the read and write pointers to zero. This is not thread
   safe. */

static void
ringbuffer_reset_size (ringbuffer_t * rb, size_t sz)
{
    rb->size = sz;
    rb->size_mask = rb->size;
    rb->size_mask -= 1;
    rb->read_ptr = 0;
    rb->write_ptr = 0;
}

/* Return the number of bytes available for reading. This is the
   number of bytes in front of the read pointer and behind the write
   pointer.  */

static size_t
ringbuffer_read_space (const ringbuffer_t * rb)
{
	size_t w, r;

	w = rb->write_ptr;
	r = rb->read_ptr;

	if (w > r) {
		return w - r;
	} else {
		return (w - r + rb->size) & rb->size_mask;
	}
}

/* Return the number of bytes available for writing. This is the
   number of bytes in front of the write pointer and behind the read
   pointer.  */

static size_t
ringbuffer_write_space (const ringbuffer_t * rb)
{
	size_t w, r;

	w = rb->write_ptr;
	r = rb->read_ptr;

	if (w > r) {
		return ((r - w + rb->size) & rb->size_mask) - 1;
	} else if (w < r) {
		return (r - w) - 1;
	} else {
		return rb->size - 1;
	}
}

/* The copying data reader. Copy at most `cnt' bytes from `rb' to
   `dest'.  Returns the actual number of bytes copied. */

static size_t
ringbuffer_read (ringbuffer_t * rb, char *dest, size_t cnt)
{
	size_t free_cnt;
	size_t cnt2;
	size_t to_read;
	size_t n1, n2;

	if ((free_cnt = ringbuffer_read_space (rb)) == 0) {
		return 0;
	}

	to_read = cnt > free_cnt ? free_cnt : cnt;

	cnt2 = rb->read_ptr + to_read;

	if (cnt2 > rb->size) {
		n1 = rb->size - rb->read_ptr;
		n2 = cnt2 & rb->size_mask;
	} else {
		n1 = to_read;
		n2 = 0;
	}

	memcpy (dest, &(rb->buf[rb->read_ptr]), n1);
	rb->read_ptr = (rb->read_ptr + n1) & rb->size_mask;

	if (n2) {
		memcpy (dest + n1, &(rb->buf[rb->read_ptr]), n2);
		rb->read_ptr = (rb->read_ptr + n2) & rb->size_mask;
	}

	return to_read;
}

/* The copying data reader w/o read pointer advance. Copy at most
   `cnt' bytes from `rb' to `dest'.  Returns the actual number of bytes
   copied. */

static size_t
ringbuffer_peek (ringbuffer_t * rb, char *dest, size_t cnt)
{
	size_t free_cnt;
	size_t cnt2;
	size_t to_read;
	size_t n1, n2;
	size_t tmp_read_ptr;

	tmp_read_ptr = rb->read_ptr;

	if ((free_cnt = ringbuffer_read_space (rb)) == 0) {
		return 0;
	}

	to_read = cnt > free_cnt ? free_cnt : cnt;

	cnt2 = tmp_read_ptr + to_read;

	if (cnt2 > rb->size) {
		n1 = rb->size - tmp_read_ptr;
		n2 = cnt2 & rb->size_mask;
	} else {
		n1 = to_read;
		n2 = 0;
	}

	memcpy (dest, &(rb->buf[tmp_read_ptr]), n1);
	tmp_read_ptr = (tmp_read_ptr + n1) & rb->size_mask;

	if (n2) {
		memcpy (dest + n1, &(rb->buf[tmp_read_ptr]), n2);
	}

	return to_read;
}

/* The copying data writer. Copy at most `cnt' bytes to `rb' from
   `src'.  Returns the actual number of bytes copied. */

static size_t
ringbuffer_write (ringbuffer_t * rb, const char *src, size_t cnt)
{
	size_t free_cnt;
	size_t cnt2;
	size_t to_write;
	size_t n1, n2;

	if ((free_cnt = ringbuffer_write_space (rb)) == 0) {
		return 0;
	}

	to_write = cnt > free_cnt ? free_cnt : cnt;

	cnt2 = rb->write_ptr + to_write;

	if (cnt2 > rb->size) {
		n1 = rb->size - rb->write_ptr;
		n2 = cnt2 & rb->size_mask;
	} else {
		n1 = to_write;
		n2 = 0;
	}

	memcpy (&(rb->buf[rb->write_ptr]), src, n1);
	rb->write_ptr = (rb->write_ptr + n1) & rb->size_mask;

	if (n2) {
		memcpy (&(rb->buf[rb->write_ptr]), src + n1, n2);
		rb->write_ptr = (rb->write_ptr + n2) & rb->size_mask;
	}

	return to_write;
}

/* Advance the read pointer `cnt' places. */

static void
ringbuffer_read_advance (ringbuffer_t * rb, size_t cnt)
{
	size_t tmp = (rb->read_ptr + cnt) & rb->size_mask;
	rb->read_ptr = tmp;
}

/* Advance the write pointer `cnt' places. */

static void
ringbuffer_write_advance (ringbuffer_t * rb, size_t cnt)
{
	size_t tmp = (rb->write_ptr + cnt) & rb->size_mask;
	rb->write_ptr = tmp;
}

/* The non-copying data reader. `vec' is an array of two places. Set
   the values at `vec' to hold the current readable data at `rb'. If
   the readable data is in one segment the second segment has zero
   length. */

static void
ringbuffer_get_read_vector (const ringbuffer_t * rb,
				 ringbuffer_data_t * vec)
{
	size_t free_cnt;
	size_t cnt2;
	size_t w, r;

	w = rb->write_ptr;
	r = rb->read_ptr;

	if (w > r) {
		free_cnt = w - r;
	} else {
		free_cnt = (w - r + rb->size) & rb->size_mask;
	}

	cnt2 = r + free_cnt;

	if (cnt2 > rb->size) {

		/* Two part vector: the rest of the buffer after the current write
		   ptr, plus some from the start of the buffer. */

		vec[0].buf = &(rb->buf[r]);
		vec[0].len = rb->size - r;
		vec[1].buf = rb->buf;
		vec[1].len = cnt2 & rb->size_mask;

	} else {

		/* Single part vector: just the rest of the buffer */

		vec[0].buf = &(rb->buf[r]);
		vec[0].len = free_cnt;
		vec[1].len = 0;
	}
}

/* The non-copying data writer. `vec' is an array of two places. Set
   the values at `vec' to hold the current writeable data at `rb'. If
   the writeable data is in one segment the second segment has zero
   length. */

static void
ringbuffer_get_write_vector (const ringbuffer_t * rb,
				  ringbuffer_data_t * vec)
{
	size_t free_cnt;
	size_t cnt2;
	size_t w, r;

	w = rb->write_ptr;
	r = rb->read_ptr;

	if (w > r) {
		free_cnt = ((r - w + rb->size) & rb->size_mask) - 1;
	} else if (w < r) {
		free_cnt = (r - w) - 1;
	} else {
		free_cnt = rb->size - 1;
	}

	cnt2 = w + free_cnt;

	if (cnt2 > rb->size) {

		/* Two part vector: the rest of the buffer after the current write
		   ptr, plus some from the start of the buffer. */

		vec[0].buf = &(rb->buf[w]);
		vec[0].len = rb->size - w;
		vec[1].buf = rb->buf;
		vec[1].len = cnt2 & rb->size_mask;
	} else {
		vec[0].buf = &(rb->buf[w]);
		vec[0].len = free_cnt;
		vec[1].len = 0;
	}
}

#endif // __ring_buffer__
/**************************  END  ring-buffer.h **************************/

/*******************************************************************************
 * GUI : Abstract Graphic User Interface
 * Provides additional mechanisms to synchronize widgets and zones. Widgets
 * should both reflect the value of a zone and allow to change this value.
 ******************************************************************************/

class uiItem;
class GUI;
struct clist;

typedef void (*uiCallback)(FAUSTFLOAT val, void* data);

struct uiItemBase
{
    
    uiItemBase(GUI* ui, FAUSTFLOAT* zone)
    {
        assert(ui);
        assert(zone);
    }
    
    virtual ~uiItemBase()
    {}
    
    virtual void modifyZone(FAUSTFLOAT v) = 0;
    virtual void modifyZone(double date, FAUSTFLOAT v) {}
    virtual double cache() = 0;
    virtual void reflectZone() = 0;
};


static void deleteClist(clist* cl);

struct clist : public std::list<uiItemBase*>
{
    
    virtual ~clist()
    {
        deleteClist(this);
    }
        
};

static void createUiCallbackItem(GUI* ui, FAUSTFLOAT* zone, uiCallback foo, void* data);

typedef std::map<FAUSTFLOAT*, clist*> zmap;

typedef std::map<FAUSTFLOAT*, ringbuffer_t*> ztimedmap;

class GUI : public UI
{
		
    private:
     
        static std::list<GUI*> fGuiList;
        zmap fZoneMap;
        bool fStopped;
        
     public:
            
        GUI():fStopped(false)
        {	
            fGuiList.push_back(this);
        }
        
        virtual ~GUI() 
        {   
            // delete all items
            for (auto& it : fZoneMap) {
                delete it.second;
            }
            // suppress 'this' in static fGuiList
            fGuiList.remove(this);
        }

        // -- registerZone(z,c) : zone management
        
        void registerZone(FAUSTFLOAT* z, uiItemBase* c)
        {
            if (fZoneMap.find(z) == fZoneMap.end()) fZoneMap[z] = new clist();
            fZoneMap[z]->push_back(c);
        }
 
        void updateZone(FAUSTFLOAT* z)
        {
            FAUSTFLOAT v = *z;
            clist* cl = fZoneMap[z];
            for (auto& c : *cl) {
                if (c->cache() != v) c->reflectZone();
            }
        }
    
        void updateAllZones()
        {
            for (auto& m : fZoneMap) {
                updateZone(m.first);
            }
        }
    
        static void updateAllGuis()
        {
            for (auto& g : fGuiList) {
                g->updateAllZones();
            }
        }
    
        static void runAllGuis()
        {
            for (auto& g : fGuiList) {
                g->run();
            }
        }
    
        void addCallback(FAUSTFLOAT* zone, uiCallback foo, void* data)
        {
            createUiCallbackItem(this, zone, foo, data);
        }

        virtual void show() {};	
        virtual bool run() { return false; };

        virtual void stop() { fStopped = true; }
        bool stopped() { return fStopped; }
    
        // -- widget's layouts
        
        virtual void openTabBox(const char* label) {};
        virtual void openHorizontalBox(const char* label) {}
        virtual void openVerticalBox(const char* label) {}
        virtual void closeBox() {}
        
        // -- active widgets
        
        virtual void addButton(const char* label, FAUSTFLOAT* zone) {}
        virtual void addCheckButton(const char* label, FAUSTFLOAT* zone) {}
        virtual void addVerticalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) {}
        virtual void addHorizontalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) {}
        virtual void addNumEntry(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) {}
    
        // -- passive widgets
        
        virtual void addHorizontalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max) {}
        virtual void addVerticalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max) {}
    
        // -- soundfiles
    
        virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) {}
    
        // -- metadata declarations

        virtual void declare(FAUSTFLOAT*, const char*, const char*) {}
    
        // Static global for timed zones, shared between all UI that will set timed values
        static ztimedmap gTimedZoneMap;

};

/**
 * User Interface Item: abstract definition
 */

template <typename REAL>
class uiTypedItem : public uiItemBase
{
    protected:
        
        GUI* fGUI;
        REAL* fZone;
        REAL fCache;
        
        uiTypedItem(GUI* ui, REAL* zone):uiItemBase(ui, static_cast<FAUSTFLOAT*>(zone)),
        fGUI(ui), fZone(zone), fCache(REAL(-123456.654321))
        {
            ui->registerZone(zone, this);
        }
        
    public:
        
        virtual ~uiTypedItem()
        {}
    
        void modifyZone(REAL v)
        {
            fCache = v;
            if (*fZone != v) {
                *fZone = v;
                fGUI->updateZone(fZone);
            }
        }
    
        double cache() { return fCache; }
    
};

class uiItem : public uiTypedItem<FAUSTFLOAT> {
    
    protected:
    
        uiItem(GUI* ui, FAUSTFLOAT* zone):uiTypedItem<FAUSTFLOAT>(ui, zone)
        {}

    public:

        virtual ~uiItem() 
        {}

		void modifyZone(FAUSTFLOAT v)
		{
			fCache = v;
			if (*fZone != v) {
				*fZone = v;
				fGUI->updateZone(fZone);
			}
		}

};

/**
 * User Interface item owned (and so deleted) by external code
 */

class uiOwnedItem : public uiItem {
    
    protected:
    
        uiOwnedItem(GUI* ui, FAUSTFLOAT* zone):uiItem(ui, zone)
        {}
    
     public:
    
        virtual ~uiOwnedItem()
        {}
    
        virtual void reflectZone() {}
};

/**
 * Callback Item
 */

class uiCallbackItem : public uiItem {
    
    protected:
    
        uiCallback fCallback;
        void* fData;
    
    public:
    
        uiCallbackItem(GUI* ui, FAUSTFLOAT* zone, uiCallback foo, void* data)
        : uiItem(ui, zone), fCallback(foo), fData(data) {}
        
        virtual void reflectZone() 
        {		
            FAUSTFLOAT v = *fZone;
            fCache = v; 
            fCallback(v, fData);	
        }
};

/**
 *  For timestamped control
 */

struct DatedControl {
    
    double fDate;
    FAUSTFLOAT fValue;
    
    DatedControl(double d = 0., FAUSTFLOAT v = FAUSTFLOAT(0)):fDate(d), fValue(v) {}
    
};

/**
 * Base class for timed items
 */

class uiTimedItem : public uiItem
{
    
    protected:
        
        bool fDelete;
        
    public:
    
        using uiItem::modifyZone;
        
        uiTimedItem(GUI* ui, FAUSTFLOAT* zone):uiItem(ui, zone)
        {
            if (GUI::gTimedZoneMap.find(fZone) == GUI::gTimedZoneMap.end()) {
                GUI::gTimedZoneMap[fZone] = ringbuffer_create(8192);
                fDelete = true;
            } else {
                fDelete = false;
            }
        }
        
        virtual ~uiTimedItem()
        {
            ztimedmap::iterator it;
            if (fDelete && ((it = GUI::gTimedZoneMap.find(fZone)) != GUI::gTimedZoneMap.end())) {
                ringbuffer_free((*it).second);
                GUI::gTimedZoneMap.erase(it);
            }
        }
        
        virtual void modifyZone(double date, FAUSTFLOAT v)
        {
            size_t res;
            DatedControl dated_val(date, v);
            if ((res = ringbuffer_write(GUI::gTimedZoneMap[fZone], (const char*)&dated_val, sizeof(DatedControl))) != sizeof(DatedControl)) {
                std::cerr << "ringbuffer_write error DatedControl" << std::endl;
            }
        }
    
};

/**
 * Allows to group a set of zones
 */

class uiGroupItem : public uiItem
{
    protected:
    
        std::vector<FAUSTFLOAT*> fZoneMap;

    public:
    
        uiGroupItem(GUI* ui, FAUSTFLOAT* zone):uiItem(ui, zone)
        {}
        virtual ~uiGroupItem() 
        {}
        
        virtual void reflectZone() 
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            
            // Update all zones of the same group
            for (auto& it : fZoneMap) {
                *it = v;
            }
        }
        
        void addZone(FAUSTFLOAT* zone) { fZoneMap.push_back(zone); }

};

// Can not be defined as method in the classes

static void createUiCallbackItem(GUI* ui, FAUSTFLOAT* zone, uiCallback foo, void* data)
{
    new uiCallbackItem(ui, zone, foo, data);
}

static void deleteClist(clist* cl)
{
    for (auto& it : *cl) {
        uiOwnedItem* owned = dynamic_cast<uiOwnedItem*>(it);
        // owned items are deleted by external code
        if (!owned) {
            delete it;
        }
    }
}

#endif
/**************************  END  GUI.h **************************/
/************************** BEGIN MapUI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef FAUST_MAPUI_H
#define FAUST_MAPUI_H

#include <vector>
#include <map>
#include <string>


/*******************************************************************************
 * MapUI : Faust User Interface
 * This class creates a map of complete hierarchical path and zones for each UI items.
 ******************************************************************************/

class MapUI : public UI, public PathBuilder
{
    
    protected:
    
        // Complete path map
        std::map<std::string, FAUSTFLOAT*> fPathZoneMap;
    
        // Label zone map
        std::map<std::string, FAUSTFLOAT*> fLabelZoneMap;
    
    public:
        
        MapUI() {};
        virtual ~MapUI() {};
        
        // -- widget's layouts
        void openTabBox(const char* label)
        {
            pushLabel(label);
        }
        void openHorizontalBox(const char* label)
        {
            pushLabel(label);
        }
        void openVerticalBox(const char* label)
        {
            pushLabel(label);
        }
        void closeBox()
        {
            popLabel();
        }
        
        // -- active widgets
        void addButton(const char* label, FAUSTFLOAT* zone)
        {
            fPathZoneMap[buildPath(label)] = zone;
            fLabelZoneMap[label] = zone;
        }
        void addCheckButton(const char* label, FAUSTFLOAT* zone)
        {
            fPathZoneMap[buildPath(label)] = zone;
            fLabelZoneMap[label] = zone;
        }
        void addVerticalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT fmin, FAUSTFLOAT fmax, FAUSTFLOAT step)
        {
            fPathZoneMap[buildPath(label)] = zone;
            fLabelZoneMap[label] = zone;
        }
        void addHorizontalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT fmin, FAUSTFLOAT fmax, FAUSTFLOAT step)
        {
            fPathZoneMap[buildPath(label)] = zone;
            fLabelZoneMap[label] = zone;
        }
        void addNumEntry(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT fmin, FAUSTFLOAT fmax, FAUSTFLOAT step)
        {
            fPathZoneMap[buildPath(label)] = zone;
            fLabelZoneMap[label] = zone;
        }
        
        // -- passive widgets
        void addHorizontalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT fmin, FAUSTFLOAT fmax)
        {
            fPathZoneMap[buildPath(label)] = zone;
            fLabelZoneMap[label] = zone;
        }
        void addVerticalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT fmin, FAUSTFLOAT fmax)
        {
            fPathZoneMap[buildPath(label)] = zone;
            fLabelZoneMap[label] = zone;
        }
    
        // -- soundfiles
        virtual void addSoundfile(const char* label, const char* filename, Soundfile** sf_zone) {}
        
        // -- metadata declarations
        void declare(FAUSTFLOAT* zone, const char* key, const char* val)
        {}
        
        // set/get
        void setParamValue(const std::string& path, FAUSTFLOAT value)
        {
            if (fPathZoneMap.find(path) != fPathZoneMap.end()) {
                *fPathZoneMap[path] = value;
            } else if (fLabelZoneMap.find(path) != fLabelZoneMap.end()) {
                *fLabelZoneMap[path] = value;
            }
        }
        
        FAUSTFLOAT getParamValue(const std::string& path)
        {
            if (fPathZoneMap.find(path) != fPathZoneMap.end()) {
                return *fPathZoneMap[path];
            } else if (fLabelZoneMap.find(path) != fLabelZoneMap.end()) {
                return *fLabelZoneMap[path];
            } else {
                return FAUSTFLOAT(0);
            }
        }
    
        // map access 
        std::map<std::string, FAUSTFLOAT*>& getMap() { return fPathZoneMap; }
        
        int getParamsCount() { return int(fPathZoneMap.size()); }
        
        std::string getParamAddress(int index)
        { 
            std::map<std::string, FAUSTFLOAT*>::iterator it = fPathZoneMap.begin();
            while (index-- > 0 && it++ != fPathZoneMap.end()) {}
            return (*it).first;
        }
    
        std::string getParamAddress(FAUSTFLOAT* zone)
        {
            std::map<std::string, FAUSTFLOAT*>::iterator it = fPathZoneMap.begin();
            do {
                if ((*it).second == zone) return (*it).first;
            }
            while (it++ != fPathZoneMap.end());
            return "";
        }
    
        static bool endsWith(std::string const& str, std::string const& end)
        {
            size_t l1 = str.length();
            size_t l2 = end.length();
            return (l1 >= l2) && (0 == str.compare(l1 - l2, l2, end));
        }
};


#endif // FAUST_MAPUI_H
/**************************  END  MapUI.h **************************/
/************************** BEGIN MetaDataUI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef MetaData_UI_H
#define MetaData_UI_H

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif

#include <map>
#include <set>
#include <string>
#include <assert.h>


static bool startWith(const std::string& str, const std::string& prefix)
{
    return (str.substr(0, prefix.size()) == prefix);
}

/**
 * Convert a dB value into a scale between 0 and 1 (following IEC standard ?)
 */
static FAUSTFLOAT dB2Scale(FAUSTFLOAT dB)
{
    FAUSTFLOAT scale = FAUSTFLOAT(1.0);
    
    /*if (dB < -70.0f)
     scale = 0.0f;
     else*/
    if (dB < FAUSTFLOAT(-60.0))
        scale = (dB + FAUSTFLOAT(70.0)) * FAUSTFLOAT(0.0025);
    else if (dB < FAUSTFLOAT(-50.0))
        scale = (dB + FAUSTFLOAT(60.0)) * FAUSTFLOAT(0.005) + FAUSTFLOAT(0.025);
    else if (dB < FAUSTFLOAT(-40.0))
        scale = (dB + FAUSTFLOAT(50.0)) * FAUSTFLOAT(0.0075) + FAUSTFLOAT(0.075);
    else if (dB < FAUSTFLOAT(-30.0))
        scale = (dB + FAUSTFLOAT(40.0)) * FAUSTFLOAT(0.015) + FAUSTFLOAT(0.15);
    else if (dB < FAUSTFLOAT(-20.0))
        scale = (dB + FAUSTFLOAT(30.0)) * FAUSTFLOAT(0.02) + FAUSTFLOAT(0.3);
    else if (dB < FAUSTFLOAT(-0.001) || dB > FAUSTFLOAT(0.001))  /* if (dB < 0.0) */
        scale = (dB + FAUSTFLOAT(20.0)) * FAUSTFLOAT(0.025) + FAUSTFLOAT(0.5);
    
    return scale;
}

/*******************************************************************************
 * MetaDataUI : Common class for MetaData handling
 ******************************************************************************/

//============================= BEGIN GROUP LABEL METADATA===========================
// Unlike widget's label, metadata inside group's label are not extracted directly by
// the Faust compiler. Therefore they must be extracted within the architecture file
//-----------------------------------------------------------------------------------

class MetaDataUI {
    
    protected:
        
        std::string                         fGroupTooltip;
        std::map<FAUSTFLOAT*, FAUSTFLOAT>   fGuiSize;            // map widget zone with widget size coef
        std::map<FAUSTFLOAT*, std::string>  fTooltip;            // map widget zone with tooltip strings
        std::map<FAUSTFLOAT*, std::string>  fUnit;               // map widget zone to unit string (i.e. "dB")
        std::map<FAUSTFLOAT*, std::string>  fRadioDescription;   // map zone to {'low':440; ...; 'hi':1000.0}
        std::map<FAUSTFLOAT*, std::string>  fMenuDescription;    // map zone to {'low':440; ...; 'hi':1000.0}
        std::set<FAUSTFLOAT*>               fKnobSet;            // set of widget zone to be knobs
        std::set<FAUSTFLOAT*>               fLedSet;             // set of widget zone to be LEDs
        std::set<FAUSTFLOAT*>               fNumSet;             // set of widget zone to be numerical bargraphs
        std::set<FAUSTFLOAT*>               fLogSet;             // set of widget zone having a log UI scale
        std::set<FAUSTFLOAT*>               fExpSet;             // set of widget zone having an exp UI scale
        std::set<FAUSTFLOAT*>               fHiddenSet;          // set of hidden widget zone
        
        void clearMetadata()
        {
            fGuiSize.clear();
            fTooltip.clear();
            fUnit.clear();
            fRadioDescription.clear();
            fMenuDescription.clear();
            fKnobSet.clear();
            fLedSet.clear();
            fNumSet.clear();
            fLogSet.clear();
            fExpSet.clear();
            fHiddenSet.clear();
        }
        
        /**
         * rmWhiteSpaces(): Remove the leading and trailing white spaces of a string
         * (but not those in the middle of the string)
         */
        static std::string rmWhiteSpaces(const std::string& s)
        {
            size_t i = s.find_first_not_of(" \t");
            size_t j = s.find_last_not_of(" \t");
            if ((i != std::string::npos) && (j != std::string::npos)) {
                return s.substr(i, 1+j-i);
            } else {
                return "";
            }
        }
        
        /**
         * Format tooltip string by replacing some white spaces by
         * return characters so that line width doesn't exceed n.
         * Limitation : long words exceeding n are not cut
         */
        std::string formatTooltip(int n, const std::string& tt)
        {
            std::string ss = tt;  // ss string we are going to format
            int lws = 0;          // last white space encountered
            int lri = 0;          // last return inserted
            for (int i = 0; i < (int)tt.size(); i++) {
                if (tt[i] == ' ') lws = i;
                if (((i-lri) >= n) && (lws > lri)) {
                    // insert return here
                    ss[lws] = '\n';
                    lri = lws;
                }
            }
            return ss;
        }
        
    public:
        
        virtual ~MetaDataUI()
        {}
        
        enum Scale {
            kLin,
            kLog,
            kExp
        };
        
        Scale getScale(FAUSTFLOAT* zone)
        {
            if (fLogSet.count(zone) > 0) return kLog;
            if (fExpSet.count(zone) > 0) return kExp;
            return kLin;
        }
        
        bool isKnob(FAUSTFLOAT* zone)
        {
            return fKnobSet.count(zone) > 0;
        }
        
        bool isRadio(FAUSTFLOAT* zone)
        {
            return fRadioDescription.count(zone) > 0;
        }
        
        bool isMenu(FAUSTFLOAT* zone)
        {
            return fMenuDescription.count(zone) > 0;
        }
        
        bool isLed(FAUSTFLOAT* zone)
        {
            return fLedSet.count(zone) > 0;
        }
        
        bool isNumerical(FAUSTFLOAT* zone)
        {
            return fNumSet.count(zone) > 0;
        }
        
        bool isHidden(FAUSTFLOAT* zone)
        {
            return fHiddenSet.count(zone) > 0;
        }
        
        /**
         * Extracts metadata from a label : 'vol [unit: dB]' -> 'vol' + metadata(unit=dB)
         */
        static void extractMetadata(const std::string& fulllabel, std::string& label, std::map<std::string, std::string>& metadata)
        {
            enum {kLabel, kEscape1, kEscape2, kEscape3, kKey, kValue};
            int state = kLabel; int deep = 0;
            std::string key, value;
            
            for (unsigned int i = 0; i < fulllabel.size(); i++) {
                char c = fulllabel[i];
                switch (state) {
                    case kLabel :
                        assert(deep == 0);
                        switch (c) {
                            case '\\' : state = kEscape1; break;
                            case '[' : state = kKey; deep++; break;
                            default : label += c;
                        }
                        break;
                        
                    case kEscape1:
                        label += c;
                        state = kLabel;
                        break;
                        
                    case kEscape2:
                        key += c;
                        state = kKey;
                        break;
                        
                    case kEscape3:
                        value += c;
                        state = kValue;
                        break;
                        
                    case kKey:
                        assert(deep > 0);
                        switch (c) {
                            case '\\':
                                state = kEscape2;
                                break;
                                
                            case '[':
                                deep++;
                                key += c;
                                break;
                                
                            case ':':
                                if (deep == 1) {
                                    state = kValue;
                                } else {
                                    key += c;
                                }
                                break;
                            case ']':
                                deep--;
                                if (deep < 1) {
                                    metadata[rmWhiteSpaces(key)] = "";
                                    state = kLabel;
                                    key="";
                                    value="";
                                } else {
                                    key += c;
                                }
                                break;
                            default : key += c;
                        }
                        break;
                        
                    case kValue:
                        assert(deep > 0);
                        switch (c) {
                            case '\\':
                                state = kEscape3;
                                break;
                                
                            case '[':
                                deep++;
                                value += c;
                                break;
                                
                            case ']':
                                deep--;
                                if (deep < 1) {
                                    metadata[rmWhiteSpaces(key)] = rmWhiteSpaces(value);
                                    state = kLabel;
                                    key = "";
                                    value = "";
                                } else {
                                    value += c;
                                }
                                break;
                            default : value += c;
                        }
                        break;
                        
                    default:
                        std::cerr << "ERROR unrecognized state " << state << std::endl;
                }
            }
            label = rmWhiteSpaces(label);
        }
        
        /**
         * Analyses the widget zone metadata declarations and takes appropriate actions
         */
        void declare(FAUSTFLOAT* zone, const char* key, const char* value)
        {
            if (zone == 0) {
                // special zone 0 means group metadata
                if (strcmp(key, "tooltip") == 0) {
                    // only group tooltip are currently implemented
                    fGroupTooltip = formatTooltip(30, value);
                } else if (strcmp(key, "hidden") == 0) {
                    fHiddenSet.insert(zone);
                }
            } else {
                if (strcmp(key, "size") == 0) {
                    fGuiSize[zone] = atof(value);
                }
                else if (strcmp(key, "tooltip") == 0) {
                    fTooltip[zone] = formatTooltip(30, value);
                }
                else if (strcmp(key, "unit") == 0) {
                    fUnit[zone] = value;
                }
                else if (strcmp(key, "hidden") == 0) {
                    fHiddenSet.insert(zone);
                }
                else if (strcmp(key, "scale") == 0) {
                    if (strcmp(value, "log") == 0) {
                        fLogSet.insert(zone);
                    } else if (strcmp(value, "exp") == 0) {
                        fExpSet.insert(zone);
                    }
                }
                else if (strcmp(key, "style") == 0) {
                    if (strcmp(value, "knob") == 0) {
                        fKnobSet.insert(zone);
                    } else if (strcmp(value, "led") == 0) {
                        fLedSet.insert(zone);
                    } else if (strcmp(value, "numerical") == 0) {
                        fNumSet.insert(zone);
                    } else {
                        const char* p = value;
                        if (parseWord(p, "radio")) {
                            fRadioDescription[zone] = std::string(p);
                        } else if (parseWord(p, "menu")) {
                            fMenuDescription[zone] = std::string(p);
                        }
                    }
                }
            }
        }
    
};

#endif
/**************************  END  MetaDataUI.h **************************/
/************************** BEGIN midi.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __midi__
#define __midi__

#include <vector>
#include <string>
#include <algorithm>
#include <assert.h>

class MapUI;

/*************************************
 A time-stamped short MIDI message
**************************************/

// Force contiguous memory layout
#pragma pack (push, 1)
struct MIDIMessage
{
    uint32_t frameIndex;
    uint8_t byte0, byte1, byte2;
};
#pragma pack (pop)

/*******************************************************************************
 * MIDI processor definition.
 *
 * MIDI input or output handling classes will implement this interface,
 * so the same method names (keyOn, ctrlChange...) will be used either
 * when decoding MIDI input or encoding MIDI output events.
 *******************************************************************************/

class midi {

    public:

        midi() {}
        virtual ~midi() {}

        // Additional time-stamped API for MIDI input
        virtual MapUI* keyOn(double, int channel, int pitch, int velocity)
        {
            return keyOn(channel, pitch, velocity);
        }
        
        virtual void keyOff(double, int channel, int pitch, int velocity = 127)
        {
            keyOff(channel, pitch, velocity);
        }
    
        virtual void keyPress(double, int channel, int pitch, int press)
        {
            keyPress(channel, pitch, press);
        }
        
        virtual void chanPress(double date, int channel, int press)
        {
            chanPress(channel, press);
        }
    
        virtual void pitchWheel(double, int channel, int wheel)
        {
            pitchWheel(channel, wheel);
        }
           
        virtual void ctrlChange(double, int channel, int ctrl, int value)
        {
            ctrlChange(channel, ctrl, value);
        }
    
        virtual void ctrlChange14bits(double, int channel, int ctrl, int value)
        {
            ctrlChange14bits(channel, ctrl, value);
        }
    
        virtual void rpn(double, int channel, int ctrl, int value)
        {
            rpn(channel, ctrl, value);
        }

        virtual void progChange(double, int channel, int pgm)
        {
            progChange(channel, pgm);
        }
    
        virtual void sysEx(double, std::vector<unsigned char>& message)
        {
            sysEx(message);
        }

        // MIDI sync
        virtual void startSync(double date)  {}
        virtual void stopSync(double date)   {}
        virtual void clock(double date)  {}

        // Standard MIDI API
        virtual MapUI* keyOn(int channel, int pitch, int velocity)      { return nullptr; }
        virtual void keyOff(int channel, int pitch, int velocity)       {}
        virtual void keyPress(int channel, int pitch, int press)        {}
        virtual void chanPress(int channel, int press)                  {}
        virtual void ctrlChange(int channel, int ctrl, int value)       {}
        virtual void ctrlChange14bits(int channel, int ctrl, int value) {}
        virtual void rpn(int channel, int ctrl, int value)              {}
        virtual void pitchWheel(int channel, int wheel)                 {}
        virtual void progChange(int channel, int pgm)                   {}
        virtual void sysEx(std::vector<unsigned char>& message)         {}

        enum MidiStatus {
            // channel voice messages
            MIDI_NOTE_OFF = 0x80,
            MIDI_NOTE_ON = 0x90,
            MIDI_CONTROL_CHANGE = 0xB0,
            MIDI_PROGRAM_CHANGE = 0xC0,
            MIDI_PITCH_BEND = 0xE0,
            MIDI_AFTERTOUCH = 0xD0,         // aka channel pressure
            MIDI_POLY_AFTERTOUCH = 0xA0,    // aka key pressure
            MIDI_CLOCK = 0xF8,
            MIDI_START = 0xFA,
            MIDI_CONT = 0xFB,
            MIDI_STOP = 0xFC,
            MIDI_SYSEX_START = 0xF0,
            MIDI_SYSEX_STOP = 0xF7
        };

        enum MidiCtrl {
            ALL_NOTES_OFF = 123,
            ALL_SOUND_OFF = 120
        };
    
        enum MidiNPN {
            PITCH_BEND_RANGE = 0
        };

};

/*
 A class to decode NRPN and RPN messages, adapted from JUCE forum message: https://forum.juce.com/t/14bit-midi-controller-support/11517
*/

class MidiNRPN
{
    
    private:
    
        bool ctrlnew;
        int ctrlnum;
        int ctrlval;
        
        int nrpn_lsb, nrpn_msb;
        int data_lsb, data_msb;
        
        enum
        {
            midi_nrpn_lsb = 98,
            midi_nrpn_msb = 99,
            midi_rpn_lsb  = 100,
            midi_rpn_msb  = 101,
            midi_data_lsb = 38,
            midi_data_msb = 6
        };
    
    public:
        
        MidiNRPN(): ctrlnew(false), nrpn_lsb(-1), nrpn_msb(-1), data_lsb(-1), data_msb(-1)
        {}
        
        // return true if the message has been filtered
        bool process(int data1, int data2)
        {
            switch (data1)
            {
                case midi_nrpn_lsb: nrpn_lsb = data2; return true;
                case midi_nrpn_msb: nrpn_msb = data2; return true;
                case midi_rpn_lsb: {
                    if (data2 == 127) {
                        nrpn_lsb = data_lsb = -1;
                    } else {
                        nrpn_lsb = 0;
                        data_lsb = -1;
                    }
                    return true;
                }
                case midi_rpn_msb: {
                    if (data2 == 127) {
                        nrpn_msb = data_msb = -1;
                    } else {
                        nrpn_msb = 0;
                        data_msb = -1;
                    }
                    return true;
                }
                case midi_data_lsb:
                case midi_data_msb:
                {
                    if (data1 == midi_data_msb) {
                        if (nrpn_msb < 0) {
                            return false;
                        }
                        data_msb = data2;
                    } else { // midi_data_lsb
                        if (nrpn_lsb < 0) {
                            return false;
                        }
                        data_lsb = data2;
                    }
                    if (data_lsb >= 0 && data_msb >= 0) {
                        ctrlnum = (nrpn_msb << 7) | nrpn_lsb;
                        ctrlval = (data_msb << 7) | data_lsb;
                        data_lsb = data_msb = -1;
                        nrpn_msb = nrpn_lsb = -1;
                        ctrlnew = true;
                    }
                    return true;
                }
                default: return false;
            };
        }
        
        bool hasNewNRPN() { bool res = ctrlnew; ctrlnew = false; return res; }
        
        // results in [0, 16383]
        int getCtrl() const { return ctrlnum; }
        int getVal() const { return ctrlval; }
    
};


/****************************************************
 * Base class for MIDI input handling.
 *
 * Shared common code used for input handling:
 * - decoding Real-Time messages: handleSync
 * - decoding one data byte messages: handleData1
 * - decoding two data byte messages: handleData2
 * - getting ready messages in polling mode
 ****************************************************/

class midi_handler : public midi {

    protected:

        std::vector<midi*> fMidiInputs;
        std::string fName;
        MidiNRPN fNRPN;
    
        int range(int min, int max, int val) { return (val < min) ? min : ((val >= max) ? max : val); }
  
    public:

        midi_handler(const std::string& name = "MIDIHandler"):fName(name) {}
        virtual ~midi_handler() {}

        void addMidiIn(midi* midi_dsp) { if (midi_dsp) fMidiInputs.push_back(midi_dsp); }
        void removeMidiIn(midi* midi_dsp)
        {
            std::vector<midi*>::iterator it = std::find(fMidiInputs.begin(), fMidiInputs.end(), midi_dsp);
            if (it != fMidiInputs.end()) {
                fMidiInputs.erase(it);
            }
        }

        virtual bool startMidi() { return true; }
        virtual void stopMidi() {}
    
        void setName(const std::string& name) { fName = name; }
        std::string getName() { return fName; }
    
        // To be used in polling mode
        virtual int recvMessages(std::vector<MIDIMessage>* message) { return 0; }
        virtual void sendMessages(std::vector<MIDIMessage>* message, int count) {}
    
        // MIDI Real-Time
        void handleClock(double time)
        {
            for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                fMidiInputs[i]->clock(time);
            }
        }
        
        void handleStart(double time)
        {
            for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                fMidiInputs[i]->startSync(time);
            }
        }
        
        void handleStop(double time)
        {
            for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                fMidiInputs[i]->stopSync(time);
            }
        }
    
        void handleSync(double time, int type)
        {
            if (type == MIDI_CLOCK) {
                handleClock(time);
            // We can consider start and continue as identical messages
            } else if ((type == MIDI_START) || (type == MIDI_CONT)) {
                handleStart(time);
            } else if (type == MIDI_STOP) {
                handleStop(time);
            }
        }
    
        // MIDI 1 data
        void handleProgChange(double time, int channel, int data1)
        {
            for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                fMidiInputs[i]->progChange(time, channel, data1);
            }
        }
    
        void handleAfterTouch(double time, int channel, int data1)
        {
            for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                fMidiInputs[i]->chanPress(time, channel, data1);
            }
        }

        void handleData1(double time, int type, int channel, int data1)
        {
            if (type == MIDI_PROGRAM_CHANGE) {
                handleProgChange(time, channel, data1);
            } else if (type == MIDI_AFTERTOUCH) {
                handleAfterTouch(time, channel, data1);
            }
        }
    
        // MIDI 2 datas
        void handleKeyOff(double time, int channel, int data1, int data2)
        {
            for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                fMidiInputs[i]->keyOff(time, channel, data1, data2);
            }
        }
        
        void handleKeyOn(double time, int channel, int data1, int data2)
        {
            if (data2 == 0) {
                handleKeyOff(time, channel, data1, data2);
            } else {
                for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                    fMidiInputs[i]->keyOn(time, channel, data1, data2);
                }
            }
        }
    
        void handleCtrlChange(double time, int channel, int data1, int data2)
        {
            // Special processing for NRPN and RPN
            if (fNRPN.process(data1, data2)) {
                if (fNRPN.hasNewNRPN()) {
                    for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                        fMidiInputs[i]->rpn(time, channel, fNRPN.getCtrl(), fNRPN.getVal());
                    }
                }
            } else {
                for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                    fMidiInputs[i]->ctrlChange(time, channel, data1, data2);
                }
            }
        }
        
        void handlePitchWheel(double time, int channel, int data1, int data2)
        {
            for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                fMidiInputs[i]->pitchWheel(time, channel, (data2 << 7) + data1);
            }
        }
        
        void handlePolyAfterTouch(double time, int channel, int data1, int data2)
        {
            for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                fMidiInputs[i]->keyPress(time, channel, data1, data2);
            }
        }
  
        void handleData2(double time, int type, int channel, int data1, int data2)
        {
            if (type == MIDI_NOTE_OFF) {
                handleKeyOff(time, channel,  data1, data2);
            } else if (type == MIDI_NOTE_ON) {
                handleKeyOn(time, channel, data1, data2);
            } else if (type == MIDI_CONTROL_CHANGE) {
                handleCtrlChange(time, channel, data1, data2);
            } else if (type == MIDI_PITCH_BEND) {
                handlePitchWheel(time, channel, data1, data2);
            } else if (type == MIDI_POLY_AFTERTOUCH) {
                handlePolyAfterTouch(time, channel, data1, data2);
            }
        }
    
        // SysEx
        void handleSysex(double time, std::vector<unsigned char>& message)
        {
            for (unsigned int i = 0; i < fMidiInputs.size(); i++) {
                fMidiInputs[i]->sysEx(time, message);
            }
        }
    
        void handleMessage(double time, int type, std::vector<unsigned char>& message)
        {
            if (type == MIDI_SYSEX_START) {
                handleSysex(time, message);
            }
        }
  
};

//-------------------------------
// For timestamped MIDI messages
//-------------------------------

struct DatedMessage {
    
    double fDate;
    unsigned char fBuffer[3];
    size_t fSize;
    
    DatedMessage(double date, unsigned char* buffer, size_t size)
    :fDate(date), fSize(size)
    {
        assert(size <= 3);
        memcpy(fBuffer, buffer, size);
    }
    
    DatedMessage():fDate(0.0), fSize(0)
    {}
    
};

#endif // __midi__
/**************************  END  midi.h **************************/

#ifdef _MSC_VER
#define gsscanf sscanf_s
#else
#define gsscanf sscanf
#endif

/*****************************************************************************
* Helper code for MIDI meta and polyphonic 'nvoices' parsing
******************************************************************************/

struct MidiMeta : public Meta, public std::map<std::string, std::string> {
    
    void declare(const char* key, const char* value)
    {
        (*this)[key] = value;
    }
    
    const std::string get(const char* key, const char* def)
    {
        return (this->find(key) != this->end()) ? (*this)[key] : def;
    }
    
    static void analyse(dsp* mono_dsp, bool& midi_sync, int& nvoices)
    {
        JSONUI jsonui;
        mono_dsp->buildUserInterface(&jsonui);
        std::string json = jsonui.JSON();
        midi_sync = ((json.find("midi") != std::string::npos) &&
                     ((json.find("start") != std::string::npos) ||
                      (json.find("stop") != std::string::npos) ||
                      (json.find("clock") != std::string::npos) ||
                      (json.find("timestamp") != std::string::npos)));
    
    #if defined(NVOICES) && NVOICES!=NUM_VOICES
        nvoices = NVOICES;
    #else
        MidiMeta meta;
        mono_dsp->metadata(&meta);
        bool found_voices = false;
        // If "options" metadata is used
        std::string options = meta.get("options", "");
        if (options != "") {
            std::map<std::string, std::string> metadata;
            std::string res;
            MetaDataUI::extractMetadata(options, res, metadata);
            if (metadata.find("nvoices") != metadata.end()) {
                nvoices = std::atoi(metadata["nvoices"].c_str());
                found_voices = true;
            }
        }
        // Otherwise test for "nvoices" metadata
        if (!found_voices) {
            std::string numVoices = meta.get("nvoices", "0");
            nvoices = std::atoi(numVoices.c_str());
        }
        nvoices = std::max<int>(0, nvoices);
    #endif
    }
    
    static bool checkPolyphony(dsp* mono_dsp)
    {
        MapUI map_ui;
        mono_dsp->buildUserInterface(&map_ui);
        bool has_freq = false;
        bool has_gate = false;
        bool has_gain = false;
        for (int i = 0; i < map_ui.getParamsCount(); i++) {
            std::string path = map_ui.getParamAddress(i);
            has_freq |= MapUI::endsWith(path, "/freq");
            has_gate |= MapUI::endsWith(path, "/gate");
            has_gain |= MapUI::endsWith(path, "/gain");
        }
        return (has_freq && has_gate && has_gain);
    }
    
};

/*******************************************************************************
 * MidiUI : Faust User Interface
 * This class decodes MIDI meta data and maps incoming MIDI messages to them.
 * Currently ctrl, keyon/keyoff, keypress, pgm, chanpress, pitchwheel/pitchbend
 * start/stop/clock meta data is handled.
 ******************************************************************************/

class uiMidi {
    
    friend class MidiUI;
    
    protected:
        
        midi* fMidiOut;
        bool fInputCtrl;
        int fChan;
    
        int rangeChan() { return (((fChan < 0) || (fChan > 15)) ? 0 : fChan); }
    
    public:
        
        uiMidi(midi* midi_out, bool input, int chan = -1):fMidiOut(midi_out), fInputCtrl(input), fChan(chan)
        {}
        virtual ~uiMidi()
        {}

};

/*****************************************************************************
 * Base class for MIDI aware UI items
 ******************************************************************************/

class uiMidiItem : public uiMidi, public uiItem {
    
    public:
        
        uiMidiItem(midi* midi_out, GUI* ui, FAUSTFLOAT* zone, bool input = true, int chan = -1)
            :uiMidi(midi_out, input, chan), uiItem(ui, zone)
        {}
        virtual ~uiMidiItem()
        {}
    
        virtual void reflectZone() {}
    
};

/*****************************************************************************
 * Base class for MIDI aware UI items with timestamp support
 ******************************************************************************/

class uiMidiTimedItem : public uiMidi, public uiTimedItem {
    
    public:
        
        uiMidiTimedItem(midi* midi_out, GUI* ui, FAUSTFLOAT* zone, bool input = true, int chan = -1)
            :uiMidi(midi_out, input, chan), uiTimedItem(ui, zone)
        {}
        virtual ~uiMidiTimedItem()
        {}
    
        virtual void reflectZone() {}
    
};

//-----------
// MIDI sync
//-----------

class uiMidiStart : public uiMidiTimedItem
{
  
    public:
    
        uiMidiStart(midi* midi_out, GUI* ui, FAUSTFLOAT* zone, bool input = true)
            :uiMidiTimedItem(midi_out, ui, zone, input)
        {}
        virtual ~uiMidiStart()
        {}
        
        virtual void reflectZone()
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            if (v != FAUSTFLOAT(0)) {
                fMidiOut->startSync(0);
            }
        }
        void modifyZone(double date, FAUSTFLOAT v)
        {
            if (fInputCtrl) {
                uiItem::modifyZone(FAUSTFLOAT(v));
            }
        }
        
};

class uiMidiStop : public uiMidiTimedItem {
  
    public:
    
        uiMidiStop(midi* midi_out, GUI* ui, FAUSTFLOAT* zone, bool input = true)
            :uiMidiTimedItem(midi_out, ui, zone, input)
        {}
        virtual ~uiMidiStop()
        {}
        
        virtual void reflectZone()
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            if (v != FAUSTFLOAT(1)) {
                fMidiOut->stopSync(0);
            }
        }
    
        void modifyZone(double date, FAUSTFLOAT v)
        {
            if (fInputCtrl) {
                uiItem::modifyZone(FAUSTFLOAT(v));
            }
        }
};

class uiMidiClock : public uiMidiTimedItem {

    private:
        
        bool fState;
  
    public:
    
        uiMidiClock(midi* midi_out, GUI* ui, FAUSTFLOAT* zone, bool input = true)
            :uiMidiTimedItem(midi_out, ui, zone, input), fState(false)
        {}
        virtual ~uiMidiClock()
        {}
    
        virtual void reflectZone()
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            fMidiOut->clock(0);
        }
    
        void modifyZone(double date, FAUSTFLOAT v)
        {
            if (fInputCtrl) {
                fState = !fState;
                uiMidiTimedItem::modifyZone(date, FAUSTFLOAT(fState));
            }
        }

};

//----------------------
// Standard MIDI events
//----------------------

class uiMidiProgChange : public uiMidiTimedItem {
    
    private:
        
        int fPgm;
  
    public:
    
        uiMidiProgChange(midi* midi_out, int pgm, GUI* ui, FAUSTFLOAT* zone, bool input = true, int chan = -1)
            :uiMidiTimedItem(midi_out, ui, zone, input, chan), fPgm(pgm)
        {}
        virtual ~uiMidiProgChange()
        {}
        
        virtual void reflectZone()
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            if (v != FAUSTFLOAT(0)) {
                fMidiOut->progChange(rangeChan(), fPgm);
            }
        }
        
};

class uiMidiChanPress : public uiMidiTimedItem {
    
    private:
        
        int fPress;
  
    public:
    
        uiMidiChanPress(midi* midi_out, int press, GUI* ui, FAUSTFLOAT* zone, bool input = true, int chan = -1)
            :uiMidiTimedItem(midi_out, ui, zone, input, chan), fPress(press)
        {}
        virtual ~uiMidiChanPress()
        {}
        
        virtual void reflectZone()
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            if (v != FAUSTFLOAT(0)) {
                fMidiOut->chanPress(rangeChan(), fPress);
            }
        }
        
};

class uiMidiCtrlChange : public uiMidiTimedItem {
    
    private:
    
        int fCtrl;
        LinearValueConverter fConverter;
 
    public:

        uiMidiCtrlChange(midi* midi_out, int ctrl, GUI* ui, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max, bool input = true, int chan = -1)
            :uiMidiTimedItem(midi_out, ui, zone, input, chan), fCtrl(ctrl), fConverter(0., 127., double(min), double(max))
        {}
        virtual ~uiMidiCtrlChange()
        {}
        
        virtual void reflectZone()
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            fMidiOut->ctrlChange(rangeChan(), fCtrl, fConverter.faust2ui(v));
        }
        
        void modifyZone(FAUSTFLOAT v)
        {
            if (fInputCtrl) {
                uiItem::modifyZone(FAUSTFLOAT(fConverter.ui2faust(v)));
            }
        }
    
        void modifyZone(double date, FAUSTFLOAT v)
        {
            if (fInputCtrl) {
                uiMidiTimedItem::modifyZone(date, FAUSTFLOAT(fConverter.ui2faust(v)));
            }
        }
};

class uiMidiPitchWheel : public uiMidiTimedItem {

    private:
    
        LinearValueConverter2 fConverter;
    
    public:
    
        uiMidiPitchWheel(midi* midi_out, GUI* ui, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max, bool input = true, int chan = -1)
        :uiMidiTimedItem(midi_out, ui, zone, input, chan)
        {
            if (min <= 0 && max >= 0) {
                fConverter = LinearValueConverter2(0., 8191., 16383., double(min), 0., double(max));
            } else {
                // Degenerated case...
                fConverter = LinearValueConverter2(0., 8191., 16383., double(min),double(min + (max - min)/FAUSTFLOAT(2)), double(max));
            }
        }
    
        virtual ~uiMidiPitchWheel()
        {}
        
        virtual void reflectZone()
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            fMidiOut->pitchWheel(rangeChan(), fConverter.faust2ui(v));
        }
        
        void modifyZone(FAUSTFLOAT v)
        { 
            if (fInputCtrl) {
                uiItem::modifyZone(FAUSTFLOAT(fConverter.ui2faust(v)));
            }
        }
    
        void modifyZone(double date, FAUSTFLOAT v)
        {
            if (fInputCtrl) {
                uiMidiTimedItem::modifyZone(FAUSTFLOAT(fConverter.ui2faust(v)));
            }
        }
    
        void setRange(int val)
        {
            double semi = (val / 128) + ((val % 128) / 100.);
            fConverter.setMappingValues(0., 8191., 16383., -semi, 0., semi);
        }
 
};

class uiMidiKeyOn : public uiMidiTimedItem {

    private:
        
        int fKeyOn;
        LinearValueConverter fConverter;
  
    public:
    
        uiMidiKeyOn(midi* midi_out, int key, GUI* ui, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max, bool input = true, int chan = -1)
            :uiMidiTimedItem(midi_out, ui, zone, input, chan), fKeyOn(key), fConverter(0., 127., double(min), double(max))
        {}
        virtual ~uiMidiKeyOn()
        {}
        
        virtual void reflectZone()
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            fMidiOut->keyOn(rangeChan(), fKeyOn, fConverter.faust2ui(v));
        }
        
        void modifyZone(FAUSTFLOAT v)
        { 
            if (fInputCtrl) {
                uiItem::modifyZone(FAUSTFLOAT(fConverter.ui2faust(v)));
            }
        }
    
        void modifyZone(double date, FAUSTFLOAT v)
        {
            if (fInputCtrl) {
                uiMidiTimedItem::modifyZone(date, FAUSTFLOAT(fConverter.ui2faust(v)));
            }
        }
    
};

class uiMidiKeyOff : public uiMidiTimedItem {

    private:
        
        int fKeyOff;
        LinearValueConverter fConverter;
  
    public:
    
        uiMidiKeyOff(midi* midi_out, int key, GUI* ui, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max, bool input = true, int chan = -1)
            :uiMidiTimedItem(midi_out, ui, zone, input, chan), fKeyOff(key), fConverter(0., 127., double(min), double(max))
        {}
        virtual ~uiMidiKeyOff()
        {}
        
        virtual void reflectZone()
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            fMidiOut->keyOff(rangeChan(), fKeyOff, fConverter.faust2ui(v));
        }
        
        void modifyZone(FAUSTFLOAT v)
        { 
            if (fInputCtrl) {
                uiItem::modifyZone(FAUSTFLOAT(fConverter.ui2faust(v)));
            }
        }
    
        void modifyZone(double date, FAUSTFLOAT v)
        {
            if (fInputCtrl) {
                uiMidiTimedItem::modifyZone(date, FAUSTFLOAT(fConverter.ui2faust(v)));
            }
        }
    
};

class uiMidiKeyPress : public uiMidiTimedItem {

    private:
    
        int fKey;
        LinearValueConverter fConverter;
  
    public:
    
        uiMidiKeyPress(midi* midi_out, int key, GUI* ui, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max, bool input = true, int chan = -1)
            :uiMidiTimedItem(midi_out, ui, zone, input, chan), fKey(key), fConverter(0., 127., double(min), double(max))
        {}
        virtual ~uiMidiKeyPress()
        {}
        
        virtual void reflectZone()
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            fMidiOut->keyPress(rangeChan(), fKey, fConverter.faust2ui(v));
        }
        
        void modifyZone(FAUSTFLOAT v)
        { 
            if (fInputCtrl) {
                uiItem::modifyZone(FAUSTFLOAT(fConverter.ui2faust(v)));
            }
        }
    
        void modifyZone(double date, FAUSTFLOAT v)
        {
            if (fInputCtrl) {
                uiMidiTimedItem::modifyZone(date, FAUSTFLOAT(fConverter.ui2faust(v)));
            }
        }
    
};

/******************************************************************************************
 * MidiUI : Faust User Interface
 * This class decodes MIDI metadata and maps incoming MIDI messages to them.
 * Currently ctrl, keyon/keyoff, keypress, pgm, chanpress, pitchwheel/pitchbend
 * start/stop/clock meta data are handled.
 *
 * Maps associating MIDI event ID (like each ctrl number) with all MIDI aware UI items
 * are defined and progressively filled when decoding MIDI related metadata.
 * MIDI aware UI items are used in both directions:
 *  - modifying their internal state when receving MIDI input events
 *  - sending their internal state as MIDI output events
 *******************************************************************************************/

class MidiUI : public GUI, public midi {

    typedef std::map <int, std::vector<uiMidiCtrlChange*> > TCtrlChangeTable;
    typedef std::map <int, std::vector<uiMidiProgChange*> > TProgChangeTable;
    typedef std::map <int, std::vector<uiMidiChanPress*> >  TChanPressTable;
    typedef std::map <int, std::vector<uiMidiKeyOn*> >      TKeyOnTable;
    typedef std::map <int, std::vector<uiMidiKeyOff*> >     TKeyOffTable;
    typedef std::map <int, std::vector<uiMidiKeyPress*> >   TKeyPressTable;
    typedef std::vector<uiMidiPitchWheel*>                  TPitchWheelTable;
    
    protected:
    
        TCtrlChangeTable fCtrlChangeTable;
        TProgChangeTable fProgChangeTable;
        TChanPressTable  fChanPressTable;
        TKeyOnTable      fKeyOnTable;
        TKeyOffTable     fKeyOffTable;
        TKeyOnTable      fKeyTable;
        TKeyPressTable   fKeyPressTable;
        TPitchWheelTable fPitchWheelTable;
        
        std::vector<uiMidiStart*> fStartTable;
        std::vector<uiMidiStop*>  fStopTable;
        std::vector<uiMidiClock*> fClockTable;
        
        std::vector<std::pair <std::string, std::string> > fMetaAux;
        
        midi_handler* fMidiHandler;
        bool fDelete;
        bool fTimeStamp;
    
        void addGenericZone(FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max, bool input = true)
        {
            if (fMetaAux.size() > 0) {
                for (size_t i = 0; i < fMetaAux.size(); i++) {
                    unsigned num;
                    unsigned chan;
                    if (fMetaAux[i].first == "midi") {
                        if (gsscanf(fMetaAux[i].second.c_str(), "ctrl %u %u", &num, &chan) == 2) {
                            fCtrlChangeTable[num].push_back(new uiMidiCtrlChange(fMidiHandler, num, this, zone, min, max, input, chan));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "ctrl %u", &num) == 1) {
                            fCtrlChangeTable[num].push_back(new uiMidiCtrlChange(fMidiHandler, num, this, zone, min, max, input));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "keyon %u %u", &num, &chan) == 2) {
                            fKeyOnTable[num].push_back(new uiMidiKeyOn(fMidiHandler, num, this, zone, min, max, input, chan));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "keyon %u", &num) == 1) {
                            fKeyOnTable[num].push_back(new uiMidiKeyOn(fMidiHandler, num, this, zone, min, max, input));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "keyoff %u %u", &num, &chan) == 2) {
                            fKeyOffTable[num].push_back(new uiMidiKeyOff(fMidiHandler, num, this, zone, min, max, input, chan));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "keyoff %u", &num) == 1) {
                            fKeyOffTable[num].push_back(new uiMidiKeyOff(fMidiHandler, num, this, zone, min, max, input));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "key %u %u", &num, &chan) == 2) {
                            fKeyTable[num].push_back(new uiMidiKeyOn(fMidiHandler, num, this, zone, min, max, input, chan));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "key %u", &num) == 1) {
                            fKeyTable[num].push_back(new uiMidiKeyOn(fMidiHandler, num, this, zone, min, max, input));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "keypress %u %u", &num, &chan) == 2) {
                            fKeyPressTable[num].push_back(new uiMidiKeyPress(fMidiHandler, num, this, zone, min, max, input, chan));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "keypress %u", &num) == 1) {
                            fKeyPressTable[num].push_back(new uiMidiKeyPress(fMidiHandler, num, this, zone, min, max, input));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "pgm %u %u", &num, &chan) == 2) {
                            fProgChangeTable[num].push_back(new uiMidiProgChange(fMidiHandler, num, this, zone, input, chan));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "pgm %u", &num) == 1) {
                            fProgChangeTable[num].push_back(new uiMidiProgChange(fMidiHandler, num, this, zone, input));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "chanpress %u %u", &num, &chan) == 2) {
                            fChanPressTable[num].push_back(new uiMidiChanPress(fMidiHandler, num, this, zone, input, chan));
                        } else if (gsscanf(fMetaAux[i].second.c_str(), "chanpress %u", &num) == 1) {
                            fChanPressTable[num].push_back(new uiMidiChanPress(fMidiHandler, num, this, zone, input));
                        } else if ((gsscanf(fMetaAux[i].second.c_str(), "pitchwheel %u", &chan) == 1) || (gsscanf(fMetaAux[i].second.c_str(), "pitchbend %u", &chan) == 1)) {
                            fPitchWheelTable.push_back(new uiMidiPitchWheel(fMidiHandler, this, zone, min, max, input, chan));
                        } else if ((fMetaAux[i].second == "pitchwheel") || (fMetaAux[i].second == "pitchbend")) {
                            fPitchWheelTable.push_back(new uiMidiPitchWheel(fMidiHandler, this, zone, min, max, input));
                        // MIDI sync
                        } else if (fMetaAux[i].second == "start") {
                            fStartTable.push_back(new uiMidiStart(fMidiHandler, this, zone, input));
                        } else if (fMetaAux[i].second == "stop") {
                            fStopTable.push_back(new uiMidiStop(fMidiHandler, this, zone, input));
                        } else if (fMetaAux[i].second == "clock") {
                            fClockTable.push_back(new uiMidiClock(fMidiHandler, this, zone, input));
                        // Explicit metadata to activate 'timestamp' mode
                        } else if (fMetaAux[i].second == "timestamp") {
                            fTimeStamp = true;
                        }
                    }
                }
            }
            fMetaAux.clear();
        }
    
        template <typename TABLE>
        void updateTable1(TABLE& table, double date, int channel, int val1)
        {
            for (size_t i = 0; i < table.size(); i++) {
                int channel_aux = table[i]->fChan;
                if (channel_aux == -1 || channel == channel_aux) {
                    if (fTimeStamp) {
                        table[i]->modifyZone(date, FAUSTFLOAT(val1));
                    } else {
                        table[i]->modifyZone(FAUSTFLOAT(val1));
                    }
                }
            }
        }
        
        template <typename TABLE>
        void updateTable2(TABLE& table, double date, int channel, int val1, int val2)
        {
            if (table.find(val1) != table.end()) {
                for (size_t i = 0; i < table[val1].size(); i++) {
                    int channel_aux = table[val1][i]->fChan;
                    if (channel_aux == -1 || channel == channel_aux) {
                        if (fTimeStamp) {
                            table[val1][i]->modifyZone(date, FAUSTFLOAT(val2));
                        } else {
                            table[val1][i]->modifyZone(FAUSTFLOAT(val2));
                        }
                    }
                }
            }
        }
    
    public:
    
        MidiUI(midi_handler* midi_handler, bool delete_handler = false)
        {
            fMidiHandler = midi_handler;
            fMidiHandler->addMidiIn(this);
            fDelete = delete_handler;
            fTimeStamp = false;
        }
 
        virtual ~MidiUI() 
        { 
            fMidiHandler->removeMidiIn(this);
            if (fDelete) delete fMidiHandler;
        }
        
        bool run() { return fMidiHandler->startMidi(); }
        void stop() { fMidiHandler->stopMidi(); }
        
        void addMidiIn(midi* midi_dsp) { fMidiHandler->addMidiIn(midi_dsp); }
        void removeMidiIn(midi* midi_dsp) { fMidiHandler->removeMidiIn(midi_dsp); }
      
        // -- active widgets
        
        virtual void addButton(const char* label, FAUSTFLOAT* zone)
        {
            addGenericZone(zone, FAUSTFLOAT(0), FAUSTFLOAT(1));
        }
        virtual void addCheckButton(const char* label, FAUSTFLOAT* zone)
        {
            addGenericZone(zone, FAUSTFLOAT(0), FAUSTFLOAT(1));
        }
        
        virtual void addVerticalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        {
            addGenericZone(zone, min, max);
        }
        virtual void addHorizontalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        {
            addGenericZone(zone, min, max);
        }
        virtual void addNumEntry(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        {
            addGenericZone(zone, min, max);
        }

        // -- passive widgets

        virtual void addHorizontalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max) 
        {
            addGenericZone(zone, min, max, false);
        }
        virtual void addVerticalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max)
        {
            addGenericZone(zone, min, max, false);
        }

        // -- metadata declarations

        virtual void declare(FAUSTFLOAT* zone, const char* key, const char* val)
        {
            fMetaAux.push_back(std::make_pair(key, val));
        }
        
        // -- MIDI API
    
        void key(double date, int channel, int note, int velocity)
        {
            updateTable2<TKeyOnTable>(fKeyTable, date, channel, note, velocity);
        }
    
        MapUI* keyOn(double date, int channel, int note, int velocity)
        {
            updateTable2<TKeyOnTable>(fKeyOnTable, date, channel, note, velocity);
            // If note is in fKeyTable, handle it as a keyOn
            key(date, channel, note, velocity);
            return nullptr;
        }
        
        void keyOff(double date, int channel, int note, int velocity)
        {
            updateTable2<TKeyOffTable>(fKeyOffTable, date, channel, note, velocity);
            // If note is in fKeyTable, handle it as a keyOff with a 0 velocity
            key(date, channel, note, 0);
        }
        
        void ctrlChange(double date, int channel, int ctrl, int value)
        {
            updateTable2<TCtrlChangeTable>(fCtrlChangeTable, date, channel, ctrl, value);
        }
    
        void rpn(double date, int channel, int ctrl, int value)
        {
            if (ctrl == midi::PITCH_BEND_RANGE) {
                for (size_t i = 0; i < fPitchWheelTable.size(); i++) {
                    int channel_aux = fPitchWheelTable[i]->fChan;
                    if (channel_aux == -1 || channel == channel_aux) {
                        fPitchWheelTable[i]->setRange(value);
                    }
                }
            }
        }
    
        void progChange(double date, int channel, int pgm)
        {
            updateTable2<TProgChangeTable>(fProgChangeTable, date, channel, pgm, FAUSTFLOAT(1));
        }
        
        void pitchWheel(double date, int channel, int wheel) 
        {
            updateTable1<TPitchWheelTable>(fPitchWheelTable, date, channel, wheel);
        }
        
        void keyPress(double date, int channel, int pitch, int press) 
        {
            updateTable2<TKeyPressTable>(fKeyPressTable, date, channel, pitch, press);
        }
        
        void chanPress(double date, int channel, int press)
        {
            updateTable2<TChanPressTable>(fChanPressTable, date, channel, press, FAUSTFLOAT(1));
        }
        
        void ctrlChange14bits(double date, int channel, int ctrl, int value) {}
        
        // MIDI sync
        
        void startSync(double date)
        {
            for (size_t i = 0; i < fStartTable.size(); i++) {
                fStartTable[i]->modifyZone(date, FAUSTFLOAT(1));
            }
        }
        
        void stopSync(double date)
        {
            for (size_t i = 0; i < fStopTable.size(); i++) {
                fStopTable[i]->modifyZone(date, FAUSTFLOAT(0));
            }
        }
        
        void clock(double date)
        {
            for (size_t i = 0; i < fClockTable.size(); i++) {
                fClockTable[i]->modifyZone(date, FAUSTFLOAT(1));
            }
        }
};

#endif // FAUST_MIDIUI_H
/**************************  END  MidiUI.h **************************/
/************************** BEGIN poly-dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __poly_dsp__
#define __poly_dsp__

#include <stdio.h>
#include <string>
#include <cmath>
#include <algorithm>
#include <ostream>
#include <sstream>
#include <vector>
#include <limits.h>
#include <float.h>
#include <assert.h>

/************************** BEGIN dsp-combiner.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2019 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.

 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __dsp_combiner__
#define __dsp_combiner__

#include <string.h>
#include <string>
#include <assert.h>
#include <sstream>


// Base class and common code for binary combiners

class dsp_binary_combiner : public dsp {

    protected:

        dsp* fDSP1;
        dsp* fDSP2;

        void buildUserInterfaceAux(UI* ui_interface, const char* name)
        {
            ui_interface->openTabBox(name);
            ui_interface->openVerticalBox("DSP1");
            fDSP1->buildUserInterface(ui_interface);
            ui_interface->closeBox();
            ui_interface->openVerticalBox("DSP2");
            fDSP2->buildUserInterface(ui_interface);
            ui_interface->closeBox();
            ui_interface->closeBox();
        }

        FAUSTFLOAT** allocateChannels(int num, int buffer_size)
        {
            FAUSTFLOAT** channels = new FAUSTFLOAT*[num];
            for (int chan = 0; chan < num; chan++) {
                channels[chan] = new FAUSTFLOAT[buffer_size];
                memset(channels[chan], 0, sizeof(FAUSTFLOAT) * buffer_size);
            }
            return channels;
        }

        void deleteChannels(FAUSTFLOAT** channels, int num)
        {
            for (int chan = 0; chan < num; chan++) {
                delete [] channels[chan];
            }
            delete [] channels;
        }

     public:

        dsp_binary_combiner(dsp* dsp1, dsp* dsp2):fDSP1(dsp1), fDSP2(dsp2)
        {}

        virtual ~dsp_binary_combiner()
        {
            delete fDSP1;
            delete fDSP2;
        }

        virtual int getSampleRate()
        {
            return fDSP1->getSampleRate();
        }
        virtual void init(int sample_rate)
        {
            fDSP1->init(sample_rate);
            fDSP2->init(sample_rate);
        }
        virtual void instanceInit(int sample_rate)
        {
            fDSP1->instanceInit(sample_rate);
            fDSP2->instanceInit(sample_rate);
        }
        virtual void instanceConstants(int sample_rate)
        {
            fDSP1->instanceConstants(sample_rate);
            fDSP2->instanceConstants(sample_rate);
        }

        virtual void instanceResetUserInterface()
        {
            fDSP1->instanceResetUserInterface();
            fDSP2->instanceResetUserInterface();
        }

        virtual void instanceClear()
        {
            fDSP1->instanceClear();
            fDSP2->instanceClear();
        }

        virtual void metadata(Meta* m)
        {
            fDSP1->metadata(m);
            fDSP2->metadata(m);
        }

};

// Combine two 'compatible' DSP in sequence

class dsp_sequencer : public dsp_binary_combiner {

    private:

        FAUSTFLOAT** fDSP1Outputs;

    public:

        dsp_sequencer(dsp* dsp1, dsp* dsp2, int buffer_size = 4096):dsp_binary_combiner(dsp1, dsp2)
        {
            fDSP1Outputs = allocateChannels(fDSP1->getNumOutputs(), buffer_size);
        }

        virtual ~dsp_sequencer()
        {
            deleteChannels(fDSP1Outputs, fDSP1->getNumOutputs());
        }

        virtual int getNumInputs() { return fDSP1->getNumInputs(); }
        virtual int getNumOutputs() { return fDSP2->getNumOutputs(); }

        virtual void buildUserInterface(UI* ui_interface)
        {
            buildUserInterfaceAux(ui_interface, "Sequencer");
        }

        virtual dsp* clone()
        {
            return new dsp_sequencer(fDSP1->clone(), fDSP2->clone());
        }

        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            fDSP1->compute(count, inputs, fDSP1Outputs);
            fDSP2->compute(count, fDSP1Outputs, outputs);
        }

        virtual void compute(double date_usec, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { compute(count, inputs, outputs); }

};

// Combine two DSP in parallel

class dsp_parallelizer : public dsp_binary_combiner {

    private:

        FAUSTFLOAT** fDSP2Inputs;
        FAUSTFLOAT** fDSP2Outputs;

    public:

        dsp_parallelizer(dsp* dsp1, dsp* dsp2, int buffer_size = 4096):dsp_binary_combiner(dsp1, dsp2)
        {
            fDSP2Inputs = new FAUSTFLOAT*[fDSP2->getNumInputs()];
            fDSP2Outputs = new FAUSTFLOAT*[fDSP2->getNumOutputs()];
        }

        virtual ~dsp_parallelizer()
        {
            delete [] fDSP2Inputs;
            delete [] fDSP2Outputs;
        }

        virtual int getNumInputs() { return fDSP1->getNumInputs() + fDSP2->getNumInputs(); }
        virtual int getNumOutputs() { return fDSP1->getNumOutputs() + fDSP2->getNumOutputs(); }

        virtual void buildUserInterface(UI* ui_interface)
        {
            buildUserInterfaceAux(ui_interface, "Parallelizer");
        }

        virtual dsp* clone()
        {
            return new dsp_parallelizer(fDSP1->clone(), fDSP2->clone());
        }

        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            fDSP1->compute(count, inputs, outputs);

            // Shift inputs/outputs channels for fDSP2
            for (int chan = 0; chan < fDSP2->getNumInputs(); chan++) {
                fDSP2Inputs[chan] = inputs[fDSP1->getNumInputs() + chan];
            }
            for (int chan = 0; chan < fDSP2->getNumOutputs(); chan++) {
                fDSP2Outputs[chan] = outputs[fDSP1->getNumOutputs() + chan];
            }

            fDSP2->compute(count, fDSP2Inputs, fDSP2Outputs);
        }

        virtual void compute(double date_usec, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { compute(count, inputs, outputs); }

};

// Combine two 'compatible' DSP in splitter

class dsp_splitter : public dsp_binary_combiner {

    private:

        FAUSTFLOAT** fDSP1Outputs;
        FAUSTFLOAT** fDSP2Inputs;

    public:

        dsp_splitter(dsp* dsp1, dsp* dsp2, int buffer_size = 4096):dsp_binary_combiner(dsp1, dsp2)
        {
            fDSP1Outputs = allocateChannels(fDSP1->getNumOutputs(), buffer_size);
            fDSP2Inputs = new FAUSTFLOAT*[fDSP2->getNumInputs()];
        }

        virtual ~dsp_splitter()
        {
            deleteChannels(fDSP1Outputs, fDSP1->getNumOutputs());
            delete [] fDSP2Inputs;
        }

        virtual int getNumInputs() { return fDSP1->getNumInputs(); }
        virtual int getNumOutputs() { return fDSP2->getNumOutputs(); }

        virtual void buildUserInterface(UI* ui_interface)
        {
            buildUserInterfaceAux(ui_interface, "Splitter");
        }

        virtual dsp* clone()
        {
            return new dsp_splitter(fDSP1->clone(), fDSP2->clone());
        }

        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            fDSP1->compute(count, inputs, fDSP1Outputs);

            for (int chan = 0; chan < fDSP2->getNumInputs(); chan++) {
                 fDSP2Inputs[chan] = fDSP1Outputs[chan % fDSP1->getNumOutputs()];
            }

            fDSP2->compute(count, fDSP2Inputs, outputs);
        }
};

// Combine two 'compatible' DSP in merger

class dsp_merger : public dsp_binary_combiner {

    private:

        FAUSTFLOAT** fDSP1Inputs;
        FAUSTFLOAT** fDSP1Outputs;
        FAUSTFLOAT** fDSP2Inputs;

        void mix(int count, FAUSTFLOAT* dst, FAUSTFLOAT* src)
        {
            for (int frame = 0; frame < count; frame++) {
                dst[frame] += src[frame];
            }
        }

    public:

        dsp_merger(dsp* dsp1, dsp* dsp2, int buffer_size = 4096):dsp_binary_combiner(dsp1, dsp2)
        {
            fDSP1Inputs = allocateChannels(fDSP1->getNumInputs(), buffer_size);
            fDSP1Outputs = allocateChannels(fDSP1->getNumOutputs(), buffer_size);
            fDSP2Inputs = new FAUSTFLOAT*[fDSP2->getNumInputs()];
        }

        virtual ~dsp_merger()
        {
            deleteChannels(fDSP1Inputs, fDSP1->getNumInputs());
            deleteChannels(fDSP1Outputs, fDSP1->getNumOutputs());
            delete [] fDSP2Inputs;
        }

        virtual int getNumInputs() { return fDSP1->getNumInputs(); }
        virtual int getNumOutputs() { return fDSP2->getNumOutputs(); }

        virtual void buildUserInterface(UI* ui_interface)
        {
            buildUserInterfaceAux(ui_interface, "Merge");
        }

        virtual dsp* clone()
        {
            return new dsp_merger(fDSP1->clone(), fDSP2->clone());
        }

        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            fDSP1->compute(count, fDSP1Inputs, fDSP1Outputs);

            memset(fDSP2Inputs, 0, sizeof(FAUSTFLOAT*) * fDSP2->getNumInputs());

            for (int chan = 0; chan < fDSP1->getNumOutputs(); chan++) {
                int mchan = chan % fDSP2->getNumInputs();
                if (fDSP2Inputs[mchan]) {
                    mix(count, fDSP2Inputs[mchan], fDSP1Outputs[chan]);
                } else {
                    fDSP2Inputs[mchan] = fDSP1Outputs[chan];
                }
            }

            fDSP2->compute(count, fDSP2Inputs, outputs);
        }
};

// Combine two 'compatible' DSP in a recursive way

class dsp_recursiver : public dsp_binary_combiner {

    private:

        FAUSTFLOAT** fDSP1Inputs;
        FAUSTFLOAT** fDSP1Outputs;

        FAUSTFLOAT** fDSP2Inputs;
        FAUSTFLOAT** fDSP2Outputs;

    public:

        dsp_recursiver(dsp* dsp1, dsp* dsp2):dsp_binary_combiner(dsp1, dsp2)
        {
            fDSP1Inputs = allocateChannels(fDSP1->getNumInputs(), 1);
            fDSP1Outputs = allocateChannels(fDSP1->getNumOutputs(), 1);
            fDSP2Inputs = allocateChannels(fDSP2->getNumInputs(), 1);
            fDSP2Outputs = allocateChannels(fDSP2->getNumOutputs(), 1);
        }

        virtual ~dsp_recursiver()
        {
            deleteChannels(fDSP1Inputs, fDSP1->getNumInputs());
            deleteChannels(fDSP1Outputs, fDSP1->getNumOutputs());
            deleteChannels(fDSP2Inputs, fDSP2->getNumInputs());
            deleteChannels(fDSP2Outputs, fDSP2->getNumOutputs());
        }

        virtual int getNumInputs() { return fDSP1->getNumInputs() - fDSP2->getNumOutputs(); }
        virtual int getNumOutputs() { return fDSP1->getNumOutputs(); }

        virtual void buildUserInterface(UI* ui_interface)
        {
            buildUserInterfaceAux(ui_interface, "Recursiver");
        }

        virtual dsp* clone()
        {
            return new dsp_recursiver(fDSP1->clone(), fDSP2->clone());
        }

        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            for (int frame = 0; (frame < count); frame++) {

                for (int chan = 0; chan < fDSP2->getNumOutputs(); chan++) {
                    fDSP1Inputs[chan][0] = fDSP2Outputs[chan][0];
                }

                for (int chan = 0; chan < fDSP1->getNumInputs() - fDSP2->getNumOutputs(); chan++) {
                    fDSP1Inputs[chan + fDSP2->getNumOutputs()][0] = inputs[chan][frame];
                }

                fDSP1->compute(1, fDSP1Inputs, fDSP1Outputs);

                for (int chan = 0; chan < fDSP1->getNumOutputs(); chan++) {
                    outputs[chan][frame] = fDSP1Outputs[chan][0];
                }

                for (int chan = 0; chan < fDSP2->getNumInputs(); chan++) {
                    fDSP2Inputs[chan][0] = fDSP1Outputs[chan][0];
                }

                fDSP2->compute(1, fDSP2Inputs, fDSP2Outputs);
            }
        }

        virtual void compute(double date_usec, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) { compute(count, inputs, outputs); }

};

#ifndef __dsp_algebra_api__
#define __dsp_algebra_api__
// DSP algebra API
/*
 Each operation takes two DSP as parameters, returns the combined DSPs, or null if failure with an error message.
 */

static dsp* createDSPSequencer(dsp* dsp1, dsp* dsp2, std::string& error)
{
    if (dsp1->getNumOutputs() != dsp2->getNumInputs()) {
        std::stringstream error_aux;
        error_aux << "Connection error int dsp_sequencer : the number of outputs ("
                  << dsp1->getNumOutputs() << ") of A "
                  << "must be equal to the number of inputs (" << dsp2->getNumInputs() << ") of B" << std::endl;
        error = error_aux.str();
        return nullptr;
    } else {
        return new dsp_sequencer(dsp1, dsp2);
    }
}

static dsp* createDSPParallelizer(dsp* dsp1, dsp* dsp2, std::string& error)
{
    return new dsp_parallelizer(dsp1, dsp2);
}

static dsp* createDSPSplitter(dsp* dsp1, dsp* dsp2, std::string& error)
{
    if (dsp1->getNumOutputs() == 0) {
        error = "Connection error in dsp_splitter : the first expression has no outputs\n";
        return nullptr;
    } else if (dsp2->getNumInputs() == 0) {
        error = "Connection error in dsp_splitter : the second expression has no inputs\n";
        return nullptr;
    } else if (dsp2->getNumInputs() % dsp1->getNumOutputs() != 0) {
        std::stringstream error_aux;
        error_aux << "Connection error in dsp_splitter : the number of outputs (" << dsp1->getNumOutputs()
                  << ") of the first expression should be a divisor of the number of inputs ("
                  << dsp2->getNumInputs()
                  << ") of the second expression" << std::endl;
        error = error_aux.str();
        return nullptr;
    } else if (dsp2->getNumInputs() == dsp1->getNumOutputs()) {
        return new dsp_sequencer(dsp1, dsp2);
    } else {
        return new dsp_splitter(dsp1, dsp2);
    }
}

static dsp* createDSPMerger(dsp* dsp1, dsp* dsp2, std::string& error)
{
    if (dsp1->getNumOutputs() == 0) {
        error = "Connection error in dsp_merger : the first expression has no outputs\n";
        return nullptr;
    } else if (dsp2->getNumInputs() == 0) {
        error = "Connection error in dsp_merger : the second expression has no inputs\n";
        return nullptr;
    } else if (dsp1->getNumOutputs() % dsp2->getNumInputs() != 0) {
        std::stringstream error_aux;
        error_aux << "Connection error in dsp_merger : the number of outputs (" << dsp1->getNumOutputs()
                  << ") of the first expression should be a multiple of the number of inputs ("
                  << dsp2->getNumInputs()
                  << ") of the second expression" << std::endl;
        error = error_aux.str();
        return nullptr;
    } else if (dsp2->getNumInputs() == dsp1->getNumOutputs()) {
        return new dsp_sequencer(dsp1, dsp2);
    } else {
        return new dsp_merger(dsp1, dsp2);
    }
}

static dsp* createDSPRecursiver(dsp* dsp1, dsp* dsp2, std::string& error)
{
    if ((dsp2->getNumInputs() > dsp1->getNumOutputs()) || (dsp2->getNumOutputs() > dsp1->getNumInputs())) {
        std::stringstream error_aux;
        error_aux << "Connection error in : dsp_recursiver" << std::endl;
        if (dsp2->getNumInputs() > dsp1->getNumOutputs()) {
            error_aux << "The number of outputs " << dsp1->getNumOutputs()
                      << " of the first expression should be greater or equal to the number of inputs ("
                      << dsp2->getNumInputs()
                      << ") of the second expression" << std::endl;
        }
        if (dsp2->getNumOutputs() > dsp1->getNumInputs()) {
            error_aux << "The number of inputs " << dsp1->getNumInputs()
                      << " of the first expression should be greater or equal to the number of outputs ("
                      << dsp2->getNumOutputs()
                      << ") of the second expression" << std::endl;
        }
        error = error_aux.str();
        return nullptr;
    } else {
        return new dsp_recursiver(dsp1, dsp2);
    }
}
#endif

#endif
/**************************  END  dsp-combiner.h **************************/
/************************** BEGIN proxy-dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __proxy_dsp__
#define __proxy_dsp__

#include <vector>
#include <map>


//----------------------------------------------------------------
//  Proxy dsp definition created from the DSP JSON description
//  This class allows a 'proxy' dsp to control a real dsp 
//  possibly running somewhere else.
//----------------------------------------------------------------

class proxy_dsp : public dsp {

    private:
    
        JSONUIDecoder* fDecoder;
        int fSampleRate;
        
    public:
    
        proxy_dsp():fDecoder(nullptr), fSampleRate(-1)
        {}
    
        proxy_dsp(const std::string& json)
        {
            init(json);
        }
    
        void init(const std::string& json)
        {
            fDecoder = new JSONUIDecoder(json);
            fSampleRate = -1;
        }
          
        proxy_dsp(dsp* dsp)
        {
            JSONUI builder(dsp->getNumInputs(), dsp->getNumOutputs());
            dsp->metadata(&builder);
            dsp->buildUserInterface(&builder);
            fSampleRate = dsp->getSampleRate();
            fDecoder = new JSONUIDecoder(builder.JSON());
        }
      
        virtual ~proxy_dsp()
        {
            delete fDecoder;
        }
       
        virtual int getNumInputs() { return fDecoder->fNumInputs; }
        virtual int getNumOutputs() { return fDecoder->fNumOutputs; }
        
        virtual void buildUserInterface(UI* ui) { fDecoder->buildUserInterface(ui); }
        
        // To possibly implement in a concrete proxy dsp 
        virtual void init(int sample_rate)
        {
            instanceInit(sample_rate);
        }
        virtual void instanceInit(int sample_rate)
        {
            instanceConstants(sample_rate);
            instanceResetUserInterface();
            instanceClear();
        }
        virtual void instanceConstants(int sample_rate) { fSampleRate = sample_rate; }
        virtual void instanceResetUserInterface() { fDecoder->resetUserInterface(); }
        virtual void instanceClear() {}
    
        virtual int getSampleRate() { return fSampleRate; }
    
        virtual proxy_dsp* clone() { return new proxy_dsp(fDecoder->fJSON); }
        virtual void metadata(Meta* m) { fDecoder->metadata(m); }
    
        virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) {}
        virtual void compute(double date_usec, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) {} 
        
};

#endif
/**************************  END  proxy-dsp.h **************************/
/************************** BEGIN JSONControl.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2019 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __JSON_CONTROL__
#define __JSON_CONTROL__

#include <string>

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif

struct JSONControl {
    
    virtual std::string getJSON() { return ""; }

    virtual void setParamValue(const std::string& path, FAUSTFLOAT value) {}

    virtual FAUSTFLOAT getParamValue(const std::string& path) { return 0; }
    
    virtual ~JSONControl()
    {}
    
};

#endif
/**************************  END  JSONControl.h **************************/

#define kActiveVoice      0
#define kFreeVoice        -1
#define kReleaseVoice     -2
#define kNoVoice          -3

#define VOICE_STOP_LEVEL  0.0005    // -70 db
#define MIX_BUFFER_SIZE   4096

// endsWith(<str>,<end>) : returns true if <str> ends with <end>

static double midiToFreq(double note)
{
    return 440.0 * std::pow(2.0, (note-69.0)/12.0);
}

/**
 * Allows to control zones in a grouped manner.
 */

class GroupUI : public GUI, public PathBuilder
{

    private:

        std::map<std::string, uiGroupItem*> fLabelZoneMap;

        void insertMap(std::string label, FAUSTFLOAT* zone)
        {
            if (!MapUI::endsWith(label, "/gate")
                && !MapUI::endsWith(label, "/freq")
                && !MapUI::endsWith(label, "/gain")) {

                // Groups all controller except 'freq', 'gate', and 'gain'
                if (fLabelZoneMap.find(label) != fLabelZoneMap.end()) {
                    fLabelZoneMap[label]->addZone(zone);
                } else {
                    fLabelZoneMap[label] = new uiGroupItem(this, zone);
                }
            }
        }

        uiCallbackItem* fPanic;

    public:

        GroupUI(FAUSTFLOAT* zone, uiCallback cb, void* arg)
        {
            fPanic = new uiCallbackItem(this, zone, cb, arg);
        }
    
        virtual ~GroupUI()
        {
            // 'fPanic' is kept and deleted in GUI, so do not delete here
        }

        // -- widget's layouts
        void openTabBox(const char* label)
        {
            pushLabel(label);
        }
        void openHorizontalBox(const char* label)
        {
            pushLabel(label);
        }
        void openVerticalBox(const char* label)
        {
            pushLabel(label);
        }
        void closeBox()
        {
            popLabel();
        }

        // -- active widgets
        void addButton(const char* label, FAUSTFLOAT* zone)
        {
            insertMap(buildPath(label), zone);
        }
        void addCheckButton(const char* label, FAUSTFLOAT* zone)
        {
            insertMap(buildPath(label), zone);
        }
        void addVerticalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT fmin, FAUSTFLOAT fmax, FAUSTFLOAT step)
        {
            insertMap(buildPath(label), zone);
        }
        void addHorizontalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT fmin, FAUSTFLOAT fmax, FAUSTFLOAT step)
        {
            insertMap(buildPath(label), zone);
        }
        void addNumEntry(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT fmin, FAUSTFLOAT fmax, FAUSTFLOAT step)
        {
            insertMap(buildPath(label), zone);
        }

        // -- passive widgets
        void addHorizontalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT fmin, FAUSTFLOAT fmax)
        {
            insertMap(buildPath(label), zone);
        }
        void addVerticalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT fmin, FAUSTFLOAT fmax)
        {
            insertMap(buildPath(label), zone);
        }

};

/**
 * One voice of polyphony.
 */

struct dsp_voice : public MapUI, public decorator_dsp {

    int fNote;                          // Playing note actual pitch
    int fDate;                          // KeyOn date
    int fRelease;                       // Current number of samples used in release mode to detect end of note
    int fMinRelease;                    // Max of samples used in release mode to detect end of note
    FAUSTFLOAT fLevel;                  // Last audio block level
    std::vector<std::string> fGatePath; // Paths of 'gate' control
    std::vector<std::string> fGainPath; // Paths of 'gain' control
    std::vector<std::string> fFreqPath; // Paths of 'freq' control
 
    dsp_voice(dsp* dsp):decorator_dsp(dsp)
    {
        dsp->buildUserInterface(this);
        fNote = kFreeVoice;
        fLevel = FAUSTFLOAT(0);
        fDate = 0;
        fMinRelease = dsp->getSampleRate()/2; // One 1/2 sec used in release mode to detect end of note
        extractPaths(fGatePath, fFreqPath, fGainPath);
    }
    virtual ~dsp_voice()
    {}

    void extractPaths(std::vector<std::string>& gate, std::vector<std::string>& freq, std::vector<std::string>& gain)
    {
        // Keep gain, freq and gate labels
        std::map<std::string, FAUSTFLOAT*>::iterator it;
        for (it = getMap().begin(); it != getMap().end(); it++) {
            std::string path = (*it).first;
            if (endsWith(path, "/gate")) {
                gate.push_back(path);
            } else if (endsWith(path, "/freq")) {
                freq.push_back(path);
            } else if (endsWith(path, "/gain")) {
                gain.push_back(path);
            }
        }
    }

    // MIDI velocity [0..127]
    void keyOn(int pitch, int velocity, bool trigger)
    {
        keyOn(pitch, float(velocity)/127.f, trigger);
    }

    // Normalized MIDI velocity [0..1]
    void keyOn(int pitch, float velocity, bool trigger)
    {
        // So that DSP state is always re-initialized
        fDSP->instanceClear();
        
        for (size_t i = 0; i < fFreqPath.size(); i++) {
            setParamValue(fFreqPath[i], midiToFreq(pitch));
        }
        for (size_t i = 0; i < fGatePath.size(); i++) {
            setParamValue(fGatePath[i], FAUSTFLOAT(1));
        }
        for (size_t i = 0; i < fGainPath.size(); i++) {
            setParamValue(fGainPath[i], velocity);
        }
        
        fNote = pitch;
    }

    void keyOff(bool hard = false)
    {
        // No use of velocity for now...
        for (size_t i = 0; i < fGatePath.size(); i++) {
            setParamValue(fGatePath[i], FAUSTFLOAT(0));
        }
        
        if (hard) {
            // Immediately stop voice
            fNote = kFreeVoice;
        } else {
            // Release voice
            fRelease = fMinRelease;
            fNote = kReleaseVoice;
        }
    }

};

/**
 * A group of voices.
 */

struct dsp_voice_group {

    GroupUI fGroups;

    std::vector<dsp_voice*> fVoiceTable; // Individual voices
    dsp* fVoiceGroup;                    // Voices group to be used for GUI grouped control

    FAUSTFLOAT fPanic;

    bool fVoiceControl;
    bool fGroupControl;

    dsp_voice_group(uiCallback cb, void* arg, bool control, bool group)
        :fGroups(&fPanic, cb, arg),
        fVoiceGroup(0), fPanic(FAUSTFLOAT(0)),
        fVoiceControl(control), fGroupControl(group)
    {}

    virtual ~dsp_voice_group()
    {
        for (size_t i = 0; i < fVoiceTable.size(); i++) {
            delete fVoiceTable[i];
        }
        delete fVoiceGroup;
    }

    void addVoice(dsp_voice* voice)
    {
        fVoiceTable.push_back(voice);
    }

    void clearVoices()
    {
        fVoiceTable.clear();
    }

    void init()
    {
        // Groups all uiItem for a given path
        fVoiceGroup = new proxy_dsp(fVoiceTable[0]);
        fVoiceGroup->buildUserInterface(&fGroups);
        for (size_t i = 0; i < fVoiceTable.size(); i++) {
            fVoiceTable[i]->buildUserInterface(&fGroups);
        }
    }
    
    void instanceResetUserInterface()
    {
        for (size_t i = 0; i < fVoiceTable.size(); i++) {
            fVoiceTable[i]->instanceResetUserInterface();
        }
    }

    void buildUserInterface(UI* ui_interface)
    {
        if (fVoiceTable.size() > 1) {
            ui_interface->openTabBox("Polyphonic");

            // Grouped voices UI
            ui_interface->openVerticalBox("Voices");
            ui_interface->addButton("Panic", &fPanic);
            fVoiceGroup->buildUserInterface(ui_interface);
            ui_interface->closeBox();

            // If not grouped, also add individual voices UI
            if (!fGroupControl) {
                for (size_t i = 0; i < fVoiceTable.size(); i++) {
                    char buffer[32];
                    snprintf(buffer, 32, ((fVoiceTable.size() < 8) ? "Voice%ld" : "V%ld"), long(i+1));
                    ui_interface->openHorizontalBox(buffer);
                    fVoiceTable[i]->buildUserInterface(ui_interface);
                    ui_interface->closeBox();
                }
            }

            ui_interface->closeBox();
        } else {
            fVoiceTable[0]->buildUserInterface(ui_interface);
        }
    }

};

/**
 * Base class for MIDI controllable DSP.
 */

#ifdef EMCC
#endif

class dsp_poly : public decorator_dsp, public midi, public JSONControl {

    protected:
    
    #ifdef EMCC
        MapUI fMapUI;
        std::string fJSON;
        midi_handler fMIDIHandler;
        MidiUI fMIDIUI;
    #endif
    
    public:
    
    #ifdef EMCC
        dsp_poly(dsp* dsp):decorator_dsp(dsp), fMIDIUI(&fMIDIHandler)
        {
            JSONUI jsonui(getNumInputs(), getNumOutputs());
            buildUserInterface(&jsonui);
            fJSON = jsonui.JSON(true);
            buildUserInterface(&fMapUI);
            buildUserInterface(&fMIDIUI);
        }
    #else
        dsp_poly(dsp* dsp):decorator_dsp(dsp)
        {}
    #endif
    
        virtual ~dsp_poly() {}
    
        // Reimplemented for EMCC
    #ifdef EMCC
        virtual int getNumInputs() { return decorator_dsp::getNumInputs(); }
        virtual int getNumOutputs() { return decorator_dsp::getNumOutputs(); }
        virtual void buildUserInterface(UI* ui_interface) { decorator_dsp::buildUserInterface(ui_interface); }
        virtual int getSampleRate() { return decorator_dsp::getSampleRate(); }
        virtual void init(int sample_rate) { decorator_dsp::init(sample_rate); }
        virtual void instanceInit(int sample_rate) { decorator_dsp::instanceInit(sample_rate); }
        virtual void instanceConstants(int sample_rate) { decorator_dsp::instanceConstants(sample_rate); }
        virtual void instanceResetUserInterface() { decorator_dsp::instanceResetUserInterface(); }
        virtual void instanceClear() { decorator_dsp::instanceClear(); }
        virtual dsp_poly* clone() { return new dsp_poly(fDSP->clone()); }
        virtual void metadata(Meta* m) { decorator_dsp::metadata(m); }
    
        // Additional API
        std::string getJSON()
        {
            return fJSON;
        }
    
        virtual void setParamValue(const std::string& path, FAUSTFLOAT value)
        {
            fMapUI.setParamValue(path, value);
            GUI::updateAllGuis();
        }
        
        virtual FAUSTFLOAT getParamValue(const std::string& path) { return fMapUI.getParamValue(path); }

        virtual void computeJS(int count, uintptr_t inputs, uintptr_t outputs)
        {
            decorator_dsp::compute(count, reinterpret_cast<FAUSTFLOAT**>(inputs),reinterpret_cast<FAUSTFLOAT**>(outputs));
        }
    #endif
    
        virtual MapUI* keyOn(int channel, int pitch, int velocity)
        {
            return midi::keyOn(channel, pitch, velocity);
        }
        virtual void keyOff(int channel, int pitch, int velocity)
        {
            midi::keyOff(channel, pitch, velocity);
        }
        virtual void keyPress(int channel, int pitch, int press)
        {
            midi::keyPress(channel, pitch, press);
        }
        virtual void chanPress(int channel, int press)
        {
            midi::chanPress(channel, press);
        }
        virtual void ctrlChange(int channel, int ctrl, int value)
        {
            midi::ctrlChange(channel, ctrl, value);
        }
        virtual void ctrlChange14bits(int channel, int ctrl, int value)
        {
            midi::ctrlChange14bits(channel, ctrl, value);
        }
        virtual void pitchWheel(int channel, int wheel)
        {
        #ifdef EMCC
            fMIDIUI.pitchWheel(0., channel, wheel);
            GUI::updateAllGuis();
        #else
            midi::pitchWheel(channel, wheel);
        #endif
        }
        virtual void progChange(int channel, int pgm)
        {
            midi::progChange(channel, pgm);
        }
    
        // Group API
        virtual void setGroup(bool group) {}
        virtual bool getGroup() { return false; }

};

/**
 * Polyphonic DSP: groups a set of DSP to be played together or triggered by MIDI.
 *
 * All voices are preallocated by cloning the single DSP voice given at creation time.
 * Dynamic voice allocation is done in 'getFreeVoice'
 */

class mydsp_poly : public dsp_voice_group, public dsp_poly {

    private:

        FAUSTFLOAT** fMixBuffer;
        int fDate;

        FAUSTFLOAT mixCheckVoice(int count, FAUSTFLOAT** outputBuffer, FAUSTFLOAT** mixBuffer)
        {
            FAUSTFLOAT level = 0;
            for (int i = 0; i < getNumOutputs(); i++) {
                FAUSTFLOAT* mixChannel = mixBuffer[i];
                FAUSTFLOAT* outChannel = outputBuffer[i];
                for (int j = 0; j < count; j++) {
                    level = std::max<FAUSTFLOAT>(level, (FAUSTFLOAT)fabs(outChannel[j]));
                    mixChannel[j] += outChannel[j];
                }
            }
            return level;
        }
    
        void mixVoice(int count, FAUSTFLOAT** outputBuffer, FAUSTFLOAT** mixBuffer)
        {
            for (int i = 0; i < getNumOutputs(); i++) {
                FAUSTFLOAT* mixChannel = mixBuffer[i];
                FAUSTFLOAT* outChannel = outputBuffer[i];
                for (int j = 0; j < count; j++) {
                    mixChannel[j] += outChannel[j];
                }
            }
        }

        void clearOutput(int count, FAUSTFLOAT** mixBuffer)
        {
            for (int i = 0; i < getNumOutputs(); i++) {
                memset(mixBuffer[i], 0, count * sizeof(FAUSTFLOAT));
            }
        }
    
        int getPlayingVoice(int pitch)
        {
            int voice_playing = kNoVoice;
            int oldest_date_playing = INT_MAX;
            
            for (size_t i = 0; i < fVoiceTable.size(); i++) {
                if (fVoiceTable[i]->fNote == pitch) {
                    // Keeps oldest playing voice
                    if (fVoiceTable[i]->fDate < oldest_date_playing) {
                        oldest_date_playing = fVoiceTable[i]->fDate;
                        voice_playing = int(i);
                    }
                }
            }
            
            return voice_playing;
        }
    
        // Always returns a voice
        int getFreeVoice()
        {
            int voice = kNoVoice;
            
            // Looks for the first available voice
            for (size_t i = 0; i < fVoiceTable.size(); i++) {
                if (fVoiceTable[i]->fNote == kFreeVoice) {
                    voice = int(i);
                    goto result;
                }
            }

            {
                // Otherwise steal one
                int voice_release = kNoVoice;
                int voice_playing = kNoVoice;
                
                int oldest_date_release = INT_MAX;
                int oldest_date_playing = INT_MAX;

                // Scan all voices
                for (size_t i = 0; i < fVoiceTable.size(); i++) {
                    if (fVoiceTable[i]->fNote == kReleaseVoice) {
                        // Keeps oldest release voice
                        if (fVoiceTable[i]->fDate < oldest_date_release) {
                            oldest_date_release = fVoiceTable[i]->fDate;
                            voice_release = int(i);
                        }
                    } else {
                        // Otherwise keeps oldest playing voice
                        if (fVoiceTable[i]->fDate < oldest_date_playing) {
                            oldest_date_playing = fVoiceTable[i]->fDate;
                            voice_playing = int(i);
                        }
                    }
                }
            
                // Then decide which one to steal
                if (oldest_date_release != INT_MAX) {
                    std::cout << "Steal release voice : voice_date " << fVoiceTable[voice_release]->fDate << " cur_date = " << fDate << " voice = " << voice_release << std::endl;
                    voice = voice_release;
                    goto result;
                } else if (oldest_date_playing != INT_MAX) {
                    std::cout << "Steal playing voice : voice_date " << fVoiceTable[voice_playing]->fDate << " cur_date = " << fDate << " voice = " << voice_playing << std::endl;
                    voice = voice_playing;
                    goto result;
                } else {
                    assert(false);
                    return kNoVoice;
                }
            }
            
        result:
            fVoiceTable[voice]->fDate = fDate++;
            fVoiceTable[voice]->fNote = kActiveVoice;
            return voice;
        }

        static void panic(FAUSTFLOAT val, void* arg)
        {
            if (val == FAUSTFLOAT(1)) {
                static_cast<mydsp_poly*>(arg)->allNotesOff(true);
            }
        }

        bool checkPolyphony()
        {
            if (fVoiceTable.size() > 0) {
                return true;
            } else {
                std::cout << "DSP is not polyphonic...\n";
                return false;
            }
        }

    public:
    
        /**
         * Constructor.
         *
         * @param dsp - the dsp to be used for one voice. Beware: mydsp_poly will use and finally delete the pointer.
         * @param nvoices - number of polyphony voices, should be at least 1
         * @param control - whether voices will be dynamically allocated and controlled (typically by a MIDI controler).
         *                If false all voices are always running.
         * @param group - if true, voices are not individually accessible, a global "Voices" tab will automatically dispatch
         *                a given control on all voices, assuming GUI::updateAllGuis() is called.
         *                If false, all voices can be individually controlled.
         *                setGroup/getGroup methods can be used to set/get the group state.
         *
         */
        mydsp_poly(dsp* dsp,
                   int nvoices,
                   bool control = false,
                   bool group = true)
        : dsp_voice_group(panic, this, control, group), dsp_poly(dsp) // dsp parameter is deallocated by ~dsp_poly
        {
            fDate = 0;

            // Create voices
            assert(nvoices > 0);
            for (int i = 0; i < nvoices; i++) {
                addVoice(new dsp_voice(dsp->clone()));
            }

            // Init audio output buffers
            fMixBuffer = new FAUSTFLOAT*[getNumOutputs()];
            for (int i = 0; i < getNumOutputs(); i++) {
                fMixBuffer[i] = new FAUSTFLOAT[MIX_BUFFER_SIZE];
            }

            dsp_voice_group::init();
        }

        virtual ~mydsp_poly()
        {
            for (int i = 0; i < getNumOutputs(); i++) {
                delete[] fMixBuffer[i];
            }
            delete[] fMixBuffer;
        }

        // DSP API
    
        void buildUserInterface(UI* ui_interface)
        {
            dsp_voice_group::buildUserInterface(ui_interface);
        }

        void init(int sample_rate)
        {
            decorator_dsp::init(sample_rate);
            fVoiceGroup->init(sample_rate);
            fPanic = FAUSTFLOAT(0);
            
            // Init voices
            for (size_t i = 0; i < fVoiceTable.size(); i++) {
                fVoiceTable[i]->init(sample_rate);
            }
        }
    
        void instanceInit(int samplingFreq)
        {
            instanceConstants(samplingFreq);
            instanceResetUserInterface();
            instanceClear();
        }

        void instanceConstants(int sample_rate)
        {
            decorator_dsp::instanceConstants(sample_rate);
            fVoiceGroup->instanceConstants(sample_rate);
            
            // Init voices
            for (size_t i = 0; i < fVoiceTable.size(); i++) {
                fVoiceTable[i]->instanceConstants(sample_rate);
            }
        }

        void instanceResetUserInterface()
        {
            decorator_dsp::instanceResetUserInterface();
            fVoiceGroup->instanceResetUserInterface();
            fPanic = FAUSTFLOAT(0);
            
            for (size_t i = 0; i < fVoiceTable.size(); i++) {
                fVoiceTable[i]->instanceResetUserInterface();
            }
        }

        void instanceClear()
        {
            decorator_dsp::instanceClear();
            fVoiceGroup->instanceClear();
            
            for (size_t i = 0; i < fVoiceTable.size(); i++) {
                fVoiceTable[i]->instanceClear();
            }
        }

        virtual mydsp_poly* clone()
        {
            return new mydsp_poly(fDSP->clone(), int(fVoiceTable.size()), fVoiceControl, fGroupControl);
        }

        void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            assert(count <= MIX_BUFFER_SIZE);

            // First clear the outputs
            clearOutput(count, outputs);

            if (fVoiceControl) {
                // Mix all playing voices
                for (size_t i = 0; i < fVoiceTable.size(); i++) {
                    dsp_voice* voice = fVoiceTable[i];
                    if (voice->fNote != kFreeVoice) {
                        voice->compute(count, inputs, fMixBuffer);
                        // Mix it in result
                        voice->fLevel = mixCheckVoice(count, fMixBuffer, outputs);
                        // Check the level to possibly set the voice in kFreeVoice again
                        voice->fRelease -= count;
                        if ((voice->fNote == kReleaseVoice)
                            && (voice->fRelease < 0)
                            && (voice->fLevel < VOICE_STOP_LEVEL)) {
                            voice->fNote = kFreeVoice;
                        }
                    }
                }
            } else {
                // Mix all voices
                for (size_t i = 0; i < fVoiceTable.size(); i++) {
                    fVoiceTable[i]->compute(count, inputs, fMixBuffer);
                    mixVoice(count, fMixBuffer, outputs);
                }
            }
        }

        void compute(double date_usec, int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            compute(count, inputs, outputs);
        }
    
        // Terminate all active voices, gently or immediately (depending of 'hard' value)
        void allNotesOff(bool hard = false)
        {
            for (size_t i = 0; i < fVoiceTable.size(); i++) {
                fVoiceTable[i]->keyOff(hard);
            }
        }

        // Additional polyphonic API
        MapUI* newVoice()
        {
            int voice = getFreeVoice();
            // So that DSP state is always re-initialized
            fVoiceTable[voice]->instanceClear();
            return fVoiceTable[voice];
        }

        void deleteVoice(MapUI* voice)
        {
            std::vector<dsp_voice*>::iterator it = find(fVoiceTable.begin(), fVoiceTable.end(), reinterpret_cast<dsp_voice*>(voice));
            if (it != fVoiceTable.end()) {
                (*it)->keyOff();
            } else {
                std::cout << "Voice not found\n";
            }
        }
    
        // Group API
        void setGroup(bool group) { fGroupControl = group; }
        bool getGroup() { return fGroupControl; }

        // MIDI API
        MapUI* keyOn(int channel, int pitch, int velocity)
        {
            if (checkPolyphony()) {
                int voice = getFreeVoice();
                fVoiceTable[voice]->keyOn(pitch, velocity, true);
                return fVoiceTable[voice];
            } else {
                return 0;
            }
        }

        void keyOff(int channel, int pitch, int velocity = 127)
        {
            if (checkPolyphony()) {
                int voice = getPlayingVoice(pitch);
                if (voice != kNoVoice) {
                    fVoiceTable[voice]->keyOff();
                } else {
                    std::cout << "Playing pitch = " << pitch << " not found\n";
                }
            }
        }

        void ctrlChange(int channel, int ctrl, int value)
        {
            if (ctrl == ALL_NOTES_OFF || ctrl == ALL_SOUND_OFF) {
                allNotesOff();
            }
        }

};

/**
 * Polyphonic DSP with an integrated effect. fPolyDSP will respond to MIDI messages.
 */
class dsp_poly_effect : public dsp_poly {
    
    private:
        
        dsp_poly* fPolyDSP;
        
    public:
        
        dsp_poly_effect(dsp_poly* dsp1, dsp* dsp2)
        :dsp_poly(dsp2), fPolyDSP(dsp1)
        {}
        
        virtual ~dsp_poly_effect()
        {
            // dsp_poly_effect is also a decorator_dsp, which will free fPolyDSP
        }
        
        // MIDI API
        MapUI* keyOn(int channel, int pitch, int velocity)
        {
            return fPolyDSP->keyOn(channel, pitch, velocity);
        }
        void keyOff(int channel, int pitch, int velocity)
        {
            fPolyDSP->keyOff(channel, pitch, velocity);
        }
        void keyPress(int channel, int pitch, int press)
        {
            fPolyDSP->keyPress(channel, pitch, press);
        }
        void chanPress(int channel, int press)
        {
            fPolyDSP->chanPress(channel, press);
        }
        void ctrlChange(int channel, int ctrl, int value)
        {
            fPolyDSP->ctrlChange(channel, ctrl, value);
        }
        void ctrlChange14bits(int channel, int ctrl, int value)
        {
            fPolyDSP->ctrlChange14bits(channel, ctrl, value);
        }
        void pitchWheel(int channel, int wheel)
        {
            fPolyDSP->pitchWheel(channel, wheel);
        }
        void progChange(int channel, int pgm)
        {
            fPolyDSP->progChange(channel, pgm);
        }
        
        // Group API
        void setGroup(bool group)
        {
            fPolyDSP->setGroup(group);
        }
        bool getGroup()
        {
            return fPolyDSP->getGroup();
        }
};

/**
 * Polyphonic DSP factory class. Helper code to support polyphonic DSP source with an integrated effect.
 */

struct dsp_poly_factory : public dsp_factory {
    
    dsp_factory* fProcessFactory;
    dsp_factory* fEffectFactory;
    
    std::string getEffectCode(const std::string& dsp_content)
    {
        std::stringstream effect_code;
        effect_code << "adapt(1,1) = _; adapt(2,2) = _,_; adapt(1,2) = _ <: _,_; adapt(2,1) = _,_ :> _;";
        effect_code << "adaptor(F,G) = adapt(outputs(F),inputs(G)); dsp_code = environment{ " << dsp_content << " };";
        effect_code << "process = adaptor(dsp_code.process, dsp_code.effect) : dsp_code.effect;";
        return effect_code.str();
    }

    dsp_poly_factory(dsp_factory* process_factory = NULL,
                     dsp_factory* effect_factory = NULL):
    fProcessFactory(process_factory)
    ,fEffectFactory(effect_factory)
    {}
    
    virtual ~dsp_poly_factory()
    {}
    
    virtual std::string getName() { return fProcessFactory->getName(); }
    virtual std::string getSHAKey() { return fProcessFactory->getSHAKey(); }
    virtual std::string getDSPCode() { return fProcessFactory->getDSPCode(); }
    virtual std::string getCompileOptions() { return fProcessFactory->getCompileOptions(); }
    virtual std::vector<std::string> getLibraryList() { return fProcessFactory->getLibraryList(); }
    virtual std::vector<std::string> getIncludePathnames() { return fProcessFactory->getIncludePathnames(); }
    
    virtual void setMemoryManager(dsp_memory_manager* manager)
    {
        fProcessFactory->setMemoryManager(manager);
        if (fEffectFactory) {
            fEffectFactory->setMemoryManager(manager);
        }
    }
    virtual dsp_memory_manager* getMemoryManager() { return fProcessFactory->getMemoryManager(); }
    
    /* Create a new polyphonic DSP instance with global effect, to be deleted with C++ 'delete'
     *
     * @param nvoices - number of polyphony voices, should be at least 1
     * @param control - whether voices will be dynamically allocated and controlled (typically by a MIDI controler).
     *                If false all voices are always running.
     * @param group - if true, voices are not individually accessible, a global "Voices" tab will automatically dispatch
     *                a given control on all voices, assuming GUI::updateAllGuis() is called.
     *                If false, all voices can be individually controlled.
     */
    dsp_poly* createPolyDSPInstance(int nvoices, bool control, bool group)
    {
        dsp_poly* dsp_poly = new mydsp_poly(fProcessFactory->createDSPInstance(), nvoices, control, group);
        if (fEffectFactory) {
            // the 'dsp_poly' object has to be controlled with MIDI, so kept separated from new dsp_sequencer(...) object
            return new dsp_poly_effect(dsp_poly, new dsp_sequencer(dsp_poly, fEffectFactory->createDSPInstance()));
        } else {
            return new dsp_poly_effect(dsp_poly, dsp_poly);
        }
    }
    
    /* Create a new DSP instance, to be deleted with C++ 'delete' */
    dsp* createDSPInstance()
    {
        return fProcessFactory->createDSPInstance();
    }
    
};

#endif // __poly_dsp__
/**************************  END  poly-dsp.h **************************/
/************************** BEGIN faust-engine.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2013 GRAME, Romain Michon, CCRMA - Stanford University
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __faust_engine__
#define __faust_engine__

#ifdef __cplusplus
extern "C" {
#endif

    void* create(int, int); // To be implemented
    void destroy(void*);

    bool start(void*);
    void stop(void*);
    
    bool isRunning(void*);

    uintptr_t keyOn(void*, int, int);
    int keyOff(void*, int);
    
    void propagateMidi(void*, int, double, int, int, int, int);

    const char* getJSONUI(void*);
    const char* getJSONMeta(void*);

    int getParamsCount(void*);

    void setParamValue(void*, const char*, float);
    float getParamValue(void*, const char*);
    
    void setParamIdValue(void*, int, float);
    float getParamIdValue(void*, int);

    void setVoiceParamValue(void*, const char*, uintptr_t, float);
    float getVoiceParamValue(void*, const char*, uintptr_t);

    const char* getParamAddress(void*, int);

    void propagateAcc(void*, int, float);
    void setAccConverter(void*, int, int, int, float, float, float);

    void propagateGyr(void*, int, float);
    void setGyrConverter(void*, int, int, int, float, float, float);

    float getCPULoad(void*);
    int getScreenColor(void*);

#ifdef __cplusplus
}
#endif

#endif // __faust_engine__
/**************************  END  faust-engine.h **************************/

//**************************************************************
// Mono or polyphonic audio DSP engine
//**************************************************************

using namespace std;

class FaustPolyEngine {
        
    protected:

        mydsp_poly* fPolyDSP;     // the polyphonic Faust object
        dsp* fFinalDSP;           // the "final" dsp object submitted to the audio driver
    
        APIUI fAPIUI;             // the UI description

        string fJSONUI;
        string fJSONMeta;
        bool fRunning;
        audio* fDriver;
    
        midi_handler fMidiHandler;
        MidiUI fMidiUI;
    
        void init(dsp* mono_dsp, audio* driver, midi_handler* midi)
        {
            bool midi_sync = false;
            int nvoices = 0;
            fRunning = false;
            
            MidiMeta::analyse(mono_dsp, midi_sync, nvoices);
            
            // Getting the UI JSON
            JSONUI jsonui1(mono_dsp->getNumInputs(), mono_dsp->getNumOutputs());
            mono_dsp->buildUserInterface(&jsonui1);
            fJSONUI = jsonui1.JSON();
            
            // Getting the metadata JSON
            JSONUI jsonui1M(mono_dsp->getNumInputs(), mono_dsp->getNumOutputs());
            mono_dsp->metadata(&jsonui1M);
            fJSONMeta = jsonui1M.JSON();
            
            if (nvoices > 0) {
                
                fPolyDSP = new mydsp_poly(mono_dsp, nvoices, true);
                fMidiHandler.addMidiIn(fPolyDSP);
                if (midi) midi->addMidiIn(fPolyDSP);
                
            #if POLY2
                fFinalDSP = new dsp_sequencer(fPolyDSP, new effect());
            #else
                fFinalDSP = fPolyDSP;
            #endif
                
                // Update JSONs with Poly version
                JSONUI jsonui2(mono_dsp->getNumInputs(), mono_dsp->getNumOutputs());
                fFinalDSP->buildUserInterface(&jsonui2);
                fJSONUI = jsonui2.JSON();
                
                JSONUI jsonui2M(mono_dsp->getNumInputs(), mono_dsp->getNumOutputs());
                fFinalDSP->metadata(&jsonui2M);
                fJSONMeta = jsonui2M.JSON();
                
            } else {
                fPolyDSP = NULL;
                fFinalDSP = mono_dsp;
            }
            
            fFinalDSP->buildUserInterface(&fMidiUI);
            fFinalDSP->buildUserInterface(&fAPIUI);
            
            // Retrieving DSP object name
            struct MyMeta : public Meta
            {
                string fName;
                void declare(const char* key, const char* value)
                {
                    if (strcmp(key, "name") == 0) fName = value;
                }
                MyMeta():fName("Dummy"){}
            };
      
            MyMeta meta;
            fFinalDSP->metadata(&meta);
            if (midi) midi->setName(meta.fName);
            
            if (driver) {
                // If driver cannot be initialized, start will fail later on...
                if (!driver->init(meta.fName.c_str(), fFinalDSP)) {
                    delete driver;
                    fDriver = NULL;
                } else {
                    fDriver = driver;
                }
            } else {
                fDriver = NULL;
            }
        }
    
    public:
    
        FaustPolyEngine(dsp* mono_dsp, audio* driver = NULL, midi_handler* midi = NULL):fMidiUI(&fMidiHandler)
        {
            init(((mono_dsp) ? mono_dsp : new mydsp()), driver, midi);
        }
    
        virtual ~FaustPolyEngine()
        {
            delete fDriver;
            delete fFinalDSP;
        }

        /*
         * start()
         * Begins the processing and return true if the connection
         * with the audio device was successful and false if not.
         */
        bool start()
        {
            if (!fRunning) {
                fRunning = (fDriver) ? fDriver->start() : false;
            }
            return fRunning;
        }
    
        /*
         * isRunning()
         * Returns true if the DSP frames are being computed and
         * false if not.
         */
        bool isRunning() 
        {
            return fRunning;
        }

        /*
         * stop()
         * Stops the processing, closes the audio engine.
         */
        void stop()
        {
            if (fRunning) {
                fRunning = false;
                if (fDriver) fDriver->stop();
            }
        }
    
        void setGroup(bool group) { if (fPolyDSP) fPolyDSP->setGroup(group); }
        bool getGroup() { return (fPolyDSP) ? fPolyDSP->getGroup() : false; }
    
        /*
         * keyOn(pitch, velocity)
         * Instantiates a new polyphonic voice where velocity
         * and pitch are MIDI numbers (0-127). keyOn can only
         * be used if the [style:poly] metadata is used in the
         * Faust code. keyOn will return 0 if the object is not
         * polyphonic and the allocated voice otherwise.
         */
        MapUI* keyOn(int pitch, int velocity)
        {
            if (fPolyDSP) {
                return fPolyDSP->keyOn(0, pitch, velocity); // MapUI* passed to Java as an integer
            } else {
                return 0;
            }
        }

        /*
         * keyOff(pitch)
         * De-instantiates a polyphonic voice where pitch is the
         * MIDI number of the note (0-127). keyOff can only be
         * used if the [style:poly] metadata is used in the Faust
         * code. keyOn will return 0 if the object is not polyphonic
         * and 1 otherwise.
         */
        int keyOff(int pitch, int velocity = 127)
        {
            if (fPolyDSP) {
                fPolyDSP->keyOff(0, pitch, velocity);
                return 1;
            } else {
                return 0;
            }
        }

        /*
         * newVoice()
         * Instantiate a new voice and returns the corresponding mapUI.
         */
        MapUI* newVoice()
        {
            if (fPolyDSP) {
                return fPolyDSP->newVoice();
            } else {
                return 0;
            }
        }

        /*
         * deleteVoice(MapUI* voice)
         * Delete a voice based on its MapUI*.
         */
        int deleteVoice(MapUI* voice)
        {
            if (fPolyDSP) {
                fPolyDSP->deleteVoice(voice);
                return 1;
            } else {
                return 0;
            }
        }

        /*
         * deleteVoice(uintptr_t voice)
         * Delete a voice based on its MapUI* casted as a uintptr_t.
         */
        int deleteVoice(uintptr_t voice)
        {
            return deleteVoice(reinterpret_cast<MapUI*>(voice));
        }
        
        /*
         * allNotesOff()
         * Terminates all the active voices, gently (with release when hard = false or immediately when hard = true)
         */
        void allNotesOff(bool hard = false)
        {
            if (fPolyDSP) {
                fPolyDSP->allNotesOff(hard);
            }
        }
    
        /*
         * Propagate MIDI data to the Faust object.
         */
        void propagateMidi(int count, double time, int type, int channel, int data1, int data2)
        {
            if (count == 3) fMidiHandler.handleData2(time, type, channel, data1, data2);
            else if (count == 2) fMidiHandler.handleData1(time, type, channel, data1);
            else if (count == 1) fMidiHandler.handleSync(time, type);
            GUI::updateAllGuis();
        }
    
        /*
         * getJSONUI()
         * Returns a string containing a JSON description of the
         * UI of the Faust object.
         */
        const char* getJSONUI()
        {
            return fJSONUI.c_str();
        }
        
        /*
         * getJSONMeta()
         * Returns a string containing a JSON description of the
         * metadata of the Faust object.
         */
        const char* getJSONMeta()
        {
            return fJSONMeta.c_str();
        }
    
        /*
         * buildUserInterface(ui)
         * Calls the polyphonic or monophonic buildUserInterface with the ui parameter.
         */
        void buildUserInterface(UI* ui_interface)
        {
            fFinalDSP->buildUserInterface(ui_interface);
        }
    
        void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs)
        {
            fFinalDSP->compute(count, inputs, outputs);
        }

        /*
         * getParamsCount()
         * Returns the number of control parameters of the Faust object.
         */
        int getParamsCount()
        {
            return fAPIUI.getParamsCount();
        }
    
        /*
         * setParamValue(address, value)
         * Sets the value of the parameter associated with address.
         */
        void setParamValue(const char* address, float value)
        {
            int id = (address) ? fAPIUI.getParamIndex(address) : -1;
            if (id >= 0) {
                fAPIUI.setParamValue(id, value);
                // In POLY mode, update all voices
                GUI::updateAllGuis();
            }
        }

        /*
         * getParamValue(address)
         * Takes the address of a parameter and returns its current
         * value.
         */
        float getParamValue(const char* address)
        {
            int id = (address) ? fAPIUI.getParamIndex(address) : -1;
            return (id >= 0) ? fAPIUI.getParamValue(id) : 0.f;
        }
    
        /*
         * setParamValue(id, value)
         * Sets the value of the parameter associated with id.
         */
        void setParamValue(int id, float value)
        {
            fAPIUI.setParamValue(id, value);
            // In POLY mode, update all voices
            GUI::updateAllGuis();
        }
        
        /*
         * getParamValue(id)
         * Takes the id of a parameter and returns its current
         * value.
         */
        float getParamValue(int id)
        {
            return fAPIUI.getParamValue(id);
        }

        /*
         * setVoiceParamValue(address, voice, value)
         * Sets the value of the parameter associated with address for
         * the voice. setVoiceParamValue can only be
         * used if the [style:poly] metadata is used in the Faust code.
         */
        void setVoiceParamValue(const char* address, uintptr_t voice, float value)
        {
            reinterpret_cast<MapUI*>(voice)->setParamValue(address, value);
        }

        /*
         * setVoiceParamValue(id, voice, value)
         * Sets the value of the parameter associated with the id for
         * the voice. setVoiceParamValue can only be
         * used if the [style:poly] metadata is used in the Faust code.
         */
        void setVoiceParamValue(int id, uintptr_t voice, float value)
        {
            reinterpret_cast<MapUI*>(voice)->setParamValue(reinterpret_cast<MapUI*>(voice)->getParamAddress(id), value);
        }
    
        /*
         * getVoiceParamValue(address, voice)
         * Gets the parameter value associated with address for the voice.
         * getVoiceParamValue can only be used if the [style:poly] metadata
         * is used in the Faust code.
         */
        float getVoiceParamValue(const char* address, uintptr_t voice)
        {
            return reinterpret_cast<MapUI*>(voice)->getParamValue(address);
        }

        /*
         * getVoiceParamValue(id, voice)
         * Gets the parameter value associated with the id for the voice.
         * getVoiceParamValue can only be used if the [style:poly] metadata
         * is used in the Faust code.
         */
        float getVoiceParamValue(int id, uintptr_t voice)
        {
            return reinterpret_cast<MapUI*>(voice)->getParamValue(reinterpret_cast<MapUI*>(voice)->getParamAddress(id));
        }
    
        /*
         * getParamAddress(id)
         * Returns the address of a parameter in function of its "id".
         */
        const char* getParamAddress(int id)
        {
            return fAPIUI.getParamAddress(id);
        }

        /*
         * getVoiceParamAddress(id, voice)
         * Returns the address of a parameter for a specific voice 
         * in function of its "id".
         */
        const char* getVoiceParamAddress(int id, uintptr_t voice)
        {
            return reinterpret_cast<MapUI*>(voice)->getParamAddress(id).c_str();
        }
        
        /*
         * getParamMin(address)
         * Returns the minimum value of a parameter.
         */
        float getParamMin(const char* address)
        {
            int id = (address) ? fAPIUI.getParamIndex(address) : -1;
            return (id >= 0) ? fAPIUI.getParamMin(id) : 0.f;
        }
    
        /*
         * getParamMin(id)
         * Returns the minimum value of a parameter.
         */
        float getParamMin(int id)
        {
            return fAPIUI.getParamMin(id);
        }
    
        /*
         * getParamMax(address)
         * Returns the maximum value of a parameter.
         */
        float getParamMax(const char* address)
        {
            int id = (address) ? fAPIUI.getParamIndex(address) : -1;
            return (id >= 0) ? fAPIUI.getParamMax(id) : 0.f;
        }
    
        /*
         * getParamMax(id)
         * Returns the maximum value of a parameter.
         */
        float getParamMax(int id)
        {
            return fAPIUI.getParamMax(id);
        }
    
        /*
         * getParamInit(address)
         * Returns the default value of a parameter.
         */
        float getParamInit(const char* address)
        {
            int id = (address) ? fAPIUI.getParamIndex(address) : -1;
            return (id >= 0) ? fAPIUI.getParamInit(id) : 0.f;
        }
    
        /*
         * getParamInit(id)
         * Returns the default value of a parameter.
         */
        float getParamInit(int id)
        {
            return fAPIUI.getParamInit(id);
        }
    
        /*
         * getMetadata(address, key)
         * Returns the metadata of a parameter.
         */
        const char* getMetadata(const char* address, const char* key)
        {
            int id = (address) ? fAPIUI.getParamIndex(address) : -1;
            return (id >= 0) ? fAPIUI.getMetadata(id, key) : "";
        }
    
        /*
         * getMetadata(id, key)
         * Returns the metadata of a parameter.
         */
        const char* getMetadata(int id, const char* key)
        {
            return fAPIUI.getMetadata(id, key);
        }

        /*
         * propagateAcc(int acc, float v)
         * Propage accelerometer value to the curve conversion layer.
         */
        void propagateAcc(int acc, float v)
        {
            fAPIUI.propagateAcc(acc, v);
            GUI::updateAllGuis();
        }

        /*
         * setAccConverter(int p, int acc, int curve, float amin, float amid, float amax)
         * Change accelerometer curve mapping.
         */
        void setAccConverter(int p, int acc, int curve, float amin, float amid, float amax)
        {
            fAPIUI.setAccConverter(p, acc, curve, amin, amid, amax);
        }

        /*
         * propagateGyr(int gyr, float v)
         * Propage gyroscope value to the curve conversion layer.
         */
        void propagateGyr(int gyr, float v)
        {
            fAPIUI.propagateGyr(gyr, v);
            GUI::updateAllGuis();
        }

        /*
         * setGyrConverter(int p, int acc, int curve, float amin, float amid, float amax)
         * Change gyroscope curve mapping.
         */
        void setGyrConverter(int p, int gyr, int curve, float amin, float amid, float amax)
        {
            fAPIUI.setGyrConverter(p, gyr, curve, amin, amid, amax);
        }
    
        /*
         * getCPULoad()
         * Return DSP CPU load.
         */
        float getCPULoad() { return (fDriver) ? fDriver->getCPULoad() : 0.f; }

        /*
         * getScreenColor() -> c:int
         * Get the requested screen color c :
         * c <  0 : no screen color requested (keep regular UI)
         * c >= 0 : requested color (no UI but a colored screen)
         */
        int getScreenColor()
        {
            return fAPIUI.getScreenColor();
        }

};

// Public C API

#ifdef __cplusplus
extern "C" {
#endif
    
    void destroy(void* dsp) { delete reinterpret_cast<FaustPolyEngine*>(dsp); }

    bool start(void* dsp) { return reinterpret_cast<FaustPolyEngine*>(dsp)->start(); }
    void stop(void* dsp) { reinterpret_cast<FaustPolyEngine*>(dsp)->stop(); }
    
    bool isRunning(void* dsp) { return reinterpret_cast<FaustPolyEngine*>(dsp)->isRunning(); }

    uintptr_t keyOn(void* dsp, int pitch, int velocity) { return (uintptr_t)reinterpret_cast<FaustPolyEngine*>(dsp)->keyOn(pitch, velocity); }
    int keyOff(void* dsp, int pitch) { return reinterpret_cast<FaustPolyEngine*>(dsp)->keyOff(pitch); }
    
    void propagateMidi(void* dsp, int count, double time, int type, int channel, int data1, int data2)
    {
        reinterpret_cast<FaustPolyEngine*>(dsp)->propagateMidi(count, time, type, channel, data1, data2);
    }

    const char* getJSONUI(void* dsp) { return reinterpret_cast<FaustPolyEngine*>(dsp)->getJSONUI(); }
    const char* getJSONMeta(void* dsp) { return reinterpret_cast<FaustPolyEngine*>(dsp)->getJSONMeta(); }

    int getParamsCount(void* dsp) { return reinterpret_cast<FaustPolyEngine*>(dsp)->getParamsCount(); }
    
    void setParamValue(void* dsp, const char* address, float value) { reinterpret_cast<FaustPolyEngine*>(dsp)->setParamValue(address, value); }
    float getParamValue(void* dsp, const char* address) { return reinterpret_cast<FaustPolyEngine*>(dsp)->getParamValue(address); }
   
    void setParamIdValue(void* dsp, int id, float value) { reinterpret_cast<FaustPolyEngine*>(dsp)->setParamValue(id, value); }
    float getParamIdValue(void* dsp, int id) { return reinterpret_cast<FaustPolyEngine*>(dsp)->getParamValue(id); }
    
    void setVoiceParamValue(void* dsp, const char* address, uintptr_t voice, float value)
    {
        reinterpret_cast<FaustPolyEngine*>(dsp)->setVoiceParamValue(address, voice, value);
    }
    float getVoiceParamValue(void* dsp, const char* address, uintptr_t voice) { return reinterpret_cast<FaustPolyEngine*>(dsp)->getVoiceParamValue(address, voice); }
    
    const char* getParamAddress(void* dsp, int id) { return reinterpret_cast<FaustPolyEngine*>(dsp)->getParamAddress(id); }

    void propagateAcc(void* dsp, int acc, float v) { reinterpret_cast<FaustPolyEngine*>(dsp)->propagateAcc(acc, v); }
    void setAccConverter(void* dsp, int p, int acc, int curve, float amin, float amid, float amax)
    {
        reinterpret_cast<FaustPolyEngine*>(dsp)->setAccConverter(p, acc, curve, amin, amid, amax);
    }
    void propagateGyr(void* dsp, int acc, float v) { reinterpret_cast<FaustPolyEngine*>(dsp)->propagateGyr(acc, v); }
    void setGyrConverter(void* dsp, int p, int gyr, int curve, float amin, float amid, float amax)
    {
        reinterpret_cast<FaustPolyEngine*>(dsp)->setGyrConverter(p, gyr, curve, amin, amid, amax);
    }

    float getCPULoad(void* dsp) { return reinterpret_cast<FaustPolyEngine*>(dsp)->getCPULoad(); }
    int getScreenColor(void* dsp) { return reinterpret_cast<FaustPolyEngine*>(dsp)->getScreenColor(); }
    
#ifdef __cplusplus
}
#endif

#endif // __faust_poly_engine__
/**************************  END  faust-poly-engine.h **************************/

//**************************************************************
// Audio driver
//**************************************************************

#if COREAUDIO_DRIVER
/************************** BEGIN coreaudio-dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __coreaudio_dsp__
#define __coreaudio_dsp__

#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <vector>
#include <iostream>
#include <sys/time.h>

#include <AudioToolbox/AudioConverter.h>
#include <CoreAudio/CoreAudio.h>
#include <AudioUnit/AudioUnit.h>
#include <CoreServices/CoreServices.h>

#ifdef HAS_MATH_EXCEPTION
/************************** BEGIN fpe.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2019 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __fpe__
#define __fpe__

#include <cfenv>
#include <iostream>
#include <signal.h>

#ifndef HAVE_FEENABLEEXCEPT
#if defined(__APPLE__) && defined(__MACH__)

// Public domain polyfill for feenableexcept on OS X
// http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c

inline int feenableexcept(unsigned int excepts)
{
    static fenv_t fenv;
    unsigned int new_excepts = excepts & FE_ALL_EXCEPT;
    // previous masks
    unsigned int old_excepts;
    
    if (fegetenv(&fenv)) {
        return -1;
    }
    old_excepts = fenv.__control & FE_ALL_EXCEPT;
    
    // unmask
    fenv.__control &= ~new_excepts;
    fenv.__mxcsr   &= ~(new_excepts << 7);
    
    return fesetenv(&fenv) ? -1 : old_excepts;
}

inline int fedisableexcept(unsigned int excepts)
{
    static fenv_t fenv;
    unsigned int new_excepts = excepts & FE_ALL_EXCEPT;
    // all previous masks
    unsigned int old_excepts;
    
    if (fegetenv(&fenv)) {
        return -1;
    }
    old_excepts = fenv.__control & FE_ALL_EXCEPT;
    
    // mask
    fenv.__control |= new_excepts;
    fenv.__mxcsr   |= new_excepts << 7;
    
    return fesetenv(&fenv) ? -1 : old_excepts;
}

#else
inline int feenableexcept(unsigned int excepts)
{
#pragma STDC FENV_ACCESS ON
    fexcept_t flags;
    /* Save current exception flags. */
    fegetexceptflag(&flags, FE_ALL_EXCEPT);
    
    feclearexcept(FE_ALL_EXCEPT);   /* clear all fp exception conditions */
    return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */
    
}

inline int fedisableexcept(unsigned int excepts)
{
#pragma STDC FENV_ACCESS ON
    fexcept_t flags;
    /* Save current exception flags. */
    fegetexceptflag(&flags, FE_ALL_EXCEPT);
    
    feclearexcept(FE_ALL_EXCEPT);   /* clear all fp exception conditions */
    return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */
}

#endif
#endif

// https://en.cppreference.com/w/c/numeric/fenv/FE_exceptions

static void fPEHandler(int sig, siginfo_t* sip, ucontext_t* scp)
{
    int fe_code = sip->si_code;
    
    switch (fe_code) {
    #ifdef FPE_NOOP  // occurs in OS X
        case FPE_NOOP: throw std::runtime_error("FE_NOOP"); break;
    #endif
        case FPE_FLTDIV: throw std::runtime_error("FE_DIVBYZERO"); break;   // divideByZero
        case FPE_FLTINV: throw std::runtime_error("FE_INVALID"); break;     // invalid
        case FPE_FLTOVF: throw std::runtime_error("FE_OVERFLOW"); break;    // overflow
        case FPE_FLTUND: throw std::runtime_error("FE_UNDERFLOW"); break;   // underflow
        case FPE_FLTRES: throw std::runtime_error("FE_INEXACT"); break;     // inexact
        case FPE_FLTSUB: throw std::runtime_error("FE_INVALID"); break;     // invalid
        case FPE_INTDIV: throw std::runtime_error("INT_DIVBYZERO"); break;  // divideByZero
        case FPE_INTOVF: throw std::runtime_error("INT_OVERFLOW"); break;   // overflow
        default: throw std::runtime_error("FE_NOOP"); break;
    }
}

static bool gSetFPEHandler = false;
static void setFPEHandler()
{
    feclearexcept(FE_ALL_EXCEPT);
    feenableexcept(FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW);
    
    if (!gSetFPEHandler) {
        gSetFPEHandler = true;
        
        struct sigaction act;
        act.sa_sigaction = (void(*)(int, siginfo_t*, void*))fPEHandler;
        sigemptyset(&act.sa_mask);
        act.sa_flags = SA_SIGINFO;
        int res = sigaction(SIGFPE, &act, (struct sigaction*)0);
    }
}

/* 
 
TRY_FPE/CATCH_FPE to be used by wrapping code that needs for be protected
 
TRY_FPE
compute(...);
CATCH_FPE
 
*/

#define TRY_FPE     \
setFPEHandler();    \
try {               \

#define CATCH_FPE                   \
} catch (std::runtime_error e) {    \
    std::cerr << "Math exception : " << e.what() << std::endl;  \
    exit(-1);                       \
}                                   \

#endif

/**************************  END  fpe.h **************************/
#endif

/******************************************************************************
*******************************************************************************

							COREAUDIO INTERNAL INTERFACE

*******************************************************************************
*******************************************************************************/

#define OPEN_ERR -1
#define CLOSE_ERR -1
#define NO_ERR 0

#define WAIT_NOTIFICATION_COUNTER 60

typedef	UInt8	CAAudioHardwareDeviceSectionID;
#define	kAudioDeviceSectionInput	((CAAudioHardwareDeviceSectionID)0x01)
#define	kAudioDeviceSectionOutput	((CAAudioHardwareDeviceSectionID)0x00)
#define	kAudioDeviceSectionGlobal	((CAAudioHardwareDeviceSectionID)0x00)
#define	kAudioDeviceSectionWildcard	((CAAudioHardwareDeviceSectionID)0xFF)

class TCoreAudioRenderer;
typedef TCoreAudioRenderer* TCoreAudioRendererPtr;

static void PrintStreamDesc(AudioStreamBasicDescription *inDesc)
{
    printf("- - - - - - - - - - - - - - - - - - - -\n");
    printf("  Sample Rate:%f\n", inDesc->mSampleRate);
    printf("  Format ID:%.*s\n", (int)sizeof(inDesc->mFormatID), (char*)&inDesc->mFormatID);
    printf("  Format Flags:%lX\n", (unsigned long)inDesc->mFormatFlags);
    printf("  Bytes per Packet:%ld\n", (long)inDesc->mBytesPerPacket);
    printf("  Frames per Packet:%ld\n", (long)inDesc->mFramesPerPacket);
    printf("  Bytes per Frame:%ld\n", (long)inDesc->mBytesPerFrame);
    printf("  Channels per Frame:%ld\n", (long)inDesc->mChannelsPerFrame);
    printf("  Bits per Channel:%ld\n", (long)inDesc->mBitsPerChannel);
    printf("- - - - - - - - - - - - - - - - - - - -\n");
}

static void printError(OSStatus err)
{
    switch (err) {
        case kAudioHardwareNoError:
            printf("error code : kAudioHardwareNoError\n");
            break;
		case kAudioConverterErr_FormatNotSupported:
            printf("error code : kAudioConverterErr_FormatNotSupported\n");
            break;
        case kAudioConverterErr_OperationNotSupported:
            printf("error code : kAudioConverterErr_OperationNotSupported\n");
            break;
        case kAudioConverterErr_PropertyNotSupported:
            printf("error code : kAudioConverterErr_PropertyNotSupported\n");
            break;
        case kAudioConverterErr_InvalidInputSize:
            printf("error code : kAudioConverterErr_InvalidInputSize\n");
            break;
        case kAudioConverterErr_InvalidOutputSize:
            printf("error code : kAudioConverterErr_InvalidOutputSize\n");
            break;
        case kAudioConverterErr_UnspecifiedError:
            printf("error code : kAudioConverterErr_UnspecifiedError\n");
            break;
        case kAudioConverterErr_BadPropertySizeError:
            printf("error code : kAudioConverterErr_BadPropertySizeError\n");
            break;
        case kAudioConverterErr_RequiresPacketDescriptionsError:
            printf("error code : kAudioConverterErr_RequiresPacketDescriptionsError\n");
            break;
        case kAudioConverterErr_InputSampleRateOutOfRange:
            printf("error code : kAudioConverterErr_InputSampleRateOutOfRange\n");
            break;
        case kAudioConverterErr_OutputSampleRateOutOfRange:
            printf("error code : kAudioConverterErr_OutputSampleRateOutOfRange\n");
            break;
		case kAudioHardwareNotRunningError:
            printf("error code : kAudioHardwareNotRunningError\n");
            break;
        case kAudioHardwareUnknownPropertyError:
            printf("error code : kAudioHardwareUnknownPropertyError\n");
            break;
        case kAudioHardwareIllegalOperationError:
            printf("error code : kAudioHardwareIllegalOperationError\n");
            break;
        case kAudioHardwareBadDeviceError:
            printf("error code : kAudioHardwareBadDeviceError\n");
            break;
        case kAudioHardwareBadStreamError:
            printf("error code : kAudioHardwareBadStreamError\n");
            break;
        case kAudioDeviceUnsupportedFormatError:
            printf("error code : kAudioDeviceUnsupportedFormatError\n");
            break;
        case kAudioDevicePermissionsError:
            printf("error code : kAudioDevicePermissionsError\n");
            break;
        default:
            printf("error code : err = %d\n", err);
            break;
    }
}

static Float64 GetNominalSampleRate(AudioDeviceID inDevice) 
{
    Float64 sampleRate = 0;
    UInt32 outSize =  sizeof(Float64);
    OSStatus err = AudioDeviceGetProperty(inDevice, 0, kAudioDeviceSectionGlobal, kAudioDevicePropertyNominalSampleRate, &outSize, &sampleRate);
    if (err != noErr) {
        printf("Cannot get current sample rate\n");
        printError(err);
        return -1;
    } else {
        return sampleRate;
    }
}

static CFStringRef GetDeviceName(AudioDeviceID id)
{
    UInt32 size = sizeof(CFStringRef);
    CFStringRef UIname;
    OSStatus err = AudioDeviceGetProperty(id, 0, false, kAudioDevicePropertyDeviceUID, &size, &UIname);
    return (err == noErr) ? UIname : NULL;
}

static bool CheckAvailableDeviceName(const char* device_name, AudioDeviceID* device_id, int len = -1)
{
    UInt32 size;
    Boolean isWritable;
    int i, deviceNum;
    OSStatus err;

    err = AudioHardwareGetPropertyInfo(kAudioHardwarePropertyDevices, &size, &isWritable);
    if (err != noErr) {
        return false;
    }

    deviceNum = size / sizeof(AudioDeviceID);
    AudioDeviceID devices[deviceNum];
 
    err = AudioHardwareGetProperty(kAudioHardwarePropertyDevices, &size, devices);
    if (err != noErr) {
        return false;
    }

    for (i = 0; i < deviceNum; i++) {
        char device_name_aux[256];
    
        size = 256;
        err = AudioDeviceGetProperty(devices[i], 0, false, kAudioDevicePropertyDeviceName, &size, device_name_aux);
        if (err != noErr) {
            return false;
        }
 
        if (strncmp(device_name_aux, device_name, (len == -1) ? strlen(device_name) : len) == 0) {
            *device_id = devices[i];
            return true;
        }
    }

    return false;
}

class TCoreAudioRenderer
{
    
    protected:
    
        AudioDeviceID fAggregateDeviceID;
        AudioObjectID fAggregatePluginID;    // Used for aggregate device
     
        int fDevNumInChans;
        int fDevNumOutChans;
        
        int fPhysicalInputs;
        int fPhysicalOutputs;
        
        float** fInChannel;
        float** fOutChannel;

        int fBufferSize;
        int fSampleRate;
    
        bool fIsInJackDevice;
        bool fIsOutJackDevice;
        
        dsp* fDSP;
    
        audio* fAudio;

        AudioBufferList* fInputData;
        AudioDeviceID fDeviceID;
        AudioUnit fAUHAL;
        bool fState;

        OSStatus GetDefaultDeviceAndSampleRate(int inChan, int outChan, int& sample_rate, AudioDeviceID* device)
        {
            
            UInt32 theSize = sizeof(UInt32);
            AudioDeviceID inDefault;
            AudioDeviceID outDefault;
            OSStatus res;
            
            if ((res = AudioHardwareGetProperty(kAudioHardwarePropertyDefaultInputDevice,
                                                &theSize, &inDefault)) != noErr) {
                return res;
            }
            
            if ((res = AudioHardwareGetProperty(kAudioHardwarePropertyDefaultOutputDevice,
                                                &theSize, &outDefault)) != noErr) {
                return res;
            }
            
            /*
            // TODO
            if (inDefault == 0) {
                printf("Error default input device is 0, will take 'Built-in'...\n");
                if (CheckAvailableDeviceName("Built-in Microphone", &inDefault) 
                    || CheckAvailableDeviceName("Built-in Line", &inDefault)) {
                    printf("GetDefaultInputDevice : output = %ld\n", inDefault);
                } else {
                    printf("Cannot find any input device to use...");
                    return -1;
                }
            }
            
            if (outDefault == 0) {
                printf("Error default ouput device is 0, will take 'Built-in'...\n");
                if (CheckAvailableDeviceName("Built-in Output", &outDefault)) {
                    printf("GetDefaultOutputDevice : output = %ld\n", outDefault);
                } else {
                    printf("Cannot find any output device to use...\n");
                    return -1;
                }
            }  
            */          
            
            //printf("GetDefaultDevice : input = %d output = %d\n", inDefault, outDefault);
            
            // Duplex mode
            if (inChan > 0 && outChan > 0) {
                // Get the device only if default input and output are the same
                if (inDefault == outDefault) {
                    *device = inDefault;
                    goto end;
                } else {
                    if (CreateAggregateDevice(inDefault, outDefault, sample_rate) != noErr) {
                        return kAudioHardwareBadDeviceError;
                    }
                    //printf("fAggregateDeviceID %d\n", fAggregateDeviceID);
                    *device = fAggregateDeviceID;
                    goto end;
                }
            } else if (inChan > 0) {
                *device = inDefault;
                goto end;
            } else if (outChan > 0) {
                *device = outDefault;
                goto end;
            } else {
                return kAudioHardwareBadDeviceError;
            }
            
        end:   
            
            if (sample_rate == -1) {
                // Possible take the current sample rate
                sample_rate = int(GetNominalSampleRate(*device));
            } else {
                // Otherwise force the one we want...
                SetupSampleRateAux(*device, sample_rate);
            }
            //printf("samplerate %d\n", sample_rate);
            fSampleRate = sample_rate;
            return noErr;
        }

        OSStatus CreateAggregateDevice(AudioDeviceID captureDeviceID, AudioDeviceID playbackDeviceID, int& sample_rate)
        {
            OSStatus err = noErr;
            AudioObjectID sub_device[32];
            UInt32 outSize = sizeof(sub_device);
            
            //printf("CreateAggregateDevice : input device %d\n", captureDeviceID);
            
            err = AudioDeviceGetProperty(captureDeviceID, 0, kAudioDeviceSectionGlobal, kAudioAggregateDevicePropertyActiveSubDeviceList, &outSize, sub_device);
            std::vector<AudioDeviceID> captureDeviceIDArray;
            
            if (err != noErr) {
                //printf("Input device does not have subdevices\n");
                captureDeviceIDArray.push_back(captureDeviceID);
            } else {
                int num_devices = outSize / sizeof(AudioObjectID);
                //printf("Input device has %d subdevices\n", num_devices);
                for (int i = 0; i < num_devices; i++) {
                    //printf("Input sub_device %d\n", sub_device[i]);
                    captureDeviceIDArray.push_back(sub_device[i]);
                }
            }
            
            outSize = sizeof(sub_device);
            err = AudioDeviceGetProperty(playbackDeviceID, 0, kAudioDeviceSectionGlobal, kAudioAggregateDevicePropertyActiveSubDeviceList, &outSize, sub_device);
            std::vector<AudioDeviceID> playbackDeviceIDArray;
            
            if (err != noErr) {
                //printf("Output device does not have subdevices\n");
                playbackDeviceIDArray.push_back(playbackDeviceID);
            } else {
                int num_devices = outSize / sizeof(AudioObjectID);
                //printf("Output device has %d subdevices\n", num_devices);
                for (int i = 0; i < num_devices; i++) {
                    //printf("Output sub_device %d\n", sub_device[i]);
                    playbackDeviceIDArray.push_back(sub_device[i]);
                }
            }
            
            return CreateAggregateDeviceAux(captureDeviceIDArray, playbackDeviceIDArray, sample_rate);
        }
        
        OSStatus CreateAggregateDeviceAux(std::vector<AudioDeviceID> captureDeviceID, std::vector<AudioDeviceID> playbackDeviceID, int& sample_rate)
        {
            OSStatus osErr = noErr;
            UInt32 outSize;
            Boolean outWritable;
            bool fClockDriftCompensate = true;
            
            // Prepare sub-devices for clock drift compensation
            // Workaround for bug in the HAL : until 10.6.2
            AudioObjectPropertyAddress theAddressOwned = { kAudioObjectPropertyOwnedObjects, kAudioObjectPropertyScopeGlobal, kAudioObjectPropertyElementMaster };
            AudioObjectPropertyAddress theAddressDrift = { kAudioSubDevicePropertyDriftCompensation, kAudioObjectPropertyScopeGlobal, kAudioObjectPropertyElementMaster };
            UInt32 theQualifierDataSize = sizeof(AudioObjectID);
            AudioClassID inClass = kAudioSubDeviceClassID;
            void* theQualifierData = &inClass;
            UInt32 subDevicesNum = 0;
            
            //---------------------------------------------------------------------------
            // Setup SR of both devices otherwise creating AD may fail...
            //---------------------------------------------------------------------------
            UInt32 keptclockdomain = 0;
            UInt32 clockdomain = 0;
            outSize = sizeof(UInt32);
            bool need_clock_drift_compensation = false;
            
            for (UInt32 i = 0; i < captureDeviceID.size(); i++) {
                if (SetupSampleRateAux(captureDeviceID[i], sample_rate) < 0) {
                    printf("TCoreAudioRenderer::CreateAggregateDeviceAux : cannot set SR of input device\n");
                } else  {
                    // Check clock domain
                    osErr = AudioDeviceGetProperty(captureDeviceID[i], 0, kAudioDeviceSectionGlobal, kAudioDevicePropertyClockDomain, &outSize, &clockdomain);
                    if (osErr != 0) {
                        printf("TCoreAudioRenderer::CreateAggregateDeviceAux : kAudioDevicePropertyClockDomain error\n");
                        printError(osErr);
                    } else {
                        keptclockdomain = (keptclockdomain == 0) ? clockdomain : keptclockdomain;
                        //printf("TCoreAudioRenderer::CreateAggregateDevice : input clockdomain = %d\n", clockdomain);
                        if (clockdomain != 0 && clockdomain != keptclockdomain) {
                            //printf("TCoreAudioRenderer::CreateAggregateDevice : devices do not share the same clock!! clock drift compensation would be needed...\n");
                            need_clock_drift_compensation = true;
                        }
                    }
                }
            }
            
            for (UInt32 i = 0; i < playbackDeviceID.size(); i++) {
                if (SetupSampleRateAux(playbackDeviceID[i], sample_rate) < 0) {
                    printf("TCoreAudioRenderer::CreateAggregateDeviceAux : cannot set SR of output device\n");
                } else {
                    // Check clock domain
                    osErr = AudioDeviceGetProperty(playbackDeviceID[i], 0, kAudioDeviceSectionGlobal, kAudioDevicePropertyClockDomain, &outSize, &clockdomain);
                    if (osErr != 0) {
                        printf("TCoreAudioRenderer::CreateAggregateDeviceAux : kAudioDevicePropertyClockDomain error\n");
                        printError(osErr);
                    } else {
                        keptclockdomain = (keptclockdomain == 0) ? clockdomain : keptclockdomain;
                        //printf("TCoreAudioRenderer::CreateAggregateDevice : output clockdomain = %d", clockdomain);
                        if (clockdomain != 0 && clockdomain != keptclockdomain) {
                            //printf("TCoreAudioRenderer::CreateAggregateDevice : devices do not share the same clock!! clock drift compensation would be needed...\n");
                            need_clock_drift_compensation = true;
                        }
                    }
                }
            }
            
            // If no valid clock domain was found, then assume we have to compensate...
            if (keptclockdomain == 0) {
                need_clock_drift_compensation = true;
            }
            
            //---------------------------------------------------------------------------
            // Start to create a new aggregate by getting the base audio hardware plugin
            //---------------------------------------------------------------------------
            
            char device_name[256];
            for (UInt32 i = 0; i < captureDeviceID.size(); i++) {
                GetDeviceNameFromID(captureDeviceID[i], device_name);
                //printf("Separated input = '%s' \n", device_name);
            }
            
            for (UInt32 i = 0; i < playbackDeviceID.size(); i++) {
                GetDeviceNameFromID(playbackDeviceID[i], device_name);
                //printf("Separated output = '%s' \n", device_name);
            }
            
            osErr = AudioHardwareGetPropertyInfo(kAudioHardwarePropertyPlugInForBundleID, &outSize, &outWritable);
            if (osErr != noErr) {
                printf("TCoreAudioRenderer::CreateAggregateDeviceAux : AudioHardwareGetPropertyInfo kAudioHardwarePropertyPlugInForBundleID error\n");
                printError(osErr);
                return osErr;
            }
            
            AudioValueTranslation pluginAVT;
            CFStringRef inBundleRef = CFSTR("com.apple.audio.CoreAudio");
            
            pluginAVT.mInputData = &inBundleRef;
            pluginAVT.mInputDataSize = sizeof(inBundleRef);
            pluginAVT.mOutputData = &fAggregatePluginID;
            pluginAVT.mOutputDataSize = sizeof(fAggregatePluginID);
            
            osErr = AudioHardwareGetProperty(kAudioHardwarePropertyPlugInForBundleID, &outSize, &pluginAVT);
            if (osErr != noErr) {
                printf("TCoreAudioRenderer::CreateAggregateDeviceAux : AudioHardwareGetProperty kAudioHardwarePropertyPlugInForBundleID error\n");
                printError(osErr);
                return osErr;
            }
            
            //-------------------------------------------------
            // Create a CFDictionary for our aggregate device
            //-------------------------------------------------
            
            CFMutableDictionaryRef aggDeviceDict = CFDictionaryCreateMutable(NULL, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            
            char buffer1[64];
            char buffer2[64];
            
            // generate "random" name
            struct timeval fTv1;
            struct timezone tz;
            gettimeofday(&fTv1, &tz);
            
            sprintf(buffer1, "com.grame.%d", fTv1.tv_sec + fTv1.tv_usec);
            sprintf(buffer2, "%d", fTv1.tv_sec + fTv1.tv_usec);
            
            CFStringRef AggregateDeviceNameRef = CFStringCreateWithCString(kCFAllocatorDefault, buffer1, CFStringGetSystemEncoding());
            CFStringRef AggregateDeviceUIDRef = CFStringCreateWithCString(kCFAllocatorDefault, buffer2, CFStringGetSystemEncoding());
            
            // add the name of the device to the dictionary
            CFDictionaryAddValue(aggDeviceDict, CFSTR(kAudioAggregateDeviceNameKey), AggregateDeviceNameRef);
            
            // add our choice of UID for the aggregate device to the dictionary
            CFDictionaryAddValue(aggDeviceDict, CFSTR(kAudioAggregateDeviceUIDKey), AggregateDeviceUIDRef);
            
            // add a "private aggregate key" to the dictionary
            int value = 1;
            CFNumberRef AggregateDeviceNumberRef = CFNumberCreate(NULL, kCFNumberIntType, &value);
            
            SInt32 system;
            Gestalt(gestaltSystemVersion, &system);
            
            //printf("TCoreAudioRenderer::CreateAggregateDevice : system version = %x limit = %x\n", system, 0x00001054);
            
            // Starting with 10.5.4 systems, the AD can be internal... (better)
            if (system < 0x00001054) {
                //printf("TCoreAudioRenderer::CreateAggregateDevice : public aggregate device....\n");
            } else {
                //printf("TCoreAudioRenderer::CreateAggregateDevice : private aggregate device....\n");
                CFDictionaryAddValue(aggDeviceDict, CFSTR(kAudioAggregateDeviceIsPrivateKey), AggregateDeviceNumberRef);
            }
            
            // Prepare sub-devices for clock drift compensation
            CFMutableArrayRef subDevicesArrayClock = NULL;
            
            /*
             if (fClockDriftCompensate) {
                 if (need_clock_drift_compensation) {
                     jack_info("Clock drift compensation activated...");
                     subDevicesArrayClock = CFArrayCreateMutable(NULL, 0, &kCFTypeArrayCallBacks);
                     
                     for (UInt32 i = 0; i < captureDeviceID.size(); i++) {
                         CFStringRef UID = GetDeviceName(captureDeviceID[i]);
                         if (UID) {
                         CFMutableDictionaryRef subdeviceAggDeviceDict = CFDictionaryCreateMutable(NULL, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                         CFDictionaryAddValue(subdeviceAggDeviceDict, CFSTR(kAudioSubDeviceUIDKey), UID);
                         CFDictionaryAddValue(subdeviceAggDeviceDict, CFSTR(kAudioSubDeviceDriftCompensationKey), AggregateDeviceNumberRef);
                         //CFRelease(UID);
                         CFArrayAppendValue(subDevicesArrayClock, subdeviceAggDeviceDict);
                     }
                 }
                 
                 for (UInt32 i = 0; i < playbackDeviceID.size(); i++) {
                     CFStringRef UID = GetDeviceName(playbackDeviceID[i]);
                     if (UID) {
                         CFMutableDictionaryRef subdeviceAggDeviceDict = CFDictionaryCreateMutable(NULL, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                         CFDictionaryAddValue(subdeviceAggDeviceDict, CFSTR(kAudioSubDeviceUIDKey), UID);
                         CFDictionaryAddValue(subdeviceAggDeviceDict, CFSTR(kAudioSubDeviceDriftCompensationKey), AggregateDeviceNumberRef);
                         //CFRelease(UID);
                         CFArrayAppendValue(subDevicesArrayClock, subdeviceAggDeviceDict);
                     }
                 }
                     
                     // add sub-device clock array for the aggregate device to the dictionary
                     CFDictionaryAddValue(aggDeviceDict, CFSTR(kAudioAggregateDeviceSubDeviceListKey), subDevicesArrayClock);
                     } else {
                     jack_info("Clock drift compensation was asked but is not needed (devices use the same clock domain)");
                 }
            }
            */
            
            //-------------------------------------------------
            // Create a CFMutableArray for our sub-device list
            //-------------------------------------------------
            
            // we need to append the UID for each device to a CFMutableArray, so create one here
            CFMutableArrayRef subDevicesArray = CFArrayCreateMutable(NULL, 0, &kCFTypeArrayCallBacks);
            
            std::vector<CFStringRef> captureDeviceUID;
            for (UInt32 i = 0; i < captureDeviceID.size(); i++) {
                CFStringRef ref = GetDeviceName(captureDeviceID[i]);
                if (ref == NULL) {
                    return -1;
                }
                captureDeviceUID.push_back(ref);
                // input sub-devices in this example, so append the sub-device's UID to the CFArray
                CFArrayAppendValue(subDevicesArray, ref);
            }
            
            std::vector<CFStringRef> playbackDeviceUID;
            for (UInt32 i = 0; i < playbackDeviceID.size(); i++) {
                CFStringRef ref = GetDeviceName(playbackDeviceID[i]);
                if (ref == NULL) {
                    return -1;
                }
                playbackDeviceUID.push_back(ref);
                // output sub-devices in this example, so append the sub-device's UID to the CFArray
                CFArrayAppendValue(subDevicesArray, ref);
            }
            
            //-----------------------------------------------------------------------
            // Feed the dictionary to the plugin, to create a blank aggregate device
            //-----------------------------------------------------------------------
            
            AudioObjectPropertyAddress pluginAOPA;
            pluginAOPA.mSelector = kAudioPlugInCreateAggregateDevice;
            pluginAOPA.mScope = kAudioObjectPropertyScopeGlobal;
            pluginAOPA.mElement = kAudioObjectPropertyElementMaster;
            UInt32 outDataSize;
            
            osErr = AudioObjectGetPropertyDataSize(fAggregatePluginID, &pluginAOPA, 0, NULL, &outDataSize);
            if (osErr != noErr) {
                printf("TCoreAudioRenderer::CreateAggregateDeviceAux : AudioObjectGetPropertyDataSize error\n");
                printError(osErr);
                goto error;
            }
            
            osErr = AudioObjectGetPropertyData(fAggregatePluginID, &pluginAOPA, sizeof(aggDeviceDict), &aggDeviceDict, &outDataSize, &fAggregateDeviceID);
            if (osErr != noErr) {
                printf("TCoreAudioRenderer::CreateAggregateDeviceAux : AudioObjectGetPropertyData error\n");
                printError(osErr);
                goto error;
            }
            
            // pause for a bit to make sure that everything completed correctly
            // this is to work around a bug in the HAL where a new aggregate device seems to disappear briefly after it is created
            CFRunLoopRunInMode(kCFRunLoopDefaultMode, 0.1, false);
            
            //-------------------------
            // Set the sub-device list
            //-------------------------
            
            pluginAOPA.mSelector = kAudioAggregateDevicePropertyFullSubDeviceList;
            pluginAOPA.mScope = kAudioObjectPropertyScopeGlobal;
            pluginAOPA.mElement = kAudioObjectPropertyElementMaster;
            outDataSize = sizeof(CFMutableArrayRef);
            osErr = AudioObjectSetPropertyData(fAggregateDeviceID, &pluginAOPA, 0, NULL, outDataSize, &subDevicesArray);
            if (osErr != noErr) {
                printf("TCoreAudioRenderer::CreateAggregateDeviceAux : AudioObjectSetPropertyData for sub-device list error\n");
                printError(osErr);
                goto error;
            }
            
            // pause again to give the changes time to take effect
            CFRunLoopRunInMode(kCFRunLoopDefaultMode, 0.1, false);
            
            //-----------------------
            // Set the master device
            //-----------------------
            
            // set the master device manually (this is the device which will act as the master clock for the aggregate device)
            // pass in the UID of the device you want to use
            pluginAOPA.mSelector = kAudioAggregateDevicePropertyMasterSubDevice;
            pluginAOPA.mScope = kAudioObjectPropertyScopeGlobal;
            pluginAOPA.mElement = kAudioObjectPropertyElementMaster;
            outDataSize = sizeof(CFStringRef);
            osErr = AudioObjectSetPropertyData(fAggregateDeviceID, &pluginAOPA, 0, NULL, outDataSize, &playbackDeviceUID[0]);  // First playback is master...
            if (osErr != noErr) {
                printf("TCoreAudioRenderer::CreateAggregateDeviceAux : AudioObjectSetPropertyData for master device error\n");
                printError(osErr);
                goto error;
            }
            
            // pause again to give the changes time to take effect
            CFRunLoopRunInMode(kCFRunLoopDefaultMode, 0.1, false);
            
            // Prepare sub-devices for clock drift compensation
            // Workaround for bug in the HAL : until 10.6.2
            
            if (fClockDriftCompensate) {
                if (need_clock_drift_compensation) {
                    //printf("Clock drift compensation activated...\n");
                    
                    // Get the property data size
                    osErr = AudioObjectGetPropertyDataSize(fAggregateDeviceID, &theAddressOwned, theQualifierDataSize, theQualifierData, &outSize);
                    if (osErr != noErr) {
                        printf("TCoreAudioRenderer::CreateAggregateDeviceAux kAudioObjectPropertyOwnedObjects error\n");
                        printError(osErr);
                    }
                    
                    //	Calculate the number of object IDs
                    subDevicesNum = outSize / sizeof(AudioObjectID);
                    //printf("TCoreAudioRenderer::CreateAggregateDevice clock drift compensation, number of sub-devices = %d\n", subDevicesNum);
                    AudioObjectID subDevices[subDevicesNum];
                    outSize = sizeof(subDevices);
                    
                    osErr = AudioObjectGetPropertyData(fAggregateDeviceID, &theAddressOwned, theQualifierDataSize, theQualifierData, &outSize, subDevices);
                    if (osErr != noErr) {
                        printf("TCoreAudioRenderer::CreateAggregateDeviceAux kAudioObjectPropertyOwnedObjects error\n");
                        printError(osErr);
                    }
                    
                    // Set kAudioSubDevicePropertyDriftCompensation property...
                    for (UInt32 index = 0; index < subDevicesNum; ++index) {
                        UInt32 theDriftCompensationValue = 1;
                        osErr = AudioObjectSetPropertyData(subDevices[index], &theAddressDrift, 0, NULL, sizeof(UInt32), &theDriftCompensationValue);
                        if (osErr != noErr) {
                            printf("TCoreAudioRenderer::CreateAggregateDeviceAux kAudioSubDevicePropertyDriftCompensation error\n");
                            printError(osErr);
                        }
                    }
                } else {
                    //printf("Clock drift compensation was asked but is not needed (devices use the same clock domain)\n");
                }
            }
            
            // pause again to give the changes time to take effect
            CFRunLoopRunInMode(kCFRunLoopDefaultMode, 0.1, false);
            
            //----------
            // Clean up
            //----------
            
            // release the private AD key
            CFRelease(AggregateDeviceNumberRef);
            
            // release the CF objects we have created - we don't need them any more
            CFRelease(aggDeviceDict);
            CFRelease(subDevicesArray);
            
            if (subDevicesArrayClock)
                CFRelease(subDevicesArrayClock);
            
            // release the device UID
            for (UInt32 i = 0; i < captureDeviceUID.size(); i++) {
                CFRelease(captureDeviceUID[i]);
            }
            
            for (UInt32 i = 0; i < playbackDeviceUID.size(); i++) {
                CFRelease(playbackDeviceUID[i]);
            }
            
            //printf("New aggregate device %d\n", fAggregateDeviceID);
            return noErr;
            
        error:
            DestroyAggregateDevice();
            return -1;
        }

        void DestroyAggregateDevice()
        {   
            if (fAggregateDeviceID > 0) {
                OSStatus osErr = noErr;
                AudioObjectPropertyAddress pluginAOPA;
                pluginAOPA.mSelector = kAudioPlugInDestroyAggregateDevice;
                pluginAOPA.mScope = kAudioObjectPropertyScopeGlobal;
                pluginAOPA.mElement = kAudioObjectPropertyElementMaster;
                UInt32 outDataSize;
                if (fAggregatePluginID > 0)   {
                    osErr = AudioObjectGetPropertyDataSize(fAggregatePluginID, &pluginAOPA, 0, NULL, &outDataSize);
                    if (osErr != noErr) {
                        //printf("TCoreAudioRenderer::DestroyAggregateDevice : AudioObjectGetPropertyDataSize error\n");
                        //printError(osErr);
                    }
                    osErr = AudioObjectGetPropertyData(fAggregatePluginID, &pluginAOPA, 0, NULL, &outDataSize, &fAggregateDeviceID);
                    if (osErr != noErr) {
                        //printf("TCoreAudioRenderer::DestroyAggregateDevice : AudioObjectGetPropertyData error\n");
                        //printError(osErr);
                    }
                }
            }
        }

        OSStatus GetDeviceNameFromID(AudioDeviceID id, char* name)
        {
            UInt32 size = 256;
            return AudioDeviceGetProperty(id, 0, false, kAudioDevicePropertyDeviceName, &size, name);
        }
        
        int SetupBufferSize(int buffer_size)
        {
            // Setting buffer size
            OSStatus err = noErr;
            UInt32 current_buffer_size = buffer_size;
            UInt32 outSize; 
            AudioValueRange buffer_size_range;
            
            outSize = sizeof(AudioValueRange);
            err = AudioDeviceGetProperty(fDeviceID, 0, true, kAudioDevicePropertyBufferFrameSizeRange, &outSize, &buffer_size_range);
            if (err != noErr) {
                printf("Cannot get buffer size range\n");
                printError(err);
                return -1;
            } else {
                //printf("SetupBufferSize : buffer size range min = %ld max = %ld\n", (int)buffer_size_range.mMinimum, (int)buffer_size_range.mMaximum);
            }
            
            outSize = sizeof(UInt32);
            err = AudioDeviceGetProperty(fDeviceID, 0, kAudioDeviceSectionGlobal, kAudioDevicePropertyBufferFrameSize, &outSize, &current_buffer_size);
            if (err != noErr) {
                printf("Cannot get buffer size\n");
                printError(err);
                return -1;
            } else {
                //printf("SetupBufferSize : current buffer size %ld\n", current_buffer_size);
            }

            // If needed, set new buffer size
            if (buffer_size != current_buffer_size && buffer_size >= (int)buffer_size_range.mMinimum && buffer_size <= (int)buffer_size_range.mMaximum) {
                current_buffer_size = buffer_size;

                // To get BS change notification
                err = AudioDeviceAddPropertyListener(fDeviceID, 0, true, kAudioDevicePropertyBufferFrameSize, BSNotificationCallback, this);
                if (err != noErr) {
                    printf("Error calling AudioDeviceAddPropertyListener with kAudioDevicePropertyBufferFrameSize\n");
                    printError(err);
                    return -1;
                }

                // Waiting for BS change notification
                int count = 0;
                fState = false;

                err = AudioDeviceSetProperty(fDeviceID, NULL, 0, kAudioDeviceSectionGlobal, kAudioDevicePropertyBufferFrameSize, outSize, &current_buffer_size);
                if (err != noErr) {
                    printf("SetupBufferSize : cannot set buffer size = %ld\n", current_buffer_size);
                    printError(err);
                    goto error;
                }

                while (!fState && count++ < WAIT_NOTIFICATION_COUNTER) {
                    usleep(100000);
                    //printf("SetupBufferSize : wait count = %d\n", count);
                }

                if (count >= WAIT_NOTIFICATION_COUNTER) {
                    printf("Did not get buffer size notification...\n");
                    goto error;
                }

                // Check new buffer size
                outSize = sizeof(UInt32);
                err = AudioDeviceGetProperty(fDeviceID, 0, kAudioDeviceSectionGlobal, kAudioDevicePropertyBufferFrameSize, &outSize, &current_buffer_size);
                if (err != noErr) {
                    printf("Cannot get current buffer size\n");
                    printError(err);
                } else {
                    //printf("SetupBufferSize : checked buffer size = %ld\n", current_buffer_size);
                }

                // Remove BS change notification
                AudioDeviceRemovePropertyListener(fDeviceID, 0, true, kAudioDevicePropertyBufferFrameSize, BSNotificationCallback);
            } else {
                //printf("Keep current buffer size = %ld\n", current_buffer_size);
            }
            
            fBufferSize = current_buffer_size;
            return 0;

        error:

            // Remove BS change notification
            AudioDeviceRemovePropertyListener(fDeviceID, 0, true, kAudioDevicePropertyBufferFrameSize, BSNotificationCallback);
            return -1;
        }
        
        static OSStatus BSNotificationCallback(AudioDeviceID inDevice,
                                                         UInt32 inChannel,
                                                         Boolean isInput,
                                                         AudioDevicePropertyID inPropertyID,
                                                         void* inClientData)
        {
            TCoreAudioRenderer* driver = (TCoreAudioRenderer*)inClientData;
        
            switch (inPropertyID) {

                case kAudioDevicePropertyBufferFrameSize: {
                    //printf("BSNotificationCallback kAudioDevicePropertyBufferFrameSize\n");
                    // Check new buffer size
                    UInt32 current_buffer_size;
                    UInt32 outSize = sizeof(UInt32);
                    OSStatus err = AudioDeviceGetProperty(inDevice, 0, kAudioDeviceSectionGlobal, kAudioDevicePropertyBufferFrameSize, &outSize, &current_buffer_size);
                    if (err != noErr) {
                        printf("Cannot get current buffer size\n");
                        printError(err);
                    } else {
                        //printf("BSNotificationCallback : checked current buffer size = %d\n", current_buffer_size);
                    }
                    driver->fState = true;
                    break;
                }
            }

            return noErr;
        }

        int SetupSampleRateAux(AudioDeviceID inDevice, int& sample_rate)
        {
            OSStatus err = noErr;
            UInt32 outSize = sizeof(Float64);
            Float64 sampleRate = GetNominalSampleRate(inDevice);
            
            if (sample_rate != -1 && sample_rate != (int)sampleRate) {
                sampleRate = (Float64)sample_rate;
                
                // To get SR change notification
                err = AudioDeviceAddPropertyListener(inDevice, 0, true, kAudioDevicePropertyNominalSampleRate, SRNotificationCallback, this);
                if (err != noErr) {
                    printf("Error calling AudioDeviceAddPropertyListener with kAudioDevicePropertyNominalSampleRate\n");
                    printError(err);
                    return -1;
                }
                err = AudioDeviceSetProperty(inDevice, NULL, 0, kAudioDeviceSectionGlobal, kAudioDevicePropertyNominalSampleRate, outSize, &sampleRate);
                if (err != noErr) {
                    printf("Cannot set sample rate = %d\n", sample_rate);
                    printError(err);
                    return -1;
                }
                
                // Waiting for SR change notification
                int count = 0;
                while (!fState && count++ < WAIT_NOTIFICATION_COUNTER) {
                    usleep(100000);
                    //printf("Wait count = %d\n", count);
                }
                
                // Check new sample rate
                outSize = sizeof(Float64);
                err = AudioDeviceGetProperty(inDevice, 0, kAudioDeviceSectionGlobal, kAudioDevicePropertyNominalSampleRate, &outSize, &sampleRate);
                if (err != noErr) {
                    printf("Cannot get current sample rate\n");
                    printError(err);
                } else {
                    //printf("Checked sample rate = %f\n", sampleRate);
                }
                
                // Remove SR change notification
                AudioDeviceRemovePropertyListener(inDevice, 0, true, kAudioDevicePropertyNominalSampleRate, SRNotificationCallback);
            }
            
            sample_rate = int(sampleRate);
            return 0;
        }   

        static OSStatus Render(void *inRefCon,
                           AudioUnitRenderActionFlags *ioActionFlags,
                           const AudioTimeStamp *inTimeStamp,
                           UInt32 inBusNumber,
                           UInt32 inNumberFrames,
                           AudioBufferList *ioData)
        {
            return static_cast<TCoreAudioRendererPtr>(inRefCon)->Render(ioActionFlags, inTimeStamp, inNumberFrames, ioData);
        }

        static OSStatus SRNotificationCallback(AudioDeviceID inDevice,
                                            UInt32 inChannel,
                                            Boolean	isInput,
                                            AudioDevicePropertyID inPropertyID,
                                               void* inClientData)
        {
            TCoreAudioRenderer* driver = (TCoreAudioRenderer*)inClientData;
            
            switch (inPropertyID) {
                    
                case kAudioDevicePropertyNominalSampleRate: {
                    //printf("SRNotificationCallback kAudioDevicePropertyNominalSampleRate\n");
                    driver->fState = true;
                    // Check new sample rate
                    Float64 sampleRate;
                    UInt32 outSize = sizeof(Float64);
                    OSStatus err = AudioDeviceGetProperty(inDevice, 0, kAudioDeviceSectionGlobal, kAudioDevicePropertyNominalSampleRate, &outSize, &sampleRate);
                    if (err != noErr) {
                        printf("Cannot get current sample rate\n");
                        printError(err);
                    } else {
                        //printf("SRNotificationCallback : checked sample rate = %f\n", sampleRate);
                    }
                    break;
                }
            }
            
            return noErr;
        }

        virtual OSStatus Render(AudioUnitRenderActionFlags *ioActionFlags,
                            const AudioTimeStamp *inTimeStamp,
                            UInt32 inNumberFrames,
                            AudioBufferList *ioData)
        {
            OSStatus err = noErr;
            if (fDevNumInChans > 0) {
                err = AudioUnitRender(fAUHAL, ioActionFlags, inTimeStamp, 1, inNumberFrames, fInputData);
            }
            if (err == noErr) {
                for (int i = 0; i < fDevNumInChans; i++) {
                    fInChannel[i] = (float*)fInputData->mBuffers[i].mData;
                }
                for (int i = 0; i < fDevNumOutChans; i++) {
                    fOutChannel[i] = (float*)ioData->mBuffers[i].mData;
                }
            #ifdef HAS_MATH_EXCEPTION
                TRY_FPE
            #endif
                fDSP->compute(double(AudioConvertHostTimeToNanos(inTimeStamp->mHostTime))/1000., inNumberFrames, fInChannel, fOutChannel);
            #ifdef HAS_MATH_EXCEPTION
                CATCH_FPE
            #endif
                fAudio->runControlCallbacks();
            } else {
                printf("AudioUnitRender error... %x\n", fInputData);
                printError(err);
            }
            return err;
        }
        
    public:
    
        TCoreAudioRenderer(audio* audio)
            :fAggregateDeviceID(-1),fAggregatePluginID(-1),
            fDevNumInChans(0),fDevNumOutChans(0),
            fPhysicalInputs(0), fPhysicalOutputs(0),
            fInChannel(0),fOutChannel(0),
            fBufferSize(0),fSampleRate(0),
            fIsInJackDevice(false),
            fIsOutJackDevice(false),
            fDSP(0),
            fAudio(audio),
            fInputData(0),
            fDeviceID(0),fAUHAL(0),
            fState(false)
        {}

        virtual ~TCoreAudioRenderer()
        {}
        
        int GetBufferSize() {return fBufferSize;}
        int GetSampleRate() {return fSampleRate;}
        
        static OSStatus RestartProc(AudioObjectID objectID, UInt32 numberAddresses,
                                   const AudioObjectPropertyAddress inAddresses[],
                                   void *clientData) 
        {
            /*
            TCoreAudioRenderer* renderer = (TCoreAudioRenderer*)clientData;
            AudioDeviceID defaultDevice;
            UInt32 theSize = sizeof(UInt32);
            OSStatus res;
            char device_name[256];
            
            // Test if new device is "JackRouter"
            if (inAddresses[0].mSelector == kAudioHardwarePropertyDefaultInputDevice) {
                
                if ((res = AudioHardwareGetProperty(kAudioHardwarePropertyDefaultInputDevice,
                                                    &theSize, &defaultDevice)) == noErr) {
                    renderer->GetDeviceNameFromID(defaultDevice, device_name);
                    renderer->fIsInJackDevice = strcmp(device_name, "JackRouter") == 0;
                }
                
            } else  if (inAddresses[0].mSelector == kAudioHardwarePropertyDefaultOutputDevice) {
                
                if ((res = AudioHardwareGetProperty(kAudioHardwarePropertyDefaultOutputDevice,
                                                    &theSize, &defaultDevice)) == noErr) {
                    renderer->GetDeviceNameFromID(defaultDevice, device_name);
                    renderer->fIsOutJackDevice = strcmp(device_name, "JackRouter") == 0;
                }
                
            }
            
            // Switch only of input and output are "JackRouter"
            if (renderer->fIsInJackDevice && renderer->fIsOutJackDevice || !renderer->fIsInJackDevice && !renderer->fIsOutJackDevice) {
                renderer->Stop();
                renderer->Close();
                int sampleRate = -1; // Use the current sample rate
                int bufferSize = (renderer->fBufferSize > 0) ? renderer->fBufferSize : 512; // Use default if needed
                renderer->OpenDefault(renderer->fDSP, renderer->fDevNumInChans, renderer->fDevNumOutChans, bufferSize, sampleRate);
                renderer->Start();
            }
            */
            return 0;
        }
    
        int OpenDefault(dsp* DSP, int inChan, int outChan, int bufferSize, int& sampleRate)
        {
            fDevNumInChans = 0;
            fDevNumOutChans = 0;
            fInChannel = 0;
            fOutChannel = 0;
            fBufferSize = 0;
            fSampleRate = 0;
            fDSP = 0;
            fInputData = 0;
            fDeviceID = 0; 
            fAUHAL = 0;
            fState = false;
            return OpenDefault(inChan, outChan, bufferSize, sampleRate);
        }
    
        int OpenDefault(int inChan, int outChan, int buffer_size, int& sample_rate)
        {
            OSStatus err;
            UInt32 outSize;
            UInt32 enableIO;
            Boolean isWritable;
            AudioStreamBasicDescription srcFormat, dstFormat, sampleRate;
            
            fDevNumInChans = inChan;
            fDevNumOutChans = outChan;
            
            fInChannel = new float*[fDevNumInChans];
            fOutChannel = new float*[fDevNumOutChans];
            
            //printf("OpenDefault inChan = %ld outChan = %ld bufferSize = %ld sample_rate = %ld\n", inChan, outChan, bufferSize, sample_rate);
            
            SInt32 major;
            SInt32 minor;
            Gestalt(gestaltSystemVersionMajor, &major);
            Gestalt(gestaltSystemVersionMinor, &minor);
            
            // Starting with 10.6 systems, the HAL notification thread is created internally
            if (major == 10 && minor >= 6) {
                CFRunLoopRef theRunLoop = NULL;
                AudioObjectPropertyAddress theAddress = { kAudioHardwarePropertyRunLoop, kAudioObjectPropertyScopeGlobal, kAudioObjectPropertyElementMaster };
                OSStatus osErr = AudioObjectSetPropertyData (kAudioObjectSystemObject, &theAddress, 0, NULL, sizeof(CFRunLoopRef), &theRunLoop);
                if (osErr != noErr) {
                    printf("TCoreAudioRenderer::Open kAudioHardwarePropertyRunLoop error\n");
                    printError(osErr);
                }
            }
             
            if (GetDefaultDeviceAndSampleRate(inChan, outChan, sample_rate, &fDeviceID) != noErr) {
                printf("Cannot open default device\n");
                return OPEN_ERR;
            }
             
            // Setting buffer size
            if (SetupBufferSize(buffer_size) < 0) {
                return OPEN_ERR;
            }
            
            // fBufferSize now has the real value, either 'bufferSize' (if could be changed) or driver current one
            
            // AUHAL
        
        #ifdef MAC_OS_X_VERSION_10_5
            ComponentDescription cd = {kAudioUnitType_Output, kAudioUnitSubType_HALOutput, kAudioUnitManufacturer_Apple, 0, 0};
            Component HALOutput = FindNextComponent(NULL, &cd);
            err = OpenAComponent(HALOutput, &fAUHAL);
            if (err != noErr) {
                printf("Error calling OpenAComponent\n");
                printError(err);
                goto error;
            }
        #else 
            AudioComponentDescription cd = {kAudioUnitType_Output, kAudioUnitSubType_HALOutput, kAudioUnitManufacturer_Apple, 0, 0};
            AudioComponent HALOutput = AudioComponentFindNext(NULL, &cd);
            err = AudioComponentInstanceNew(HALOutput, &fAUHAL);
            if (err != noErr) {
                printf("Error calling AudioComponentInstanceNew\n");
                printError(err);
                goto error;
            }
        #endif
            
            err = AudioUnitInitialize(fAUHAL);
            if (err != noErr) {
                printf("Cannot initialize AUHAL unit\n");
                printError(err);
                goto error;
            }
            
            if (inChan > 0) {
                enableIO = 1;
                //printf("OpenAUHAL : setup AUHAL input on\n");
            } else {
                enableIO = 0;
                //printf("OpenAUHAL : setup AUHAL input off\n");
            }
            
            err = AudioUnitSetProperty(fAUHAL, kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Input, 1, &enableIO, sizeof(enableIO));
            if (err != noErr) {
                printf("Error calling AudioUnitSetProperty - kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Input\n");
                printError(err);
                goto error;
            }
                
            if (outChan > 0) {
                enableIO = 1;
                //printf("OpenAUHAL : setup AUHAL output on\n");
            } else {
                enableIO = 0;
                //printf("OpenAUHAL : setup AUHAL output off\n");
            }
            
            err = AudioUnitSetProperty(fAUHAL, kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Output, 0, &enableIO, sizeof(enableIO));
            if (err != noErr) {
                printf("Error calling AudioUnitSetProperty - kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Output\n");
                printError(err);
                goto error;
            }
            
            AudioDeviceID currAudioDeviceID;
            outSize = sizeof(AudioDeviceID);
            err = AudioUnitGetProperty(fAUHAL, kAudioOutputUnitProperty_CurrentDevice, kAudioUnitScope_Global, 0, &currAudioDeviceID, &outSize);
            if (err != noErr) {
                printf("Error calling AudioUnitGetProperty - kAudioOutputUnitProperty_CurrentDevice\n");
                printError(err);
                goto error;
            } else {
                //printf("AudioUnitGetPropertyCurrentDevice = %d\n", currAudioDeviceID);
            }
        
            // Setup up choosen device, in both input and output cases
            err = AudioUnitSetProperty(fAUHAL, kAudioOutputUnitProperty_CurrentDevice, kAudioUnitScope_Global, 0, &fDeviceID, sizeof(AudioDeviceID));
            if (err != noErr) {
                printf("Error calling AudioUnitSetProperty - kAudioOutputUnitProperty_CurrentDevice\n");
                printError(err);
                goto error;
            }
            
            if (inChan > 0) {
                err = AudioUnitSetProperty(fAUHAL, kAudioUnitProperty_MaximumFramesPerSlice, kAudioUnitScope_Global, 1, (UInt32*)&fBufferSize, sizeof(UInt32));
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_MaximumFramesPerSlice\n");
                    printError(err);
                    goto error;
                }
            }
            
            if (outChan > 0) {
                err = AudioUnitSetProperty(fAUHAL, kAudioUnitProperty_MaximumFramesPerSlice, kAudioUnitScope_Global, 0, (UInt32*)&fBufferSize, sizeof(UInt32));
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_MaximumFramesPerSlice\n");
                    printError(err);
                    goto error;
                }
            }
            
            err = AudioUnitGetPropertyInfo(fAUHAL, kAudioOutputUnitProperty_ChannelMap, kAudioUnitScope_Input, 1, &outSize, &isWritable);
            if (err != noErr) {
                //printf("Error calling AudioUnitGetPropertyInfo - kAudioOutputUnitProperty_ChannelMap 1\n");
                //printError(err);
            } else {
                fPhysicalInputs = outSize / sizeof(SInt32);
                //printf("fPhysicalInputs = %ld\n", fPhysicalInputs);
            }
                    
            err = AudioUnitGetPropertyInfo(fAUHAL, kAudioOutputUnitProperty_ChannelMap, kAudioUnitScope_Output, 0, &outSize, &isWritable);
            if (err != noErr) {
                //printf("Error calling AudioUnitGetPropertyInfo - kAudioOutputUnitProperty_ChannelMap 0\n");
                //printError(err);
            } else {
                fPhysicalOutputs = outSize / sizeof(SInt32);
                //printf("fPhysicalOutputs = %ld\n", fPhysicalOutputs);
            }
            
            /*
             Just ignore this case : seems to work without any further change...
             
             if (outChan > fPhysicalOutputs) {
                printf("This device hasn't required output channels\n");
                goto error;
             }
             if (inChan > fPhysicalInputs) {
                printf("This device hasn't required input channels\n");
                goto error;
             }
             */
            
            if (inChan < fPhysicalInputs) {
                SInt32 chanArr[fPhysicalInputs];
                for (int i = 0; i < fPhysicalInputs; i++) {
                    chanArr[i] = -1;
                }
                for (int i = 0; i < inChan; i++) {
                    chanArr[i] = i;
                }
                AudioUnitSetProperty(fAUHAL, kAudioOutputUnitProperty_ChannelMap , kAudioUnitScope_Input, 1, chanArr, sizeof(SInt32) * fPhysicalInputs);
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioOutputUnitProperty_ChannelMap 1\n");
                    printError(err);
                }
            }
            
            if (outChan < fPhysicalOutputs) {
                SInt32 chanArr[fPhysicalOutputs];
                for (int i = 0;	i < fPhysicalOutputs; i++) {
                    chanArr[i] = -1;
                }
                for (int i = 0; i < outChan; i++) {
                    chanArr[i] = i;
                }
                err = AudioUnitSetProperty(fAUHAL, kAudioOutputUnitProperty_ChannelMap, kAudioUnitScope_Output, 0, chanArr, sizeof(SInt32) * fPhysicalOutputs);
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioOutputUnitProperty_ChannelMap 0\n");
                    printError(err);
                }
            }
            
            if (inChan > 0) {
                outSize = sizeof(AudioStreamBasicDescription);
                err = AudioUnitGetProperty(fAUHAL, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Output, 1, &srcFormat, &outSize);
                if (err != noErr) {
                    printf("Error calling AudioUnitGetProperty - kAudioUnitProperty_StreamFormat kAudioUnitScope_Output\n");
                    printError(err);
                }
                //PrintStreamDesc(&srcFormat);
                
                srcFormat.mSampleRate = sample_rate;
                srcFormat.mFormatID = kAudioFormatLinearPCM;
                srcFormat.mFormatFlags = kAudioFormatFlagsNativeFloatPacked | kLinearPCMFormatFlagIsNonInterleaved;
                srcFormat.mBytesPerPacket = sizeof(float);
                srcFormat.mFramesPerPacket = 1;
                srcFormat.mBytesPerFrame = sizeof(float);
                srcFormat.mChannelsPerFrame = inChan;
                srcFormat.mBitsPerChannel = 32;
                
                //PrintStreamDesc(&srcFormat);
                
                err = AudioUnitSetProperty(fAUHAL, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Output, 1, &srcFormat, sizeof(AudioStreamBasicDescription));
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_StreamFormat kAudioUnitScope_Output\n");
                    printError(err);
                }
            }
            
            if (outChan > 0) {
                outSize = sizeof(AudioStreamBasicDescription);
                err = AudioUnitGetProperty(fAUHAL, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Input, 0, &dstFormat, &outSize);
                if (err != noErr) {
                    printf("Error calling AudioUnitGetProperty - kAudioUnitProperty_StreamFormat kAudioUnitScope_Output\n");
                    printError(err);
                }
                //PrintStreamDesc(&dstFormat);
                
                dstFormat.mSampleRate = sample_rate;
                dstFormat.mFormatID = kAudioFormatLinearPCM;
                dstFormat.mFormatFlags = kAudioFormatFlagsNativeFloatPacked | kLinearPCMFormatFlagIsNonInterleaved;
                dstFormat.mBytesPerPacket = sizeof(float);
                dstFormat.mFramesPerPacket = 1;
                dstFormat.mBytesPerFrame = sizeof(float);
                dstFormat.mChannelsPerFrame = outChan;
                dstFormat.mBitsPerChannel = 32;
                
                //PrintStreamDesc(&dstFormat);
                
                err = AudioUnitSetProperty(fAUHAL, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Input, 0, &dstFormat, sizeof(AudioStreamBasicDescription));
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_StreamFormat kAudioUnitScope_Output\n");
                    printError(err);
                }
            }
            
            if (inChan > 0 && outChan == 0) {
                AURenderCallbackStruct output;
                output.inputProc = Render;
                output.inputProcRefCon = this;
                err = AudioUnitSetProperty(fAUHAL, kAudioOutputUnitProperty_SetInputCallback, kAudioUnitScope_Global, 0, &output, sizeof(output));
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_SetRenderCallback 1\n");
                    printError(err);
                    goto error;
                }
            } else {
                AURenderCallbackStruct output;
                output.inputProc = Render;
                output.inputProcRefCon = this;
                err = AudioUnitSetProperty(fAUHAL, kAudioUnitProperty_SetRenderCallback, kAudioUnitScope_Input, 0, &output, sizeof(output));
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_SetRenderCallback 0\n");
                    printError(err);
                    goto error;
                }
            }
            
            if (inChan > 0) {
                fInputData = (AudioBufferList*)malloc(sizeof(UInt32) + inChan * sizeof(AudioBuffer));
                assert(fInputData);
                fInputData->mNumberBuffers = inChan;
                
                // Prepare buffers
                for (int i = 0; i < inChan; i++) {
                    fInputData->mBuffers[i].mNumberChannels = 1;
                    fInputData->mBuffers[i].mData = malloc(fBufferSize * sizeof(float));
                    assert(fInputData->mBuffers[i].mData),
                    fInputData->mBuffers[i].mDataByteSize = fBufferSize * sizeof(float);
                }
            }
            
            AudioObjectPropertyAddress property_address;
            property_address.mScope = kAudioObjectPropertyScopeGlobal;
            property_address.mElement = kAudioObjectPropertyElementMaster;
            
            property_address.mSelector = kAudioHardwarePropertyDefaultInputDevice;
            if (AudioObjectAddPropertyListener(kAudioObjectSystemObject, &property_address, RestartProc, this)) {
                printf("AudioObjectAddPropertyListener() failed\n");
                return OPEN_ERR;
            } else {
                //printf("AudioObjectAddPropertyListener() OK\n");
            }
            
            property_address.mSelector = kAudioHardwarePropertyDefaultOutputDevice;
            if (AudioObjectAddPropertyListener(kAudioObjectSystemObject, &property_address, RestartProc, this)) {
                printf("AudioObjectAddPropertyListener() failed\n");
                return OPEN_ERR;
            } else {
                //printf("AudioObjectAddPropertyListener() OK\n");
            }
             
            return NO_ERR;
            
        error:
            AudioUnitUninitialize(fAUHAL);
            CloseComponent(fAUHAL);
            fAUHAL = 0;
            return OPEN_ERR;
        }
        
        int Close()
        {
            if (!fAUHAL) {
                return CLOSE_ERR;
            }
            
            for (int i = 0; i < fDevNumInChans; i++) {
                free(fInputData->mBuffers[i].mData);
            }
            if (fInputData) {
                free(fInputData);
            }
            AudioUnitUninitialize(fAUHAL);
            CloseComponent(fAUHAL);
            fAUHAL = NULL;
            
            DestroyAggregateDevice();
            
            delete[] fInChannel;
            delete[] fOutChannel;
            
            AudioObjectPropertyAddress property_address;
            property_address.mScope = kAudioObjectPropertyScopeGlobal;
            property_address.mElement = kAudioObjectPropertyElementMaster;
            
            property_address.mSelector = kAudioHardwarePropertyDefaultInputDevice;
            AudioObjectRemovePropertyListener(kAudioObjectSystemObject, &property_address, RestartProc, this);
            
            property_address.mSelector = kAudioHardwarePropertyDefaultOutputDevice;
            AudioObjectRemovePropertyListener(kAudioObjectSystemObject, &property_address, RestartProc, this);
            
            return NO_ERR;
        }

        int Start()
        {
            if (!fAUHAL) {
                return OPEN_ERR;
            }
            
            OSStatus err = AudioOutputUnitStart(fAUHAL);
            
            if (err != noErr) {
                printf("Error while opening device : device open error \n");
                return OPEN_ERR;
            } else {
                return NO_ERR;
            }
        }
        
        int Stop()
        {
            if (!fAUHAL) {
                return OPEN_ERR;
            }
            
            OSStatus err = AudioOutputUnitStop(fAUHAL);
            
            if (err != noErr) {
                printf("Error while closing device : device close error \n");
                return OPEN_ERR;
            } else {
                return NO_ERR;
            }
        }
    
        void setDsp(dsp* DSP)
        {
            fDSP = DSP;
        }
        
        int GetNumInputs() { return fPhysicalInputs; }
        int GetNumOutputs() { return fPhysicalOutputs; }

};

/******************************************************************************
*******************************************************************************

							CORE AUDIO INTERFACE

*******************************************************************************
*******************************************************************************/
class coreaudio : public audio {

    protected:
        
        TCoreAudioRenderer fAudioDevice;
        int fSampleRate, fBufferSize;

    public:
      
        coreaudio(int srate, int bsize) : fAudioDevice(this), fSampleRate(srate), fBufferSize(bsize) {}
        coreaudio(int bsize) : fAudioDevice(this), fSampleRate(-1), fBufferSize(bsize) {}
        virtual ~coreaudio() { fAudioDevice.Close(); }

        virtual bool init(const char* /*name*/, dsp* DSP) 
        {
            if (fAudioDevice.OpenDefault(DSP, DSP->getNumInputs(), DSP->getNumOutputs(), fBufferSize, fSampleRate) < 0) {
                printf("Cannot open CoreAudio device\n");
                return false;
            }
            fAudioDevice.setDsp(DSP);
            // If -1 was given, fSampleRate will be changed by OpenDefault
            DSP->init(fSampleRate);
            return true;
        }

        virtual bool start() 
        {
            if (fAudioDevice.Start() < 0) {
                printf("Cannot start CoreAudio device\n");
                return false;
            }
            return true;
        }

        virtual void stop() 
        {
            fAudioDevice.Stop();
        }
        
        virtual int getBufferSize() { return fAudioDevice.GetBufferSize(); }
        virtual int getSampleRate() { return fAudioDevice.GetSampleRate(); }
        
        virtual int getNumInputs() { return fAudioDevice.GetNumInputs(); }
        virtual int getNumOutputs() { return fAudioDevice.GetNumOutputs(); }

};

#endif

/********************END ARCHITECTURE SECTION (part 2/2)****************/


/**************************  END  coreaudio-dsp.h **************************/
#elif IOS_DRIVER
/************************** BEGIN coreaudio-ios-dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.

 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __coreaudio_ios_dsp__
#define __coreaudio_ios_dsp__

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <math.h>
#include <errno.h>
#include <time.h>


#include <AudioToolbox/AudioConverter.h>
#include <AudioToolbox/AudioServices.h>
#include <AudioUnit/AudioUnit.h>

using namespace std;

/******************************************************************************
*******************************************************************************

							COREAUDIO INTERFACE

*******************************************************************************
*******************************************************************************/

#define OPEN_ERR -1
#define NO_ERR 0

class TiPhoneCoreAudioRenderer
{

    protected:

        AudioUnit fAUHAL;

        int	fDevNumInChans;
        int	fDevNumOutChans;

        int fHWNumInChans;
        int fHWNumOutChans;

        dsp* fDSP;
    
        audio* fAudio;

        AudioBufferList* fCAInputData;

        static void PrintStreamDesc(AudioStreamBasicDescription *inDesc)
        {
            printf("- - - - - - - - - - - - - - - - - - - -\n");
            printf("  Sample Rate:%f\n", inDesc->mSampleRate);
            printf("  Format ID:%.*s\n", (int) sizeof(inDesc->mFormatID), (char*)&inDesc->mFormatID);
            printf("  Format Flags:%lX\n", inDesc->mFormatFlags);
            printf("  Bytes per Packet:%ld\n", inDesc->mBytesPerPacket);
            printf("  Frames per Packet:%ld\n", inDesc->mFramesPerPacket);
            printf("  Bytes per Frame:%ld\n", inDesc->mBytesPerFrame);
            printf("  Channels per Frame:%ld\n", inDesc->mChannelsPerFrame);
            printf("  Bits per Channel:%ld\n", inDesc->mBitsPerChannel);
            printf("- - - - - - - - - - - - - - - - - - - -\n");
        }

        static void printError(OSStatus err)
        {
            switch (err) {
                case kAudioConverterErr_FormatNotSupported:
                    printf("error code : kAudioConverterErr_FormatNotSupported\n");
                    break;
                case kAudioConverterErr_OperationNotSupported:
                    printf("error code : kAudioConverterErr_OperationNotSupported\n");
                    break;
                case kAudioConverterErr_PropertyNotSupported:
                    printf("error code : kAudioConverterErr_PropertyNotSupported\n");
                    break;
                case kAudioConverterErr_InvalidInputSize:
                    printf("error code : kAudioConverterErr_InvalidInputSize\n");
                    break;
                case kAudioConverterErr_InvalidOutputSize:
                    printf("error code : kAudioConverterErr_InvalidOutputSize\n");
                    break;
                case kAudioConverterErr_UnspecifiedError:
                    printf("error code : kAudioConverterErr_UnspecifiedError\n");
                    break;
                case kAudioConverterErr_BadPropertySizeError:
                    printf("error code : kAudioConverterErr_BadPropertySizeError\n");
                    break;
                case kAudioConverterErr_RequiresPacketDescriptionsError:
                    printf("error code : kAudioConverterErr_RequiresPacketDescriptionsError\n");
                    break;
                case kAudioConverterErr_InputSampleRateOutOfRange:
                    printf("error code : kAudioConverterErr_InputSampleRateOutOfRange\n");
                    break;
                case kAudioConverterErr_OutputSampleRateOutOfRange:
                    printf("error code : kAudioConverterErr_OutputSampleRateOutOfRange\n");
                    break;
                default:
                    printf("error code : unknown\n");
                    break;
            }
        }

        static OSStatus Render(void *inRefCon,AudioUnitRenderActionFlags *ioActionFlags,
                               const AudioTimeStamp *inTimeStamp,
                               UInt32,
                               UInt32 inNumberFrames,
                               AudioBufferList *ioData)
        {
            return static_cast<TiPhoneCoreAudioRenderer*>(inRefCon)->Render(ioActionFlags, inTimeStamp, inNumberFrames, ioData);
        }

        OSStatus Render(AudioUnitRenderActionFlags *ioActionFlags,
                        const AudioTimeStamp *inTimeStamp,
                        UInt32 inNumberFrames,
                        AudioBufferList *ioData)
        {
            OSStatus err = noErr;

            if (fDevNumInChans > 0) {
                err = AudioUnitRender(fAUHAL, ioActionFlags, inTimeStamp, 1, inNumberFrames, fCAInputData);
            }

            if (err == noErr) {
                float* fInChannel[fDevNumInChans];
                float* fOutChannel[fDevNumOutChans];

                for (int chan = 0; chan < fDevNumInChans; chan++) {
                    fInChannel[chan] = (float*)fCAInputData->mBuffers[chan].mData;
                }

                for (int chan = 0; chan < fDevNumOutChans; chan++) {
                    fOutChannel[chan] = (float*)ioData->mBuffers[chan].mData;
                }

                fDSP->compute((int)inNumberFrames, fInChannel, fOutChannel);
                
                fAudio->runControlCallbacks();
            }
            return err;
        }

        static void InterruptionListener(void *inClientData, UInt32 inInterruption)
        {
            TiPhoneCoreAudioRenderer *obj = (TiPhoneCoreAudioRenderer*)inClientData;
            printf("Session interrupted! --- %s ---", (inInterruption == kAudioSessionBeginInterruption) ? "Begin Interruption" : "End Interruption");

            if (inInterruption == kAudioSessionEndInterruption) {
                // Make sure we are again the active session
                AudioSessionSetActive(true);
                obj->SetupMixing();
                AudioOutputUnitStart(obj->fAUHAL);
            }

            if (inInterruption == kAudioSessionBeginInterruption) {
                AudioOutputUnitStop(obj->fAUHAL);
            }
        }
    
        int SetupMixing()
        {
            OSStatus err;

            /*
            01/07/2014 : cause iRig to fail, so deactivated for now...
            CFStringRef route;
            UInt32 routesize = sizeof(route);
            OSStatus err  = AudioSessionGetProperty(kAudioSessionProperty_AudioRoute, &routesize, &route);
            if (err == noErr) {
                if (CFStringCompare(route, CFSTR("ReceiverAndMicrophone"), 0) == kCFCompareEqualTo || CFStringCompare(route,CFSTR("Receiver"), 0) == kCFCompareEqualTo) {
                    // Re-route audio to the speaker (not the receiver, which no music app will ever want)
                    printf("Rerouting audio to speaker\n");
                    UInt32 newRoute = kAudioSessionOverrideAudioRoute_Speaker;
                    AudioSessionSetProperty(kAudioSessionProperty_OverrideAudioRoute, sizeof(newRoute), &newRoute);
                }
             }
            */

            UInt32 allowMixing = true;
            err = AudioSessionSetProperty(kAudioSessionProperty_OverrideCategoryMixWithOthers, sizeof(allowMixing), &allowMixing);
            if (err != noErr) {
                printf("Could not set audio session mixing\n");
                printError(err);
                return -1;
            } else {
                return 0;
            }
        }

        static void AudioSessionPropertyListener(void* inClientData, AudioSessionPropertyID inID, UInt32 inDataSize, const void* inData)
        {
            TiPhoneCoreAudioRenderer *obj = (TiPhoneCoreAudioRenderer*)inData;
            switch (inID) {
                case kAudioSessionProperty_ServerDied: {
                    printf("kAudioSessionProperty_ServerDied\n");
                    break;
                }
                case kAudioSessionProperty_AudioRouteChange: {
                    printf("kAudioSessionProperty_AudioRouteChange\n");
                    obj->SetupMixing();
                    break;
                }
                case kAudioSessionProperty_AudioInputAvailable: {
                    printf("kAudioSessionProperty_AudioInputAvailable\n");
                    obj->SetupMixing();
                    break;
                }
            }
        }

        static int SetAudioCategory(int input, int output)
        {
            // Set the audioCategory the way Faust DSP wants
            UInt32 audioCategory;
            if ((input > 0) && (output > 0)) {
                audioCategory = kAudioSessionCategory_PlayAndRecord;
                printf("AudioCategory kAudioSessionCategory_PlayAndRecord\n");
            } else if (input > 0) {
                audioCategory = kAudioSessionCategory_RecordAudio;
                printf("AudioCategory kAudioSessionCategory_RecordAudio\n");
            } else  if (output > 0) {
                audioCategory = kAudioSessionCategory_MediaPlayback;
                printf("AudioCategory kAudioSessionCategory_MediaPlayback\n");
            }

            OSStatus err = AudioSessionSetProperty(kAudioSessionProperty_AudioCategory, sizeof(audioCategory), &audioCategory);
            if (err != noErr) {
                printf("Couldn't set audio category\n");
                printError(err);
                return OPEN_ERR;
            }

            // 09/07/2015 : https://developer.apple.com/library/ios/qa/qa1754/_index.html
            if (audioCategory == kAudioSessionCategory_PlayAndRecord) {
                
                // 21/09/2017 Compatible with bluetooth devices. Deactivate bluetooth micro which run at 16khz, use internal micro instead.
                /*
                UInt32 overrideAudioRoute = 1;
                err = AudioSessionSetProperty(kAudioSessionProperty_OverrideCategoryDefaultToSpeaker, sizeof(UInt32), &overrideAudioRoute);
                if (err != noErr) {
                    printf("Error setting kAudioSessionProperty_OverrideCategoryDefaultToSpeaker\n");
                    printError(err);
                }

                UInt32 allowBluetoothInput = 1;
                err = AudioSessionSetProperty(kAudioSessionProperty_OverrideCategoryEnableBluetoothInput, sizeof(UInt32), &allowBluetoothInput);
                if (err != noErr) {
                    printf("Error setting kAudioSessionProperty_OverrideCategoryEnableBluetoothInput\n");
                    printError(err);
                }
                */
                
                // On devices with more than one built-in microphone, the microphone closest to the video camera is used.
                UInt32 allowInternalInput = kAudioSessionMode_VideoRecording;
                err = AudioSessionSetProperty(kAudioSessionProperty_Mode, sizeof(UInt32), &allowInternalInput);
                if (err != noErr) {
                    printf("Error setting kAudioSessionMode_VideoRecording\n");
                    printError(err);
                }

            }

        #if NOAGC
            // If input is used, disable AGC
            if (audioCategory == kAudioSessionCategory_RecordAudio || audioCategory == kAudioSessionCategory_PlayAndRecord) {

                UInt32 sessionMode = kAudioSessionMode_Measurement;
                err = AudioSessionSetProperty(kAudioSessionProperty_Mode, sizeof(sessionMode), &sessionMode);
                if (err != noErr) {
                    printf("Error setting kAudioSessionMode_Measurement\n");
                    printError(err);
                }

                UInt32 availableGain;
                UInt32 outSize = sizeof(availableGain);
                err = AudioSessionGetProperty(kAudioSessionProperty_InputGainAvailable, &outSize, &availableGain);
                if (err != noErr) {
                    printf("Error getting kAudioSessionProperty_InputGainAvailable\n");
                    printError(err);
                } else {
                    Float32 gain;
                    printf("Getting kAudioSessionProperty_InputGainAvailable OK\n");
                    outSize = sizeof(Float32);
                    AudioSessionGetProperty(kAudioSessionProperty_InputGainScalar, &outSize, &gain);
                    printf("Getting kAudioSessionProperty_InputGainScalar :  %f\n", gain);
                    gain = 1.0f;
                    err = AudioSessionSetProperty(kAudioSessionProperty_InputGainScalar, sizeof(Float32), &gain);
                    if (err != noErr) {
                        printf("Error setting kAudioSessionProperty_InputGainScalar\n");
                        printError(err);
                    } else {
                        printf("Setting kAudioSessionProperty_InputGainAvailable to 1.0 OK\n");
                    }
                }
            }
        #endif

            return NO_ERR;
        }

        int SetParameters(int bufferSize, int samplerate)
        {
            OSStatus err;
            UInt32 outSize;
            UInt32 enableIO;
            AudioStreamBasicDescription srcFormat, dstFormat;

            printf("SetParameters fDevNumInChans = %d fDevNumOutChans = %d bufferSize = %d samplerate = %d\n", fDevNumInChans, fDevNumOutChans, bufferSize, samplerate);

            err = AudioSessionSetActive(true);
            if (err != noErr) {
                printf("Couldn't set audio session active\n");
                printError(err);
                return OPEN_ERR;
            }

            AudioSessionAddPropertyListener(kAudioSessionProperty_AudioRouteChange, AudioSessionPropertyListener, this);
            AudioSessionAddPropertyListener(kAudioSessionProperty_AudioInputAvailable, AudioSessionPropertyListener, this);
            AudioSessionAddPropertyListener(kAudioSessionProperty_ServerDied, AudioSessionPropertyListener, this);

            if (SetAudioCategory(fDevNumInChans, fDevNumOutChans) != NO_ERR) {
                return OPEN_ERR;
            }

            // Scan Hardware
            outSize = sizeof(fHWNumInChans);
            err = AudioSessionGetProperty(kAudioSessionProperty_CurrentHardwareInputNumberChannels, &outSize, &fHWNumInChans);
            if (err != noErr) {
                fHWNumInChans = 0;
                printf("Couldn't get hw input channels\n");
                printError(err);
            } else {
                printf("Get hw input channels %d\n", fHWNumInChans);
            }

            outSize = sizeof(fHWNumOutChans);
            err = AudioSessionGetProperty(kAudioSessionProperty_CurrentHardwareOutputNumberChannels, &outSize, &fHWNumOutChans);
            if (err != noErr) {
                fHWNumOutChans = 0;
                printf("Couldn't get hw output channels\n");
                printError(err);
            } else {
                printf("Get hw output channels %d\n", fHWNumOutChans);
            }
            /*
            // Possibly reset the audioCategory the way hardware allows
            // 21/09/2017 cause problem when use bluetooth, deactive for now
            if (SetAudioCategory(fHWNumInChans, fHWNumOutChans) != NO_ERR) {
                return OPEN_ERR;
            }
            */
            if (SetupMixing() < 0) {
                return OPEN_ERR;
            }

            Float64 hwSampleRate;
            outSize = sizeof(hwSampleRate);
            err = AudioSessionGetProperty(kAudioSessionProperty_CurrentHardwareSampleRate, &outSize, &hwSampleRate);
            if (err != noErr) {
                printf("Couldn't get hw sample rate\n");
                printError(err);
                return OPEN_ERR;
            } else {
                printf("Get hw sample rate %f\n", hwSampleRate);
            }

            Float32 hwBufferSize;
            outSize = sizeof(hwBufferSize);
            err = AudioSessionGetProperty(kAudioSessionProperty_CurrentHardwareIOBufferDuration, &outSize, &hwBufferSize);
            if (err != noErr) {
                printf("Couldn't get hw buffer duration\n");
                printError(err);
                return OPEN_ERR;
            } else {
                printf("Get hw buffer duration %f\n", hwBufferSize);
            }

            Float32 preferredPeriodDuration = float(bufferSize) / float(samplerate);
            printf("preferredPeriodDuration %f \n", preferredPeriodDuration);

            err = AudioSessionSetProperty(kAudioSessionProperty_PreferredHardwareIOBufferDuration, sizeof(preferredPeriodDuration), &preferredPeriodDuration);
            if (err != noErr) {
                printf("Couldn't set i/o buffer duration\n");
                printError(err);
                return OPEN_ERR;
            }

            Float32 actualPeriodDuration;
            outSize = sizeof(actualPeriodDuration);
            err = AudioSessionGetProperty(kAudioSessionProperty_PreferredHardwareIOBufferDuration, &outSize, &actualPeriodDuration);
            if (err != noErr) {
                printf("Couldn't get hw buffer duration\n");
                printError(err);
                return OPEN_ERR;
            }

            printf("preferredPeriodDuration %f actualPeriodDuration %f\n", preferredPeriodDuration, actualPeriodDuration);
            if (preferredPeriodDuration != actualPeriodDuration) {
                printf("Couldn't set hw buffer duration\n");
                return OPEN_ERR;
            }

            Float64 preferredSamplerate = float(samplerate);
            err = AudioSessionSetProperty(kAudioSessionProperty_PreferredHardwareSampleRate, sizeof(preferredSamplerate), &preferredSamplerate);
            if (err != noErr) {
                printf("Couldn't set i/o sample rate\n");
                printError(err);
                return OPEN_ERR;
            }

            Float32 inputLatency;
            outSize = sizeof(inputLatency);
            err = AudioSessionGetProperty(kAudioSessionProperty_CurrentHardwareInputLatency, &outSize, &inputLatency);
            if (err != noErr) {
                printf("Couldn't get inputLatency\n");
                printError(err);
            } else {
                printf("inputLatency in sec : %f\n", inputLatency);
            }

            Float32 outputLatency;
            outSize = sizeof(outputLatency);
            err = AudioSessionGetProperty(kAudioSessionProperty_CurrentHardwareOutputLatency, &outSize, &outputLatency);
            if (err != noErr) {
                printf("Couldn't get outputLatency\n");
                printError(err);
            } else {
                printf("outputLatency in sec : %f\n", outputLatency);
            }

            // AUHAL
            AudioComponentDescription cd = {kAudioUnitType_Output, kAudioUnitSubType_RemoteIO, kAudioUnitManufacturer_Apple, 0, 0};
            AudioComponent HALOutput = AudioComponentFindNext(NULL, &cd);

            err = AudioComponentInstanceNew(HALOutput, &fAUHAL);
            if (err != noErr) {
                printf("Error calling OpenAComponent\n");
                printError(err);
                goto error;
            }

            enableIO = 1;
            err = AudioUnitSetProperty(fAUHAL, kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Output, 0, &enableIO, sizeof(enableIO));
            if (err != noErr) {
                printf("Error calling AudioUnitSetProperty - kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Output\n");
                printError(err);
                goto error;
            }

            enableIO = 1;
            err = AudioUnitSetProperty(fAUHAL, kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Input, 1, &enableIO, sizeof(enableIO));
            if (err != noErr) {
                printf("Error calling AudioUnitSetProperty - kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Input\n");
                printError(err);
                goto error;
            }

            UInt32 maxFPS;
            outSize = sizeof(maxFPS);
            err = AudioUnitGetProperty(fAUHAL, kAudioUnitProperty_MaximumFramesPerSlice, kAudioUnitScope_Global, 0, &maxFPS, &outSize);
            if (err != noErr) {
                printf("Couldn't get kAudioUnitProperty_MaximumFramesPerSlice\n");
                printError(err);
                goto error;
            } else {
                printf("Get kAudioUnitProperty_MaximumFramesPerSlice %d\n", (unsigned int)maxFPS);
            }

            err = AudioUnitSetProperty(fAUHAL, kAudioUnitProperty_MaximumFramesPerSlice, kAudioUnitScope_Global, 1, (UInt32*)&bufferSize, sizeof(UInt32));
            if (err != noErr) {
                printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_MaximumFramesPerSlice\n");
                printError(err);
                goto error;
            }

            err = AudioUnitSetProperty(fAUHAL, kAudioUnitProperty_MaximumFramesPerSlice, kAudioUnitScope_Global, 0, (UInt32*)&bufferSize, sizeof(UInt32));
            if (err != noErr) {
                printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_MaximumFramesPerSlice\n");
                printError(err);
                goto error;
            }

            err = AudioUnitInitialize(fAUHAL);
            if (err != noErr) {
                printf("Cannot initialize AUHAL unit\n");
                printError(err);
                goto error;
            }

            // Setting format
            if (fDevNumInChans > 0) {
                outSize = sizeof(AudioStreamBasicDescription);
                err = AudioUnitGetProperty(fAUHAL, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Output, 1, &srcFormat, &outSize);
                if (err != noErr) {
                    printf("Error calling AudioUnitGetProperty - kAudioUnitProperty_StreamFormat kAudioUnitScope_Output\n");
                    printError(err);
                }
                PrintStreamDesc(&srcFormat);

                srcFormat.mFormatID = kAudioFormatLinearPCM;
                srcFormat.mFormatFlags = kAudioFormatFlagsNativeFloatPacked | kLinearPCMFormatFlagIsNonInterleaved;
                srcFormat.mBytesPerPacket = sizeof(AudioUnitSampleType);
                srcFormat.mFramesPerPacket = 1;
                srcFormat.mBytesPerFrame = sizeof(AudioUnitSampleType);
                srcFormat.mChannelsPerFrame = fDevNumInChans;
                srcFormat.mBitsPerChannel = 32;

                PrintStreamDesc(&srcFormat);

                err = AudioUnitSetProperty(fAUHAL, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Output, 1, &srcFormat, sizeof(AudioStreamBasicDescription));
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_StreamFormat kAudioUnitScope_Output\n");
                    printError(err);
                }
            }

            if (fDevNumOutChans > 0) {
                outSize = sizeof(AudioStreamBasicDescription);
                err = AudioUnitGetProperty(fAUHAL, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Input, 0, &dstFormat, &outSize);
                if (err != noErr) {
                    printf("Error calling AudioUnitGetProperty - kAudioUnitProperty_StreamFormat kAudioUnitScope_Input\n");
                    printError(err);
                }
                PrintStreamDesc(&dstFormat);

                dstFormat.mFormatID = kAudioFormatLinearPCM;
                dstFormat.mFormatFlags = kAudioFormatFlagsNativeFloatPacked | kLinearPCMFormatFlagIsNonInterleaved;
                dstFormat.mBytesPerPacket = sizeof(AudioUnitSampleType);
                dstFormat.mFramesPerPacket = 1;
                dstFormat.mBytesPerFrame = sizeof(AudioUnitSampleType);
                dstFormat.mChannelsPerFrame = fDevNumOutChans;
                dstFormat.mBitsPerChannel = 32;

                PrintStreamDesc(&dstFormat);

                err = AudioUnitSetProperty(fAUHAL, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Input, 0, &dstFormat, sizeof(AudioStreamBasicDescription));
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_StreamFormat kAudioUnitScope_Input\n");
                    printError(err);
                }
            }

            if (fDevNumInChans > 0 && fDevNumOutChans == 0) {
                AURenderCallbackStruct output;
                output.inputProc = Render;
                output.inputProcRefCon = this;
                err = AudioUnitSetProperty(fAUHAL, kAudioOutputUnitProperty_SetInputCallback, kAudioUnitScope_Global, 0, &output, sizeof(output));
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_SetRenderCallback 1\n");
                    printError(err);
                    goto error;
                }
            } else {
                AURenderCallbackStruct output;
                output.inputProc = Render;
                output.inputProcRefCon = this;
                err = AudioUnitSetProperty(fAUHAL, kAudioUnitProperty_SetRenderCallback, kAudioUnitScope_Input, 0, &output, sizeof(output));
                if (err != noErr) {
                    printf("Error calling AudioUnitSetProperty - kAudioUnitProperty_SetRenderCallback 0\n");
                    printError(err);
                    goto error;
                }
            }

            // Possibly prepare input buffers
            if (fDevNumInChans > 0) {
                fCAInputData = (AudioBufferList*)malloc(sizeof(float) + fDevNumInChans * sizeof(AudioBuffer));
                fCAInputData->mNumberBuffers = fDevNumInChans;
                for (int i = 0; i < fDevNumInChans; i++) {
                    fCAInputData->mBuffers[i].mNumberChannels = 1;
                    fCAInputData->mBuffers[i].mDataByteSize = bufferSize * sizeof(float);
                    fCAInputData->mBuffers[i].mData = malloc(bufferSize * sizeof(float));
                }
            }

            return NO_ERR;

        error:
            AudioUnitUninitialize(fAUHAL);
            AudioComponentInstanceDispose(fAUHAL);
            return OPEN_ERR;
        }

    public:

        TiPhoneCoreAudioRenderer(audio* audio)
            :fAUHAL(0), fDevNumInChans(0), fDevNumOutChans(0),
            fHWNumInChans(0), fHWNumOutChans(0),
            fDSP(0), fAudio(audio), fCAInputData(NULL)
        {}

        virtual ~TiPhoneCoreAudioRenderer()
        {
            if (fCAInputData) {
                for (int i = 0; i < fDevNumInChans; i++) {
                    free(fCAInputData->mBuffers[i].mData);
                }
                free(fCAInputData);
            }
        }
    
        int Open(dsp* dsp, int inChan, int outChan, int buffersize, int samplerate)
        {
            fDSP = dsp;
            fDevNumInChans = inChan;
            fDevNumOutChans = outChan;
      
            // Initialize and configure the audio session
            OSStatus err = AudioSessionInitialize(NULL, NULL, InterruptionListener, this);
            if (err != noErr && err != kAudioSessionAlreadyInitialized) {
                printf("Couldn't initialize audio session\n");
                printError(err);
                return OPEN_ERR;
            }

            if (SetParameters(buffersize, samplerate) < 0) {
                printf("Cannot set parameters to CoreAudio device\n");
                return OPEN_ERR;
            }

            return NO_ERR;
        }

        int Close()
        {
            AudioUnitUninitialize(fAUHAL);
            AudioComponentInstanceDispose(fAUHAL);
            return NO_ERR;
        }

        int Start()
        {
            AudioSessionSetActive(true);

            if (AudioOutputUnitStart(fAUHAL) != noErr) {
                printf("Error while opening device : device open error\n");
                return OPEN_ERR;
            } else {
                return NO_ERR;
            }
        }

        int Stop()
        {
            AudioSessionSetActive(false);

            if (AudioOutputUnitStop(fAUHAL) != noErr) {
                printf("Error while closing device : device close error\n");
                return OPEN_ERR;
            } else {
                return NO_ERR;
            }
        }

        int GetNumInputs() { return fHWNumInChans; }
        int GetNumOutputs() { return fHWNumOutChans; }

};

/******************************************************************************
 *******************************************************************************

                                CORE AUDIO INTERFACE

 *******************************************************************************
 *******************************************************************************/

class iosaudio : public audio {
    
    protected:

        TiPhoneCoreAudioRenderer fAudioDevice;
        int fSampleRate, fBufferSize;
  
    public:

        iosaudio(int srate, int bsize)
        :fAudioDevice(this), fSampleRate(srate), fBufferSize(bsize)
        {}

        virtual ~iosaudio() { fAudioDevice.Close(); }
   
        virtual bool init(const char* /*name*/, dsp* DSP)
        {
            DSP->init(fSampleRate);
            if (fAudioDevice.Open(DSP, DSP->getNumInputs(), DSP->getNumOutputs(), fBufferSize, fSampleRate) < 0) {
                printf("Cannot open iOS audio device\n");
                return false;
            }
            return true;
        }

        virtual bool start()
        {
            if (fAudioDevice.Start() < 0) {
                printf("Cannot start iOS audio device\n");
                return false;
            }
            return true;
        }

        virtual void stop()
        {
            fAudioDevice.Stop();
        }

        virtual int getBufferSize() { return fBufferSize; }
        virtual int getSampleRate() { return fSampleRate; }

        virtual int getNumInputs() { return fAudioDevice.GetNumInputs(); }
        virtual int getNumOutputs() { return fAudioDevice.GetNumOutputs(); }

};

#endif

/********************END ARCHITECTURE SECTION (part 2/2)****************/
/**************************  END  coreaudio-ios-dsp.h **************************/
#elif ANDROID_DRIVER
/************************** BEGIN oboe-dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2020 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __oboe_dsp__
#define __oboe_dsp__

#include <android/log.h>
#include <oboe/Oboe.h>
#include <time.h>
#include <assert.h>
#include <vector>

/************************** BEGIN dsp-tools.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __dsp_tools__
#define __dsp_tools__

#include <assert.h>
#include <string.h>

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif

class Deinterleaver
{
    
    private:
    
        int fNumFrames;
        int fNumInputs;
        int fNumOutputs;
        
        FAUSTFLOAT* fInput;
        FAUSTFLOAT* fOutputs[256];
        
    public:
        
        Deinterleaver(int numFrames, int numInputs, int numOutputs)
        {
            fNumFrames = numFrames;
            fNumInputs = numInputs;
            fNumOutputs = std::max<int>(numInputs, numOutputs);
            
            // allocate interleaved input channel
            fInput = new FAUSTFLOAT[fNumFrames * fNumInputs];
            
            // allocate separate output channels
            for (int i = 0; i < fNumOutputs; i++) {
                fOutputs[i] = new FAUSTFLOAT[fNumFrames];
            }
        }
        
        ~Deinterleaver()
        {
            // free interleaved input channel
            delete [] fInput;
            
            // free separate output channels
            for (int i = 0; i < fNumOutputs; i++) {
                delete [] fOutputs[i];
            }
        }
        
        FAUSTFLOAT* input() { return fInput; }
        
        FAUSTFLOAT** outputs() { return fOutputs; }
        
        void deinterleave()
        {
            for (int s = 0; s < fNumFrames; s++) {
                for (int c = 0; c < fNumInputs; c++) {
                    fOutputs[c][s] = fInput[c + s * fNumInputs];
                }
            }
        }
};

class Interleaver
{
    
    private:
        
        int fNumFrames;
        int fNumInputs;
        int fNumOutputs;
    
        FAUSTFLOAT* fInputs[256];
        FAUSTFLOAT* fOutput;
        
    public:
        
        Interleaver(int numFrames, int numInputs, int numOutputs)
        {
            fNumFrames = numFrames;
            fNumInputs 	= std::max(numInputs, numOutputs);
            fNumOutputs = numOutputs;
            
            // allocate separate input channels
            for (int i = 0; i < fNumInputs; i++) {
                fInputs[i] = new FAUSTFLOAT[fNumFrames];
            }
            
            // allocate interleaved output channel
            fOutput = new FAUSTFLOAT[fNumFrames * fNumOutputs];
        }
        
        ~Interleaver()
        {
            // free separate input channels
            for (int i = 0; i < fNumInputs; i++) {
                delete [] fInputs[i];
            }
            
            // free interleaved output channel
            delete [] fOutput;
        }
        
        FAUSTFLOAT** inputs() { return fInputs; }
        
        FAUSTFLOAT* output() { return fOutput; }
        
        void interleave()
        {
            for (int s = 0; s < fNumFrames; s++) {
                for (int c = 0; c < fNumOutputs; c++) {
                    fOutput[c + s * fNumOutputs] = fInputs[c][s];
                }
            }
        }
};

//=============================================================================
// An AudioChannels is a group of non-interleaved buffers that knows how to read
// from or write to an interleaved buffer. The interleaved buffer may have a
// different number of channels than the AudioChannels internal channels.
//=============================================================================

class AudioChannels
{
    
    protected:
        
        const unsigned int fNumFrames;
        const unsigned int fNumChannels;
        FAUSTFLOAT** fChannels;
        
    public:
        
        AudioChannels(int nframes, int nchannels) : fNumFrames(nframes), fNumChannels(nchannels)
        {
            fChannels = new FAUSTFLOAT*[nchannels];
            
            // allocate audio channels
            for (unsigned int i = 0; i < fNumChannels; i++) {
                fChannels[i] = new FAUSTFLOAT[fNumFrames];
                memset(fChannels[i], 0, sizeof(FAUSTFLOAT) * fNumFrames);
            }
        }
        
        virtual ~AudioChannels()
        {
            // free separate input channels
            for (int i = 0; i < fNumChannels; i++) {
                delete[] fChannels[i];
            }
            delete[] fChannels;
        }
        
        //---------------------------------------------------------------------------------------
        // interleavedRead: read, from the interleaved buffer <inbuffer>, <length> frames on
        // <inchannels> channels. The samples are written to the <fNumChannels> internal
        // <fChannels>.
        void interleavedRead(float* inbuffer, unsigned int length, unsigned int inchannels)
        {
            assert(length <= fNumFrames);
            unsigned int C = std::min<unsigned int>(inchannels, fNumChannels);
            unsigned int F = std::min<unsigned int>(length, fNumFrames);
            
            for (unsigned int f = 0; f < F; f++) {
                unsigned int p = f * inchannels;
                for (unsigned int c = 0; c < C; c++) {
                    fChannels[c][f] = inbuffer[p++];
                }
                for (unsigned int c = C; c < fNumChannels; c++) {
                    fChannels[c][f] = 0;
                }
            }
        }
        
        //----------------------------------------------------------------------------------------
        // interleavedWrite: write to the interleaved buffer <inbuffer>, <length> frames on
        // <outchannels> channels. The samples are read from <fNumChannels> internal
        // <fChannels>.
        void interleavedWrite(float* outbuffer, unsigned int length, unsigned int outchannels)
        {
            assert(length <= fNumFrames);
            unsigned int C = std::min<unsigned int>(outchannels, fNumChannels);
            unsigned int F = std::min<unsigned int>(length, fNumFrames);
            
            for (unsigned int f = 0; f < F; f++) {
                unsigned int p = f * outchannels;
                for (unsigned int c = 0; c < C; c++) {
                    outbuffer[p++] = fChannels[c][f];
                }
                for (unsigned int c = C; c < outchannels; c++) {
                    outbuffer[p++] = 0;
                }
            }
        }
        
        //----------------------------------------------------------------------------------------
        // buffers: the internal buffers ready to use in the compute() method of a Faust dsp
        
        FAUSTFLOAT** buffers() { return fChannels; }
};

#endif
/**************************  END  dsp-tools.h **************************/

#define CPU_TABLE_SIZE 16

//http://stackoverflow.com/questions/17188761/how-to-obtain-computation-time-in-ndk

class oboeaudio : public audio, public oboe::AudioStreamCallback {
    
    protected:
    
        dsp* fDSP;
    
        int32_t fSampleRate;
        int32_t fBufferSize;
    
        oboe::ManagedStream fInputStream;
        oboe::ManagedStream fOutputStream;
    
        int64_t fCPUTable[CPU_TABLE_SIZE];
        int64_t fCPUTableIndex;
    
        AudioChannels* fInputs;
        AudioChannels* fOutputs;
    
        std::vector<int> fCpuIds;
        bool fIsThreadAffinitySet;
    
        void setThreadAffinity()
        {
            pid_t current_thread_id = gettid();
            cpu_set_t cpu_set;
            CPU_ZERO(&cpu_set);
            
            // If the callback cpu ids aren't specified then bind to the current cpu
            if (fCpuIds.empty()) {
                int current_cpu_id = sched_getcpu();
                __android_log_print(ANDROID_LOG_ERROR, "Faust", "Binding to current CPU ID %d", current_cpu_id);
                CPU_SET(current_cpu_id, &cpu_set);
            } else {
                __android_log_print(ANDROID_LOG_ERROR, "Faust", "Binding to %d CPU IDs", static_cast<int>(fCpuIds.size()));
                for (size_t i = 0; i < fCpuIds.size(); i++) {
                    int cpu_id = fCpuIds.at(i);
                    __android_log_print(ANDROID_LOG_ERROR, "Faust", "CPU ID %d added to cores set", cpu_id);
                    CPU_SET(cpu_id, &cpu_set);
                }
            }
            
            int res = sched_setaffinity(current_thread_id, sizeof(cpu_set_t), &cpu_set);
            if (res == 0) {
                __android_log_print(ANDROID_LOG_ERROR, "Faust", "Thread affinity set");
            } else {
                __android_log_print(ANDROID_LOG_ERROR, "Faust", "Error setting thread affinity error no: %d", res);
            }
            
            fIsThreadAffinitySet = true;
        }
  
        int64_t getTimeUsec() 
        {
            struct timespec now;
            clock_gettime(CLOCK_MONOTONIC, &now);
            return ((int64_t) now.tv_sec * 1000000000LL + now.tv_nsec)/1000;
        }
    
        oboe::DataCallbackResult onAudioReady(oboe::AudioStream* audioStream, void* outbuffer, int32_t framesWrite)
        {
            fBufferSize = framesWrite;
            int64_t t1 = getTimeUsec();
            if (!fIsThreadAffinitySet) setThreadAffinity();
            
            // Duplex case
            if (fDSP->getNumInputs() > 0) {
                
                // Read inputs
                float* inbuffer = static_cast<float*>(alloca(fDSP->getNumInputs() * sizeof(float) * framesWrite));
                oboe::ResultWithValue<int32_t> res = fInputStream->read(inbuffer, framesWrite, 0);
                
                if (res) {
                    int32_t framesRead = res.value();
                    fInputs->interleavedRead(inbuffer, framesWrite, fDSP->getNumInputs());
                
                    // Call compute only when 'read frames' == 'frames to write'
                    if (framesRead == framesWrite) {
                        fDSP->compute(framesWrite, fInputs->buffers(), fOutputs->buffers());
                        fOutputs->interleavedWrite(static_cast<float*>(outbuffer), framesWrite, fDSP->getNumOutputs());
                    } else {
                        __android_log_print(ANDROID_LOG_ERROR, "Faust", "onAudioReady framesRead %d framesWrite %d", framesRead, framesWrite);
                    }
                    
                } else {
                    __android_log_print(ANDROID_LOG_ERROR, "Faust", "onAudioReady fInputStream->read fails");
                }
                
            } else {
                
                // Output only
                fDSP->compute(framesWrite, nullptr, fOutputs->buffers());
                fOutputs->interleavedWrite(static_cast<float*>(outbuffer), framesWrite, fDSP->getNumOutputs());
            }
            
            runControlCallbacks();
            
            int64_t t2 = getTimeUsec();
            fCPUTable[(fCPUTableIndex++)&(CPU_TABLE_SIZE-1)] = t2 - t1;
            return oboe::DataCallbackResult::Continue;
        }
 
    public:
    
        oboeaudio(long srate):
        fDSP(NULL),
        fSampleRate(srate),
        fBufferSize(512),
        fCPUTableIndex(0),
        fInputs(nullptr),
        fOutputs(nullptr),
        fIsThreadAffinitySet(false)
        {}

        virtual ~oboeaudio()
        {
            delete fInputs;
            delete fOutputs;
        }
    
        virtual bool init(const char* name, dsp* DSP)
        {
            __android_log_print(ANDROID_LOG_ERROR, "Faust", "init");
            fDSP = DSP;
            oboe::AudioStreamBuilder builder;
            
            // Possibly set SR
            if (fSampleRate != -1) {
                builder.setSampleRate(fSampleRate);
            }
            
            if (fDSP->getNumInputs() > 0) {
                if (builder.setDirection(oboe::Direction::Input)
                    ->setFormat(oboe::AudioFormat::Float)
                    ->setChannelCount(fDSP->getNumInputs())
                    ->setPerformanceMode(oboe::PerformanceMode::LowLatency)
                    ->setSharingMode(oboe::SharingMode::Exclusive)
                    ->openManagedStream(fInputStream) != oboe::Result::OK) return false;
                // Allocate the stream adapter
                fInputs = new AudioChannels(4096, fDSP->getNumInputs());
                // Keep the input SR
                fSampleRate = fInputStream->getSampleRate();
            } else {
                fInputs = nullptr;
            }
            
            if (fDSP->getNumOutputs() > 0) {
                
                // Common setup
                builder.setDirection(oboe::Direction::Output)
                    ->setCallback(this)
                    ->setFormat(oboe::AudioFormat::Float)
                    ->setChannelCount(fDSP->getNumOutputs())
                    ->setPerformanceMode(oboe::PerformanceMode::LowLatency)
                    ->setSharingMode(oboe::SharingMode::Exclusive);
                
                // If fSampleRate was given at initialisation time, or has been set when opening the input
                if (fSampleRate != -1) {
                    // Force output to use the same SR as input, and possibly setup resampler
                    if (builder.setSampleRate(fSampleRate)
                        ->setSampleRateConversionQuality(oboe::SampleRateConversionQuality::Fastest)
                        ->openManagedStream(fOutputStream) != oboe::Result::OK) return false;
                } else {
                    // Open with the native SR
                    if (builder.openManagedStream(fOutputStream) != oboe::Result::OK) return false;
                }
                
                // Allocate the stream adapter
                fOutputs = new AudioChannels(4096, fDSP->getNumOutputs());
                // Keep the output SR
                fSampleRate = fOutputStream->getSampleRate();
            } else {
                fOutputs = nullptr;
            }
            
            // Init with the stream SR
            fDSP->init(fSampleRate);
            __android_log_print(ANDROID_LOG_ERROR, "Faust", "init fSampleRate %d", fSampleRate);
            return true;
        }
    
        virtual bool start()
        {
            // Start output first
            if (fDSP->getNumOutputs() > 0) {
                if (fOutputStream->requestStart() != oboe::Result::OK) return false;
            }
            if (fDSP->getNumInputs() > 0) {
                if (fInputStream->requestStart() != oboe::Result::OK) return false;
            }
            return true;
        }
        
        virtual void stop()
        {
            // Stop output first (since the output stream calls the onAudioReady callback)
            if (fDSP->getNumOutputs() > 0) {
                fOutputStream->requestStop();
                fOutputStream->close();
            }
            if (fDSP->getNumInputs() > 0) {
                fInputStream->requestStop();
                fInputStream->close();
            }
        }
    
        virtual int getBufferSize()
        {
            return fBufferSize;
        }
        
        virtual int getSampleRate()
        {
            return fSampleRate;
        }
        
        virtual int getNumInputs()
        {
            return fDSP->getNumInputs();
        }
        
        virtual int getNumOutputs()
        {
            return fDSP->getNumOutputs();
        }
    
        // Returns the average proportion of available CPU being spent inside the audio callbacks (between 0 and 1.0).
        float getCPULoad()
        {
            float sum = 0.f;
            for (int i = 0; i < CPU_TABLE_SIZE; i++) {
                sum += fCPUTable[i];
            }
            return (sum/float(CPU_TABLE_SIZE))/(1000000.f*float(fBufferSize)/float(fSampleRate));
        }

};

#endif
/**************************  END  oboe-dsp.h **************************/
#elif ALSA_DRIVER
/************************** BEGIN alsa-dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __alsa_dsp__
#define __alsa_dsp__

#include <stdio.h>
#include <pthread.h>
#include <sys/types.h>
#include <pwd.h>
#include <limits.h>

#include <alsa/asoundlib.h>

/**
DEFAULT ALSA PARAMETERS CONTROLLED BY ENVIRONMENT VARIABLES

Some default parameters of Faust's ALSA applications are controlled by the following environment variables :

    FAUST2ALSA_DEVICE   = "hw:0"
    FAUST2ALSA_FREQUENCY= 44100
    FAUST2ALSA_BUFFER   = 512
    FAUST2ALSA_PERIODS  = 2
*/

// handle 32/64 bits int size issues

#ifdef __x86_64__

#define uint32	unsigned int
#define uint64	unsigned long int

#define int32	int
#define int64	long int

#else

#define uint32	unsigned int
#define uint64	unsigned long long int

#define int32	int
#define int64	long long int
#endif

// check 32/64 bits issues are correctly handled

#define check_error(err) if (err) { printf("%s:%d, alsa error %d : %s\n", __FILE__, __LINE__, err, snd_strerror(err)); exit(1); }
#define check_error_msg(err,msg) if (err) { fprintf(stderr, "%s:%d, %s : %s(%d)\n", __FILE__, __LINE__, msg, snd_strerror(err), err); exit(1); }
#define display_error_msg(err,msg) if (err) { fprintf(stderr, "%s:%d, %s : %s(%d)\n", __FILE__, __LINE__, msg, snd_strerror(err), err); }

/**
 * Used to set the priority and scheduling of the audi#include <sys/types.h>
       #include <pwd.h>
o thread
 */
static bool setRealtimePriority()
{
    struct passwd*          pw;
    int                     err;
    uid_t                   uid;
    struct sched_param      param;

    uid = getuid ();
    pw = getpwnam ("root");
    err = setuid (pw->pw_uid);
	if (err==0) {
    	param.sched_priority = 50; /* 0 to 99  */
    	err = sched_setscheduler(0, SCHED_RR, &param);
    	err = setuid (uid);
	}
    return (err != -1);
}

/******************************************************************************
*******************************************************************************

								AUDIO INTERFACE

*******************************************************************************
*******************************************************************************/

enum { kRead = 1, kWrite = 2, kReadWrite = 3 };

/**
 * A convenient class to pass parameters to AudioInterface
 */
struct AudioParam
{
 	const char*		fCardName;
	unsigned int	fFrequency;
	unsigned int	fBuffering;
	unsigned int	fPeriods;

	unsigned int	fSoftInputs;
	unsigned int	fSoftOutputs;

 	AudioParam() :
		fCardName("hw:0"),
		fFrequency(44100),
		fBuffering(512),
		fPeriods(2),
		fSoftInputs(2),
		fSoftOutputs(2)
	{}

	AudioParam&	cardName(const char* n)	{ fCardName = n; 		return *this; }
	AudioParam&	frequency(int f)		{ fFrequency = f; 		return *this; }
	AudioParam&	buffering(int fpb)		{ fBuffering = fpb; 	return *this; }
	AudioParam&	periods(int p)			{ fPeriods = p; 		return *this; }
	AudioParam&	inputs(int n)			{ fSoftInputs = n; 		return *this; }
	AudioParam&	outputs(int n)			{ fSoftOutputs = n; 	return *this; }
};

/**
 * An ALSA audio interface
 */
struct AudioInterface : public AudioParam
{

    snd_pcm_t*				fOutputDevice;
	snd_pcm_t*				fInputDevice;
	snd_pcm_hw_params_t* 	fInputParams;
	snd_pcm_hw_params_t* 	fOutputParams;

	snd_pcm_format_t 		fSampleFormat;
	snd_pcm_access_t 		fSampleAccess;

	unsigned int			fCardInputs;
	unsigned int			fCardOutputs;

	unsigned int			fChanInputs;
	unsigned int			fChanOutputs;

	bool					fDuplexMode;

	// interleaved mode audiocard buffers
	void*		fInputCardBuffer;
	void*		fOutputCardBuffer;

	// non interleaved mode audiocard buffers
	void*		fInputCardChannels[256];
	void*		fOutputCardChannels[256];

	// non interleaved mod, floating point software buffers
	float*		fInputSoftChannels[256];
	float*		fOutputSoftChannels[256];

	const char*	cardName()				{ return fCardName;  	}
 	int			frequency()				{ return fFrequency; 	}
	int			buffering()				{ return fBuffering;  	}
	int			periods()				{ return fPeriods;  	}

	float**		inputSoftChannels()		{ return fInputSoftChannels;	}
	float**		outputSoftChannels()	{ return fOutputSoftChannels;	}

	bool		duplexMode()			{ return fDuplexMode; }

	AudioInterface(const AudioParam& ap = AudioParam()) : AudioParam(ap)
	{

		fInputDevice 			= 0;
		fOutputDevice 			= 0;
		fInputParams			= 0;
		fOutputParams			= 0;
	}

	/**
	 * Open the audio interface
	 */
	void open()
	{
		int err;

		// try to open output device, quit if fail to open output device
		err = snd_pcm_open(&fOutputDevice, fCardName, SND_PCM_STREAM_PLAYBACK, 0); check_error(err)

		// setup output device parameters
		err = snd_pcm_hw_params_malloc(&fOutputParams); check_error(err)
		setAudioParams(fOutputDevice, fOutputParams);

		fCardOutputs = fSoftOutputs;
		snd_pcm_hw_params_set_channels_near(fOutputDevice, fOutputParams, &fCardOutputs);
		err = snd_pcm_hw_params(fOutputDevice, fOutputParams); check_error(err);

		// allocate alsa output buffers
		if (fSampleAccess == SND_PCM_ACCESS_RW_INTERLEAVED) {
			fOutputCardBuffer = calloc(interleavedBufferSize(fOutputParams), 1);
		} else {
			for (unsigned int i = 0; i < fCardOutputs; i++) {
				fOutputCardChannels[i] = calloc(noninterleavedBufferSize(fOutputParams), 1);
			}
        }

		// check for duplex mode (if we need and have an input device)
		if (fSoftInputs == 0) {
			fDuplexMode = false;
			fCardInputs = 0;
		} else {
			// try to open input device
			err = snd_pcm_open(&fInputDevice, fCardName,SND_PCM_STREAM_CAPTURE, 0);
			if (err == 0) {
				fDuplexMode = true;
			} else {
				printf("Warning : no input device");
				fDuplexMode = false;
				fCardInputs = 0;
			}
		}

		if (fDuplexMode) {

			// we have and need an input device
			// set the number of physical inputs close to what we need
			err = snd_pcm_hw_params_malloc(&fInputParams); check_error(err);
			setAudioParams(fInputDevice, fInputParams);
			fCardInputs = fSoftInputs;
			snd_pcm_hw_params_set_channels_near(fInputDevice, fInputParams, &fCardInputs);
            err = snd_pcm_hw_params(fInputDevice, fInputParams); check_error(err);

			// allocation of alsa buffers
			if (fSampleAccess == SND_PCM_ACCESS_RW_INTERLEAVED) {
				fInputCardBuffer = calloc(interleavedBufferSize(fInputParams), 1);
			} else {
				for (unsigned int i = 0; i < fCardInputs; i++) {
					fInputCardChannels[i] = calloc(noninterleavedBufferSize(fInputParams), 1);
				}
			}
        }

		printf("inputs : %u, outputs : %u\n", fCardInputs, fCardOutputs);

		// allocation of floating point buffers needed by the dsp code

		fChanInputs = max(fSoftInputs, fCardInputs);		assert (fChanInputs < 256);
		fChanOutputs = max(fSoftOutputs, fCardOutputs);		assert (fChanOutputs < 256);

		for (unsigned int i = 0; i < fChanInputs; i++) {
			fInputSoftChannels[i] = (float*)calloc(fBuffering, sizeof(float));
			for (unsigned int j = 0; j < fBuffering; j++) {
				fInputSoftChannels[i][j] = 0.0;
			}
		}

		for (unsigned int i = 0; i < fChanOutputs; i++) {
			fOutputSoftChannels[i] = (float*)calloc(fBuffering, sizeof(float));
			for (unsigned int j = 0; j < fBuffering; j++) {
				fOutputSoftChannels[i][j] = 0.0;
			}
		}
	}

	void setAudioParams(snd_pcm_t* stream, snd_pcm_hw_params_t* params)
	{
		int	err;

		// set params record with initial values
		err = snd_pcm_hw_params_any(stream, params);
		check_error_msg(err, "unable to init parameters")

		// set alsa access mode (and fSampleAccess field) either to non interleaved or interleaved

		err = snd_pcm_hw_params_set_access(stream, params, SND_PCM_ACCESS_RW_NONINTERLEAVED);
		if (err) {
			err = snd_pcm_hw_params_set_access(stream, params, SND_PCM_ACCESS_RW_INTERLEAVED);
			check_error_msg(err, "unable to set access mode neither to non-interleaved or to interleaved");
		}
		snd_pcm_hw_params_get_access(params, &fSampleAccess);

		// search for 32-bits or 16-bits format
		err = snd_pcm_hw_params_set_format(stream, params, SND_PCM_FORMAT_S32);
		if (err) {
			err = snd_pcm_hw_params_set_format(stream, params, SND_PCM_FORMAT_S16);
		 	check_error_msg(err, "unable to set format to either 32-bits or 16-bits");
		}
		snd_pcm_hw_params_get_format(params, &fSampleFormat);
		// set sample frequency
		snd_pcm_hw_params_set_rate_near(stream, params, &fFrequency, 0);

		// set period and period size (buffering)
		err = snd_pcm_hw_params_set_period_size(stream, params, fBuffering, 0);
		check_error_msg(err, "period size not available");

		err = snd_pcm_hw_params_set_periods(stream, params, fPeriods, 0);
		check_error_msg(err, "number of periods not available");
	}

	ssize_t interleavedBufferSize(snd_pcm_hw_params_t* params)
	{
		_snd_pcm_format 	format;  	snd_pcm_hw_params_get_format(params, &format);
		snd_pcm_uframes_t 	psize;		snd_pcm_hw_params_get_period_size(params, &psize, NULL);
		unsigned int 		channels; 	snd_pcm_hw_params_get_channels(params, &channels);
		ssize_t bsize = snd_pcm_format_size(format, psize * channels);
		return bsize;
	}

	ssize_t noninterleavedBufferSize(snd_pcm_hw_params_t* params)
	{
		_snd_pcm_format 	format;  	snd_pcm_hw_params_get_format(params, &format);
		snd_pcm_uframes_t 	psize;		snd_pcm_hw_params_get_period_size(params, &psize, NULL);
		ssize_t bsize = snd_pcm_format_size(format, psize);
		return bsize;
	}

	void close()
	{}

	/**
	 * Read audio samples from the audio card. Convert samples to floats and take
	 * care of interleaved buffers
	 */
	void read()
	{
        if (fSampleAccess == SND_PCM_ACCESS_RW_INTERLEAVED) {

			int count = snd_pcm_readi(fInputDevice, fInputCardBuffer, fBuffering);
			if (count < 0) {
				 //display_error_msg(count, "reading samples");
				 snd_pcm_prepare(fInputDevice);
				 //check_error_msg(err, "preparing input stream");
			}

			if (fSampleFormat == SND_PCM_FORMAT_S16) {
				short* buffer16b = (short*)fInputCardBuffer;
				for (unsigned int s = 0; s < fBuffering; s++) {
					for (unsigned int c = 0; c < fCardInputs; c++) {
						fInputSoftChannels[c][s] = float(buffer16b[c + s*fCardInputs])*(1.0/float(SHRT_MAX));
					}
				}
			} else if (fSampleFormat == SND_PCM_FORMAT_S32) {
				int32* buffer32b = (int32*)fInputCardBuffer;
				for (unsigned int s = 0; s < fBuffering; s++) {
					for (unsigned int c = 0; c < fCardInputs; c++) {
						fInputSoftChannels[c][s] = float(buffer32b[c + s*fCardInputs])*(1.0/float(INT_MAX));
					}
				}
			} else {
				printf("unrecognized input sample format : %u\n", fSampleFormat);
				exit(1);
			}

		} else if (fSampleAccess == SND_PCM_ACCESS_RW_NONINTERLEAVED) {

			int count = snd_pcm_readn(fInputDevice, fInputCardChannels, fBuffering);
			if (count < 0) {
				 //display_error_msg(count, "reading samples");
				 snd_pcm_prepare(fInputDevice);
				 //check_error_msg(err, "preparing input stream");
			}

			if (fSampleFormat == SND_PCM_FORMAT_S16) {
				for (unsigned int c = 0; c < fCardInputs; c++) {
					short* chan16b = (short*)fInputCardChannels[c];
					for (unsigned int s = 0; s < fBuffering; s++) {
						fInputSoftChannels[c][s] = float(chan16b[s])*(1.0/float(SHRT_MAX));
					}
				}
			} else if (fSampleFormat == SND_PCM_FORMAT_S32) {
				for (unsigned int c = 0; c < fCardInputs; c++) {
					int32* chan32b = (int32*)fInputCardChannels[c];
					for (unsigned int s = 0; s < fBuffering; s++) {
						fInputSoftChannels[c][s] = float(chan32b[s])*(1.0/float(INT_MAX));
					}
				}
			} else {
				printf("unrecognized input sample format : %u\n", fSampleFormat);
				exit(1);
			}

		} else {
			check_error_msg(-10000, "unknown access mode");
		}
    }

	/**
	 * write the output soft channels to the audio card. Convert sample
	 * format and interleaves buffers when needed
	 */
	void write()
	{
		recovery :

		if (fSampleAccess == SND_PCM_ACCESS_RW_INTERLEAVED) {

			if (fSampleFormat == SND_PCM_FORMAT_S16) {
				short* buffer16b = (short*)fOutputCardBuffer;
				for (unsigned int f = 0; f < fBuffering; f++) {
					for (unsigned int c = 0; c < fCardOutputs; c++) {
						float x = fOutputSoftChannels[c][f];
						buffer16b[c + f*fCardOutputs] = short(max(min(x,1.0f),-1.0f) * float(SHRT_MAX)) ;
					}
				}

			} else if (fSampleFormat == SND_PCM_FORMAT_S32)  {
				int32* buffer32b = (int32*)fOutputCardBuffer;
				for (unsigned int f = 0; f < fBuffering; f++) {
					for (unsigned int c = 0; c < fCardOutputs; c++) {
						float x = fOutputSoftChannels[c][f];
						buffer32b[c + f*fCardOutputs] = int(max(min(x,1.0f),-1.0f) * float(INT_MAX));
					}
				}
			} else {
				printf("unrecognized output sample format : %u\n", fSampleFormat);
				exit(1);
			}

			int count = snd_pcm_writei(fOutputDevice, fOutputCardBuffer, fBuffering);
			if (count<0) {
				//display_error_msg(count, "w3");
				snd_pcm_prepare(fOutputDevice);
				//check_error_msg(err, "preparing output stream");
				goto recovery;
			}


		} else if (fSampleAccess == SND_PCM_ACCESS_RW_NONINTERLEAVED) {

			if (fSampleFormat == SND_PCM_FORMAT_S16) {

				for (unsigned int c = 0; c < fCardOutputs; c++) {
					short* chan16b = (short*)fOutputCardChannels[c];
					for (unsigned int f = 0; f < fBuffering; f++) {
						float x = fOutputSoftChannels[c][f];
						chan16b[f] = short(max(min(x,1.0f),-1.0f) * float(SHRT_MAX));
					}
				}

			} else if (fSampleFormat == SND_PCM_FORMAT_S32) {

				for (unsigned int c = 0; c < fCardOutputs; c++) {
					int32* chan32b = (int32*)fOutputCardChannels[c];
					for (unsigned int f = 0; f < fBuffering; f++) {
						float x = fOutputSoftChannels[c][f];
						chan32b[f] = int(max(min(x,1.0f),-1.0f) * float(INT_MAX));
					}
				}

			} else {
				printf("unrecognized output sample format : %u\n", fSampleFormat);
				exit(1);
			}

			int count = snd_pcm_writen(fOutputDevice, fOutputCardChannels, fBuffering);
			if (count < 0) {
				//display_error_msg(count, "w3");
				snd_pcm_prepare(fOutputDevice);
				//check_error_msg(err, "preparing output stream");
				goto recovery;
			}

		} else {
			check_error_msg(-10000, "unknown access mode");
		}
	}

	/**
	 *  print short information on the audio device
	 */
	void shortinfo()
	{
		int						err;
		snd_ctl_card_info_t*	card_info;
    	snd_ctl_t*				ctl_handle;
		err = snd_ctl_open(&ctl_handle, fCardName, 0); check_error(err);
		snd_ctl_card_info_alloca(&card_info);
		err = snd_ctl_card_info(ctl_handle, card_info);	check_error(err);
		printf("%s|%d|%d|%d|%d|%s\n",
				snd_ctl_card_info_get_driver(card_info),
				fCardInputs, fCardOutputs,
				fFrequency, fBuffering,
				snd_pcm_format_name((_snd_pcm_format)fSampleFormat));
	}

	/**
	 *  print more detailled information on the audio device
	 */
	void longinfo()
	{
		int						err;
		snd_ctl_card_info_t*	card_info;
    	snd_ctl_t*				ctl_handle;

		printf("Audio Interface Description :\n");
		printf("Sampling Frequency : %d, Sample Format : %s, buffering : %d\n",
				fFrequency, snd_pcm_format_name((_snd_pcm_format)fSampleFormat), fBuffering);
		printf("Software inputs : %2d, Software outputs : %2d\n", fSoftInputs, fSoftOutputs);
		printf("Hardware inputs : %2d, Hardware outputs : %2d\n", fCardInputs, fCardOutputs);
		printf("Channel inputs  : %2d, Channel outputs  : %2d\n", fChanInputs, fChanOutputs);

		// affichage des infos de la carte
		err = snd_ctl_open(&ctl_handle, fCardName, 0); check_error(err);
		snd_ctl_card_info_alloca(&card_info);
		err = snd_ctl_card_info(ctl_handle, card_info); check_error(err);
		printCardInfo(card_info);

		// affichage des infos liees aux streams d'entree-sortie
		if (fSoftInputs > 0)	printHWParams(fInputParams);
		if (fSoftOutputs > 0)	printHWParams(fOutputParams);
	}

	void printCardInfo(snd_ctl_card_info_t*	ci)
	{
		printf("Card info (address : %p)\n", ci);
		printf("\tID         = %s\n", snd_ctl_card_info_get_id(ci));
		printf("\tDriver     = %s\n", snd_ctl_card_info_get_driver(ci));
		printf("\tName       = %s\n", snd_ctl_card_info_get_name(ci));
		printf("\tLongName   = %s\n", snd_ctl_card_info_get_longname(ci));
		printf("\tMixerName  = %s\n", snd_ctl_card_info_get_mixername(ci));
		printf("\tComponents = %s\n", snd_ctl_card_info_get_components(ci));
		printf("--------------\n");
	}

	void printHWParams(snd_pcm_hw_params_t* params)
	{
		printf("HW Params info (address : %p)\n", params);
#if 0
		printf("\tChannels    = %d\n", snd_pcm_hw_params_get_channels(params));
		printf("\tFormat      = %s\n", snd_pcm_format_name((_snd_pcm_format)snd_pcm_hw_params_get_format(params)));
		printf("\tAccess      = %s\n", snd_pcm_access_name((_snd_pcm_access)snd_pcm_hw_params_get_access(params)));
		printf("\tRate        = %d\n", snd_pcm_hw_params_get_rate(params, NULL));
		printf("\tPeriods     = %d\n", snd_pcm_hw_params_get_periods(params, NULL));
		printf("\tPeriod size = %d\n", (int)snd_pcm_hw_params_get_period_size(params, NULL));
		printf("\tPeriod time = %d\n", snd_pcm_hw_params_get_period_time(params, NULL));
		printf("\tBuffer size = %d\n", (int)snd_pcm_hw_params_get_buffer_size(params));
		printf("\tBuffer time = %d\n", snd_pcm_hw_params_get_buffer_time(params, NULL));
#endif
		printf("--------------\n");
	}
    
    int getNumInputs() { return fCardInputs; }
    int getNumOutputs() { return fCardOutputs; }

};

/**
 * Return the value of an environment variable or defval if undefined.
 */
static int getDefaultEnv(const char* name, int defval)
{
    const char* str = getenv(name);
    if (str) {
        return atoi(str);
    } else {
        return defval;
    }
}

/**
 * Return the value of an environment variable or defval if undefined.
 */
static const char* getDefaultEnv(const char* name, const char* defval)
{
    const char* str = getenv(name);
    if (str) {
        return str;
    } else {
        return defval;
    }
}

/******************************************************************************
*******************************************************************************

							   ALSA audio interface

*******************************************************************************
*******************************************************************************/
static void* __run(void* ptr);

class alsaaudio : public audio
{
	AudioInterface*	fAudio;
	dsp* 			fDSP;
	pthread_t 		fAudioThread;
	bool 			fRunning;

 public:

    alsaaudio(int argc, char* argv[], dsp* DSP) : fDSP(DSP), fRunning(false)
    {
        if (isopt(argv, "-help") || isopt(argv, "-h")) {
            std::cout << "prog [--device|-d <device> (default \"hw:0\")] [--frequency|-f <f> (default 44100)] [--buffer|-b <bs> (default 512)] [--periods|-p <n> (default 2)]\n";
            exit(1);
        }
        fAudio = new AudioInterface(AudioParam().cardName(lopts1(argc, argv, "--device", "-d", getDefaultEnv("FAUST2ALSA_DEVICE", "hw:0")))
            .frequency(lopt1(argc, argv, "--frequency", "-f", getDefaultEnv("FAUST2ALSA_FREQUENCY", 44100)))
            .buffering(lopt1(argc, argv, "--buffer", "-b", getDefaultEnv("FAUST2ALSA_BUFFER", 512)))
            .periods(lopt1(argc, argv, "--periods", "-p", getDefaultEnv("FAUST2ALSA_PERIODS", 2)))
            .inputs(DSP->getNumInputs())
            .outputs(DSP->getNumOutputs()));
    }
    
    alsaaudio(int srate, int bsize) : fDSP(0), fRunning(false)
    {
        fAudio = new AudioInterface(AudioParam().cardName("hw:0")
                                    .frequency(srate)
                                    .buffering(bsize)
                                    .periods(2));
    }

	virtual ~alsaaudio() { stop(); delete fAudio; }

	virtual bool init(const char* /*name*/, dsp* DSP)
    {
        fDSP = DSP;
        fAudio->inputs(DSP->getNumInputs());
        fAudio->outputs(DSP->getNumOutputs());
		fAudio->open();
	    DSP->init(fAudio->frequency());
 		return true;
	}

    virtual bool start()
    {
        fRunning = true;
        if (pthread_create(&fAudioThread, 0, __run, this)) {
            fRunning = false;
        }
        return fRunning;
    }

    virtual void stop()
    {
        if (fRunning) {
            fRunning = false;
            pthread_join(fAudioThread, 0);
        }
    }
    
    virtual int getBufferSize() { return fAudio->buffering(); }
    virtual int getSampleRate() { return fAudio->frequency(); }

	virtual void run()
    {
		bool rt = setRealtimePriority();
		printf(rt ? "RT : ":"NRT: "); fAudio->shortinfo();
        AVOIDDENORMALS;
		if (fAudio->duplexMode()) {
            fAudio->write();
			fAudio->write();
			while (fRunning) {
				fAudio->read();
				fDSP->compute(fAudio->buffering(), fAudio->inputSoftChannels(), fAudio->outputSoftChannels());
				fAudio->write();
			}
        } else {
            fAudio->write();
			while (fRunning) {
				fDSP->compute(fAudio->buffering(), fAudio->inputSoftChannels(), fAudio->outputSoftChannels());
				fAudio->write();
			}
		}
	}
    
    virtual int getNumInputs() { return fAudio->getNumInputs(); }
    virtual int getNumOutputs() { return fAudio->getNumOutputs(); }

};

void* __run (void* ptr)
{
	alsaaudio * alsa = (alsaaudio*)ptr;
	alsa->run();
	return 0;
}

#endif

/********************END ARCHITECTURE SECTION (part 2/2)****************/

/**************************  END  alsa-dsp.h **************************/
#elif JACK_DRIVER
/************************** BEGIN jack-dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __jack_dsp__
#define __jack_dsp__

#include <stdio.h>
#include <cstdlib>
#include <list>
#include <vector>
#include <string.h>
#include <jack/jack.h>

/************************** BEGIN jack-midi.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __jack_midi__
#define __jack_midi__

#include <iostream>
#include <cstdlib>

#include <jack/jack.h>
#include <jack/midiport.h>


class MapUI;

//-----------------------------------------------
// MIDI input/output handling using JACK library
//-----------------------------------------------

class jack_midi_handler : public midi_handler {
        
    protected:

        ringbuffer_t* fOutBuffer;
        jack_port_t* fInputMidiPort;    // JACK input MIDI port
        jack_port_t* fOutputMidiPort;   // JACK output MIDI port

        bool initPorts(jack_client_t* client)
        {
            fInputMidiPort = jack_port_register(client, "midi_in_1", JACK_DEFAULT_MIDI_TYPE, JackPortIsInput, 0);
            fOutputMidiPort = jack_port_register(client, "midi_out_1", JACK_DEFAULT_MIDI_TYPE, JackPortIsOutput, 0);
            return fInputMidiPort && fOutputMidiPort;
        }
    
        void writeMessage(double date, unsigned char* buffer, size_t size)
        {
            size_t res;
            DatedMessage dated_message(date, buffer, size);
            if ((res = ringbuffer_write(fOutBuffer, (const char*)&dated_message, sizeof(DatedMessage))) != sizeof(DatedMessage)) {
                std::cerr << "ringbuffer_write error DatedMessage" << std::endl;
            }
        }

        void processMidiInBuffer(void* port_buf_in)
        {
            for (size_t i = 0; i < jack_midi_get_event_count(port_buf_in); ++i) {
                jack_midi_event_t event;
                if (jack_midi_event_get(&event, port_buf_in, i) == 0) {

                    size_t nBytes = event.size;
                    int type = (int)event.buffer[0] & 0xf0;
                    int channel = (int)event.buffer[0] & 0x0f;
                    double time = event.time; // Timestamp in frames

                    // MIDI sync
                    if (nBytes == 1) {
                        handleSync(time, (int)event.buffer[0]);
                    } else if (nBytes == 2) {
                        handleData1(time, type, channel, (int)event.buffer[1]);
                    } else if (nBytes == 3) {
                        handleData2(time, type, channel, (int)event.buffer[1], (int)event.buffer[2]);
                    } else {
                        std::vector<unsigned char> message(event.buffer, event.buffer + event.size);
                        handleMessage(time, type, message);
                    }
                }
            }
        }
    
        virtual void processMidiIn(jack_nframes_t nframes)
        {
            // MIDI input
            processMidiInBuffer(jack_port_get_buffer(fInputMidiPort, nframes));
        }

        void processMidiOutBuffer(void* port_buf_out_aux, bool reset = false)
        {
            // MIDI output
            unsigned char* port_buf_out = (unsigned char*)port_buf_out_aux;
            if (reset) {
                /*
                // 08/03/2019: "jack_midi_reset_buffer" is not official in JACK, so we deactivate the code.
                jack_midi_reset_buffer(port_buf_out);
                */
            } else {
                jack_midi_clear_buffer(port_buf_out);
            }
           
            // Write each message one by one
            DatedMessage dated_message;
            while (ringbuffer_read(fOutBuffer, (char*)&dated_message, sizeof(DatedMessage)) == sizeof(DatedMessage)) {
                jack_midi_data_t* data = jack_midi_event_reserve(port_buf_out, dated_message.fDate, dated_message.fSize);
                if (data) {
                    memcpy(data, dated_message.fBuffer, dated_message.fSize);
                } else {
                    std::cerr << "jack_midi_event_reserve error" << std::endl;
                }
            }
        }
    
        virtual void processMidiOut(jack_nframes_t nframes)
        {
            // MIDI output
            processMidiOutBuffer(jack_port_get_buffer(fOutputMidiPort, nframes));
        }

    public:

        jack_midi_handler(const std::string& name = "JACKHandler")
            :midi_handler(name), fInputMidiPort(nullptr), fOutputMidiPort(nullptr)
        {
            fOutBuffer = ringbuffer_create(8192);
        }
        virtual ~jack_midi_handler()
        {
            ringbuffer_free(fOutBuffer);
        }
    
        // To be used in polling mode
        int recvMessages(std::vector<MIDIMessage>* messages)
        {
            int count = 0;
            jack_nframes_t first_time_stamp = 0;
            void* port_buf_in = jack_port_get_buffer(fInputMidiPort, 1024);
            for (size_t i = 0; i < jack_midi_get_event_count(port_buf_in); ++i) {
                jack_midi_event_t event;
                if (jack_midi_event_get(&event, port_buf_in, i) == 0) {
                    // Small messages
                    if (event.size <= 3) {
                        if (count == 0) first_time_stamp = event.time;
                        MIDIMessage& mes = messages->at(count++);
                        mes.frameIndex = (uint32_t)(event.time - first_time_stamp);
                        mes.byte0 = event.buffer[0];
                        mes.byte1 = event.buffer[1];
                        mes.byte2 = event.buffer[2];
                    } else {
                        std::cerr << "recvMessages : long messages (" << event.size << ") are not supported yet\n";
                    }
                }
            }
            return count;
        }
    
        void sendMessages(std::vector<MIDIMessage>* messages, int count)
        {
            for (int i = 0; i < count; ++i) {
                MIDIMessage message = (*messages)[i];
                unsigned char buffer[3]
                    = { static_cast<unsigned char>(message.byte0),
                        static_cast<unsigned char>(message.byte1),
                        static_cast<unsigned char>(message.byte2) };
                writeMessage(0, buffer, 3);
            }
        }
    
        // MIDI output API
        MapUI* keyOn(int channel, int pitch, int velocity)
        {
            unsigned char buffer[3]
                = { static_cast<unsigned char>(MIDI_NOTE_ON + channel),
                    static_cast<unsigned char>(pitch),
                    static_cast<unsigned char>(velocity) };
            writeMessage(0, buffer, 3);
            return 0;
        }

        void keyOff(int channel, int pitch, int velocity)
        {
            unsigned char buffer[3]
                = { static_cast<unsigned char>(MIDI_NOTE_OFF + channel),
                    static_cast<unsigned char>(pitch),
                    static_cast<unsigned char>(velocity) };
            writeMessage(0, buffer, 3);
        }

        void ctrlChange(int channel, int ctrl, int val)
        {
            unsigned char buffer[3]
                = { static_cast<unsigned char>(MIDI_CONTROL_CHANGE + channel),
                    static_cast<unsigned char>(ctrl),
                    static_cast<unsigned char>(val) };
            writeMessage(0, buffer, 3);
        }

        void chanPress(int channel, int press)
        {
            unsigned char buffer[2]
                = { static_cast<unsigned char>(MIDI_AFTERTOUCH + channel),
                    static_cast<unsigned char>(press) };
            writeMessage(0, buffer, 2);
        }

        void progChange(int channel, int pgm)
        {
            unsigned char buffer[2]
                = { static_cast<unsigned char>(MIDI_PROGRAM_CHANGE + channel),
                    static_cast<unsigned char>(pgm) };
            writeMessage(0, buffer, 2);
        }

        void keyPress(int channel, int pitch, int press)
        {
            unsigned char buffer[3]
                = { static_cast<unsigned char>(MIDI_POLY_AFTERTOUCH + channel),
                    static_cast<unsigned char>(pitch),
                    static_cast<unsigned char>(press) };
            writeMessage(0, buffer, 3);
        }

        void pitchWheel(int channel, int wheel)
        {
            unsigned char buffer[3]
                = { static_cast<unsigned char>(MIDI_PITCH_BEND + channel),
                    static_cast<unsigned char>(wheel & 0x7F),
                    static_cast<unsigned char>((wheel >> 7) & 0x7F) };
            writeMessage(0, buffer, 3);
        }

        void ctrlChange14bits(int channel, int ctrl, int value) {}

        void startSync(double date)
        {
            unsigned char buffer[1] = { MIDI_START };
            writeMessage(date, buffer, 1);
        }
  
        void stopSync(double date)
        {
            unsigned char buffer[1] = { MIDI_STOP };
            writeMessage(date, buffer, 1);
        }

        void clock(double date)
        {
            unsigned char buffer[1] = { MIDI_CLOCK };
            writeMessage(date, buffer, 1);
        }
    
        void sysEx(double date, std::vector<unsigned char>& message)
        {
            writeMessage(date, message.data(), (int)message.size());
        }

};

#endif
/**************************  END  jack-midi.h **************************/

#if defined(_WIN32) && !defined(__MINGW32__)
#define snprintf _snprintf_s
#endif

/******************************************************************************
 *******************************************************************************
 
 JACK AUDIO INTERFACE
 
 *******************************************************************************
 *******************************************************************************/

class jackaudio : public audio {
    
    protected:
        
        dsp* fDSP;              // FAUST DSP
        jack_client_t* fClient; // JACK client
        
        std::vector<jack_port_t*> fInputPorts;   // JACK input ports
        std::vector<jack_port_t*> fOutputPorts;  // JACK output ports
        
        std::vector<char*> fPhysicalInputs;
        std::vector<char*> fPhysicalOutputs;
        
        bool fAutoConnect;  // autoconnect with system in/out ports
        
        std::list<std::pair<std::string, std::string> > fConnections;   // Connections list
        
        static int _jack_srate(jack_nframes_t nframes, void* arg)
        {
            fprintf(stdout, "The sample rate is now %u/sec\n", nframes);
            return 0;
        }
        
        static void _jack_shutdown(void* arg)
        {}
        
        static void _jack_info_shutdown(jack_status_t code, const char* reason, void* arg)
        {
            fprintf(stderr, "%s\n", reason);
            static_cast<jackaudio*>(arg)->shutdown(reason);
        }
        
        static int _jack_process(jack_nframes_t nframes, void* arg)
        {
            return static_cast<jackaudio*>(arg)->process(nframes);
        }
        
        static int _jack_buffersize(jack_nframes_t nframes, void* arg)
        {
            fprintf(stdout, "The buffer size is now %u/sec\n", nframes);
            return 0;
        }
        
    #ifdef _OPENMP
        static void* _jack_thread(void* arg)
        {
            jackaudio* audio = (jackaudio*)arg;
            audio->process_thread();
            return 0;
        }
    #endif
        
        void shutdown(const char* message)
        {
            fClient = nullptr;
            
            if (fShutdown) {
                fShutdown(message, fShutdownArg);
            } else {
                exit(1); // By default
            }
        }
        
        // Save client connections
        virtual bool saveConnections()
        {
            if (fClient) {
                fConnections.clear();
                
                for (size_t i = 0; i < fInputPorts.size(); i++) {
                    const char** connected_port = jack_port_get_all_connections(fClient, fInputPorts[i]);
                    if (connected_port != nullptr) {
                        for (int port = 0; connected_port[port]; port++) {
                            fConnections.push_back(std::make_pair(connected_port[port], jack_port_name(fInputPorts[i])));
                            // printf("INPUT %s ==> %s\n", connected_port[port], jack_port_name(fInputPorts[i]));
                        }
                        jack_free(connected_port);
                    }
                }
                
                for (size_t i = 0; i < fOutputPorts.size(); i++) {
                    const char** connected_port = jack_port_get_all_connections(fClient, fOutputPorts[i]);
                    if (connected_port != nullptr) {
                        for (int port = 0; connected_port[port]; port++) {
                            fConnections.push_back(std::make_pair(jack_port_name(fOutputPorts[i]), connected_port[port]));
                            // printf("OUTPUT %s ==> %s\n", jack_port_name(fOutputPorts[i]), connected_port[port]);
                        }
                        jack_free(connected_port);
                    }
                }
                return true;
            } else {
                fprintf(stdout, "Client no more running...\n");
                return false;
            }
        }
        
        // Load client connections
        void loadConnections()
        {
            std::list<std::pair<std::string, std::string> >::const_iterator it;
            for (it = fConnections.begin(); it != fConnections.end(); it++) {
                std::pair<std::string, std::string> connection = *it;
                jack_connect(fClient, connection.first.c_str(), connection.second.c_str());
            }
        }
        
    #ifdef _OPENMP
        void process_thread()
        {
            jack_nframes_t nframes;
            while (1) {
                nframes = jack_cycle_wait(fClient);
                process(nframes);
                jack_cycle_signal(fClient, 0);
            }
        }
    #endif
        
        // JACK callbacks
        virtual int	process(jack_nframes_t nframes)
        {
            AVOIDDENORMALS;
            
            // Retrieve JACK inputs/output audio buffers
            float** fInChannel = (float**)alloca(fInputPorts.size() * sizeof(float*));
            for (size_t i = 0; i < fInputPorts.size(); i++) {
                fInChannel[i] = (float*)jack_port_get_buffer(fInputPorts[i], nframes);
            }
            
            float** fOutChannel = (float**)alloca(fOutputPorts.size() * sizeof(float*));
            for (size_t i = 0; i < fOutputPorts.size(); i++) {
                fOutChannel[i] = (float*)jack_port_get_buffer(fOutputPorts[i], nframes);
            }
            
            fDSP->compute(nframes, reinterpret_cast<FAUSTFLOAT**>(fInChannel), reinterpret_cast<FAUSTFLOAT**>(fOutChannel));
            
            runControlCallbacks();
            return 0;
        }
        
    public:
        
        jackaudio(bool auto_connect = true)
        : fDSP(0), fClient(0), fAutoConnect(auto_connect)
        {}
        
        virtual ~jackaudio()
        {
            if (fClient) {
                stop();
                
                for (size_t i = 0; i < fInputPorts.size(); i++) {
                    jack_port_unregister(fClient, fInputPorts[i]);
                }
                for (size_t i = 0; i < fOutputPorts.size(); i++) {
                    jack_port_unregister(fClient, fOutputPorts[i]);
                }
                jack_client_close(fClient);
            }
        }
        
        virtual bool init(const char* name, dsp* dsp)
        {
            if (initAux(name)) {
                if (dsp) { setDsp(dsp); }
                return true;
            } else {
                return false;
            }
        }
        
        bool initAux(const char* name)
        {
            if ((fClient = jack_client_open(name, JackNullOption, nullptr)) == 0) {
                fprintf(stderr, "JACK server not running ?\n");
                return false;
            }
            
    #ifdef _OPENMP
            jack_set_process_thread(fClient, _jack_thread, this);
    #else
            jack_set_process_callback(fClient, _jack_process, this);
    #endif
            
            jack_set_sample_rate_callback(fClient, _jack_srate, this);
            jack_set_buffer_size_callback(fClient, _jack_buffersize, this);
            jack_on_info_shutdown(fClient, _jack_info_shutdown, this);
            
            // Get Physical inputs
            int inputs = 0;
            char** physicalInPorts = (char**)jack_get_ports(fClient, nullptr, JACK_DEFAULT_AUDIO_TYPE, JackPortIsPhysical|JackPortIsOutput);
            if (physicalInPorts != nullptr) {
                while (physicalInPorts[inputs]) {
                    fPhysicalInputs.push_back(physicalInPorts[inputs]);
                    printf("physical input %s\n", physicalInPorts[inputs]);
                    inputs++;
                }
                jack_free(physicalInPorts);
            }
            
            // Get Physical outputs
            int outputs = 0;
            char** physicalOutPorts = (char**)jack_get_ports(fClient, nullptr, JACK_DEFAULT_AUDIO_TYPE, JackPortIsPhysical|JackPortIsInput);
            if (physicalOutPorts != nullptr) {
                while (physicalOutPorts[outputs]) {
                    fPhysicalOutputs.push_back(physicalOutPorts[outputs]);
                    printf("physical output %s\n", physicalOutPorts[outputs]);
                    outputs++;
                }
                jack_free(physicalOutPorts);
            }
            
            return true;
        }
        
        virtual bool start()
        {
            if (jack_activate(fClient)) {
                fprintf(stderr, "Cannot activate client\n");
                return false;
            }
            
            if (fConnections.size() > 0) {
                loadConnections();
            } else if (fAutoConnect) {
                defaultConnections();
            }
            
            return true;
        }
        
        virtual void stop()
        {
            if (fClient) {
                saveConnections();
                jack_deactivate(fClient);
            }
        }
        
        virtual int getBufferSize() { return jack_get_buffer_size(fClient); }
        virtual int getSampleRate() { return jack_get_sample_rate(fClient); }
        
        virtual int getNumInputs()
        {
            return fPhysicalInputs.size();
        }
        
        virtual int getNumOutputs()
        {
            return fPhysicalOutputs.size();
        }
        
        // Additional public API
        
        jack_client_t* getClient() { return fClient; }
        
        // Connect to physical inputs/outputs
        void defaultConnections()
        {
            // To avoid feedback at launch time, don't connect hardware inputs
            /*
             for (int i = 0; i < fInputPorts.size() && i < fPhysicalOutputs.size(); i++) {
                jack_connect(fClient, fPhysicalInputs[i], jack_port_name(fInputPorts[i]));
             }
             */
            for (size_t i = 0; i < fOutputPorts.size() && i < fPhysicalInputs.size(); i++) {
                jack_connect(fClient, jack_port_name(fOutputPorts[i]), fPhysicalOutputs[i]);
            }
        }
        
        virtual void setDsp(dsp* dsp)
        {
            fDSP = dsp;
            for (int i = 0; i < fDSP->getNumInputs(); i++) {
                char buf[256];
                snprintf(buf, 256, "in_%d", i);
                fInputPorts.push_back(jack_port_register(fClient, buf, JACK_DEFAULT_AUDIO_TYPE, JackPortIsInput, 0));
            }
            for (int i = 0; i < fDSP->getNumOutputs(); i++) {
                char buf[256];
                snprintf(buf, 256, "out_%d", i);
                fOutputPorts.push_back(jack_port_register(fClient, buf, JACK_DEFAULT_AUDIO_TYPE, JackPortIsOutput, 0));
            }
            fDSP->init(jack_get_sample_rate(fClient));
        }
        
        void connect(jackaudio* driver, int src, int dst, bool reverse)
        {
            if (driver) {
                // Connection between drivers
                jack_port_t* src_port = getOutputPort(src);
                jack_port_t* dst_port = driver->getInputPort(src);
                if (src_port && dst_port) {
                    jack_connect(fClient, jack_port_name(src_port), jack_port_name(dst_port));
                }
            } else if (reverse) {
                // Connection to physical input
                if ((size_t)src > fPhysicalInputs.size()) return;
                jack_port_t* dst_port = getInputPort(dst);
                if (dst_port) {
                    jack_connect(fClient, fPhysicalInputs[src], jack_port_name(dst_port));
                }
            } else {
                // Connection to physical output
                if ((size_t)dst > fPhysicalOutputs.size()) return;
                jack_port_t* src_port = getOutputPort(src);
                if (src_port) {
                    jack_connect(fClient, jack_port_name(src_port), fPhysicalOutputs[dst]);
                }
            }
        }
        
        void disconnect(jackaudio* driver, int src, int dst, bool reverse)
        {
            if (driver) {
                // Connection between drivers
                jack_port_t* src_port = getOutputPort(src);
                jack_port_t* dst_port = driver->getInputPort(src);
                if (src_port && dst_port) {
                    jack_disconnect(fClient, jack_port_name(src_port), jack_port_name(dst_port));
                }
            } else if (reverse) {
                // Connection to physical input
                if ((size_t)src > fPhysicalInputs.size()) return;
                jack_port_t* dst_port = getInputPort(dst);
                if (dst_port) {
                    jack_disconnect(fClient, fPhysicalInputs[src], jack_port_name(dst_port));
                }
            } else {
                // Connection to physical output
                if ((size_t)dst > fPhysicalOutputs.size()) return;
                jack_port_t* src_port = getOutputPort(src);
                if (src_port) {
                    jack_disconnect(fClient, jack_port_name(src_port), fPhysicalOutputs[dst]);
                }
            }
        }
        
        bool isConnected(jackaudio* driver, int src, int dst, bool reverse)
        {
            if (driver) {
                // Connection between drivers
                jack_port_t* src_port = getOutputPort(src);
                jack_port_t* dst_port = driver->getInputPort(src);
                if (src_port && dst_port) {
                    return jack_port_connected_to(src_port, jack_port_name(dst_port));
                } else {
                    return false;
                }
            } else if (reverse) {
                // Connection to physical input
                if ((size_t)src > fPhysicalInputs.size()) return false;
                jack_port_t* dst_port = getInputPort(dst);
                if (dst_port) {
                    return jack_port_connected_to(dst_port, fPhysicalInputs[src]);
                } else {
                    return false;
                }
            } else {
                // Connection to physical output
                if ((size_t)dst > fPhysicalOutputs.size()) return false;
                jack_port_t* src_port = getOutputPort(src);
                if (src_port) {
                    return jack_port_connected_to(src_port, fPhysicalOutputs[dst]);
                } else {
                    return false;
                }
            }
        }
        
        jack_port_t* getInputPort(int port)  { return (port >= 0 && port < (int)fInputPorts.size()) ? fInputPorts[port] : nullptr; }
        jack_port_t* getOutputPort(int port) { return (port >= 0 && port < (int)fOutputPorts.size()) ? fOutputPorts[port] : nullptr; }
        
};

// Add JACK MIDI

class jackaudio_midi : public jackaudio, public jack_midi_handler {
        
    protected:
    
        bool fPolling;
    
        virtual bool saveConnections()
        {
            if (jackaudio::saveConnections()) { // Audio connections can be saved, so try MIDI
                
                if (fInputMidiPort) {
                    const char** connected_port = jack_port_get_all_connections(fClient, fInputMidiPort);
                    if (connected_port != nullptr) {
                        for (int port = 0; connected_port[port]; port++) {
                            fConnections.push_back(std::make_pair(connected_port[port], jack_port_name(fInputMidiPort)));
                            // printf("INPUT %s ==> %s\n", connected_port[port], jack_port_name(fInputPorts[i]));
                        }
                        jack_free(connected_port);
                    }
                }
                
                if (fOutputMidiPort) {
                    const char** connected_port = jack_port_get_all_connections(fClient, fOutputMidiPort);
                    if (connected_port != nullptr) {
                        for (int port = 0; connected_port[port]; port++) {
                            fConnections.push_back(std::make_pair(jack_port_name(fOutputMidiPort), connected_port[port]));
                            // printf("OUTPUT %s ==> %s\n", jack_port_name(fOutputPorts[i]), connected_port[port]);
                        }
                        jack_free(connected_port);
                    }
                }
                return true;
                
            } else {
                return false;
            }
        }
    
        virtual void processAudio(jack_nframes_t nframes)
        {
            // Audio
            AVOIDDENORMALS;
            
            // Retrieve JACK inputs/output audio buffers
            float** fInChannel = (float**)alloca(fInputPorts.size() * sizeof(float*));
            for (size_t i = 0; i < fInputPorts.size(); i++) {
                fInChannel[i] = (float*)jack_port_get_buffer(fInputPorts[i], nframes);
            }
            
            float** fOutChannel = (float**)alloca(fOutputPorts.size() * sizeof(float*));
            for (size_t i = 0; i < fOutputPorts.size(); i++) {
                fOutChannel[i] = (float*)jack_port_get_buffer(fOutputPorts[i], nframes);
            }
            
            // By convention timestamp of -1 means 'no timestamp conversion' : events already have a timestamp espressed in frames
            fDSP->compute(-1, nframes, reinterpret_cast<FAUSTFLOAT**>(fInChannel), reinterpret_cast<FAUSTFLOAT**>(fOutChannel));
        }
    
        virtual int process(jack_nframes_t nframes)
        {
            // MIDI in
            if (!fPolling) processMidiIn(nframes);
            
            // Audio
            processAudio(nframes);
            
            // MIDI out
            processMidiOut(nframes);
            
            runControlCallbacks();
            return 0;
        }
        
    public:
        
        jackaudio_midi(bool auto_connect = true, bool is_polling = false)
        :jackaudio(auto_connect), jack_midi_handler("JACKMidi"), fPolling(is_polling)
        {}
        
        virtual ~jackaudio_midi()
        {}
        
        virtual bool init(const char* name, dsp* dsp)
        {
            if (jackaudio::initAux(name)) {
                if (dsp) { setDsp(dsp); }
                return initPorts(fClient);
            } else {
                return false;
            }
        }
        
        virtual bool start()
        {
            return jackaudio::start();
        }
        
        virtual void stop()
        {
            jackaudio::stop();
        }
    
};

#endif
/**************************  END  jack-dsp.h **************************/
#elif PORTAUDIO_DRIVER
/************************** BEGIN portaudio-dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __portaudio_dsp__
#define __portaudio_dsp__

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <portaudio.h>


static bool pa_error(int err)
{
    if (err != paNoError) {
        printf("PortAudio error: %s\n", Pa_GetErrorText(err));
        return true;
    } else {
        return false;
    }
}

/******************************************************************************
 *******************************************************************************
 
 PORT AUDIO INTERFACE
 
 *******************************************************************************
 *******************************************************************************/

class portaudio : public audio {
    
    protected:
        
        dsp* fDsp;
        PaStream* fAudioStream;
        long fSampleRate;
        long fBufferSize;
        PaStreamParameters fInputParameters;
        PaStreamParameters fOutputParameters;
        
        //----------------------------------------------------------------------------
        // 	Number of physical input and output channels of the PA device
        //----------------------------------------------------------------------------
        int	fDevNumInChans;
        int	fDevNumOutChans;
        
        static int audioCallback(const void* ibuf, void* obuf, unsigned long frames, const PaStreamCallbackTimeInfo* time, PaStreamCallbackFlags, void* drv)
        {
            return static_cast<portaudio*>(drv)->processAudio(time->currentTime, 
                                                            (float**)ibuf, 
                                                            static_cast<float**>(obuf), 
                                                            frames);
        }
        
        virtual int processAudio(PaTime current_time, float** ibuf, float** obuf, unsigned long frames) 
        {
            // Cleanup hardware outputs that are not used by DSP
            for (int i = fDsp->getNumOutputs(); i < fDevNumOutChans; i++) {
                memset(obuf[i], 0, sizeof(FAUSTFLOAT) * fBufferSize);
            }
            
            // Process samples
            fDsp->compute(current_time * 1000000., frames, ibuf, obuf);
            return paContinue;
        }
        
    public:
        
        portaudio(long srate, long bsize) : 
                fDsp(0), fAudioStream(0),
                fSampleRate(srate), fBufferSize(bsize), 
                fDevNumInChans(0), fDevNumOutChans(0) {}
                
        virtual ~portaudio() 
        {   
            if (fAudioStream) {
                pa_error(Pa_StopStream(fAudioStream));
                pa_error(Pa_CloseStream(fAudioStream));
                fAudioStream = 0;
            }
            // Note that Pa_Initialize handled multiple times calls and 
            // must be matched with a corresponding call to Pa_Terminate
            Pa_Terminate();
        }
        
        virtual bool init(const char* name, dsp* DSP)
        {
            if (init(name, DSP->getNumInputs(), DSP->getNumOutputs())) {
                setDsp(DSP);
                return true;
            } else {
                return false;
            }
        }
        
        bool init(const char* /*name*/, int numInputs, int numOutputs)
        {         
            // Note that Pa_Initialize handled multiple times calls and 
            // must be matched with a corresponding call to Pa_Terminate
            if (pa_error(Pa_Initialize())) {
                return false;
            }
            
            const PaDeviceInfo*	idev = Pa_GetDeviceInfo(Pa_GetDefaultInputDevice());
            const PaDeviceInfo*	odev = Pa_GetDeviceInfo(Pa_GetDefaultOutputDevice());
            
            printf("DEVICE = %p || %p\n", idev, odev);
            
            //In case there is no audio device, the function fails
            
            if (idev == NULL) {
                fDevNumInChans = 0;
            } else {
                fDevNumInChans = idev->maxInputChannels;
                fInputParameters.device = Pa_GetDefaultInputDevice();
                fInputParameters.sampleFormat = paFloat32 | paNonInterleaved;
                fInputParameters.channelCount = fDevNumInChans;
                fInputParameters.hostApiSpecificStreamInfo = 0;
            }
            
            if (odev == NULL) {
                fDevNumOutChans = 0;
            } else{
                fDevNumOutChans = odev->maxOutputChannels;
                fOutputParameters.device = Pa_GetDefaultOutputDevice();
                fOutputParameters.sampleFormat = paFloat32 | paNonInterleaved;;
                fOutputParameters.channelCount = fDevNumOutChans;
                fOutputParameters.hostApiSpecificStreamInfo = 0;
            }
            
            // A DSP that has only outputs or only inputs forces the presence of an output or input device
            if (numInputs == 0 && numOutputs != 0 && fDevNumOutChans == 0) {
                printf("Devices not adapted to DSP\n");
                return false;
            }
            
            if (numInputs != 0 && numOutputs == 0 && fDevNumInChans == 0) {
                printf("Devices not adapted to DSP\n");
                return false;
            }
            
            // If no device exists : the function fails
            PaError err;
            if ((err = Pa_IsFormatSupported(((fDevNumInChans > 0) ? &fInputParameters : 0),
                                            ((fDevNumOutChans > 0) ? &fOutputParameters : 0), fSampleRate)) != 0) {
                printf("stream format is not supported err = %d\n", err);
                return false;
            }
            
            if (pa_error(Pa_OpenStream(&fAudioStream, ((fDevNumInChans > 0) ? &fInputParameters : 0),
                                       ((fDevNumOutChans > 0) ? &fOutputParameters : 0), 
                                       fSampleRate, fBufferSize, paNoFlag, audioCallback, this))) {
                return false;
            }    
            
            return true;
        }
        
        void setDsp(dsp* DSP)
        {
            fDsp = DSP;
            if (fDsp->getNumInputs() > fDevNumInChans || fDsp->getNumOutputs() > fDevNumOutChans) {
                printf("DSP has %d inputs and %d outputs, physical inputs = %d physical outputs = %d \n", 
                       fDsp->getNumInputs(), fDsp->getNumOutputs(), 
                       fDevNumInChans, fDevNumOutChans);
                fDsp = new dsp_adapter(fDsp, fDevNumInChans, fDevNumOutChans, fBufferSize);
            }
            
            fDsp->init(fSampleRate);
        }
        
        virtual bool start() 
        {
            if (pa_error(Pa_StartStream(fAudioStream))) {
                return false;
            } else {
                return true;
            }
        }
        
        virtual void stop() 
        {
            if (fAudioStream) {
                pa_error(Pa_StopStream(fAudioStream));
            }
        }
        
        virtual int getBufferSize() 
        { 
            return fBufferSize; 
        }
        
        virtual int getSampleRate()
        { 
            return fSampleRate; 
        }
        
        virtual int getNumInputs()
        {
            return fDevNumInChans;
        }
        
        virtual int getNumOutputs()
        {
            return fDevNumOutChans;
        }
};

#endif
/**************************  END  portaudio-dsp.h **************************/
#elif RTAUDIO_DRIVER
/************************** BEGIN rtaudio-dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __rtaudio_dsp__
#define __rtaudio_dsp__

#include <stdio.h>
#include <assert.h>
#include <RtAudio.h>
#include <stdlib.h>


#define FORMAT RTAUDIO_FLOAT32

/******************************************************************************
 *******************************************************************************
 
 RTAUDIO INTERFACE
 
 *******************************************************************************
 *******************************************************************************/

class rtaudio : public audio {
    
    protected:
        
        dsp* fDsp;
        RtAudio fAudioDAC;
        unsigned int fSampleRate;
        unsigned int fBufferSize;
         
        //----------------------------------------------------------------------------
        // 	number of physical input and output channels of the PA device
        //----------------------------------------------------------------------------
        int	fDevNumInChans;
        int	fDevNumOutChans;
        
        virtual int processAudio(double streamTime, void* inbuf, void* outbuf, unsigned long frames) 
        {
            float* inputs[fDsp->getNumInputs()];
            float* outputs[fDsp->getNumOutputs()];
            
            for (int i = 0; i < fDsp->getNumInputs(); i++) {
                inputs[i] = &(static_cast<float*>(inbuf))[i * frames];
            }
            for (int i = 0; i < fDsp->getNumOutputs(); i++) {
                outputs[i] = &(static_cast<float*>(outbuf))[i * frames];
            }

            // process samples
            fDsp->compute(streamTime * 1000000., frames, inputs, outputs);
            return 0;
        }
    
        static int audioCallback(void* outputBuffer, void* inputBuffer, 
                                unsigned int nBufferFrames,
                                double streamTime, RtAudioStreamStatus status, 
                                void* drv)
        {
            return static_cast<rtaudio*>(drv)->processAudio(streamTime, inputBuffer, outputBuffer, nBufferFrames);
        }
      
    public:
        
        rtaudio(int srate, int bsize) : fDsp(0),
                fSampleRate(srate), fBufferSize(bsize), 
                fDevNumInChans(0), fDevNumOutChans(0) {}
            
        virtual ~rtaudio() 
        {   
            try {
                fAudioDAC.stopStream();
                fAudioDAC.closeStream();
            } catch (RtAudioError& e) {
                std::cout << '\n' << e.getMessage() << '\n' << std::endl;
            }
        }
        
        virtual bool init(const char* name, dsp* DSP)
        {
            if (init(name, DSP->getNumInputs(), DSP->getNumOutputs())) {
                setDsp(DSP);
                return true;
            } else {
                return false;
            }
        }
        
        bool init(const char* /*name*/, int numInputs, int numOutputs)
        {           
            if (fAudioDAC.getDeviceCount() < 1) {
                std::cout << "No audio devices found!\n";
                return false;
            }
            
            RtAudio::DeviceInfo info_in = fAudioDAC.getDeviceInfo(fAudioDAC.getDefaultInputDevice());
            RtAudio::DeviceInfo info_out = fAudioDAC.getDeviceInfo(fAudioDAC.getDefaultOutputDevice());
            RtAudio::StreamParameters iParams, oParams;
            
            iParams.deviceId = fAudioDAC.getDefaultInputDevice();
            fDevNumInChans = info_in.inputChannels;
            iParams.nChannels = fDevNumInChans;
            iParams.firstChannel = 0;
            
            oParams.deviceId = fAudioDAC.getDefaultOutputDevice();
            fDevNumOutChans = info_out.outputChannels;
            oParams.nChannels = fDevNumOutChans;
            oParams.firstChannel = 0;
            
            RtAudio::StreamOptions options;
            options.flags |= RTAUDIO_NONINTERLEAVED;
         
            try {
                fAudioDAC.openStream(((numOutputs > 0) ? &oParams : NULL), 
                    ((numInputs > 0) ? &iParams : NULL), FORMAT, 
                    fSampleRate, &fBufferSize, audioCallback, this, &options);
            } catch (RtAudioError& e) {
                std::cout << '\n' << e.getMessage() << '\n' << std::endl;
                return false;
            }
               
            return true;
        }
        
        void setDsp(dsp* DSP)
        {
            fDsp = DSP;
            
            if (fDsp->getNumInputs() > fDevNumInChans || fDsp->getNumOutputs() > fDevNumOutChans) {
                printf("DSP has %d inputs and %d outputs, physical inputs = %d physical outputs = %d \n", 
                       fDsp->getNumInputs(), fDsp->getNumOutputs(), 
                       fDevNumInChans, fDevNumOutChans);
                fDsp = new dsp_adapter(fDsp, fDevNumInChans, fDevNumOutChans, fBufferSize);
            }
            
            fDsp->init(fSampleRate);
        }
        
        virtual bool start() 
        {
            try {
                fAudioDAC.startStream();
            } catch (RtAudioError& e) {
                std::cout << '\n' << e.getMessage() << '\n' << std::endl;
                return false;
            }
            return true;
        }
        
        virtual void stop() 
        {
            try {
                fAudioDAC.stopStream();
            } catch (RtAudioError& e) {
                std::cout << '\n' << e.getMessage() << '\n' << std::endl;
            }
        }
        
        virtual int getBufferSize() 
        { 
            return fBufferSize; 
        }
        
        virtual int getSampleRate()
        { 
            return fSampleRate; 
        }
        
        virtual int getNumInputs()
        {
            return fDevNumInChans;
        }
        
        virtual int getNumOutputs()
        {
            return fDevNumOutChans;
        }
};

#endif
/**************************  END  rtaudio-dsp.h **************************/
#elif OPEN_FRAMEWORK_DRIVER
/************************** BEGIN ofaudio-dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __openframework__
#define __openframework__

#include "ofSoundStream.h"
#include "ofBaseTypes.h"


class ofaudio : public audio, public ofBaseSoundInput, public ofBaseSoundOutput {
    
    private:
    
        ofSoundStream fStream;
        float* fInBuffer;
        float** fNIInputs;
        float** fNIOutputs;
        int fSampleRate;
        int fBufferSize;
        dsp* fDSP;
    
    public:
    
        ofaudio(int srate, int bsize):fInBuffer(nullptr), fSampleRate(srate), fBufferSize(bsize) {}
        virtual ~ofaudio()
        {
            fStream.stop();
            fStream.close();
            
            for (int i = 0; i < fDSP->getNumInputs(); i++) {
                delete [] fNIInputs[i];
            }
            delete [] fNIInputs;
            
            for (int i = 0; i < fDSP->getNumOutputs(); i++) {
                delete [] fNIOutputs[i];
            }
            delete [] fNIOutputs;
        }
    
        void audioIn(float* input, int bufferSize, int nChannels)
        {
            // Keep the input buffer to be used in 'audioOut' for the same audio cycle
            fInBuffer = input;
        }
    
        void audioOut(float* output, int bufferSize, int nChannels)
        {
            // Deinterleave input (= fInBuffer)
            for (int chan = 0; chan < fDSP->getNumInputs(); chan++) {
                for (int frame = 0; frame < bufferSize; frame++) {
                    fNIInputs[chan][frame] = fInBuffer[chan + frame * fDSP->getNumInputs()];
                }
            }
            
            fDSP->compute(bufferSize, fNIInputs, fNIOutputs);
            
            // Interleave output
            for (int chan = 0; chan < fDSP->getNumOutputs(); chan++) {
                for (int frame = 0; frame < bufferSize; frame++) {
                    output[chan + frame * fDSP->getNumOutputs()] = fNIOutputs[chan][frame];
                }
            }
        }

        bool init(const char* name, dsp* dsp)
        {
            fDSP = dsp;
            
            //fStream.printDeviceList();
            
            fNIInputs = new float*[fDSP->getNumInputs()];
            for (int i = 0; i < fDSP->getNumInputs(); i++) {
                fNIInputs[i] = new float[4046];
            }
            fNIOutputs = new float*[fDSP->getNumOutputs()];
            for (int i = 0; i < fDSP->getNumOutputs(); i++) {
                fNIOutputs[i] = new float[4046];
            }
            
            if (fDSP->getNumInputs() > 0) {
                fStream.setInput(this);
            }
            if (fDSP->getNumOutputs() > 0) {
                fStream.setOutput(this);
            }
            
            fDSP->init(fSampleRate);
            return true;
        }
    
        bool start()
        {
            // 'setup' also starts the stream...
            return fStream.setup(fDSP->getNumOutputs(), fDSP->getNumInputs(), fSampleRate, fBufferSize, 1);
        }
    
        void stop()
        {
            fStream.stop();
        }
    
        int getBufferSize()
        {
            return fStream.getBufferSize();
        }
    
        int getSampleRate()
        {
            return fStream.getSampleRate();
        }

        int getNumInputs() { return fStream.getNumInputChannels(); }
        int getNumOutputs() { return fStream.getNumOutputChannels(); }

        float getCPULoad() { return 0.f; }
};
					
#endif
/**************************  END  ofaudio-dsp.h **************************/
#elif JUCE_DRIVER
/************************** BEGIN juce-dsp.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __juce_dsp__
#define __juce_dsp__

#include "../JuceLibraryCode/JuceHeader.h"


class juceaudio : public audio, private AudioAppComponent {
    
    private:
        
        dsp* fDSP;
    
        void prepareToPlay(int, double) override
        {
            const BigInteger activeInputChannels = deviceManager.getCurrentAudioDevice()->getActiveInputChannels();
            const BigInteger activeOutputChannels = deviceManager.getCurrentAudioDevice()->getActiveOutputChannels();
            const int maxInputChannels = activeInputChannels.getHighestBit() + 1;
            const int maxOutputChannels = activeOutputChannels.getHighestBit() + 1;
            
            // Possibly adapt DSP...
            if (fDSP->getNumInputs() > maxInputChannels || fDSP->getNumOutputs() > maxOutputChannels) {
                fDSP = new dsp_adapter(fDSP, maxInputChannels, maxOutputChannels, 4096);
            }
            
            fDSP->init(int(deviceManager.getCurrentAudioDevice()->getCurrentSampleRate()));
        }
        
        void releaseResources() override
        {}
        
        void getNextAudioBlock(const AudioSourceChannelInfo& bufferToFill) override
        {
            AVOIDDENORMALS;
            
            const float** inputs = (const float**)alloca(fDSP->getNumInputs() * sizeof(float));
            for (int i = 0; i < fDSP->getNumInputs(); i++) {
                inputs[i] = bufferToFill.buffer->getReadPointer(i, bufferToFill.startSample);
            }
            
            float** outputs = (float**)alloca(fDSP->getNumOutputs() * sizeof(float));
            for (int i = 0; i < fDSP->getNumOutputs(); i++) {
                outputs[i] = bufferToFill.buffer->getWritePointer(i, bufferToFill.startSample);
            }
            
            // MIDI timestamp is expressed in frames
            fDSP->compute(-1, bufferToFill.numSamples, (float**)inputs, outputs);
        }
    
    public:
    
        juceaudio() {}
        virtual ~juceaudio()
        {
            shutdownAudio();
        }
        
        bool init(const char* name, dsp* dsp) override
        {
            fDSP = dsp;
            return true;
        }
        
        bool start() override
        {
            setAudioChannels (fDSP->getNumInputs(), fDSP->getNumOutputs());
            prepareToPlay(0, 0); // Unused samplerate and buffersize, taken from deviceManager
            return true;
        }
        
        void stop() override
        {
            shutdownAudio();
        }
        
        int getBufferSize() override
        {
            return int(deviceManager.getCurrentAudioDevice()->getCurrentBufferSizeSamples());
        }
        
        int getSampleRate() override
        {
            return int(deviceManager.getCurrentAudioDevice()->getCurrentSampleRate());
        }
        
        int getNumInputs() override { return deviceManager.getCurrentAudioDevice()->getActiveInputChannels().toInteger(); }
        int getNumOutputs() override { return deviceManager.getCurrentAudioDevice()->getActiveOutputChannels().toInteger(); }
        
        float getCPULoad() override { return float(deviceManager.getCpuUsage()); }
};

#endif
/**************************  END  juce-dsp.h **************************/
#elif DUMMY_DRIVER
/************************** BEGIN dummy-audio.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __dummy_audio__
#define __dummy_audio__

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <limits.h>
#include <iostream>
#include <iomanip>

#ifdef USE_PTHREAD
#include <pthread.h>
#else
#include <thread>
#endif


#define BUFFER_TO_RENDER 10

class dummyaudio : public audio {
    
    private:
        
        dsp* fDSP;
        
        long fSampleRate;
        long fBufferSize;
        
        FAUSTFLOAT** fInChannel;
        FAUSTFLOAT** fOutChannel;
        
        int fNumInputs;
        int fNumOutputs;
        
        bool fRunning;
        
        int fRender;
        int fCount;
        int fSample;
        bool fManager;
        
    #ifdef USE_PTHREAD
        pthread_t fAudioThread;
        static void* run(void* ptr)
        {
            dummyaudio* audio = (dummyaudio*)ptr;
            try {
                audio->process();
            } catch (...) {}
            return 0;
        }
    #else
        static void run(dummyaudio* audio)
        {
            try {
                audio->process();
            } catch (...) {}
        }
        std::thread* fAudioThread = nullptr;
    #endif
        
        void process()
        {
            while (fRunning && (--fRender > 0)) {
                if (fSample > 0) { std::cout << "Render one buffer\n"; }
                render();
            }
            fRunning = false;
        }
        
    public:
        
        dummyaudio(int sr, int bs, int count = BUFFER_TO_RENDER, int sample = -1, bool manager = false)
        :fSampleRate(sr), fBufferSize(bs),
        fInChannel(nullptr), fOutChannel(nullptr),
        fNumInputs(-1), fNumOutputs(-1),
        fRender(0), fCount(count),
        fSample(sample), fManager(manager)
        {}
        
        dummyaudio(int count = BUFFER_TO_RENDER)
        :fSampleRate(48000), fBufferSize(512),
        fInChannel(nullptr), fOutChannel(nullptr),
        fNumInputs(-1), fNumOutputs(-1),
        fRender(0), fCount(count),
        fSample(512), fManager(false)
        {}
        
        virtual ~dummyaudio()
        {
            for (int i = 0; i < fNumInputs; i++) {
                delete[] fInChannel[i];
            }
            for (int i = 0; i < fNumOutputs; i++) {
                delete[] fOutChannel[i];
            }
            delete [] fInChannel;
            delete [] fOutChannel;
        }
        
        virtual bool init(const char* name, dsp* dsp)
        {
            fDSP = dsp;
            
            // To be used in destructor
            fNumInputs = fDSP->getNumInputs();
            fNumOutputs = fDSP->getNumOutputs();
            
            fInChannel = new FAUSTFLOAT*[fNumInputs];
            fOutChannel = new FAUSTFLOAT*[fNumOutputs];
            
            for (int i = 0; i < fNumInputs; i++) {
                fInChannel[i] = new FAUSTFLOAT[fBufferSize];
                memset(fInChannel[i], 0, sizeof(FAUSTFLOAT) * fBufferSize);
            }
            for (int i = 0; i < fNumOutputs; i++) {
                fOutChannel[i] = new FAUSTFLOAT[fBufferSize];
                memset(fOutChannel[i], 0, sizeof(FAUSTFLOAT) * fBufferSize);
            }
            
            if (fManager) {
                // classInit is called elsewhere with a custom memory manager
                fDSP->instanceInit(fSampleRate);
            } else {
                fDSP->init(fSampleRate);
            }
            
            return true;
        }
        
        virtual bool start()
        {
            fRender = fCount;
            fRunning = true;
            if (fCount == INT_MAX) {
            #ifdef USE_PTHREAD
                if (pthread_create(&fAudioThread, 0, run, this) != 0) {
                    fRunning = false;
                }
            #else
                fAudioThread = new std::thread (dummyaudio::run, this);
            #endif
                return fRunning;
            } else {
                process();
                return true;
            }
        }
        
        virtual void stop()
        {
            if (fRunning) {
                fRunning = false;
            #ifdef USE_PTHREAD
                pthread_join(fAudioThread, 0);
            #else
                fAudioThread->join();
                delete fAudioThread;
                fAudioThread = 0;
            #endif
            }
        }
        
        void render()
        {
            fDSP->compute(fBufferSize, fInChannel, fOutChannel);
            if (fNumInputs > 0) {
                for (int frame = 0; frame < fSample; frame++) {
                    std::cout << std::fixed << std::setprecision(6) << "sample in " << fInChannel[0][frame] << std::endl;
                }
            }
            if (fNumOutputs > 0) {
                for (int frame = 0; frame < fSample; frame++) {
                    std::cout << std::fixed << std::setprecision(6) << "sample out " << fOutChannel[0][frame] << std::endl;
                }
            }
        }
        
        virtual int getBufferSize() { return fBufferSize; }
        virtual int getSampleRate() { return fSampleRate; }
        
        virtual int getNumInputs() { return fNumInputs; }
        virtual int getNumOutputs() { return fNumOutputs; }
    
};

#endif
/**************************  END  dummy-audio.h **************************/
#endif

//**************************************************************
// Interface
//**************************************************************

#if MIDICTRL
#if JACK_DRIVER
    // Nothing to add since jack-dsp.h contains MIDI
#elif JUCE_DRIVER
/************************** BEGIN juce-midi.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __juce_midi__
#define __juce_midi__
 

class MapUI;

//-----------------------------------------------
// MIDI input/output handling using JUCE library
//-----------------------------------------------

class juce_midi_handler : public midi_handler {
    
    protected:
    
        MidiBuffer fOutputBuffer;
        CriticalSection fMutex;
    
        void decodeMessage(const MidiMessage& message)
        {
            const uint8* data = message.getRawData();
            int channel = message.getChannel() - 1; // which MIDI channel, 0-15
            double time = message.getTimeStamp();
            
            if (message.isNoteOff()) {
                handleKeyOff(time, channel, data[1], data[2]);
            } else if (message.isNoteOn()) {
                handleKeyOn(time, channel, data[1], data[2]);
            } else if (message.isAftertouch()) {
                handlePolyAfterTouch(time, channel, data[1], data[2]);
            } else if (message.isController()) {
                handleCtrlChange(time, channel, data[1], data[2]);
            } else if (message.isProgramChange()) {
                handleProgChange(time, channel, data[1]);
            } else if (message.isChannelPressure()) {
                handleAfterTouch(time, channel, data[1]);
            } else if (message.isPitchWheel()) {
                handlePitchWheel(time, channel, data[1], data[2]);
            } else if (message.isMidiClock()) {
                handleClock(time);
            // We can consider start and continue as identical messages.
            } else if (message.isMidiStart() || message.isMidiContinue()) {
                handleStart(time);
            } else if (message.isMidiStop()) {
                handleStop(time);
            } else if (message.isSysEx()) {
                std::vector<unsigned char> sysex(data, data + message.getRawDataSize());
                handleSysex(time, sysex);
            } else {
                std::cerr << "Unused MIDI message" << std::endl;
            }
        }
    
    public:
    
        juce_midi_handler():midi_handler("JUCE")
        {}
    
        virtual ~juce_midi_handler() {}
    
        // Used with MidiBuffer (containing several messages)
        void encodeBuffer(MidiBuffer& buffer)
        {
            const ScopedTryLock lock(fMutex);
            if (lock.isLocked()) {
                buffer.swapWith(fOutputBuffer);
                fOutputBuffer.clear();
            } else {
                std::cerr << "encodeBuffer fails..." << std::endl;
            }
        }
        
        void decodeBuffer(MidiBuffer& buffer)
        {
            MidiMessage msg;
            int ignore;
            for (MidiBuffer::Iterator it(buffer); it.getNextEvent(msg, ignore);) {
                decodeMessage(msg);
            }
            buffer.clear();
        }
    
        // MIDI output API
        MapUI* keyOn(int channel, int pitch, int velocity)
        {
            fOutputBuffer.addEvent(MidiMessage::noteOn(channel + 1, pitch, uint8(velocity)), 0);
            return nullptr;
        }
        
        void keyOff(int channel, int pitch, int velocity)
        {
            fOutputBuffer.addEvent(MidiMessage::noteOff(channel + 1, pitch, uint8(velocity)), 0);
        }
        
        void ctrlChange(int channel, int ctrl, int val)
        {
            fOutputBuffer.addEvent(MidiMessage::controllerEvent(channel + 1, ctrl, uint8(val)), 0);
        }
        
        void chanPress(int channel, int press)
        {
            fOutputBuffer.addEvent(MidiMessage::channelPressureChange(channel + 1, press), 0);
        }
        
        void progChange(int channel, int pgm)
        {
            fOutputBuffer.addEvent(MidiMessage::programChange(channel + 1, pgm), 0);
        }
        
        void keyPress(int channel, int pitch, int press)
        {
            fOutputBuffer.addEvent(MidiMessage::aftertouchChange(channel + 1, pitch, press), 0);
        }
        
        void pitchWheel(int channel, int wheel)
        {
            fOutputBuffer.addEvent(MidiMessage::pitchWheel(channel + 1, range(0, 16383, wheel)), 0);
        }
        
        void ctrlChange14bits(int channel, int ctrl, int value)
        {
            // TODO
        }
        
        void startSync(double date)
        {
            fOutputBuffer.addEvent(MidiMessage::midiStart(), 0);
        }
        
        void stopSync(double date)
        {
            fOutputBuffer.addEvent(MidiMessage::midiStop(), 0);
        }
        
        void clock(double date)
        {
            fOutputBuffer.addEvent(MidiMessage::midiClock(), 0);
        }
    
        void sysEx(double date, std::vector<unsigned char>& message)
        {
            fOutputBuffer.addEvent(MidiMessage(message.data(), (int)message.size()), 0);
        }

};

class juce_midi : public juce_midi_handler, public MidiInputCallback {

    private:
    
        std::unique_ptr<MidiInput> fMidiIn;
        std::unique_ptr<MidiOutput> fMidiOut;
    
        void handleIncomingMidiMessage(MidiInput*, const MidiMessage& message)
        {
            decodeMessage(message);
        }
    
    public:
    
        virtual ~juce_midi()
        {
            stopMidi();
        }
        
        bool startMidi()
        {
            if ((fMidiIn = MidiInput::openDevice(MidiInput::getDefaultDeviceIndex(), this)) == nullptr) {
                return false;
            }
            if ((fMidiOut = MidiOutput::openDevice(MidiOutput::getDefaultDeviceIndex())) == nullptr) {
                return false;
            }
            fMidiIn->start();
            return true;
        }
        
        void stopMidi()
        { 
            fMidiIn->stop();
        }
    
        // MIDI output API
        MapUI* keyOn(int channel, int pitch, int velocity)
        {
            fMidiOut->sendMessageNow(MidiMessage::noteOn(channel + 1, pitch, uint8(velocity)));
            return nullptr;
        }
        
        void keyOff(int channel, int pitch, int velocity) 
        {
            fMidiOut->sendMessageNow(MidiMessage::noteOff(channel + 1, pitch, uint8(velocity)));
        }
        
        void ctrlChange(int channel, int ctrl, int val) 
        {
            fMidiOut->sendMessageNow(MidiMessage::controllerEvent(channel + 1, ctrl, uint8(val)));
        }
        
        void chanPress(int channel, int press) 
        {
            fMidiOut->sendMessageNow(MidiMessage::channelPressureChange(channel + 1, press));
        }
        
        void progChange(int channel, int pgm) 
        {
            fMidiOut->sendMessageNow(MidiMessage::programChange(channel + 1, pgm));
        }
          
        void keyPress(int channel, int pitch, int press) 
        {
            fMidiOut->sendMessageNow(MidiMessage::aftertouchChange(channel + 1, pitch, press));
        }
   
        void pitchWheel(int channel, int wheel) 
        {
            fMidiOut->sendMessageNow(MidiMessage::pitchWheel(channel + 1, range(0, 16383, wheel)));
        }
        
        void ctrlChange14bits(int channel, int ctrl, int value)
        {
            // TODO
        }
    
        void startSync(double date) 
        {
            fMidiOut->sendMessageNow(MidiMessage::midiStart());
        }
       
        void stopSync(double date) 
        {
            fMidiOut->sendMessageNow(MidiMessage::midiStop());
        }
        
        void clock(double date) 
        {
            fMidiOut->sendMessageNow(MidiMessage::midiClock());
        }
    
        void sysEx(double date, std::vector<unsigned char>& message)
        {
            fMidiOut->sendMessageNow(MidiMessage(message.data(), (int)message.size()));
        }
    
};

#endif // __juce_midi__

/**************************  END  juce-midi.h **************************/
#else
/************************** BEGIN rt-midi.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/
 
#ifndef __rt_midi__
#define __rt_midi__ 
 
#include <iostream>
#include <cstdlib>
/************************** BEGIN RtMidi.h **************************/
/*
 File: CAHostTimeBase.h
 Abstract: Part of CoreAudio Utility Classes
 Version: 1.0.3
 
 Disclaimer: IMPORTANT:  This Apple software is supplied to you by Apple
 Inc. ("Apple") in consideration of your agreement to the following
 terms, and your use, installation, modification or redistribution of
 this Apple software constitutes acceptance of these terms.  If you do
 not agree with these terms, please do not use, install, modify or
 redistribute this Apple software.
 
 In consideration of your agreement to abide by the following terms, and
 subject to these terms, Apple grants you a personal, non-exclusive
 license, under Apple's copyrights in this original Apple software (the
 "Apple Software"), to use, reproduce, modify and redistribute the Apple
 Software, with or without modifications, in source and/or binary forms;
 provided that if you redistribute the Apple Software in its entirety and
 without modifications, you must retain this notice and the following
 text and disclaimers in all such redistributions of the Apple Software.
 Neither the name, trademarks, service marks or logos of Apple Inc. may
 be used to endorse or promote products derived from the Apple Software
 without specific prior written permission from Apple.  Except as
 expressly stated in this notice, no other rights or licenses, express or
 implied, are granted by Apple herein, including but not limited to any
 patent rights that may be infringed by your derivative works or by other
 works in which the Apple Software may be incorporated.
 
 The Apple Software is provided by Apple on an "AS IS" basis.  APPLE
 MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
 THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS
 FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND
 OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS.
 
 IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL
 OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION,
 MODIFICATION AND/OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED
 AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE),
 STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
 
 Copyright (C) 2013 Apple Inc. All Rights Reserved.
 */

#if !defined(__CAHostTimeBase_h__)
#define __CAHostTimeBase_h__

#ifdef __APPLE__

//=============================================================================
//	Includes
//=============================================================================

#if !defined(__COREAUDIO_USE_FLAT_INCLUDES__)
#include <CoreAudio/CoreAudioTypes.h>
#else
#include <CoreAudioTypes.h>
#endif

#if TARGET_OS_MAC
#include <mach/mach_time.h>
#elif TARGET_OS_WIN32
#include <windows.h>
#else
#error	Unsupported operating system
#endif

//=============================================================================
//	CAHostTimeBase
//
//	This class provides platform independent access to the host's time base.
//=============================================================================

class CAHostTimeBase
{
    
public:
    static UInt64	ConvertToNanos(UInt64 inHostTime);
    static UInt64	ConvertFromNanos(UInt64 inNanos);
    
    static UInt64	GetTheCurrentTime();
#if TARGET_OS_MAC
    static UInt64	GetCurrentTime() { return GetTheCurrentTime(); }
#endif
    static UInt64	GetCurrentTimeInNanos();
    
    static Float64	GetFrequency() { if(!sIsInited) { Initialize(); } return sFrequency; }
    static Float64	GetInverseFrequency() { if(!sIsInited) { Initialize(); } return sInverseFrequency; }
    static UInt32	GetMinimumDelta() { if(!sIsInited) { Initialize(); } return sMinDelta; }
    
    static UInt64	AbsoluteHostDeltaToNanos(UInt64 inStartTime, UInt64 inEndTime);
    static SInt64	HostDeltaToNanos(UInt64 inStartTime, UInt64 inEndTime);
    
    static void     Initialize();
    
private:
    
    static bool sIsInited;
    
    static Float64 sFrequency;
    static Float64 sInverseFrequency;
    static UInt32 sMinDelta;
    static UInt32 sToNanosNumerator;
    static UInt32 sToNanosDenominator;
    static UInt32 sFromNanosNumerator;
    static UInt32 sFromNanosDenominator;
    static bool sUseMicroseconds;
#if Track_Host_TimeBase
    static UInt64	sLastTime;
#endif
};

inline UInt64 CAHostTimeBase::GetTheCurrentTime()
{
    UInt64 theTime = 0;
    
#if TARGET_OS_MAC
    theTime = mach_absolute_time();
    
#elif TARGET_OS_WIN32
    LARGE_INTEGER theValue;
    QueryPerformanceCounter(&theValue);
    theTime = *((UInt64*)&theValue);
#endif
    
#if	Track_Host_TimeBase
    if(sLastTime != 0)
    {
        if(theTime <= sLastTime)
        {
            DebugMessageN2("CAHostTimeBase::GetTheCurrentTime: the current time is earlier than the last time, now: %qd, then: %qd", theTime, sLastTime);
        }
        sLastTime = theTime;
    }
    else
    {
        sLastTime = theTime;
    }
#endif
    
    return theTime;
}

inline UInt64 CAHostTimeBase::ConvertToNanos(UInt64 inHostTime)
{
    if(!sIsInited)
    {
        Initialize();
    }
    
    Float64 theNumerator = static_cast<Float64>(sToNanosNumerator);
    Float64 theDenominator = static_cast<Float64>(sToNanosDenominator);
    Float64 theHostTime = static_cast<Float64>(inHostTime);
    
    Float64 thePartialAnswer = theHostTime / theDenominator;
    Float64 theFloatAnswer = thePartialAnswer * theNumerator;
    UInt64 theAnswer = static_cast<UInt64>(theFloatAnswer);
    
    return theAnswer;
}

inline UInt64 CAHostTimeBase::ConvertFromNanos(UInt64 inNanos)
{
    if(!sIsInited)
    {
        Initialize();
    }
    
    Float64 theNumerator = static_cast<Float64>(sToNanosNumerator);
    Float64 theDenominator = static_cast<Float64>(sToNanosDenominator);
    Float64 theNanos = static_cast<Float64>(inNanos);
    
    Float64 thePartialAnswer = theNanos / theNumerator;
    Float64 theFloatAnswer = thePartialAnswer * theDenominator;
    UInt64 theAnswer = static_cast<UInt64>(theFloatAnswer);
    
    return theAnswer;
}

inline UInt64 CAHostTimeBase::GetCurrentTimeInNanos()
{
    return ConvertToNanos(GetTheCurrentTime());
}

inline UInt64 CAHostTimeBase::AbsoluteHostDeltaToNanos(UInt64 inStartTime, UInt64 inEndTime)
{
    UInt64 theAnswer;
    
    if(inStartTime <= inEndTime)
    {
        theAnswer = inEndTime - inStartTime;
    }
    else
    {
        theAnswer = inStartTime - inEndTime;
    }
    
    return ConvertToNanos(theAnswer);
}

inline SInt64 CAHostTimeBase::HostDeltaToNanos(UInt64 inStartTime, UInt64 inEndTime)
{
    SInt64 theAnswer;
    SInt64 theSign = 1;
    
    if(inStartTime <= inEndTime)
    {
        theAnswer = inEndTime - inStartTime;
    }
    else
    {
        theAnswer = inStartTime - inEndTime;
        theSign = -1;
    }
    
    return theSign * ConvertToNanos(theAnswer);
}

#endif // __APPLE__

#endif

/**********************************************************************/
/*! \class RtMidi
    \brief An abstract base class for realtime MIDI input/output.

    This class implements some common functionality for the realtime
    MIDI input/output subclasses RtMidiIn and RtMidiOut.

    RtMidi WWW site: http://music.mcgill.ca/~gary/rtmidi/

    RtMidi: realtime MIDI i/o C++ classes
    Copyright (c) 2003-2017 Gary P. Scavone

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    Any person wishing to distribute modifications to the Software is
    asked to send the modifications to the original developer so that
    they can be incorporated into the canonical version.  This is,
    however, not a binding provision of this license.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
    ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
    CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/**********************************************************************/

/*!
  \file RtMidi.h
 */

#ifndef RTMIDI_H
#define RTMIDI_H

#define RTMIDI_VERSION "3.0.0"

#include <exception>
#include <iostream>
#include <string>
#include <vector>

#if __APPLE__
#define __MACOSX_CORE__ 1
//#define __UNIX_JACK__ 1
#endif

#if __linux__
#define __LINUX_ALSA__ 1
#endif

#if _WIN32
#define __WINDOWS_MM__ 1
#endif


/************************************************************************/
/*! \class RtMidiError
    \brief Exception handling class for RtMidi.

    The RtMidiError class is quite simple but it does allow errors to be
    "caught" by RtMidiError::Type. See the RtMidi documentation to know
    which methods can throw an RtMidiError.
*/
/************************************************************************/

class RtMidiError : public std::exception
{
 public:
  //! Defined RtMidiError types.
  enum Type {
    WARNING,           /*!< A non-critical error. */
    DEBUG_WARNING,     /*!< A non-critical error which might be useful for debugging. */
    UNSPECIFIED,       /*!< The default, unspecified error type. */
    NO_DEVICES_FOUND,  /*!< No devices found on system. */
    INVALID_DEVICE,    /*!< An invalid device ID was specified. */
    MEMORY_ERROR,      /*!< An error occured during memory allocation. */
    INVALID_PARAMETER, /*!< An invalid parameter was specified to a function. */
    INVALID_USE,       /*!< The function was called incorrectly. */
    DRIVER_ERROR,      /*!< A system driver error occured. */
    SYSTEM_ERROR,      /*!< A system error occured. */
    THREAD_ERROR       /*!< A thread error occured. */
  };

  //! The constructor.
  RtMidiError( const std::string& message, Type type = RtMidiError::UNSPECIFIED ) throw() : message_(message), type_(type) {}
 
  //! The destructor.
  virtual ~RtMidiError( void ) throw() {}

  //! Prints thrown error message to stderr.
  virtual void printMessage( void ) const throw() { std::cerr << '\n' << message_ << "\n\n"; }

  //! Returns the thrown error message type.
  virtual const Type& getType(void) const throw() { return type_; }

  //! Returns the thrown error message string.
  virtual const std::string& getMessage(void) const throw() { return message_; }

  //! Returns the thrown error message as a c-style string.
  virtual const char* what( void ) const throw() { return message_.c_str(); }

 protected:
  std::string message_;
  Type type_;
};

//! RtMidi error callback function prototype.
/*!
    \param type Type of error.
    \param errorText Error description.

    Note that class behaviour is undefined after a critical error (not
    a warning) is reported.
 */
typedef void (*RtMidiErrorCallback)( RtMidiError::Type type, const std::string &errorText, void *userData );

class MidiApi;

class RtMidi
{
 public:

  //! MIDI API specifier arguments.
  enum Api {
    UNSPECIFIED,    /*!< Search for a working compiled API. */
    MACOSX_CORE,    /*!< Macintosh OS-X Core Midi API. */
    LINUX_ALSA,     /*!< The Advanced Linux Sound Architecture API. */
    UNIX_JACK,      /*!< The JACK Low-Latency MIDI Server API. */
    WINDOWS_MM,     /*!< The Microsoft Multimedia MIDI API. */
    RTMIDI_DUMMY    /*!< A compilable but non-functional API. */
  };

  //! A static function to determine the current RtMidi version.
  static std::string getVersion( void ) throw();

  //! A static function to determine the available compiled MIDI APIs.
  /*!
    The values returned in the std::vector can be compared against
    the enumerated list values.  Note that there can be more than one
    API compiled for certain operating systems.
  */
  static void getCompiledApi( std::vector<RtMidi::Api> &apis ) throw();

  //! Pure virtual openPort() function.
  virtual void openPort( unsigned int portNumber = 0, const std::string &portName = std::string( "RtMidi" ) ) = 0;

  //! Pure virtual openVirtualPort() function.
  virtual void openVirtualPort( const std::string &portName = std::string( "RtMidi" ) ) = 0;

  //! Pure virtual getPortCount() function.
  virtual unsigned int getPortCount() = 0;

  //! Pure virtual getPortName() function.
  virtual std::string getPortName( unsigned int portNumber = 0 ) = 0;

  //! Pure virtual closePort() function.
  virtual void closePort( void ) = 0;

  //! Returns true if a port is open and false if not.
  /*!
      Note that this only applies to connections made with the openPort()
      function, not to virtual ports.
  */
  virtual bool isPortOpen( void ) const = 0;

  //! Set an error callback function to be invoked when an error has occured.
  /*!
    The callback function will be called whenever an error has occured. It is best
    to set the error callback function before opening a port.
  */
  virtual void setErrorCallback( RtMidiErrorCallback errorCallback = NULL, void *userData = 0 ) = 0;

 protected:

  RtMidi();
  virtual ~RtMidi();

  MidiApi *rtapi_;
};

/**********************************************************************/
/*! \class RtMidiIn
    \brief A realtime MIDI input class.

    This class provides a common, platform-independent API for
    realtime MIDI input.  It allows access to a single MIDI input
    port.  Incoming MIDI messages are either saved to a queue for
    retrieval using the getMessage() function or immediately passed to
    a user-specified callback function.  Create multiple instances of
    this class to connect to more than one MIDI device at the same
    time.  With the OS-X, Linux ALSA, and JACK MIDI APIs, it is also
    possible to open a virtual input port to which other MIDI software
    clients can connect.

    by Gary P. Scavone, 2003-2017.
*/
/**********************************************************************/

// **************************************************************** //
//
// RtMidiIn and RtMidiOut class declarations.
//
// RtMidiIn / RtMidiOut are "controllers" used to select an available
// MIDI input or output interface.  They present common APIs for the
// user to call but all functionality is implemented by the classes
// MidiInApi, MidiOutApi and their subclasses.  RtMidiIn and RtMidiOut
// each create an instance of a MidiInApi or MidiOutApi subclass based
// on the user's API choice.  If no choice is made, they attempt to
// make a "logical" API selection.
//
// **************************************************************** //

class RtMidiIn : public RtMidi
{
 public:

  //! User callback function type definition.
  typedef void (*RtMidiCallback)( double timeStamp, std::vector<unsigned char> *message, void *userData);

  //! Default constructor that allows an optional api, client name and queue size.
  /*!
    An exception will be thrown if a MIDI system initialization
    error occurs.  The queue size defines the maximum number of
    messages that can be held in the MIDI queue (when not using a
    callback function).  If the queue size limit is reached,
    incoming messages will be ignored.

    If no API argument is specified and multiple API support has been
    compiled, the default order of use is ALSA, JACK (Linux) and CORE,
    JACK (OS-X).

    \param api        An optional API id can be specified.
    \param clientName An optional client name can be specified. This
                      will be used to group the ports that are created
                      by the application.
    \param queueSizeLimit An optional size of the MIDI input queue can be specified.
  */
  RtMidiIn( RtMidi::Api api=UNSPECIFIED,
            const std::string& clientName = "RtMidi Input Client",
            unsigned int queueSizeLimit = 100 );

  //! If a MIDI connection is still open, it will be closed by the destructor.
  ~RtMidiIn ( void ) throw();

  //! Returns the MIDI API specifier for the current instance of RtMidiIn.
  RtMidi::Api getCurrentApi( void ) throw();

  //! Open a MIDI input connection given by enumeration number.
  /*!
    \param portNumber An optional port number greater than 0 can be specified.
                      Otherwise, the default or first port found is opened.
    \param portName An optional name for the application port that is used to connect to portId can be specified.
  */
  void openPort( unsigned int portNumber = 0, const std::string &portName = std::string( "RtMidi Input" ) );

  //! Create a virtual input port, with optional name, to allow software connections (OS X, JACK and ALSA only).
  /*!
    This function creates a virtual MIDI input port to which other
    software applications can connect.  This type of functionality
    is currently only supported by the Macintosh OS-X, any JACK,
    and Linux ALSA APIs (the function returns an error for the other APIs).

    \param portName An optional name for the application port that is
                    used to connect to portId can be specified.
  */
  void openVirtualPort( const std::string &portName = std::string( "RtMidi Input" ) );

  //! Set a callback function to be invoked for incoming MIDI messages.
  /*!
    The callback function will be called whenever an incoming MIDI
    message is received.  While not absolutely necessary, it is best
    to set the callback function before opening a MIDI port to avoid
    leaving some messages in the queue.

    \param callback A callback function must be given.
    \param userData Optionally, a pointer to additional data can be
                    passed to the callback function whenever it is called.
  */
  void setCallback( RtMidiCallback callback, void *userData = 0 );

  //! Cancel use of the current callback function (if one exists).
  /*!
    Subsequent incoming MIDI messages will be written to the queue
    and can be retrieved with the \e getMessage function.
  */
  void cancelCallback();

  //! Close an open MIDI connection (if one exists).
  void closePort( void );

  //! Returns true if a port is open and false if not.
  /*!
      Note that this only applies to connections made with the openPort()
      function, not to virtual ports.
  */
  virtual bool isPortOpen() const;

  //! Return the number of available MIDI input ports.
  /*!
    \return This function returns the number of MIDI ports of the selected API.
  */
  unsigned int getPortCount();

  //! Return a string identifier for the specified MIDI input port number.
  /*!
    \return The name of the port with the given Id is returned.
    \retval An empty string is returned if an invalid port specifier
            is provided. User code should assume a UTF-8 encoding.
  */
  std::string getPortName( unsigned int portNumber = 0 );

  //! Specify whether certain MIDI message types should be queued or ignored during input.
  /*!
    By default, MIDI timing and active sensing messages are ignored
    during message input because of their relative high data rates.
    MIDI sysex messages are ignored by default as well.  Variable
    values of "true" imply that the respective message type will be
    ignored.
  */
  void ignoreTypes( bool midiSysex = true, bool midiTime = true, bool midiSense = true );

  //! Fill the user-provided vector with the data bytes for the next available MIDI message in the input queue and return the event delta-time in seconds.
  /*!
    This function returns immediately whether a new message is
    available or not.  A valid message is indicated by a non-zero
    vector size.  An exception is thrown if an error occurs during
    message retrieval or an input connection was not previously
    established.
  */
  double getMessage( std::vector<unsigned char> *message );

  //! Set an error callback function to be invoked when an error has occured.
  /*!
    The callback function will be called whenever an error has occured. It is best
    to set the error callback function before opening a port.
  */
  virtual void setErrorCallback( RtMidiErrorCallback errorCallback = NULL, void *userData = 0 );

 protected:
  void openMidiApi( RtMidi::Api api, const std::string &clientName, unsigned int queueSizeLimit );

};

/**********************************************************************/
/*! \class RtMidiOut
    \brief A realtime MIDI output class.

    This class provides a common, platform-independent API for MIDI
    output.  It allows one to probe available MIDI output ports, to
    connect to one such port, and to send MIDI bytes immediately over
    the connection.  Create multiple instances of this class to
    connect to more than one MIDI device at the same time.  With the
    OS-X, Linux ALSA and JACK MIDI APIs, it is also possible to open a
    virtual port to which other MIDI software clients can connect.

    by Gary P. Scavone, 2003-2017.
*/
/**********************************************************************/

class RtMidiOut : public RtMidi
{
 public:

  //! Default constructor that allows an optional client name.
  /*!
    An exception will be thrown if a MIDI system initialization error occurs.

    If no API argument is specified and multiple API support has been
    compiled, the default order of use is ALSA, JACK (Linux) and CORE,
    JACK (OS-X).
  */
  RtMidiOut( RtMidi::Api api=UNSPECIFIED,
             const std::string& clientName = "RtMidi Output Client" );

  //! The destructor closes any open MIDI connections.
  ~RtMidiOut( void ) throw();

  //! Returns the MIDI API specifier for the current instance of RtMidiOut.
  RtMidi::Api getCurrentApi( void ) throw();

  //! Open a MIDI output connection.
  /*!
      An optional port number greater than 0 can be specified.
      Otherwise, the default or first port found is opened.  An
      exception is thrown if an error occurs while attempting to make
      the port connection.
  */
  void openPort( unsigned int portNumber = 0, const std::string &portName = std::string( "RtMidi Output" ) );

  //! Close an open MIDI connection (if one exists).
  void closePort( void );

  //! Returns true if a port is open and false if not.
  /*!
      Note that this only applies to connections made with the openPort()
      function, not to virtual ports.
  */
  virtual bool isPortOpen() const;

  //! Create a virtual output port, with optional name, to allow software connections (OS X, JACK and ALSA only).
  /*!
      This function creates a virtual MIDI output port to which other
      software applications can connect.  This type of functionality
      is currently only supported by the Macintosh OS-X, Linux ALSA
      and JACK APIs (the function does nothing with the other APIs).
      An exception is thrown if an error occurs while attempting to
      create the virtual port.
  */
  void openVirtualPort( const std::string &portName = std::string( "RtMidi Output" ) );

  //! Return the number of available MIDI output ports.
  unsigned int getPortCount( void );

  //! Return a string identifier for the specified MIDI port type and number.
  /*!
    \return The name of the port with the given Id is returned.
    \retval An empty string is returned if an invalid port specifier
            is provided. User code should assume a UTF-8 encoding.
  */
  std::string getPortName( unsigned int portNumber = 0 );

  //! Immediately send a single message out an open MIDI output port.
  /*!
      An exception is thrown if an error occurs during output or an
      output connection was not previously established.
  */
  void sendMessage( const std::vector<unsigned char> *message );

  //! Immediately send a single message out an open MIDI output port.
  /*!
      An exception is thrown if an error occurs during output or an
      output connection was not previously established.

      \param message A pointer to the MIDI message as raw bytes
      \param size    Length of the MIDI message in bytes
  */
  void sendMessage( const unsigned char *message, size_t size );

  //! Set an error callback function to be invoked when an error has occured.
  /*!
    The callback function will be called whenever an error has occured. It is best
    to set the error callback function before opening a port.
  */
  virtual void setErrorCallback( RtMidiErrorCallback errorCallback = NULL, void *userData = 0 );

 protected:
  void openMidiApi( RtMidi::Api api, const std::string &clientName );
};


// **************************************************************** //
//
// MidiInApi / MidiOutApi class declarations.
//
// Subclasses of MidiInApi and MidiOutApi contain all API- and
// OS-specific code necessary to fully implement the RtMidi API.
//
// Note that MidiInApi and MidiOutApi are abstract base classes and
// cannot be explicitly instantiated.  RtMidiIn and RtMidiOut will
// create instances of a MidiInApi or MidiOutApi subclass.
//
// **************************************************************** //

class MidiApi
{
 public:

  MidiApi();
  virtual ~MidiApi();
  virtual RtMidi::Api getCurrentApi( void ) = 0;
  virtual void openPort( unsigned int portNumber, const std::string &portName ) = 0;
  virtual void openVirtualPort( const std::string &portName ) = 0;
  virtual void closePort( void ) = 0;

  virtual unsigned int getPortCount( void ) = 0;
  virtual std::string getPortName( unsigned int portNumber ) = 0;

  inline bool isPortOpen() const { return connected_; }
  void setErrorCallback( RtMidiErrorCallback errorCallback, void *userData );

  //! A basic error reporting function for RtMidi classes.
  void error( RtMidiError::Type type, std::string errorString );

protected:
  virtual void initialize( const std::string& clientName ) = 0;

  void *apiData_;
  bool connected_;
  std::string errorString_;
  RtMidiErrorCallback errorCallback_;
  bool firstErrorOccurred_;
  void *errorCallbackUserData_;
};

class MidiInApi : public MidiApi
{
 public:

  MidiInApi( unsigned int queueSizeLimit );
  virtual ~MidiInApi( void );
  void setCallback( RtMidiIn::RtMidiCallback callback, void *userData );
  void cancelCallback( void );
  virtual void ignoreTypes( bool midiSysex, bool midiTime, bool midiSense );
  double getMessage( std::vector<unsigned char> *message );

  // A MIDI structure used internally by the class to store incoming
  // messages.  Each message represents one and only one MIDI message.
  struct MidiMessage { 
    std::vector<unsigned char> bytes; 

    //! Time in seconds elapsed since the previous message
    double timeStamp;

    // Default constructor.
  MidiMessage()
  :bytes(0), timeStamp(0.0) {}
  };

  struct MidiQueue {
    unsigned int front;
    unsigned int back;
    unsigned int ringSize;
    MidiMessage *ring;

    // Default constructor.
  MidiQueue()
  :front(0), back(0), ringSize(0), ring(0) {}
    bool push(const MidiMessage&);
    bool pop(std::vector<unsigned char>*, double*);
    unsigned int size(unsigned int *back=0,
		      unsigned int *front=0);
  };

  // The RtMidiInData structure is used to pass private class data to
  // the MIDI input handling function or thread.
  struct RtMidiInData {
    MidiQueue queue;
    MidiMessage message;
    unsigned char ignoreFlags;
    bool doInput;
    bool firstMessage;
    void *apiData;
    bool usingCallback;
    RtMidiIn::RtMidiCallback userCallback;
    void *userData;
    bool continueSysex;

    // Default constructor.
  RtMidiInData()
  : ignoreFlags(7), doInput(false), firstMessage(true),
      apiData(0), usingCallback(false), userCallback(0), userData(0),
      continueSysex(false) {}
  };

 protected:
  RtMidiInData inputData_;
};

class MidiOutApi : public MidiApi
{
 public:

  MidiOutApi( void );
  virtual ~MidiOutApi( void );
  virtual void sendMessage( const unsigned char *message, size_t size ) = 0;
};

// **************************************************************** //
//
// Inline RtMidiIn and RtMidiOut definitions.
//
// **************************************************************** //

inline RtMidi::Api RtMidiIn :: getCurrentApi( void ) throw() { return rtapi_->getCurrentApi(); }
inline void RtMidiIn :: openPort( unsigned int portNumber, const std::string &portName ) { rtapi_->openPort( portNumber, portName ); }
inline void RtMidiIn :: openVirtualPort( const std::string &portName ) { rtapi_->openVirtualPort( portName ); }
inline void RtMidiIn :: closePort( void ) { rtapi_->closePort(); }
inline bool RtMidiIn :: isPortOpen() const { return rtapi_->isPortOpen(); }
inline void RtMidiIn :: setCallback( RtMidiCallback callback, void *userData ) { ((MidiInApi *)rtapi_)->setCallback( callback, userData ); }
inline void RtMidiIn :: cancelCallback( void ) { ((MidiInApi *)rtapi_)->cancelCallback(); }
inline unsigned int RtMidiIn :: getPortCount( void ) { return rtapi_->getPortCount(); }
inline std::string RtMidiIn :: getPortName( unsigned int portNumber ) { return rtapi_->getPortName( portNumber ); }
inline void RtMidiIn :: ignoreTypes( bool midiSysex, bool midiTime, bool midiSense ) { ((MidiInApi *)rtapi_)->ignoreTypes( midiSysex, midiTime, midiSense ); }
inline double RtMidiIn :: getMessage( std::vector<unsigned char> *message ) { return ((MidiInApi *)rtapi_)->getMessage( message ); }
inline void RtMidiIn :: setErrorCallback( RtMidiErrorCallback errorCallback, void *userData ) { rtapi_->setErrorCallback(errorCallback, userData); }

inline RtMidi::Api RtMidiOut :: getCurrentApi( void ) throw() { return rtapi_->getCurrentApi(); }
inline void RtMidiOut :: openPort( unsigned int portNumber, const std::string &portName ) { rtapi_->openPort( portNumber, portName ); }
inline void RtMidiOut :: openVirtualPort( const std::string &portName ) { rtapi_->openVirtualPort( portName ); }
inline void RtMidiOut :: closePort( void ) { rtapi_->closePort(); }
inline bool RtMidiOut :: isPortOpen() const { return rtapi_->isPortOpen(); }
inline unsigned int RtMidiOut :: getPortCount( void ) { return rtapi_->getPortCount(); }
inline std::string RtMidiOut :: getPortName( unsigned int portNumber ) { return rtapi_->getPortName( portNumber ); }
inline void RtMidiOut :: sendMessage( const std::vector<unsigned char> *message ) { ((MidiOutApi *)rtapi_)->sendMessage( &message->at(0), message->size() ); }
inline void RtMidiOut :: sendMessage( const unsigned char *message, size_t size ) { ((MidiOutApi *)rtapi_)->sendMessage( message, size ); }
inline void RtMidiOut :: setErrorCallback( RtMidiErrorCallback errorCallback, void *userData ) { rtapi_->setErrorCallback(errorCallback, userData); }

// **************************************************************** //
//
// MidiInApi and MidiOutApi subclass prototypes.
//
// **************************************************************** //

#if !defined(__LINUX_ALSA__) && !defined(__UNIX_JACK__) && !defined(__MACOSX_CORE__) && !defined(__WINDOWS_MM__)
  #define __RTMIDI_DUMMY__
#endif

#if defined(__MACOSX_CORE__)

class MidiInCore: public MidiInApi
{
 public:
  MidiInCore( const std::string &clientName, unsigned int queueSizeLimit );
  ~MidiInCore( void );
  RtMidi::Api getCurrentApi( void ) { return RtMidi::MACOSX_CORE; };
  void openPort( unsigned int portNumber, const std::string &portName );
  void openVirtualPort( const std::string &portName );
  void closePort( void );
  unsigned int getPortCount( void );
  std::string getPortName( unsigned int portNumber );

 protected:
  void initialize( const std::string& clientName );
};

class MidiOutCore: public MidiOutApi
{
 public:
  MidiOutCore( const std::string &clientName );
  ~MidiOutCore( void );
  RtMidi::Api getCurrentApi( void ) { return RtMidi::MACOSX_CORE; };
  void openPort( unsigned int portNumber, const std::string &portName );
  void openVirtualPort( const std::string &portName );
  void closePort( void );
  unsigned int getPortCount( void );
  std::string getPortName( unsigned int portNumber );
  void sendMessage( const unsigned char *message, size_t size );

 protected:
  void initialize( const std::string& clientName );
};

#endif

#if defined(__UNIX_JACK__)

class MidiInJack: public MidiInApi
{
 public:
  MidiInJack( const std::string &clientName, unsigned int queueSizeLimit );
  ~MidiInJack( void );
  RtMidi::Api getCurrentApi( void ) { return RtMidi::UNIX_JACK; };
  void openPort( unsigned int portNumber, const std::string &portName );
  void openVirtualPort( const std::string &portName );
  void closePort( void );
  unsigned int getPortCount( void );
  std::string getPortName( unsigned int portNumber );

 protected:
  std::string clientName;

  void connect( void );
  void initialize( const std::string& clientName );
};

class MidiOutJack: public MidiOutApi
{
 public:
  MidiOutJack( const std::string &clientName );
  ~MidiOutJack( void );
  RtMidi::Api getCurrentApi( void ) { return RtMidi::UNIX_JACK; };
  void openPort( unsigned int portNumber, const std::string &portName );
  void openVirtualPort( const std::string &portName );
  void closePort( void );
  unsigned int getPortCount( void );
  std::string getPortName( unsigned int portNumber );
  void sendMessage( const unsigned char *message, size_t size );

 protected:
  std::string clientName;

  void connect( void );
  void initialize( const std::string& clientName );
};

#endif

#if defined(__LINUX_ALSA__)

class MidiInAlsa: public MidiInApi
{
 public:
  MidiInAlsa( const std::string &clientName, unsigned int queueSizeLimit );
  ~MidiInAlsa( void );
  RtMidi::Api getCurrentApi( void ) { return RtMidi::LINUX_ALSA; };
  void openPort( unsigned int portNumber, const std::string &portName );
  void openVirtualPort( const std::string &portName );
  void closePort( void );
  unsigned int getPortCount( void );
  std::string getPortName( unsigned int portNumber );

 protected:
  void initialize( const std::string& clientName );
};

class MidiOutAlsa: public MidiOutApi
{
 public:
  MidiOutAlsa( const std::string &clientName );
  ~MidiOutAlsa( void );
  RtMidi::Api getCurrentApi( void ) { return RtMidi::LINUX_ALSA; };
  void openPort( unsigned int portNumber, const std::string &portName );
  void openVirtualPort( const std::string &portName );
  void closePort( void );
  unsigned int getPortCount( void );
  std::string getPortName( unsigned int portNumber );
  void sendMessage( const unsigned char *message, size_t size );

 protected:
  void initialize( const std::string& clientName );
};

#endif

#if defined(__WINDOWS_MM__)

class MidiInWinMM: public MidiInApi
{
 public:
  MidiInWinMM( const std::string &clientName, unsigned int queueSizeLimit );
  ~MidiInWinMM( void );
  RtMidi::Api getCurrentApi( void ) { return RtMidi::WINDOWS_MM; };
  void openPort( unsigned int portNumber, const std::string &portName );
  void openVirtualPort( const std::string &portName );
  void closePort( void );
  unsigned int getPortCount( void );
  std::string getPortName( unsigned int portNumber );

 protected:
  void initialize( const std::string& clientName );
};

class MidiOutWinMM: public MidiOutApi
{
 public:
  MidiOutWinMM( const std::string &clientName );
  ~MidiOutWinMM( void );
  RtMidi::Api getCurrentApi( void ) { return RtMidi::WINDOWS_MM; };
  void openPort( unsigned int portNumber, const std::string &portName );
  void openVirtualPort( const std::string &portName );
  void closePort( void );
  unsigned int getPortCount( void );
  std::string getPortName( unsigned int portNumber );
  void sendMessage( const unsigned char *message, size_t size );

 protected:
  void initialize( const std::string& clientName );
};

#endif

#if defined(__RTMIDI_DUMMY__)

class MidiInDummy: public MidiInApi
{
 public:
 MidiInDummy( const std::string &/*clientName*/, unsigned int queueSizeLimit ) : MidiInApi( queueSizeLimit ) { errorString_ = "MidiInDummy: This class provides no functionality."; error( RtMidiError::WARNING, errorString_ ); }
  RtMidi::Api getCurrentApi( void ) { return RtMidi::RTMIDI_DUMMY; }
  void openPort( unsigned int /*portNumber*/, const std::string &/*portName*/ ) {}
  void openVirtualPort( const std::string &/*portName*/ ) {}
  void closePort( void ) {}
  unsigned int getPortCount( void ) { return 0; }
  std::string getPortName( unsigned int /*portNumber*/ ) { return ""; }

 protected:
  void initialize( const std::string& /*clientName*/ ) {}
};

class MidiOutDummy: public MidiOutApi
{
 public:
  MidiOutDummy( const std::string &/*clientName*/ ) { errorString_ = "MidiOutDummy: This class provides no functionality."; error( RtMidiError::WARNING, errorString_ ); }
  RtMidi::Api getCurrentApi( void ) { return RtMidi::RTMIDI_DUMMY; }
  void openPort( unsigned int /*portNumber*/, const std::string &/*portName*/ ) {}
  void openVirtualPort( const std::string &/*portName*/ ) {}
  void closePort( void ) {}
  unsigned int getPortCount( void ) { return 0; }
  std::string getPortName( unsigned int /*portNumber*/ ) { return ""; }
  void sendMessage( const unsigned char * /*message*/, size_t /*size*/ ) {}

 protected:
  void initialize( const std::string& /*clientName*/ ) {}
};

#endif

#endif
/**************************  END  RtMidi.h **************************/

class MapUI;

//-------------------------------------------------
// MIDI input/output handling using RtMidi library
//-------------------------------------------------

class rt_midi : public midi_handler {

    private:
    
        std::vector<RtMidiIn*> fInput;
        std::vector<RtMidiOut*> fOutput;
        bool fIsVirtual;
        bool fPolling;
    
        static void midiCallback(double time, std::vector<unsigned char>* message, void* arg)
        {
            rt_midi* midi = static_cast<rt_midi*>(arg);
            size_t nBytes = message->size();
            int type = (int)message->at(0) & 0xf0;
            int channel = (int)message->at(0) & 0x0f;
            
            // MIDI sync
            if (nBytes == 1) {
                midi->handleSync(time, (int)message->at(0));
            // One data byte messages
            } else if (nBytes == 2) {
                midi->handleData1(time, type, channel, (int)message->at(1));
            // Two data bytes messages
            } else if (nBytes == 3) {
                midi->handleData2(time, type, channel, (int)message->at(1), (int)message->at(2));
            } else {
                midi->handleMessage(time, (int)message->at(0), *message);
            }
        }
        
        bool openMidiInputPorts()
        {
            // Get number of input ports
            RtMidiIn midi_in;
            unsigned nInPorts = midi_in.getPortCount();
            if (nInPorts == 0) {
                std::cout << "No input ports available!" << std::endl;
                return false;
            }
    
            // Then open all of them
            for (unsigned int i = 0; i < nInPorts; i++) {
                RtMidiIn* midi_in = new RtMidiIn();
                midi_in->ignoreTypes(true, false, true);
                fInput.push_back(midi_in);
                midi_in->openPort(i);
                if (!fPolling) {
                    midi_in->setCallback(&midiCallback, this);
                }
                //std::cout << "Input port #" << i << ": " << midi_in->getPortName(i) << '\n';
            }
            return true;
        }
        
        bool openMidiOutputPorts()
        {
            // Get number of output ports
            RtMidiOut midi_out;
            unsigned nOutPorts = midi_out.getPortCount();
            if (nOutPorts == 0) {
                std::cout << "No output ports available!" << std::endl;
                return false;
            }
    
            // Then open all of them
            for (unsigned int i = 0; i < nOutPorts; i++) {
                RtMidiOut* midi_out = new RtMidiOut();
                fOutput.push_back(midi_out);
                midi_out->openPort(i);
                //std::cout << "Output port #" << i << ": " << midi_out->getPortName(i) << '\n';
            }
            return true;
        }
        
        void chooseMidiInputPort(const std::string& name)
        {
            RtMidiIn* midi_in = new RtMidiIn();
            midi_in->ignoreTypes(true, false, true);
            fInput.push_back(midi_in);
            if (!fPolling) {
                midi_in->setCallback(&midiCallback, this);
            }
            midi_in->openVirtualPort(name);
        }
        
        void chooseMidiOutPort(const std::string& name)
        {
            RtMidiOut* midi_out = new RtMidiOut();
            fOutput.push_back(midi_out);
            midi_out->openVirtualPort(name);
        }
        
        void sendMessage(std::vector<unsigned char>& message)
        {
            for (auto& it : fOutput) {
                it->sendMessage(&message);
            }
        }
    
    public:
    
        rt_midi(const std::string& name = "RtMidi",
                bool is_virtual = false,
                bool is_polling = false)
        :midi_handler(name), fIsVirtual(is_virtual), fPolling(is_polling)
        {}
        
        virtual ~rt_midi()
        {
            stopMidi();
        }
        
        bool startMidi()
        {
            try {
            
            #if TARGET_OS_IPHONE
                if (!openMidiInputPorts())  { stopMidi(); return false; }
                if (!openMidiOutputPorts()) { stopMidi(); return false; }
            #else
                if (fIsVirtual) {
                    chooseMidiInputPort(fName);
                    chooseMidiOutPort(fName);
                } else {
                    if (!openMidiInputPorts())  { stopMidi(); return false; }
                    std::cerr << "Warning : MIDI outputs are not started in this mode !\n";
                }
            #endif
                return true;
                
            } catch (RtMidiError &error) {
                error.printMessage();
                stopMidi();
                return false;
            }
        }
        
        void stopMidi()
        {
            for (auto& it1 : fInput) {
                delete it1;
            }
            fInput.clear();
            for (auto& it2 : fOutput) {
                delete it2;
            }
            fOutput.clear();
        }
    
        // To be used in polling mode
        int recvMessages(std::vector<MIDIMessage>* messages)
        {
            int count = 0;
            double first_time_stamp = 0.;
            for (auto& it : fInput) {
                std::vector<unsigned char> message;
                double time_stamp = (uint32_t)it->getMessage(&message);
                // Small messages
                if (message.size() > 0) {
                    if (count == 0) first_time_stamp = time_stamp;
                    MIDIMessage& mes = messages->at(count++);
                    mes.frameIndex = (uint32_t)(time_stamp - first_time_stamp);
                    mes.byte0 = message[0];
                    mes.byte1 = message[1];
                    mes.byte2 = message[2];
                }
            }
            return count;
        }
    
        void sendMessages(std::vector<MIDIMessage>* messages, int count)
        {
            for (int i = 0; i < count; ++i) {
                MIDIMessage mes1 = (*messages)[i];
                std::vector<unsigned char> mes2;
                mes2.push_back(mes1.byte0);
                mes2.push_back(mes1.byte1);
                mes2.push_back(mes1.byte2);
                sendMessage(mes2);
            }
        }
    
        // MIDI output API
        MapUI* keyOn(int channel, int pitch, int velocity)
        {
            std::vector<unsigned char> message;
            message.push_back(MIDI_NOTE_ON + channel);
            message.push_back(pitch);
            message.push_back(velocity);
            sendMessage(message);
            return 0;
        }
        
        void keyOff(int channel, int pitch, int velocity) 
        {
            std::vector<unsigned char> message;
            message.push_back(MIDI_NOTE_OFF + channel);
            message.push_back(pitch);
            message.push_back(velocity);
            sendMessage(message);
        }
        
        void ctrlChange(int channel, int ctrl, int val) 
        {
            std::vector<unsigned char> message;
            message.push_back(MIDI_CONTROL_CHANGE + channel);
            message.push_back(ctrl);
            message.push_back(val);
            sendMessage(message);
        }
        
        void chanPress(int channel, int press) 
        {
            std::vector<unsigned char> message;
            message.push_back(MIDI_AFTERTOUCH + channel);
            message.push_back(press);
            sendMessage(message);
        }
        
        void progChange(int channel, int pgm) 
        {
            std::vector<unsigned char> message;
            message.push_back(MIDI_PROGRAM_CHANGE + channel);
            message.push_back(pgm);
            sendMessage(message);
        }
          
        void keyPress(int channel, int pitch, int press) 
        {
            std::vector<unsigned char> message;
            message.push_back(MIDI_POLY_AFTERTOUCH + channel);
            message.push_back(pitch);
            message.push_back(press);
            sendMessage(message);
        }
   
        void pitchWheel(int channel, int wheel) 
        {
            std::vector<unsigned char> message;
            message.push_back(MIDI_PITCH_BEND + channel);
            message.push_back(wheel & 0x7F);		// lsb 7bit
            message.push_back((wheel >> 7) & 0x7F);	// msb 7bit
            sendMessage(message);
        }
        
        void ctrlChange14bits(int channel, int ctrl, int value) {}
         
        void startSync(double date)
        {
            std::vector<unsigned char> message;
            message.push_back(MIDI_START);
            sendMessage(message);
        }
       
        void stopSync(double date)
        {
            std::vector<unsigned char> message;
            message.push_back(MIDI_STOP);
            sendMessage(message);
        }
        
        void clock(double date) 
        {
            std::vector<unsigned char> message;
            message.push_back(MIDI_CLOCK);
            sendMessage(message);
        }
    
        void sysEx(double, std::vector<unsigned char>& message)
        {
            sendMessage(message);
        }
    
};


#endif // __rt_midi__
/**************************  END  rt-midi.h **************************/
/**********************************************************************/
/*! \class RtMidi
    \brief An abstract base class for realtime MIDI input/output.

    This class implements some common functionality for the realtime
    MIDI input/output subclasses RtMidiIn and RtMidiOut.

    RtMidi WWW site: http://music.mcgill.ca/~gary/rtmidi/

    RtMidi: realtime MIDI i/o C++ classes
    Copyright (c) 2003-2017 Gary P. Scavone

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    Any person wishing to distribute modifications to the Software is
    asked to send the modifications to the original developer so that
    they can be incorporated into the canonical version.  This is,
    however, not a binding provision of this license.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
    ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
    CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/**********************************************************************/

#include <sstream>

#ifdef __APPLE__

Float64 CAHostTimeBase::sFrequency = 0;
Float64 CAHostTimeBase::sInverseFrequency = 0;
UInt32 CAHostTimeBase::sMinDelta = 0;
UInt32 CAHostTimeBase::sToNanosNumerator = 0;
UInt32 CAHostTimeBase::sToNanosDenominator = 0;
UInt32 CAHostTimeBase::sFromNanosNumerator = 0;
UInt32 CAHostTimeBase::sFromNanosDenominator = 0;
bool CAHostTimeBase::sUseMicroseconds = false;
bool CAHostTimeBase::sIsInited = false;
#if Track_Host_TimeBase
UInt64 CAHostTimeBase::sLastTime = 0;
#endif

//=============================================================================
//	CAHostTimeBase
//
//	This class provides platform independent access to the host's time base.
//=============================================================================

void CAHostTimeBase::Initialize()
{
    if (!sIsInited) {
        
        //	get the info about Absolute time
#if TARGET_OS_MAC
        struct mach_timebase_info	theTimeBaseInfo;
        mach_timebase_info(&theTimeBaseInfo);
        sMinDelta = 1;
        sToNanosNumerator = theTimeBaseInfo.numer;
        sToNanosDenominator = theTimeBaseInfo.denom;
        sFromNanosNumerator = sToNanosDenominator;
        sFromNanosDenominator = sToNanosNumerator;
        
        //	the frequency of that clock is: (sToNanosDenominator / sToNanosNumerator) * 10^9
        sFrequency = static_cast<Float64>(sToNanosDenominator) / static_cast<Float64>(sToNanosNumerator);
        sFrequency *= 1000000000.0;
#elif TARGET_OS_WIN32
        LARGE_INTEGER theFrequency;
        QueryPerformanceFrequency(&theFrequency);
        sMinDelta = 1;
        sToNanosNumerator = 1000000000ULL;
        sToNanosDenominator = *((UInt64*)&theFrequency);
        sFromNanosNumerator = sToNanosDenominator;
        sFromNanosDenominator = sToNanosNumerator;
        sFrequency = static_cast<Float64>(*((UInt64*)&theFrequency));
#endif
        sInverseFrequency = 1.0 / sFrequency;
        
#if	Log_Host_Time_Base_Parameters
        DebugMessage(  "Host Time Base Parameters");
        DebugMessageN1(" Minimum Delta:          %lu", sMinDelta);
        DebugMessageN1(" Frequency:              %f", sFrequency);
        DebugMessageN1(" To Nanos Numerator:     %lu", sToNanosNumerator);
        DebugMessageN1(" To Nanos Denominator:   %lu", sToNanosDenominator);
        DebugMessageN1(" From Nanos Numerator:   %lu", sFromNanosNumerator);
        DebugMessageN1(" From Nanos Denominator: %lu", sFromNanosDenominator);
#endif
        
        sIsInited = true;
    }
}

#endif

#if defined(__MACOSX_CORE__)
  #if TARGET_OS_IPHONE
    #define AudioGetCurrentHostTime CAHostTimeBase::GetCurrentTime
    #define AudioConvertHostTimeToNanos CAHostTimeBase::ConvertToNanos
  #endif
#endif

// Default for Windows is to add an identifier to the port names; this
// flag can be undefined to disable this behaviour.
#define RTMIDI_ENSURE_UNIQUE_PORTNAMES

//*********************************************************************//
//  RtMidi Definitions
//*********************************************************************//

RtMidi :: RtMidi()
  : rtapi_(0)
{
#if defined(__MACOSX_CORE__)
    #if TARGET_OS_IPHONE
        CAHostTimeBase::Initialize();
    #endif
#endif
}

RtMidi :: ~RtMidi()
{
  delete rtapi_;
  rtapi_ = 0;
}

std::string RtMidi :: getVersion( void ) throw()
{
  return std::string( RTMIDI_VERSION );
}

void RtMidi :: getCompiledApi( std::vector<RtMidi::Api> &apis ) throw()
{
  apis.clear();

  // The order here will control the order of RtMidi's API search in
  // the constructor.
#if defined(__MACOSX_CORE__)
  apis.push_back( MACOSX_CORE );
#endif
#if defined(__LINUX_ALSA__)
  apis.push_back( LINUX_ALSA );
#endif
#if defined(__UNIX_JACK__)
  apis.push_back( UNIX_JACK );
#endif
#if defined(__WINDOWS_MM__)
  apis.push_back( WINDOWS_MM );
#endif
#if defined(__RTMIDI_DUMMY__)
  apis.push_back( RTMIDI_DUMMY );
#endif
}

//*********************************************************************//
//  RtMidiIn Definitions
//*********************************************************************//

void RtMidiIn :: openMidiApi( RtMidi::Api api, const std::string &clientName, unsigned int queueSizeLimit )
{
  delete rtapi_;
  rtapi_ = 0;

#if defined(__UNIX_JACK__)
  if ( api == UNIX_JACK )
    rtapi_ = new MidiInJack( clientName, queueSizeLimit );
#endif
#if defined(__LINUX_ALSA__)
  if ( api == LINUX_ALSA )
    rtapi_ = new MidiInAlsa( clientName, queueSizeLimit );
#endif
#if defined(__WINDOWS_MM__)
  if ( api == WINDOWS_MM )
    rtapi_ = new MidiInWinMM( clientName, queueSizeLimit );
#endif
#if defined(__MACOSX_CORE__)
  if ( api == MACOSX_CORE )
    rtapi_ = new MidiInCore( clientName, queueSizeLimit );
#endif
#if defined(__RTMIDI_DUMMY__)
  if ( api == RTMIDI_DUMMY )
    rtapi_ = new MidiInDummy( clientName, queueSizeLimit );
#endif
}

RtMidiIn :: RtMidiIn( RtMidi::Api api, const std::string &clientName, unsigned int queueSizeLimit )
  : RtMidi()
{
  if ( api != UNSPECIFIED ) {
    // Attempt to open the specified API.
    openMidiApi( api, clientName, queueSizeLimit );
    if ( rtapi_ ) return;

    // No compiled support for specified API value.  Issue a warning
    // and continue as if no API was specified.
    std::cerr << "\nRtMidiIn: no compiled support for specified API argument!\n\n" << std::endl;
  }

  // Iterate through the compiled APIs and return as soon as we find
  // one with at least one port or we reach the end of the list.
  std::vector< RtMidi::Api > apis;
  getCompiledApi( apis );
  for ( unsigned int i=0; i<apis.size(); i++ ) {
    openMidiApi( apis[i], clientName, queueSizeLimit );
    if ( rtapi_ && rtapi_->getPortCount() ) break;
  }

  if ( rtapi_ ) return;

  // It should not be possible to get here because the preprocessor
  // definition __RTMIDI_DUMMY__ is automatically defined if no
  // API-specific definitions are passed to the compiler. But just in
  // case something weird happens, we'll throw an error.
  std::string errorText = "RtMidiIn: no compiled API support found ... critical error!!";
  throw( RtMidiError( errorText, RtMidiError::UNSPECIFIED ) );
}

RtMidiIn :: ~RtMidiIn() throw()
{
}


//*********************************************************************//
//  RtMidiOut Definitions
//*********************************************************************//

void RtMidiOut :: openMidiApi( RtMidi::Api api, const std::string &clientName )
{
  delete rtapi_;
  rtapi_ = 0;

#if defined(__UNIX_JACK__)
  if ( api == UNIX_JACK )
    rtapi_ = new MidiOutJack( clientName );
#endif
#if defined(__LINUX_ALSA__)
  if ( api == LINUX_ALSA )
    rtapi_ = new MidiOutAlsa( clientName );
#endif
#if defined(__WINDOWS_MM__)
  if ( api == WINDOWS_MM )
    rtapi_ = new MidiOutWinMM( clientName );
#endif
#if defined(__MACOSX_CORE__)
  if ( api == MACOSX_CORE )
    rtapi_ = new MidiOutCore( clientName );
#endif
#if defined(__RTMIDI_DUMMY__)
  if ( api == RTMIDI_DUMMY )
    rtapi_ = new MidiOutDummy( clientName );
#endif
}

RtMidiOut :: RtMidiOut( RtMidi::Api api, const std::string &clientName)
{
  if ( api != UNSPECIFIED ) {
    // Attempt to open the specified API.
    openMidiApi( api, clientName );
    if ( rtapi_ ) return;

    // No compiled support for specified API value.  Issue a warning
    // and continue as if no API was specified.
    std::cerr << "\nRtMidiOut: no compiled support for specified API argument!\n\n" << std::endl;
  }

  // Iterate through the compiled APIs and return as soon as we find
  // one with at least one port or we reach the end of the list.
  std::vector< RtMidi::Api > apis;
  getCompiledApi( apis );
  for ( unsigned int i=0; i<apis.size(); i++ ) {
    openMidiApi( apis[i], clientName );
    if ( rtapi_ && rtapi_->getPortCount() ) break;
  }

  if ( rtapi_ ) return;

  // It should not be possible to get here because the preprocessor
  // definition __RTMIDI_DUMMY__ is automatically defined if no
  // API-specific definitions are passed to the compiler. But just in
  // case something weird happens, we'll thrown an error.
  std::string errorText = "RtMidiOut: no compiled API support found ... critical error!!";
  throw( RtMidiError( errorText, RtMidiError::UNSPECIFIED ) );
}

RtMidiOut :: ~RtMidiOut() throw()
{
}

//*********************************************************************//
//  Common MidiApi Definitions
//*********************************************************************//

MidiApi :: MidiApi( void )
  : apiData_( 0 ), connected_( false ), errorCallback_(0), firstErrorOccurred_(false), errorCallbackUserData_(0)
{
}

MidiApi :: ~MidiApi( void )
{
}

void MidiApi :: setErrorCallback( RtMidiErrorCallback errorCallback, void *userData = 0 )
{
    errorCallback_ = errorCallback;
    errorCallbackUserData_ = userData;
}

void MidiApi :: error( RtMidiError::Type type, std::string errorString )
{
  if ( errorCallback_ ) {

    if ( firstErrorOccurred_ )
      return;

    firstErrorOccurred_ = true;
    const std::string errorMessage = errorString;

    errorCallback_( type, errorMessage, errorCallbackUserData_);
    firstErrorOccurred_ = false;
    return;
  }

  if ( type == RtMidiError::WARNING ) {
    std::cerr << '\n' << errorString << "\n\n";
  }
  else if ( type == RtMidiError::DEBUG_WARNING ) {
#if defined(__RTMIDI_DEBUG__)
    std::cerr << '\n' << errorString << "\n\n";
#endif
  }
  else {
    std::cerr << '\n' << errorString << "\n\n";
    throw RtMidiError( errorString, type );
  }
}

//*********************************************************************//
//  Common MidiInApi Definitions
//*********************************************************************//

MidiInApi :: MidiInApi( unsigned int queueSizeLimit )
  : MidiApi()
{
  // Allocate the MIDI queue.
  inputData_.queue.ringSize = queueSizeLimit;
  if ( inputData_.queue.ringSize > 0 )
    inputData_.queue.ring = new MidiMessage[ inputData_.queue.ringSize ];
}

MidiInApi :: ~MidiInApi( void )
{
  // Delete the MIDI queue.
  if ( inputData_.queue.ringSize > 0 ) delete [] inputData_.queue.ring;
}

void MidiInApi :: setCallback( RtMidiIn::RtMidiCallback callback, void *userData )
{
  if ( inputData_.usingCallback ) {
    errorString_ = "MidiInApi::setCallback: a callback function is already set!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  if ( !callback ) {
    errorString_ = "RtMidiIn::setCallback: callback function value is invalid!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  inputData_.userCallback = callback;
  inputData_.userData = userData;
  inputData_.usingCallback = true;
}

void MidiInApi :: cancelCallback()
{
  if ( !inputData_.usingCallback ) {
    errorString_ = "RtMidiIn::cancelCallback: no callback function was set!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  inputData_.userCallback = 0;
  inputData_.userData = 0;
  inputData_.usingCallback = false;
}

void MidiInApi :: ignoreTypes( bool midiSysex, bool midiTime, bool midiSense )
{
  inputData_.ignoreFlags = 0;
  if ( midiSysex ) inputData_.ignoreFlags = 0x01;
  if ( midiTime ) inputData_.ignoreFlags |= 0x02;
  if ( midiSense ) inputData_.ignoreFlags |= 0x04;
}

double MidiInApi :: getMessage( std::vector<unsigned char> *message )
{
  message->clear();

  if ( inputData_.usingCallback ) {
    errorString_ = "RtMidiIn::getNextMessage: a user callback is currently set for this port.";
    error( RtMidiError::WARNING, errorString_ );
    return 0.0;
  }

  double timeStamp;
  if (!inputData_.queue.pop(message, &timeStamp))
    return 0.0;

  return timeStamp;
}

unsigned int MidiInApi::MidiQueue::size(unsigned int *__back,
					unsigned int *__front)
{
  // Access back/front members exactly once and make stack copies for
  // size calculation
  unsigned int _back = back, _front = front, _size;
  if (_back >= _front)
    _size = _back - _front;
  else
    _size = ringSize - _front + _back;

  // Return copies of back/front so no new and unsynchronized accesses
  // to member variables are needed.
  if (__back) *__back = _back;
  if (__front) *__front = _front;
  return _size;
}

// As long as we haven't reached our queue size limit, push the message.
bool MidiInApi::MidiQueue::push(const MidiInApi::MidiMessage& msg)
{
  // Local stack copies of front/back
  unsigned int _back, _front, _size;

  // Get back/front indexes exactly once and calculate current size
  _size = size(&_back, &_front);

  if ( _size < ringSize-1 )
  {
    ring[_back] = msg;
    back = (back+1)%ringSize;
    return true;
  }

  return false;
}

bool MidiInApi::MidiQueue::pop(std::vector<unsigned char> *msg, double* timeStamp)
{
  // Local stack copies of front/back
  unsigned int _back, _front, _size;

  // Get back/front indexes exactly once and calculate current size
  _size = size(&_back, &_front);

  if (_size == 0)
    return false;

  // Copy queued message to the vector pointer argument and then "pop" it.
  msg->assign( ring[_front].bytes.begin(), ring[_front].bytes.end() );
  *timeStamp = ring[_front].timeStamp;

  // Update front
  front = (front+1)%ringSize;
  return true;
}

//*********************************************************************//
//  Common MidiOutApi Definitions
//*********************************************************************//

MidiOutApi :: MidiOutApi( void )
  : MidiApi()
{
}

MidiOutApi :: ~MidiOutApi( void )
{
}

// *************************************************** //
//
// OS/API-specific methods.
//
// *************************************************** //

#if defined(__MACOSX_CORE__)

// The CoreMIDI API is based on the use of a callback function for
// MIDI input.  We convert the system specific time stamps to delta
// time values.

// The CoreMIDI API is based on the use of a callback function for
// MIDI input.  We convert the system specific time stamps to delta
// time values.

// OS-X CoreMIDI header files.
#include <CoreMIDI/CoreMIDI.h>

#if defined(__MACOSX_CORE__)
    #if TARGET_OS_IPHONE
    static inline UInt32 EndianS32_BtoN(UInt32 x)
        {
            return ((x << 24) & 0xFF000000) | ((x << 8) & 0x00FF0000)
            | ((x >> 8) & 0x0000FF00) | ((x >> 24) & 0x000000FF);
        }
    #else
        #include <CoreAudio/HostTime.h>
        #include <CoreServices/CoreServices.h>
    #endif
#endif

// A structure to hold variables related to the CoreMIDI API
// implementation.
struct CoreMidiData {
  MIDIClientRef client;
  MIDIPortRef port;
  MIDIEndpointRef endpoint;
  MIDIEndpointRef destinationId;
  unsigned long long lastTime;
  MIDISysexSendRequest sysexreq;
};

//*********************************************************************//
//  API: OS-X
//  Class Definitions: MidiInCore
//*********************************************************************//

static void midiInputCallback( const MIDIPacketList *list, void *procRef, void */*srcRef*/ )
{
  MidiInApi::RtMidiInData *data = static_cast<MidiInApi::RtMidiInData *> (procRef);
  CoreMidiData *apiData = static_cast<CoreMidiData *> (data->apiData);

  unsigned char status;
  unsigned short nBytes, iByte, size;
  unsigned long long time;

  bool& continueSysex = data->continueSysex;
  MidiInApi::MidiMessage& message = data->message;

  const MIDIPacket *packet = &list->packet[0];
  for ( unsigned int i=0; i<list->numPackets; ++i ) {

    // My interpretation of the CoreMIDI documentation: all message
    // types, except sysex, are complete within a packet and there may
    // be several of them in a single packet.  Sysex messages can be
    // broken across multiple packets and PacketLists but are bundled
    // alone within each packet (these packets do not contain other
    // message types).  If sysex messages are split across multiple
    // MIDIPacketLists, they must be handled by multiple calls to this
    // function.

    nBytes = packet->length;
    if ( nBytes == 0 ) continue;

    // Calculate time stamp.

    /*
    if ( data->firstMessage ) {
      message.timeStamp = 0.0;
      data->firstMessage = false;
    }
    else {
      time = packet->timeStamp;
      if ( time == 0 ) { // this happens when receiving asynchronous sysex messages
        time = AudioGetCurrentHostTime();
      }
      time -= apiData->lastTime;
      time = AudioConvertHostTimeToNanos( time );
      if ( !continueSysex )
        message.timeStamp = time * 0.000000001;
    }
    apiData->lastTime = packet->timeStamp;
    if ( apiData->lastTime == 0 ) { // this happens when receiving asynchronous sysex messages
      apiData->lastTime = AudioGetCurrentHostTime();
    }
    //std::cout << "TimeStamp = " << packet->timeStamp << std::endl;
    */
      
    // 10/02/19: absolute usec based time stamp, possibly using current time if packet timestamp seems wrong...
    double packet_usec = AudioConvertHostTimeToNanos(packet->timeStamp) / 1000;
    double cur_date_usec = double(AudioConvertHostTimeToNanos(AudioGetCurrentHostTime())) / 1000.;
    double delta_usec = cur_date_usec - packet_usec;
    message.timeStamp = (delta_usec > 1000) ? cur_date_usec : packet_usec;
  
    iByte = 0;
    if ( continueSysex ) {
      // We have a continuing, segmented sysex message.
      if ( !( data->ignoreFlags & 0x01 ) ) {
        // If we're not ignoring sysex messages, copy the entire packet.
        for ( unsigned int j=0; j<nBytes; ++j )
          message.bytes.push_back( packet->data[j] );
      }
      continueSysex = packet->data[nBytes-1] != 0xF7;

      if ( !( data->ignoreFlags & 0x01 ) && !continueSysex ) {
        // If not a continuing sysex message, invoke the user callback function or queue the message.
        if ( data->usingCallback ) {
          RtMidiIn::RtMidiCallback callback = (RtMidiIn::RtMidiCallback) data->userCallback;
          callback( message.timeStamp, &message.bytes, data->userData );
        }
        else {
          // As long as we haven't reached our queue size limit, push the message.
          if (!data->queue.push(message))
            std::cerr << "\nMidiInCore: message queue limit reached!!\n\n";
        }
        message.bytes.clear();
      }
    }
    else {
      while ( iByte < nBytes ) {
        size = 0;
        // We are expecting that the next byte in the packet is a status byte.
        status = packet->data[iByte];
        if ( !(status & 0x80) ) break;
        // Determine the number of bytes in the MIDI message.
        if ( status < 0xC0 ) size = 3;
        else if ( status < 0xE0 ) size = 2;
        else if ( status < 0xF0 ) size = 3;
        else if ( status == 0xF0 ) {
          // A MIDI sysex
          if ( data->ignoreFlags & 0x01 ) {
            size = 0;
            iByte = nBytes;
          }
          else size = nBytes - iByte;
          continueSysex = packet->data[nBytes-1] != 0xF7;
        }
        else if ( status == 0xF1 ) {
            // A MIDI time code message
           if ( data->ignoreFlags & 0x02 ) {
            size = 0;
            iByte += 2;
           }
           else size = 2;
        }
        else if ( status == 0xF2 ) size = 3;
        else if ( status == 0xF3 ) size = 2;
        else if ( status == 0xF8 && ( data->ignoreFlags & 0x02 ) ) {
          // A MIDI timing tick message and we're ignoring it.
          size = 0;
          iByte += 1;
        }
        else if ( status == 0xFE && ( data->ignoreFlags & 0x04 ) ) {
          // A MIDI active sensing message and we're ignoring it.
          size = 0;
          iByte += 1;
        }
        else size = 1;

        // Copy the MIDI data to our vector.
        if ( size ) {
          message.bytes.assign( &packet->data[iByte], &packet->data[iByte+size] );
          if ( !continueSysex ) {
            // If not a continuing sysex message, invoke the user callback function or queue the message.
            if ( data->usingCallback ) {
              RtMidiIn::RtMidiCallback callback = (RtMidiIn::RtMidiCallback) data->userCallback;
              callback( message.timeStamp, &message.bytes, data->userData );
            }
            else {
              // As long as we haven't reached our queue size limit, push the message.
              if (!data->queue.push(message))
                std::cerr << "\nMidiInCore: message queue limit reached!!\n\n";
            }
            message.bytes.clear();
          }
          iByte += size;
        }
      }
    }
    packet = MIDIPacketNext(packet);
  }
}

MidiInCore :: MidiInCore( const std::string &clientName, unsigned int queueSizeLimit ) : MidiInApi( queueSizeLimit )
{
  initialize( clientName );
}

MidiInCore :: ~MidiInCore( void )
{
  // Close a connection if it exists.
  closePort();

  // Cleanup.
  CoreMidiData *data = static_cast<CoreMidiData *> (apiData_);
  MIDIClientDispose( data->client );
  if ( data->endpoint ) MIDIEndpointDispose( data->endpoint );
  delete data;
}

void MidiInCore :: initialize( const std::string& clientName )
{
  // Set up our client.
  MIDIClientRef client;
  CFStringRef name = CFStringCreateWithCString( NULL, clientName.c_str(), kCFStringEncodingASCII );
  OSStatus result = MIDIClientCreate(name, NULL, NULL, &client );
  if ( result != noErr ) {
    std::ostringstream ost;
    ost << "MidiInCore::initialize: error creating OS-X MIDI client object (" << result << ").";
    errorString_ = ost.str();
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Save our api-specific connection information.
  CoreMidiData *data = (CoreMidiData *) new CoreMidiData;
  data->client = client;
  data->endpoint = 0;
  apiData_ = (void *) data;
  inputData_.apiData = (void *) data;
  CFRelease(name);
}

void MidiInCore :: openPort( unsigned int portNumber, const std::string &portName )
{
  if ( connected_ ) {
    errorString_ = "MidiInCore::openPort: a valid connection already exists!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  CFRunLoopRunInMode( kCFRunLoopDefaultMode, 0, false );
  unsigned int nSrc = MIDIGetNumberOfSources();
  if (nSrc < 1) {
    errorString_ = "MidiInCore::openPort: no MIDI input sources found!";
    error( RtMidiError::NO_DEVICES_FOUND, errorString_ );
    return;
  }

  if ( portNumber >= nSrc ) {
    std::ostringstream ost;
    ost << "MidiInCore::openPort: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::INVALID_PARAMETER, errorString_ );
    return;
  }

  MIDIPortRef port;
  CoreMidiData *data = static_cast<CoreMidiData *> (apiData_);
  OSStatus result = MIDIInputPortCreate( data->client, 
                                         CFStringCreateWithCString( NULL, portName.c_str(), kCFStringEncodingASCII ),
                                         midiInputCallback, (void *)&inputData_, &port );
  if ( result != noErr ) {
    MIDIClientDispose( data->client );
    errorString_ = "MidiInCore::openPort: error creating OS-X MIDI input port.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Get the desired input source identifier.
  MIDIEndpointRef endpoint = MIDIGetSource( portNumber );
  if ( endpoint == 0 ) {
    MIDIPortDispose( port );
    MIDIClientDispose( data->client );
    errorString_ = "MidiInCore::openPort: error getting MIDI input source reference.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Make the connection.
  result = MIDIPortConnectSource( port, endpoint, NULL );
  if ( result != noErr ) {
    MIDIPortDispose( port );
    MIDIClientDispose( data->client );
    errorString_ = "MidiInCore::openPort: error connecting OS-X MIDI input port.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Save our api-specific port information.
  data->port = port;

  connected_ = true;
}

void MidiInCore :: openVirtualPort( const std::string &portName )
{
  CoreMidiData *data = static_cast<CoreMidiData *> (apiData_);

  // Create a virtual MIDI input destination.
  MIDIEndpointRef endpoint;
  OSStatus result = MIDIDestinationCreate( data->client,
                                           CFStringCreateWithCString( NULL, portName.c_str(), kCFStringEncodingASCII ),
                                           midiInputCallback, (void *)&inputData_, &endpoint );
  if ( result != noErr ) {
    errorString_ = "MidiInCore::openVirtualPort: error creating virtual OS-X MIDI destination.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Save our api-specific connection information.
  data->endpoint = endpoint;
}

void MidiInCore :: closePort( void )
{
  CoreMidiData *data = static_cast<CoreMidiData *> (apiData_);

  if ( data->endpoint ) {
    MIDIEndpointDispose( data->endpoint );
    data->endpoint = 0;
  }

  if ( data->port ) {
    MIDIPortDispose( data->port );
    data->port = 0;
  }

  connected_ = false;
}

unsigned int MidiInCore :: getPortCount()
{
  CFRunLoopRunInMode( kCFRunLoopDefaultMode, 0, false );
  return MIDIGetNumberOfSources();
}

// This function was submitted by Douglas Casey Tucker and apparently
// derived largely from PortMidi.
CFStringRef EndpointName( MIDIEndpointRef endpoint, bool isExternal )
{
  CFMutableStringRef result = CFStringCreateMutable( NULL, 0 );
  CFStringRef str;

  // Begin with the endpoint's name.
  str = NULL;
  MIDIObjectGetStringProperty( endpoint, kMIDIPropertyName, &str );
  if ( str != NULL ) {
    CFStringAppend( result, str );
    CFRelease( str );
  }

  MIDIEntityRef entity = 0;
  MIDIEndpointGetEntity( endpoint, &entity );
  if ( entity == 0 )
    // probably virtual
    return result;

  if ( CFStringGetLength( result ) == 0 ) {
    // endpoint name has zero length -- try the entity
    str = NULL;
    MIDIObjectGetStringProperty( entity, kMIDIPropertyName, &str );
    if ( str != NULL ) {
      CFStringAppend( result, str );
      CFRelease( str );
    }
  }
  // now consider the device's name
  MIDIDeviceRef device = 0;
  MIDIEntityGetDevice( entity, &device );
  if ( device == 0 )
    return result;

  str = NULL;
  MIDIObjectGetStringProperty( device, kMIDIPropertyName, &str );
  if ( CFStringGetLength( result ) == 0 ) {
      CFRelease( result );
      return str;
  }
  if ( str != NULL ) {
    // if an external device has only one entity, throw away
    // the endpoint name and just use the device name
    if ( isExternal && MIDIDeviceGetNumberOfEntities( device ) < 2 ) {
      CFRelease( result );
      return str;
    } else {
      if ( CFStringGetLength( str ) == 0 ) {
        CFRelease( str );
        return result;
      }
      // does the entity name already start with the device name?
      // (some drivers do this though they shouldn't)
      // if so, do not prepend
        if ( CFStringCompareWithOptions( result, /* endpoint name */
             str /* device name */,
             CFRangeMake(0, CFStringGetLength( str ) ), 0 ) != kCFCompareEqualTo ) {
        // prepend the device name to the entity name
        if ( CFStringGetLength( result ) > 0 )
          CFStringInsert( result, 0, CFSTR(" ") );
        CFStringInsert( result, 0, str );
      }
      CFRelease( str );
    }
  }
  return result;
}

// This function was submitted by Douglas Casey Tucker and apparently
// derived largely from PortMidi.
static CFStringRef ConnectedEndpointName( MIDIEndpointRef endpoint )
{
  CFMutableStringRef result = CFStringCreateMutable( NULL, 0 );
  CFStringRef str;
  OSStatus err;
  int i;

  // Does the endpoint have connections?
  CFDataRef connections = NULL;
  int nConnected = 0;
  bool anyStrings = false;
  err = MIDIObjectGetDataProperty( endpoint, kMIDIPropertyConnectionUniqueID, &connections );
  if ( connections != NULL ) {
    // It has connections, follow them
    // Concatenate the names of all connected devices
    nConnected = CFDataGetLength( connections ) / sizeof(MIDIUniqueID);
    if ( nConnected ) {
      const SInt32 *pid = (const SInt32 *)(CFDataGetBytePtr(connections));
      for ( i=0; i<nConnected; ++i, ++pid ) {
        MIDIUniqueID id = EndianS32_BtoN( *pid );
        MIDIObjectRef connObject;
        MIDIObjectType connObjectType;
        err = MIDIObjectFindByUniqueID( id, &connObject, &connObjectType );
        if ( err == noErr ) {
          if ( connObjectType == kMIDIObjectType_ExternalSource  ||
              connObjectType == kMIDIObjectType_ExternalDestination ) {
            // Connected to an external device's endpoint (10.3 and later).
            str = EndpointName( (MIDIEndpointRef)(connObject), true );
          } else {
            // Connected to an external device (10.2) (or something else, catch-
            str = NULL;
            MIDIObjectGetStringProperty( connObject, kMIDIPropertyName, &str );
          }
          if ( str != NULL ) {
            if ( anyStrings )
              CFStringAppend( result, CFSTR(", ") );
            else anyStrings = true;
            CFStringAppend( result, str );
            CFRelease( str );
          }
        }
      }
    }
    CFRelease( connections );
  }
  if ( anyStrings )
    return result;

  CFRelease( result );

  // Here, either the endpoint had no connections, or we failed to obtain names 
  return EndpointName( endpoint, false );
}

std::string MidiInCore :: getPortName( unsigned int portNumber )
{
  CFStringRef nameRef;
  MIDIEndpointRef portRef;
  char name[128];

  std::string stringName;
  CFRunLoopRunInMode( kCFRunLoopDefaultMode, 0, false );
  if ( portNumber >= MIDIGetNumberOfSources() ) {
    std::ostringstream ost;
    ost << "MidiInCore::getPortName: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::WARNING, errorString_ );
    return stringName;
  }

  portRef = MIDIGetSource( portNumber );
  nameRef = ConnectedEndpointName(portRef);
  CFStringGetCString( nameRef, name, sizeof(name), kCFStringEncodingUTF8);
  CFRelease( nameRef );

  return stringName = name;
}

//*********************************************************************//
//  API: OS-X
//  Class Definitions: MidiOutCore
//*********************************************************************//

MidiOutCore :: MidiOutCore( const std::string &clientName ) : MidiOutApi()
{
  initialize( clientName );
}

MidiOutCore :: ~MidiOutCore( void )
{
  // Close a connection if it exists.
  closePort();

  // Cleanup.
  CoreMidiData *data = static_cast<CoreMidiData *> (apiData_);
  MIDIClientDispose( data->client );
  if ( data->endpoint ) MIDIEndpointDispose( data->endpoint );
  delete data;
}

void MidiOutCore :: initialize( const std::string& clientName )
{
  // Set up our client.
  MIDIClientRef client;
  CFStringRef name = CFStringCreateWithCString( NULL, clientName.c_str(), kCFStringEncodingASCII );
  OSStatus result = MIDIClientCreate(name, NULL, NULL, &client );
  if ( result != noErr ) {
    std::ostringstream ost;
    ost << "MidiInCore::initialize: error creating OS-X MIDI client object (" << result << ").";
    errorString_ = ost.str();
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Save our api-specific connection information.
  CoreMidiData *data = (CoreMidiData *) new CoreMidiData;
  data->client = client;
  data->endpoint = 0;
  apiData_ = (void *) data;
  CFRelease( name );
}

unsigned int MidiOutCore :: getPortCount()
{
  CFRunLoopRunInMode( kCFRunLoopDefaultMode, 0, false );
  return MIDIGetNumberOfDestinations();
}

std::string MidiOutCore :: getPortName( unsigned int portNumber )
{
  CFStringRef nameRef;
  MIDIEndpointRef portRef;
  char name[128];

  std::string stringName;
  CFRunLoopRunInMode( kCFRunLoopDefaultMode, 0, false );
  if ( portNumber >= MIDIGetNumberOfDestinations() ) {
    std::ostringstream ost;
    ost << "MidiOutCore::getPortName: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::WARNING, errorString_ );
    return stringName;
  }

  portRef = MIDIGetDestination( portNumber );
  nameRef = ConnectedEndpointName(portRef);
  CFStringGetCString( nameRef, name, sizeof(name), kCFStringEncodingUTF8 );
  CFRelease( nameRef );
  
  return stringName = name;
}

void MidiOutCore :: openPort( unsigned int portNumber, const std::string &portName )
{
  if ( connected_ ) {
    errorString_ = "MidiOutCore::openPort: a valid connection already exists!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  CFRunLoopRunInMode( kCFRunLoopDefaultMode, 0, false );
  unsigned int nDest = MIDIGetNumberOfDestinations();
  if (nDest < 1) {
    errorString_ = "MidiOutCore::openPort: no MIDI output destinations found!";
    error( RtMidiError::NO_DEVICES_FOUND, errorString_ );
    return;
  }

  if ( portNumber >= nDest ) {
    std::ostringstream ost;
    ost << "MidiOutCore::openPort: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::INVALID_PARAMETER, errorString_ );
    return;
  }

  MIDIPortRef port;
  CoreMidiData *data = static_cast<CoreMidiData *> (apiData_);
  CFStringRef portNameRef = CFStringCreateWithCString( NULL, portName.c_str(), kCFStringEncodingASCII );
  OSStatus result = MIDIOutputPortCreate( data->client, 
                                          portNameRef,
                                          &port );
  CFRelease( portNameRef );
  if ( result != noErr ) {
    MIDIClientDispose( data->client );
    errorString_ = "MidiOutCore::openPort: error creating OS-X MIDI output port.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Get the desired output port identifier.
  MIDIEndpointRef destination = MIDIGetDestination( portNumber );
  if ( destination == 0 ) {
    MIDIPortDispose( port );
    MIDIClientDispose( data->client );
    errorString_ = "MidiOutCore::openPort: error getting MIDI output destination reference.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Save our api-specific connection information.
  data->port = port;
  data->destinationId = destination;
  connected_ = true;
}

void MidiOutCore :: closePort( void )
{
  CoreMidiData *data = static_cast<CoreMidiData *> (apiData_);

  if ( data->endpoint ) {
    MIDIEndpointDispose( data->endpoint );
    data->endpoint = 0;
  }

  if ( data->port ) {
    MIDIPortDispose( data->port );
    data->port = 0;
  }

  connected_ = false;
}

void MidiOutCore :: openVirtualPort( const std::string &portName )
{
  CoreMidiData *data = static_cast<CoreMidiData *> (apiData_);

  if ( data->endpoint ) {
    errorString_ = "MidiOutCore::openVirtualPort: a virtual output port already exists!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  // Create a virtual MIDI output source.
  MIDIEndpointRef endpoint;
  OSStatus result = MIDISourceCreate( data->client,
                                      CFStringCreateWithCString( NULL, portName.c_str(), kCFStringEncodingASCII ),
                                      &endpoint );
  if ( result != noErr ) {
    errorString_ = "MidiOutCore::initialize: error creating OS-X virtual MIDI source.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Save our api-specific connection information.
  data->endpoint = endpoint;
}

void MidiOutCore :: sendMessage( const unsigned char *message, size_t size )
{
  // We use the MIDISendSysex() function to asynchronously send sysex
  // messages.  Otherwise, we use a single CoreMidi MIDIPacket.
  unsigned int nBytes = static_cast<unsigned int> (size);
  if ( nBytes == 0 ) {
    errorString_ = "MidiOutCore::sendMessage: no data in message argument!";      
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  MIDITimeStamp timeStamp = AudioGetCurrentHostTime();
  CoreMidiData *data = static_cast<CoreMidiData *> (apiData_);
  OSStatus result;

  if ( message[0] != 0xF0 && nBytes > 3 ) {
    errorString_ = "MidiOutCore::sendMessage: message format problem ... not sysex but > 3 bytes?";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  Byte buffer[nBytes+(sizeof(MIDIPacketList))];
  ByteCount listSize = sizeof(buffer);
  MIDIPacketList *packetList = (MIDIPacketList*)buffer;
  MIDIPacket *packet = MIDIPacketListInit( packetList );

  ByteCount remainingBytes = nBytes;
  while (remainingBytes && packet) {
    ByteCount bytesForPacket = remainingBytes > 65535 ? 65535 : remainingBytes; // 65535 = maximum size of a MIDIPacket
    const Byte* dataStartPtr = (const Byte *) &message[nBytes - remainingBytes];
    packet = MIDIPacketListAdd( packetList, listSize, packet, timeStamp, bytesForPacket, dataStartPtr);
    remainingBytes -= bytesForPacket; 
  }

  if ( !packet ) {
    errorString_ = "MidiOutCore::sendMessage: could not allocate packet list";      
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Send to any destinations that may have connected to us.
  if ( data->endpoint ) {
    result = MIDIReceived( data->endpoint, packetList );
    if ( result != noErr ) {
      errorString_ = "MidiOutCore::sendMessage: error sending MIDI to virtual destinations.";
      error( RtMidiError::WARNING, errorString_ );
    }
  }

  // And send to an explicit destination port if we're connected.
  if ( connected_ ) {
    result = MIDISend( data->port, data->destinationId, packetList );
    if ( result != noErr ) {
      errorString_ = "MidiOutCore::sendMessage: error sending MIDI message to port.";
      error( RtMidiError::WARNING, errorString_ );
    }
  }
}

#endif  // __MACOSX_CORE__


//*********************************************************************//
//  API: LINUX ALSA SEQUENCER
//*********************************************************************//

// API information found at:
//   - http://www.alsa-project.org/documentation.php#Library

#if defined(__LINUX_ALSA__)

// The ALSA Sequencer API is based on the use of a callback function for
// MIDI input.
//
// Thanks to Pedro Lopez-Cabanillas for help with the ALSA sequencer
// time stamps and other assorted fixes!!!

// If you don't need timestamping for incoming MIDI events, define the
// preprocessor definition AVOID_TIMESTAMPING to save resources
// associated with the ALSA sequencer queues.

#include <pthread.h>
#include <sys/time.h>

// ALSA header file.
#include <alsa/asoundlib.h>

// A structure to hold variables related to the ALSA API
// implementation.
struct AlsaMidiData {
  snd_seq_t *seq;
  unsigned int portNum;
  int vport;
  snd_seq_port_subscribe_t *subscription;
  snd_midi_event_t *coder;
  unsigned int bufferSize;
  unsigned char *buffer;
  pthread_t thread;
  pthread_t dummy_thread_id;
  snd_seq_real_time_t lastTime;
  int queue_id; // an input queue is needed to get timestamped events
  int trigger_fds[2];
};

#define PORT_TYPE( pinfo, bits ) ((snd_seq_port_info_get_capability(pinfo) & (bits)) == (bits))

//*********************************************************************//
//  API: LINUX ALSA
//  Class Definitions: MidiInAlsa
//*********************************************************************//

static void *alsaMidiHandler( void *ptr )
{
  MidiInApi::RtMidiInData *data = static_cast<MidiInApi::RtMidiInData *> (ptr);
  AlsaMidiData *apiData = static_cast<AlsaMidiData *> (data->apiData);

  long nBytes;
  double time;
  bool continueSysex = false;
  bool doDecode = false;
  MidiInApi::MidiMessage message;
  int poll_fd_count;
  struct pollfd *poll_fds;

  snd_seq_event_t *ev;
  int result;
  apiData->bufferSize = 32;
  result = snd_midi_event_new( 0, &apiData->coder );
  if ( result < 0 ) {
    data->doInput = false;
    std::cerr << "\nMidiInAlsa::alsaMidiHandler: error initializing MIDI event parser!\n\n";
    return 0;
  }
  unsigned char *buffer = (unsigned char *) malloc( apiData->bufferSize );
  if ( buffer == NULL ) {
    data->doInput = false;
    snd_midi_event_free( apiData->coder );
    apiData->coder = 0;
    std::cerr << "\nMidiInAlsa::alsaMidiHandler: error initializing buffer memory!\n\n";
    return 0;
  }
  snd_midi_event_init( apiData->coder );
  snd_midi_event_no_status( apiData->coder, 1 ); // suppress running status messages

  poll_fd_count = snd_seq_poll_descriptors_count( apiData->seq, POLLIN ) + 1;
  poll_fds = (struct pollfd*)alloca( poll_fd_count * sizeof( struct pollfd ));
  snd_seq_poll_descriptors( apiData->seq, poll_fds + 1, poll_fd_count - 1, POLLIN );
  poll_fds[0].fd = apiData->trigger_fds[0];
  poll_fds[0].events = POLLIN;

  while ( data->doInput ) {

    if ( snd_seq_event_input_pending( apiData->seq, 1 ) == 0 ) {
      // No data pending
      if ( poll( poll_fds, poll_fd_count, -1) >= 0 ) {
        if ( poll_fds[0].revents & POLLIN ) {
          bool dummy;
          int res = read( poll_fds[0].fd, &dummy, sizeof(dummy) );
          (void) res;
        }
      }
      continue;
    }

    // If here, there should be data.
    result = snd_seq_event_input( apiData->seq, &ev );
    if ( result == -ENOSPC ) {
      std::cerr << "\nMidiInAlsa::alsaMidiHandler: MIDI input buffer overrun!\n\n";
      continue;
    }
    else if ( result <= 0 ) {
      std::cerr << "\nMidiInAlsa::alsaMidiHandler: unknown MIDI input error!\n";
      perror("System reports");
      continue;
    }

    // This is a bit weird, but we now have to decode an ALSA MIDI
    // event (back) into MIDI bytes.  We'll ignore non-MIDI types.
    if ( !continueSysex ) message.bytes.clear();

    doDecode = false;
    switch ( ev->type ) {

    case SND_SEQ_EVENT_PORT_SUBSCRIBED:
#if defined(__RTMIDI_DEBUG__)
      std::cout << "MidiInAlsa::alsaMidiHandler: port connection made!\n";
#endif
      break;

    case SND_SEQ_EVENT_PORT_UNSUBSCRIBED:
#if defined(__RTMIDI_DEBUG__)
      std::cerr << "MidiInAlsa::alsaMidiHandler: port connection has closed!\n";
      std::cout << "sender = " << (int) ev->data.connect.sender.client << ":"
                << (int) ev->data.connect.sender.port
                << ", dest = " << (int) ev->data.connect.dest.client << ":"
                << (int) ev->data.connect.dest.port
                << std::endl;
#endif
      break;

    case SND_SEQ_EVENT_QFRAME: // MIDI time code
      if ( !( data->ignoreFlags & 0x02 ) ) doDecode = true;
      break;

    case SND_SEQ_EVENT_TICK: // 0xF9 ... MIDI timing tick
      if ( !( data->ignoreFlags & 0x02 ) ) doDecode = true;
      break;

    case SND_SEQ_EVENT_CLOCK: // 0xF8 ... MIDI timing (clock) tick
      if ( !( data->ignoreFlags & 0x02 ) ) doDecode = true;
      break;

    case SND_SEQ_EVENT_SENSING: // Active sensing
      if ( !( data->ignoreFlags & 0x04 ) ) doDecode = true;
      break;

		case SND_SEQ_EVENT_SYSEX:
      if ( (data->ignoreFlags & 0x01) ) break;
      if ( ev->data.ext.len > apiData->bufferSize ) {
        apiData->bufferSize = ev->data.ext.len;
        free( buffer );
        buffer = (unsigned char *) malloc( apiData->bufferSize );
        if ( buffer == NULL ) {
          data->doInput = false;
          std::cerr << "\nMidiInAlsa::alsaMidiHandler: error resizing buffer memory!\n\n";
          break;
        }
      }

    default:
      doDecode = true;
    }

    if ( doDecode ) {

      nBytes = snd_midi_event_decode( apiData->coder, buffer, apiData->bufferSize, ev );
      if ( nBytes > 0 ) {
        // The ALSA sequencer has a maximum buffer size for MIDI sysex
        // events of 256 bytes.  If a device sends sysex messages larger
        // than this, they are segmented into 256 byte chunks.  So,
        // we'll watch for this and concatenate sysex chunks into a
        // single sysex message if necessary.
        if ( !continueSysex )
          message.bytes.assign( buffer, &buffer[nBytes] );
        else
          message.bytes.insert( message.bytes.end(), buffer, &buffer[nBytes] );

        continueSysex = ( ( ev->type == SND_SEQ_EVENT_SYSEX ) && ( message.bytes.back() != 0xF7 ) );
        if ( !continueSysex ) {

          // Calculate the time stamp:
          message.timeStamp = 0.0;

          // Method 1: Use the system time.
          //(void)gettimeofday(&tv, (struct timezone *)NULL);
          //time = (tv.tv_sec * 1000000) + tv.tv_usec;

          // Method 2: Use the ALSA sequencer event time data.
          // (thanks to Pedro Lopez-Cabanillas!).

          // Using method from:
          // https://www.gnu.org/software/libc/manual/html_node/Elapsed-Time.html

          // Perform the carry for the later subtraction by updating y.
          snd_seq_real_time_t &x(ev->time.time);
          snd_seq_real_time_t &y(apiData->lastTime);
          if (x.tv_nsec < y.tv_nsec) {
              int nsec = (y.tv_nsec - x.tv_nsec) / 1000000000 + 1;
              y.tv_nsec -= 1000000000 * nsec;
              y.tv_sec += nsec;
          }
          if (x.tv_nsec - y.tv_nsec > 1000000000) {
              int nsec = (x.tv_nsec - y.tv_nsec) / 1000000000;
              y.tv_nsec += 1000000000 * nsec;
              y.tv_sec -= nsec;
          }

          // Compute the time difference.
          time = x.tv_sec - y.tv_sec + (x.tv_nsec - y.tv_nsec)*1e-9;

          apiData->lastTime = ev->time.time;

          if ( data->firstMessage == true )
            data->firstMessage = false;
          else
            message.timeStamp = time;
            
          // 10/02/19: absolute usec based time stamp
          message.timeStamp *= 1000000;
        }
        else {
#if defined(__RTMIDI_DEBUG__)
          std::cerr << "\nMidiInAlsa::alsaMidiHandler: event parsing error or not a MIDI event!\n\n";
#endif
        }
      }
    }

    snd_seq_free_event( ev );
    if ( message.bytes.size() == 0 || continueSysex ) continue;

    if ( data->usingCallback ) {
      RtMidiIn::RtMidiCallback callback = (RtMidiIn::RtMidiCallback) data->userCallback;
      callback( message.timeStamp, &message.bytes, data->userData );
    }
    else {
      // As long as we haven't reached our queue size limit, push the message.
      if (!data->queue.push(message))
        std::cerr << "\nMidiInAlsa: message queue limit reached!!\n\n";
    }
  }

  if ( buffer ) free( buffer );
  snd_midi_event_free( apiData->coder );
  apiData->coder = 0;
  apiData->thread = apiData->dummy_thread_id;
  return 0;
}

MidiInAlsa :: MidiInAlsa( const std::string &clientName, unsigned int queueSizeLimit ) : MidiInApi( queueSizeLimit )
{
  initialize( clientName );
}

MidiInAlsa :: ~MidiInAlsa()
{
  // Close a connection if it exists.
  closePort();

  // Shutdown the input thread.
  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
  if ( inputData_.doInput ) {
    inputData_.doInput = false;
    int res = write( data->trigger_fds[1], &inputData_.doInput, sizeof(inputData_.doInput) );
    (void) res;
    if ( !pthread_equal(data->thread, data->dummy_thread_id) )
      pthread_join( data->thread, NULL );
  }

  // Cleanup.
  close ( data->trigger_fds[0] );
  close ( data->trigger_fds[1] );
  if ( data->vport >= 0 ) snd_seq_delete_port( data->seq, data->vport );
#ifndef AVOID_TIMESTAMPING
  snd_seq_free_queue( data->seq, data->queue_id );
#endif
  snd_seq_close( data->seq );
  delete data;
}

void MidiInAlsa :: initialize( const std::string& clientName )
{
  // Set up the ALSA sequencer client.
  snd_seq_t *seq;
  int result = snd_seq_open(&seq, "default", SND_SEQ_OPEN_DUPLEX, SND_SEQ_NONBLOCK);
  if ( result < 0 ) {
    errorString_ = "MidiInAlsa::initialize: error creating ALSA sequencer client object.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Set client name.
  snd_seq_set_client_name( seq, clientName.c_str() );

  // Save our api-specific connection information.
  AlsaMidiData *data = (AlsaMidiData *) new AlsaMidiData;
  data->seq = seq;
  data->portNum = -1;
  data->vport = -1;
  data->subscription = 0;
  data->dummy_thread_id = pthread_self();
  data->thread = data->dummy_thread_id;
  data->trigger_fds[0] = -1;
  data->trigger_fds[1] = -1;
  apiData_ = (void *) data;
  inputData_.apiData = (void *) data;

   if ( pipe(data->trigger_fds) == -1 ) {
    errorString_ = "MidiInAlsa::initialize: error creating pipe objects.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Create the input queue
#ifndef AVOID_TIMESTAMPING
  data->queue_id = snd_seq_alloc_named_queue(seq, "RtMidi Queue");
  // Set arbitrary tempo (mm=100) and resolution (240)
  snd_seq_queue_tempo_t *qtempo;
  snd_seq_queue_tempo_alloca(&qtempo);
  snd_seq_queue_tempo_set_tempo(qtempo, 600000);
  snd_seq_queue_tempo_set_ppq(qtempo, 240);
  snd_seq_set_queue_tempo(data->seq, data->queue_id, qtempo);
  snd_seq_drain_output(data->seq);
#endif
}

// This function is used to count or get the pinfo structure for a given port number.
unsigned int portInfo( snd_seq_t *seq, snd_seq_port_info_t *pinfo, unsigned int type, int portNumber )
{
  snd_seq_client_info_t *cinfo;
  int client;
  int count = 0;
  snd_seq_client_info_alloca( &cinfo );

  snd_seq_client_info_set_client( cinfo, -1 );
  while ( snd_seq_query_next_client( seq, cinfo ) >= 0 ) {
    client = snd_seq_client_info_get_client( cinfo );
    if ( client == 0 ) continue;
    // Reset query info
    snd_seq_port_info_set_client( pinfo, client );
    snd_seq_port_info_set_port( pinfo, -1 );
    while ( snd_seq_query_next_port( seq, pinfo ) >= 0 ) {
      unsigned int atyp = snd_seq_port_info_get_type( pinfo );
      if ( ( ( atyp & SND_SEQ_PORT_TYPE_MIDI_GENERIC ) == 0 ) &&
           ( ( atyp & SND_SEQ_PORT_TYPE_SYNTH ) == 0 ) &&
           ( ( atyp & SND_SEQ_PORT_TYPE_APPLICATION ) == 0 ) ) continue;
	    
      unsigned int caps = snd_seq_port_info_get_capability( pinfo );
      if ( ( caps & type ) != type ) continue;
      if ( count == portNumber ) return 1;
      ++count;
    }
  }

  // If a negative portNumber was used, return the port count.
  if ( portNumber < 0 ) return count;
  return 0;
}

unsigned int MidiInAlsa :: getPortCount()
{
  snd_seq_port_info_t *pinfo;
  snd_seq_port_info_alloca( &pinfo );

  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
  return portInfo( data->seq, pinfo, SND_SEQ_PORT_CAP_READ|SND_SEQ_PORT_CAP_SUBS_READ, -1 );
}

std::string MidiInAlsa :: getPortName( unsigned int portNumber )
{
  snd_seq_client_info_t *cinfo;
  snd_seq_port_info_t *pinfo;
  snd_seq_client_info_alloca( &cinfo );
  snd_seq_port_info_alloca( &pinfo );

  std::string stringName;
  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
  if ( portInfo( data->seq, pinfo, SND_SEQ_PORT_CAP_READ|SND_SEQ_PORT_CAP_SUBS_READ, (int) portNumber ) ) {
    int cnum = snd_seq_port_info_get_client( pinfo );
    snd_seq_get_any_client_info( data->seq, cnum, cinfo );
    std::ostringstream os;
    os << snd_seq_client_info_get_name( cinfo );
    os << ":";
    os << snd_seq_port_info_get_name( pinfo );
    os << " ";                                    // These lines added to make sure devices are listed
    os << snd_seq_port_info_get_client( pinfo );  // with full portnames added to ensure individual device names
    os << ":";
    os << snd_seq_port_info_get_port( pinfo );
    stringName = os.str();
    return stringName;
  }

  // If we get here, we didn't find a match.
  errorString_ = "MidiInAlsa::getPortName: error looking for port name!";
  error( RtMidiError::WARNING, errorString_ );
  return stringName;
}

void MidiInAlsa :: openPort( unsigned int portNumber, const std::string &portName )
{
  if ( connected_ ) {
    errorString_ = "MidiInAlsa::openPort: a valid connection already exists!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  unsigned int nSrc = this->getPortCount();
  if ( nSrc < 1 ) {
    errorString_ = "MidiInAlsa::openPort: no MIDI input sources found!";
    error( RtMidiError::NO_DEVICES_FOUND, errorString_ );
    return;
  }

  snd_seq_port_info_t *src_pinfo;
  snd_seq_port_info_alloca( &src_pinfo );
  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
  if ( portInfo( data->seq, src_pinfo, SND_SEQ_PORT_CAP_READ|SND_SEQ_PORT_CAP_SUBS_READ, (int) portNumber ) == 0 ) {
    std::ostringstream ost;
    ost << "MidiInAlsa::openPort: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::INVALID_PARAMETER, errorString_ );
    return;
  }

  snd_seq_addr_t sender, receiver;
  sender.client = snd_seq_port_info_get_client( src_pinfo );
  sender.port = snd_seq_port_info_get_port( src_pinfo );
  receiver.client = snd_seq_client_id( data->seq );

  snd_seq_port_info_t *pinfo;
  snd_seq_port_info_alloca( &pinfo );
  if ( data->vport < 0 ) {
    snd_seq_port_info_set_client( pinfo, 0 );
    snd_seq_port_info_set_port( pinfo, 0 );
    snd_seq_port_info_set_capability( pinfo,
                                      SND_SEQ_PORT_CAP_WRITE |
                                      SND_SEQ_PORT_CAP_SUBS_WRITE );
    snd_seq_port_info_set_type( pinfo,
                                SND_SEQ_PORT_TYPE_MIDI_GENERIC |
                                SND_SEQ_PORT_TYPE_APPLICATION );
    snd_seq_port_info_set_midi_channels(pinfo, 16);
#ifndef AVOID_TIMESTAMPING
    snd_seq_port_info_set_timestamping(pinfo, 1);
    snd_seq_port_info_set_timestamp_real(pinfo, 1);    
    snd_seq_port_info_set_timestamp_queue(pinfo, data->queue_id);
#endif
    snd_seq_port_info_set_name(pinfo,  portName.c_str() );
    data->vport = snd_seq_create_port(data->seq, pinfo);
  
    if ( data->vport < 0 ) {
      errorString_ = "MidiInAlsa::openPort: ALSA error creating input port.";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
      return;
    }
    data->vport = snd_seq_port_info_get_port(pinfo);
  }

  receiver.port = data->vport;

  if ( !data->subscription ) {
    // Make subscription
    if (snd_seq_port_subscribe_malloc( &data->subscription ) < 0) {
      errorString_ = "MidiInAlsa::openPort: ALSA error allocation port subscription.";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
      return;
    }
    snd_seq_port_subscribe_set_sender(data->subscription, &sender);
    snd_seq_port_subscribe_set_dest(data->subscription, &receiver);
    if ( snd_seq_subscribe_port(data->seq, data->subscription) ) {
      snd_seq_port_subscribe_free( data->subscription );
      data->subscription = 0;
      errorString_ = "MidiInAlsa::openPort: ALSA error making port connection.";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
      return;
    }
  }

  if ( inputData_.doInput == false ) {
    // Start the input queue
#ifndef AVOID_TIMESTAMPING
    snd_seq_start_queue( data->seq, data->queue_id, NULL );
    snd_seq_drain_output( data->seq );
#endif
    // Start our MIDI input thread.
    pthread_attr_t attr;
    pthread_attr_init(&attr);
    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
    pthread_attr_setschedpolicy(&attr, SCHED_OTHER);

    inputData_.doInput = true;
    int err = pthread_create(&data->thread, &attr, alsaMidiHandler, &inputData_);
    pthread_attr_destroy(&attr);
    if ( err ) {
      snd_seq_unsubscribe_port( data->seq, data->subscription );
      snd_seq_port_subscribe_free( data->subscription );
      data->subscription = 0;
      inputData_.doInput = false;
      errorString_ = "MidiInAlsa::openPort: error starting MIDI input thread!";
      error( RtMidiError::THREAD_ERROR, errorString_ );
      return;
    }
  }

  connected_ = true;
}

void MidiInAlsa :: openVirtualPort( const std::string &portName )
{
  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
  if ( data->vport < 0 ) {
    snd_seq_port_info_t *pinfo;
    snd_seq_port_info_alloca( &pinfo );
    snd_seq_port_info_set_capability( pinfo,
				      SND_SEQ_PORT_CAP_WRITE |
				      SND_SEQ_PORT_CAP_SUBS_WRITE );
    snd_seq_port_info_set_type( pinfo,
				SND_SEQ_PORT_TYPE_MIDI_GENERIC |
				SND_SEQ_PORT_TYPE_APPLICATION );
    snd_seq_port_info_set_midi_channels(pinfo, 16);
#ifndef AVOID_TIMESTAMPING
    snd_seq_port_info_set_timestamping(pinfo, 1);
    snd_seq_port_info_set_timestamp_real(pinfo, 1);    
    snd_seq_port_info_set_timestamp_queue(pinfo, data->queue_id);
#endif
    snd_seq_port_info_set_name(pinfo, portName.c_str());
    data->vport = snd_seq_create_port(data->seq, pinfo);

    if ( data->vport < 0 ) {
      errorString_ = "MidiInAlsa::openVirtualPort: ALSA error creating virtual port.";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
      return;
    }
    data->vport = snd_seq_port_info_get_port(pinfo);
  }

  if ( inputData_.doInput == false ) {
    // Wait for old thread to stop, if still running
    if ( !pthread_equal(data->thread, data->dummy_thread_id) )
      pthread_join( data->thread, NULL );

    // Start the input queue
#ifndef AVOID_TIMESTAMPING
    snd_seq_start_queue( data->seq, data->queue_id, NULL );
    snd_seq_drain_output( data->seq );
#endif
    // Start our MIDI input thread.
    pthread_attr_t attr;
    pthread_attr_init(&attr);
    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
    pthread_attr_setschedpolicy(&attr, SCHED_OTHER);

    inputData_.doInput = true;
    int err = pthread_create(&data->thread, &attr, alsaMidiHandler, &inputData_);
    pthread_attr_destroy(&attr);
    if ( err ) {
      if ( data->subscription ) {
        snd_seq_unsubscribe_port( data->seq, data->subscription );
        snd_seq_port_subscribe_free( data->subscription );
        data->subscription = 0;
      }
      inputData_.doInput = false;
      errorString_ = "MidiInAlsa::openPort: error starting MIDI input thread!";
      error( RtMidiError::THREAD_ERROR, errorString_ );
      return;
    }
  }
}

void MidiInAlsa :: closePort( void )
{
  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);

  if ( connected_ ) {
    if ( data->subscription ) {
      snd_seq_unsubscribe_port( data->seq, data->subscription );
      snd_seq_port_subscribe_free( data->subscription );
      data->subscription = 0;
    }
    // Stop the input queue
#ifndef AVOID_TIMESTAMPING
    snd_seq_stop_queue( data->seq, data->queue_id, NULL );
    snd_seq_drain_output( data->seq );
#endif
    connected_ = false;
  }

  // Stop thread to avoid triggering the callback, while the port is intended to be closed
  if ( inputData_.doInput ) {
    inputData_.doInput = false;
    int res = write( data->trigger_fds[1], &inputData_.doInput, sizeof(inputData_.doInput) );
    (void) res;
    if ( !pthread_equal(data->thread, data->dummy_thread_id) )
      pthread_join( data->thread, NULL );
  }
}

//*********************************************************************//
//  API: LINUX ALSA
//  Class Definitions: MidiOutAlsa
//*********************************************************************//

MidiOutAlsa :: MidiOutAlsa( const std::string &clientName ) : MidiOutApi()
{
  initialize( clientName );
}

MidiOutAlsa :: ~MidiOutAlsa()
{
  // Close a connection if it exists.
  closePort();

  // Cleanup.
  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
  if ( data->vport >= 0 ) snd_seq_delete_port( data->seq, data->vport );
  if ( data->coder ) snd_midi_event_free( data->coder );
  if ( data->buffer ) free( data->buffer );
  snd_seq_close( data->seq );
  delete data;
}

void MidiOutAlsa :: initialize( const std::string& clientName )
{
  // Set up the ALSA sequencer client.
  snd_seq_t *seq;
  int result1 = snd_seq_open( &seq, "default", SND_SEQ_OPEN_OUTPUT, SND_SEQ_NONBLOCK );
  if ( result1 < 0 ) {
    errorString_ = "MidiOutAlsa::initialize: error creating ALSA sequencer client object.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
	}

  // Set client name.
  snd_seq_set_client_name( seq, clientName.c_str() );

  // Save our api-specific connection information.
  AlsaMidiData *data = (AlsaMidiData *) new AlsaMidiData;
  data->seq = seq;
  data->portNum = -1;
  data->vport = -1;
  data->bufferSize = 32;
  data->coder = 0;
  data->buffer = 0;
  int result = snd_midi_event_new( data->bufferSize, &data->coder );
  if ( result < 0 ) {
    delete data;
    errorString_ = "MidiOutAlsa::initialize: error initializing MIDI event parser!\n\n";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }
  data->buffer = (unsigned char *) malloc( data->bufferSize );
  if ( data->buffer == NULL ) {
    delete data;
    errorString_ = "MidiOutAlsa::initialize: error allocating buffer memory!\n\n";
    error( RtMidiError::MEMORY_ERROR, errorString_ );
    return;
  }
  snd_midi_event_init( data->coder );
  apiData_ = (void *) data;
}

unsigned int MidiOutAlsa :: getPortCount()
{
	snd_seq_port_info_t *pinfo;
	snd_seq_port_info_alloca( &pinfo );

  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
  return portInfo( data->seq, pinfo, SND_SEQ_PORT_CAP_WRITE|SND_SEQ_PORT_CAP_SUBS_WRITE, -1 );
}

std::string MidiOutAlsa :: getPortName( unsigned int portNumber )
{
  snd_seq_client_info_t *cinfo;
  snd_seq_port_info_t *pinfo;
  snd_seq_client_info_alloca( &cinfo );
  snd_seq_port_info_alloca( &pinfo );

  std::string stringName;
  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
  if ( portInfo( data->seq, pinfo, SND_SEQ_PORT_CAP_WRITE|SND_SEQ_PORT_CAP_SUBS_WRITE, (int) portNumber ) ) {
    int cnum = snd_seq_port_info_get_client(pinfo);
    snd_seq_get_any_client_info( data->seq, cnum, cinfo );
    std::ostringstream os;
    os << snd_seq_client_info_get_name(cinfo);
    os << ":";
    os << snd_seq_port_info_get_name( pinfo );
    os << " ";                                    // These lines added to make sure devices are listed
    os << snd_seq_port_info_get_client( pinfo );  // with full portnames added to ensure individual device names
    os << ":";
    os << snd_seq_port_info_get_port(pinfo);
    stringName = os.str();
    return stringName;
  }

  // If we get here, we didn't find a match.
  errorString_ = "MidiOutAlsa::getPortName: error looking for port name!";
  error( RtMidiError::WARNING, errorString_ );
  return stringName;
}

void MidiOutAlsa :: openPort( unsigned int portNumber, const std::string &portName )
{
  if ( connected_ ) {
    errorString_ = "MidiOutAlsa::openPort: a valid connection already exists!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  unsigned int nSrc = this->getPortCount();
  if (nSrc < 1) {
    errorString_ = "MidiOutAlsa::openPort: no MIDI output sources found!";
    error( RtMidiError::NO_DEVICES_FOUND, errorString_ );
    return;
  }

	snd_seq_port_info_t *pinfo;
	snd_seq_port_info_alloca( &pinfo );
  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
  if ( portInfo( data->seq, pinfo, SND_SEQ_PORT_CAP_WRITE|SND_SEQ_PORT_CAP_SUBS_WRITE, (int) portNumber ) == 0 ) {
    std::ostringstream ost;
    ost << "MidiOutAlsa::openPort: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::INVALID_PARAMETER, errorString_ );
    return;
  }

  snd_seq_addr_t sender, receiver;
  receiver.client = snd_seq_port_info_get_client( pinfo );
  receiver.port = snd_seq_port_info_get_port( pinfo );
  sender.client = snd_seq_client_id( data->seq );

  if ( data->vport < 0 ) {
    data->vport = snd_seq_create_simple_port( data->seq, portName.c_str(),
                                              SND_SEQ_PORT_CAP_READ|SND_SEQ_PORT_CAP_SUBS_READ,
                                              SND_SEQ_PORT_TYPE_MIDI_GENERIC|SND_SEQ_PORT_TYPE_APPLICATION );
    if ( data->vport < 0 ) {
      errorString_ = "MidiOutAlsa::openPort: ALSA error creating output port.";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
      return;
    }
  }

  sender.port = data->vport;

  // Make subscription
  if (snd_seq_port_subscribe_malloc( &data->subscription ) < 0) {
    snd_seq_port_subscribe_free( data->subscription );
    errorString_ = "MidiOutAlsa::openPort: error allocating port subscription.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }
  snd_seq_port_subscribe_set_sender(data->subscription, &sender);
  snd_seq_port_subscribe_set_dest(data->subscription, &receiver);
  snd_seq_port_subscribe_set_time_update(data->subscription, 1);
  snd_seq_port_subscribe_set_time_real(data->subscription, 1);
  if ( snd_seq_subscribe_port(data->seq, data->subscription) ) {
    snd_seq_port_subscribe_free( data->subscription );
    errorString_ = "MidiOutAlsa::openPort: ALSA error making port connection.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  connected_ = true;
}

void MidiOutAlsa :: closePort( void )
{
  if ( connected_ ) {
    AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
    snd_seq_unsubscribe_port( data->seq, data->subscription );
    snd_seq_port_subscribe_free( data->subscription );
    data->subscription = 0;
    connected_ = false;
  }
}

void MidiOutAlsa :: openVirtualPort( const std::string &portName )
{
  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
  if ( data->vport < 0 ) {
    data->vport = snd_seq_create_simple_port( data->seq, portName.c_str(),
                                              SND_SEQ_PORT_CAP_READ|SND_SEQ_PORT_CAP_SUBS_READ,
                                              SND_SEQ_PORT_TYPE_MIDI_GENERIC|SND_SEQ_PORT_TYPE_APPLICATION );

    if ( data->vport < 0 ) {
      errorString_ = "MidiOutAlsa::openVirtualPort: ALSA error creating virtual port.";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
    }
  }
}

void MidiOutAlsa :: sendMessage( const unsigned char *message, size_t size )
{
  int result;
  AlsaMidiData *data = static_cast<AlsaMidiData *> (apiData_);
  unsigned int nBytes = static_cast<unsigned int> (size);
  if ( nBytes > data->bufferSize ) {
    data->bufferSize = nBytes;
    result = snd_midi_event_resize_buffer ( data->coder, nBytes);
    if ( result != 0 ) {
      errorString_ = "MidiOutAlsa::sendMessage: ALSA error resizing MIDI event buffer.";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
      return;
    }
    free (data->buffer);
    data->buffer = (unsigned char *) malloc( data->bufferSize );
    if ( data->buffer == NULL ) {
    errorString_ = "MidiOutAlsa::initialize: error allocating buffer memory!\n\n";
    error( RtMidiError::MEMORY_ERROR, errorString_ );
    return;
    }
  }

  snd_seq_event_t ev;
  snd_seq_ev_clear(&ev);
  snd_seq_ev_set_source(&ev, data->vport);
  snd_seq_ev_set_subs(&ev);
  snd_seq_ev_set_direct(&ev);
  for ( unsigned int i=0; i<nBytes; ++i ) data->buffer[i] = message[i];
  result = snd_midi_event_encode( data->coder, data->buffer, (long)nBytes, &ev );
  if ( result < (int)nBytes ) {
    errorString_ = "MidiOutAlsa::sendMessage: event parsing error!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  // Send the event.
  result = snd_seq_event_output(data->seq, &ev);
  if ( result < 0 ) {
    errorString_ = "MidiOutAlsa::sendMessage: error sending MIDI message to port.";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }
  snd_seq_drain_output(data->seq);
}

#endif // __LINUX_ALSA__


//*********************************************************************//
//  API: Windows Multimedia Library (MM)
//*********************************************************************//

// API information deciphered from:
//  - http://msdn.microsoft.com/library/default.asp?url=/library/en-us/multimed/htm/_win32_midi_reference.asp

// Thanks to Jean-Baptiste Berruchon for the sysex code.

#if defined(__WINDOWS_MM__)

// The Windows MM API is based on the use of a callback function for
// MIDI input.  We convert the system specific time stamps to delta
// time values.

// Windows MM MIDI header files.
#include <windows.h>
#include <mmsystem.h>

// Convert a null-terminated wide string or ANSI-encoded string to UTF-8.
static std::string ConvertToUTF8(const TCHAR *str)
{
  std::string u8str;
  const WCHAR *wstr = L"";
#if defined( UNICODE ) || defined( _UNICODE )
  wstr = str;
#else
  // Convert from ANSI encoding to wide string
  int wlength = MultiByteToWideChar( CP_ACP, 0, str, -1, NULL, 0 );
  std::wstring wstrtemp;
  if ( wlength )
  {
    wstrtemp.assign( wlength - 1, 0 );
    MultiByteToWideChar( CP_ACP, 0, str, -1, &wstrtemp[0], wlength );
    wstr = &wstrtemp[0];
  }
#endif
  // Convert from wide string to UTF-8
  int length = WideCharToMultiByte( CP_UTF8, 0, wstr, -1, NULL, 0, NULL, NULL );
  if ( length )
  {
    u8str.assign( length - 1, 0 );
    length = WideCharToMultiByte( CP_UTF8, 0, wstr, -1, &u8str[0], length, NULL, NULL );
  }
  return u8str;
}

#define  RT_SYSEX_BUFFER_SIZE 1024
#define  RT_SYSEX_BUFFER_COUNT 4

// A structure to hold variables related to the CoreMIDI API
// implementation.
struct WinMidiData {
  HMIDIIN inHandle;    // Handle to Midi Input Device
  HMIDIOUT outHandle;  // Handle to Midi Output Device
  DWORD lastTime;
  MidiInApi::MidiMessage message;
  LPMIDIHDR sysexBuffer[RT_SYSEX_BUFFER_COUNT];
  CRITICAL_SECTION _mutex; // [Patrice] see https://groups.google.com/forum/#!topic/mididev/6OUjHutMpEo
};

//*********************************************************************//
//  API: Windows MM
//  Class Definitions: MidiInWinMM
//*********************************************************************//

static void CALLBACK midiInputCallback( HMIDIIN /*hmin*/,
                                        UINT inputStatus, 
                                        DWORD_PTR instancePtr,
                                        DWORD_PTR midiMessage,
                                        DWORD timestamp )
{
  if ( inputStatus != MIM_DATA && inputStatus != MIM_LONGDATA && inputStatus != MIM_LONGERROR ) return;

  //MidiInApi::RtMidiInData *data = static_cast<MidiInApi::RtMidiInData *> (instancePtr);
  MidiInApi::RtMidiInData *data = (MidiInApi::RtMidiInData *)instancePtr;
  WinMidiData *apiData = static_cast<WinMidiData *> (data->apiData);

  /*
  // Calculate time stamp.
  if ( data->firstMessage == true ) {
    apiData->message.timeStamp = 0.0;
    data->firstMessage = false;
  }
  else apiData->message.timeStamp = (double) ( timestamp - apiData->lastTime ) * 0.001;
  apiData->lastTime = timestamp;
  */
    
  // 10/02/19: absolute usec based time stamp
  apiData->message.timeStamp = double(timestamp) * 1000;

  if ( inputStatus == MIM_DATA ) { // Channel or system message

    // Make sure the first byte is a status byte.
    unsigned char status = (unsigned char) (midiMessage & 0x000000FF);
    if ( !(status & 0x80) ) return;

    // Determine the number of bytes in the MIDI message.
    unsigned short nBytes = 1;
    if ( status < 0xC0 ) nBytes = 3;
    else if ( status < 0xE0 ) nBytes = 2;
    else if ( status < 0xF0 ) nBytes = 3;
    else if ( status == 0xF1 ) {
      if ( data->ignoreFlags & 0x02 ) return;
      else nBytes = 2;
    }
    else if ( status == 0xF2 ) nBytes = 3;
    else if ( status == 0xF3 ) nBytes = 2;
    else if ( status == 0xF8 && (data->ignoreFlags & 0x02) ) {
      // A MIDI timing tick message and we're ignoring it.
      return;
    }
    else if ( status == 0xFE && (data->ignoreFlags & 0x04) ) {
      // A MIDI active sensing message and we're ignoring it.
      return;
    }

    // Copy bytes to our MIDI message.
    unsigned char *ptr = (unsigned char *) &midiMessage;
    for ( int i=0; i<nBytes; ++i ) apiData->message.bytes.push_back( *ptr++ );
  }
  else { // Sysex message ( MIM_LONGDATA or MIM_LONGERROR )
    MIDIHDR *sysex = ( MIDIHDR *) midiMessage; 
    if ( !( data->ignoreFlags & 0x01 ) && inputStatus != MIM_LONGERROR ) {  
      // Sysex message and we're not ignoring it
      for ( int i=0; i<(int)sysex->dwBytesRecorded; ++i )
        apiData->message.bytes.push_back( sysex->lpData[i] );
    }

    // The WinMM API requires that the sysex buffer be requeued after
    // input of each sysex message.  Even if we are ignoring sysex
    // messages, we still need to requeue the buffer in case the user
    // decides to not ignore sysex messages in the future.  However,
    // it seems that WinMM calls this function with an empty sysex
    // buffer when an application closes and in this case, we should
    // avoid requeueing it, else the computer suddenly reboots after
    // one or two minutes.
    if ( apiData->sysexBuffer[sysex->dwUser]->dwBytesRecorded > 0 ) {
      //if ( sysex->dwBytesRecorded > 0 ) {
      EnterCriticalSection( &(apiData->_mutex) );
      MMRESULT result = midiInAddBuffer( apiData->inHandle, apiData->sysexBuffer[sysex->dwUser], sizeof(MIDIHDR) );
      LeaveCriticalSection( &(apiData->_mutex) );
      if ( result != MMSYSERR_NOERROR )
        std::cerr << "\nRtMidiIn::midiInputCallback: error sending sysex to Midi device!!\n\n";

      if ( data->ignoreFlags & 0x01 ) return;
    }
    else return;
  }

  if ( data->usingCallback ) {
    RtMidiIn::RtMidiCallback callback = (RtMidiIn::RtMidiCallback) data->userCallback;
    callback( apiData->message.timeStamp, &apiData->message.bytes, data->userData );
  }
  else {
    // As long as we haven't reached our queue size limit, push the message.
    if (!data->queue.push(apiData->message))
      std::cerr << "\nMidiInWinMM: message queue limit reached!!\n\n";
  }

  // Clear the vector for the next input message.
  apiData->message.bytes.clear();
}

MidiInWinMM :: MidiInWinMM( const std::string &clientName, unsigned int queueSizeLimit ) : MidiInApi( queueSizeLimit )
{
  initialize( clientName );
}

MidiInWinMM :: ~MidiInWinMM()
{
  // Close a connection if it exists.
  closePort();

  WinMidiData *data = static_cast<WinMidiData *> (apiData_);
  DeleteCriticalSection( &(data->_mutex) );

  // Cleanup.
  delete data;
}

void MidiInWinMM :: initialize( const std::string& /*clientName*/ )
{
  // We'll issue a warning here if no devices are available but not
  // throw an error since the user can plugin something later.
  unsigned int nDevices = midiInGetNumDevs();
  if ( nDevices == 0 ) {
    errorString_ = "MidiInWinMM::initialize: no MIDI input devices currently available.";
    error( RtMidiError::WARNING, errorString_ );
  }

  // Save our api-specific connection information.
  WinMidiData *data = (WinMidiData *) new WinMidiData;
  apiData_ = (void *) data;
  inputData_.apiData = (void *) data;
  data->message.bytes.clear();  // needs to be empty for first input message

  if ( !InitializeCriticalSectionAndSpinCount(&(data->_mutex), 0x00000400) ) {
    errorString_ = "MidiInWinMM::initialize: InitializeCriticalSectionAndSpinCount failed.";
    error( RtMidiError::WARNING, errorString_ );
  }
}

void MidiInWinMM :: openPort( unsigned int portNumber, const std::string &/*portName*/ )
{
  if ( connected_ ) {
    errorString_ = "MidiInWinMM::openPort: a valid connection already exists!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  unsigned int nDevices = midiInGetNumDevs();
  if (nDevices == 0) {
    errorString_ = "MidiInWinMM::openPort: no MIDI input sources found!";
    error( RtMidiError::NO_DEVICES_FOUND, errorString_ );
    return;
  }

  if ( portNumber >= nDevices ) {
    std::ostringstream ost;
    ost << "MidiInWinMM::openPort: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::INVALID_PARAMETER, errorString_ );
    return;
  }

  WinMidiData *data = static_cast<WinMidiData *> (apiData_);
  MMRESULT result = midiInOpen( &data->inHandle,
                                portNumber,
                                (DWORD_PTR)&midiInputCallback,
                                (DWORD_PTR)&inputData_,
                                CALLBACK_FUNCTION );
  if ( result != MMSYSERR_NOERROR ) {
    errorString_ = "MidiInWinMM::openPort: error creating Windows MM MIDI input port.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Allocate and init the sysex buffers.
  for ( int i=0; i<RT_SYSEX_BUFFER_COUNT; ++i ) {
    data->sysexBuffer[i] = (MIDIHDR*) new char[ sizeof(MIDIHDR) ];
    data->sysexBuffer[i]->lpData = new char[ RT_SYSEX_BUFFER_SIZE ];
    data->sysexBuffer[i]->dwBufferLength = RT_SYSEX_BUFFER_SIZE;
    data->sysexBuffer[i]->dwUser = i; // We use the dwUser parameter as buffer indicator
    data->sysexBuffer[i]->dwFlags = 0;

    result = midiInPrepareHeader( data->inHandle, data->sysexBuffer[i], sizeof(MIDIHDR) );
    if ( result != MMSYSERR_NOERROR ) {
      midiInClose( data->inHandle );
      data->inHandle = 0;
      errorString_ = "MidiInWinMM::openPort: error starting Windows MM MIDI input port (PrepareHeader).";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
      return;
    }

    // Register the buffer.
    result = midiInAddBuffer( data->inHandle, data->sysexBuffer[i], sizeof(MIDIHDR) );
    if ( result != MMSYSERR_NOERROR ) {
      midiInClose( data->inHandle );
      data->inHandle = 0;
      errorString_ = "MidiInWinMM::openPort: error starting Windows MM MIDI input port (AddBuffer).";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
      return;
    }
  }

  result = midiInStart( data->inHandle );
  if ( result != MMSYSERR_NOERROR ) {
    midiInClose( data->inHandle );
    data->inHandle = 0;
    errorString_ = "MidiInWinMM::openPort: error starting Windows MM MIDI input port.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  connected_ = true;
}

void MidiInWinMM :: openVirtualPort( const std::string &/*portName*/ )
{
  // This function cannot be implemented for the Windows MM MIDI API.
  errorString_ = "MidiInWinMM::openVirtualPort: cannot be implemented in Windows MM MIDI API!";
  error( RtMidiError::WARNING, errorString_ );
}

void MidiInWinMM :: closePort( void )
{
  if ( connected_ ) {
    WinMidiData *data = static_cast<WinMidiData *> (apiData_);
    EnterCriticalSection( &(data->_mutex) );
    midiInReset( data->inHandle );
    midiInStop( data->inHandle );

    for ( int i=0; i<RT_SYSEX_BUFFER_COUNT; ++i ) {
      int result = midiInUnprepareHeader(data->inHandle, data->sysexBuffer[i], sizeof(MIDIHDR));
      delete [] data->sysexBuffer[i]->lpData;
      delete [] data->sysexBuffer[i];
      if ( result != MMSYSERR_NOERROR ) {
        midiInClose( data->inHandle );
        data->inHandle = 0;
        errorString_ = "MidiInWinMM::openPort: error closing Windows MM MIDI input port (midiInUnprepareHeader).";
        error( RtMidiError::DRIVER_ERROR, errorString_ );
        return;
      }
    }

    midiInClose( data->inHandle );
    data->inHandle = 0;
    connected_ = false;
    LeaveCriticalSection( &(data->_mutex) );
  }
}

unsigned int MidiInWinMM :: getPortCount()
{
  return midiInGetNumDevs();
}

std::string MidiInWinMM :: getPortName( unsigned int portNumber )
{
  std::string stringName;
  unsigned int nDevices = midiInGetNumDevs();
  if ( portNumber >= nDevices ) {
    std::ostringstream ost;
    ost << "MidiInWinMM::getPortName: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::WARNING, errorString_ );
    return stringName;
  }

  MIDIINCAPS deviceCaps;
  midiInGetDevCaps( portNumber, &deviceCaps, sizeof(MIDIINCAPS));
  stringName = ConvertToUTF8( deviceCaps.szPname );

  // Next lines added to add the portNumber to the name so that 
  // the device's names are sure to be listed with individual names
  // even when they have the same brand name
#ifdef RTMIDI_ENSURE_UNIQUE_PORTNAMES
  std::ostringstream os;
  os << " ";
  os << portNumber;
  stringName += os.str();
#endif

  return stringName;
}

//*********************************************************************//
//  API: Windows MM
//  Class Definitions: MidiOutWinMM
//*********************************************************************//

MidiOutWinMM :: MidiOutWinMM( const std::string &clientName ) : MidiOutApi()
{
  initialize( clientName );
}

MidiOutWinMM :: ~MidiOutWinMM()
{
  // Close a connection if it exists.
  closePort();

  // Cleanup.
  WinMidiData *data = static_cast<WinMidiData *> (apiData_);
  delete data;
}

void MidiOutWinMM :: initialize( const std::string& /*clientName*/ )
{
  // We'll issue a warning here if no devices are available but not
  // throw an error since the user can plug something in later.
  unsigned int nDevices = midiOutGetNumDevs();
  if ( nDevices == 0 ) {
    errorString_ = "MidiOutWinMM::initialize: no MIDI output devices currently available.";
    error( RtMidiError::WARNING, errorString_ );
  }

  // Save our api-specific connection information.
  WinMidiData *data = (WinMidiData *) new WinMidiData;
  apiData_ = (void *) data;
}

unsigned int MidiOutWinMM :: getPortCount()
{
  return midiOutGetNumDevs();
}

std::string MidiOutWinMM :: getPortName( unsigned int portNumber )
{
  std::string stringName;
  unsigned int nDevices = midiOutGetNumDevs();
  if ( portNumber >= nDevices ) {
    std::ostringstream ost;
    ost << "MidiOutWinMM::getPortName: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::WARNING, errorString_ );
    return stringName;
  }

  MIDIOUTCAPS deviceCaps;
  midiOutGetDevCaps( portNumber, &deviceCaps, sizeof(MIDIOUTCAPS));
  stringName = ConvertToUTF8( deviceCaps.szPname );

  // Next lines added to add the portNumber to the name so that 
  // the device's names are sure to be listed with individual names
  // even when they have the same brand name
  std::ostringstream os;
#ifdef RTMIDI_ENSURE_UNIQUE_PORTNAMES
  os << " ";
  os << portNumber;
  stringName += os.str();
#endif

  return stringName;
}

void MidiOutWinMM :: openPort( unsigned int portNumber, const std::string &/*portName*/ )
{
  if ( connected_ ) {
    errorString_ = "MidiOutWinMM::openPort: a valid connection already exists!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  unsigned int nDevices = midiOutGetNumDevs();
  if (nDevices < 1) {
    errorString_ = "MidiOutWinMM::openPort: no MIDI output destinations found!";
    error( RtMidiError::NO_DEVICES_FOUND, errorString_ );
    return;
  }

  if ( portNumber >= nDevices ) {
    std::ostringstream ost;
    ost << "MidiOutWinMM::openPort: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::INVALID_PARAMETER, errorString_ );
    return;
  }

  WinMidiData *data = static_cast<WinMidiData *> (apiData_);
  MMRESULT result = midiOutOpen( &data->outHandle,
                                 portNumber,
                                 (DWORD)NULL,
                                 (DWORD)NULL,
                                 CALLBACK_NULL );
  if ( result != MMSYSERR_NOERROR ) {
    errorString_ = "MidiOutWinMM::openPort: error creating Windows MM MIDI output port.";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  connected_ = true;
}

void MidiOutWinMM :: closePort( void )
{
  if ( connected_ ) {
    WinMidiData *data = static_cast<WinMidiData *> (apiData_);
    midiOutReset( data->outHandle );
    midiOutClose( data->outHandle );
    data->outHandle = 0;
    connected_ = false;
  }
}

void MidiOutWinMM :: openVirtualPort( const std::string &/*portName*/ )
{
  // This function cannot be implemented for the Windows MM MIDI API.
  errorString_ = "MidiOutWinMM::openVirtualPort: cannot be implemented in Windows MM MIDI API!";
  error( RtMidiError::WARNING, errorString_ );
}

void MidiOutWinMM :: sendMessage( const unsigned char *message, size_t size )
{
  if ( !connected_ ) return;

  unsigned int nBytes = static_cast<unsigned int>(size);
  if ( nBytes == 0 ) {
    errorString_ = "MidiOutWinMM::sendMessage: message argument is empty!";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  MMRESULT result;
  WinMidiData *data = static_cast<WinMidiData *> (apiData_);
  if ( message[0] == 0xF0 ) { // Sysex message

    // Allocate buffer for sysex data.
    char *buffer = (char *) malloc( nBytes );
    if ( buffer == NULL ) {
      errorString_ = "MidiOutWinMM::sendMessage: error allocating sysex message memory!";
      error( RtMidiError::MEMORY_ERROR, errorString_ );
      return;
    }

    // Copy data to buffer.
    for ( unsigned int i=0; i<nBytes; ++i ) buffer[i] = message[i];

    // Create and prepare MIDIHDR structure.
    MIDIHDR sysex;
    sysex.lpData = (LPSTR) buffer;
    sysex.dwBufferLength = nBytes;
    sysex.dwFlags = 0;
    result = midiOutPrepareHeader( data->outHandle,  &sysex, sizeof(MIDIHDR) ); 
    if ( result != MMSYSERR_NOERROR ) {
      free( buffer );
      errorString_ = "MidiOutWinMM::sendMessage: error preparing sysex header.";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
      return;
    }

    // Send the message.
    result = midiOutLongMsg( data->outHandle, &sysex, sizeof(MIDIHDR) );
    if ( result != MMSYSERR_NOERROR ) {
      free( buffer );
      errorString_ = "MidiOutWinMM::sendMessage: error sending sysex message.";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
      return;
    }

    // Unprepare the buffer and MIDIHDR.
    while ( MIDIERR_STILLPLAYING == midiOutUnprepareHeader( data->outHandle, &sysex, sizeof (MIDIHDR) ) ) Sleep( 1 );
    free( buffer );
  }
  else { // Channel or system message.

    // Make sure the message size isn't too big.
    if ( nBytes > 3 ) {
      errorString_ = "MidiOutWinMM::sendMessage: message size is greater than 3 bytes (and not sysex)!";
      error( RtMidiError::WARNING, errorString_ );
      return;
    }

    // Pack MIDI bytes into double word.
    DWORD packet;
    unsigned char *ptr = (unsigned char *) &packet;
    for ( unsigned int i=0; i<nBytes; ++i ) {
      *ptr = message[i];
      ++ptr;
    }

    // Send the message immediately.
    result = midiOutShortMsg( data->outHandle, packet );
    if ( result != MMSYSERR_NOERROR ) {
      errorString_ = "MidiOutWinMM::sendMessage: error sending MIDI message.";
      error( RtMidiError::DRIVER_ERROR, errorString_ );
    }
  }
}

#endif  // __WINDOWS_MM__


//*********************************************************************//
//  API: UNIX JACK
//
//  Written primarily by Alexander Svetalkin, with updates for delta
//  time by Gary Scavone, April 2011.
//
//  *********************************************************************//

#if defined(__UNIX_JACK__)

// JACK header files
#include <jack/jack.h>
#include <jack/midiport.h>
#include <jack/ringbuffer.h>
#ifdef HAVE_SEMAPHORE
  #include <semaphore.h>
#endif

#define JACK_RINGBUFFER_SIZE 16384 // Default size for ringbuffer

struct JackMidiData {
  jack_client_t *client;
  jack_port_t *port;
  jack_ringbuffer_t *buffSize;
  jack_ringbuffer_t *buffMessage;
  jack_time_t lastTime;
#ifdef HAVE_SEMAPHORE
  sem_t sem_cleanup;
  sem_t sem_needpost;
#endif
  MidiInApi :: RtMidiInData *rtMidiIn;
  };

//*********************************************************************//
//  API: JACK
//  Class Definitions: MidiInJack
//*********************************************************************//

static int jackProcessIn( jack_nframes_t nframes, void *arg )
{
  JackMidiData *jData = (JackMidiData *) arg;
  MidiInApi :: RtMidiInData *rtData = jData->rtMidiIn;
  jack_midi_event_t event;
  jack_time_t time;

  // Is port created?
  if ( jData->port == NULL ) return 0;
  void *buff = jack_port_get_buffer( jData->port, nframes );

  // We have midi events in buffer
  int evCount = jack_midi_get_event_count( buff );
  for (int j = 0; j < evCount; j++) {
    MidiInApi::MidiMessage message;
    message.bytes.clear();

    jack_midi_event_get( &event, buff, j );

    for ( unsigned int i = 0; i < event.size; i++ )
      message.bytes.push_back( event.buffer[i] );

    // Compute the delta time.
    time = jack_get_time();
    if ( rtData->firstMessage == true )
      rtData->firstMessage = false;
    else
      message.timeStamp = ( time - jData->lastTime ) * 0.000001;

    jData->lastTime = time;

    if ( !rtData->continueSysex ) {
      if ( rtData->usingCallback ) {
        RtMidiIn::RtMidiCallback callback = (RtMidiIn::RtMidiCallback) rtData->userCallback;
        callback( message.timeStamp, &message.bytes, rtData->userData );
      }
      else {
        // As long as we haven't reached our queue size limit, push the message.
        if (!rtData->queue.push(message))
          std::cerr << "\nMidiInJack: message queue limit reached!!\n\n";
      }
    }
  }

  return 0;
}

MidiInJack :: MidiInJack( const std::string &clientName, unsigned int queueSizeLimit ) : MidiInApi( queueSizeLimit )
{
  initialize( clientName );
}

void MidiInJack :: initialize( const std::string& clientName )
{
  JackMidiData *data = new JackMidiData;
  apiData_ = (void *) data;

  data->rtMidiIn = &inputData_;
  data->port = NULL;
  data->client = NULL;
  this->clientName = clientName;

  connect();
}

void MidiInJack :: connect()
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);
  if ( data->client )
    return;

  // Initialize JACK client
  if (( data->client = jack_client_open( clientName.c_str(), JackNoStartServer, NULL )) == 0) {
    errorString_ = "MidiInJack::initialize: JACK server not running?";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  jack_set_process_callback( data->client, jackProcessIn, data );
  jack_activate( data->client );
}

MidiInJack :: ~MidiInJack()
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);
  closePort();

  if ( data->client )
    jack_client_close( data->client );
  delete data;
}

void MidiInJack :: openPort( unsigned int portNumber, const std::string &portName )
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);

  connect();

  // Creating new port
  if ( data->port == NULL)
    data->port = jack_port_register( data->client, portName.c_str(),
                                     JACK_DEFAULT_MIDI_TYPE, JackPortIsInput, 0 );

  if ( data->port == NULL) {
    errorString_ = "MidiInJack::openPort: JACK error creating port";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Connecting to the output
  std::string name = getPortName( portNumber );
  jack_connect( data->client, name.c_str(), jack_port_name( data->port ) );
}

void MidiInJack :: openVirtualPort( const std::string &portName )
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);

  connect();
  if ( data->port == NULL )
    data->port = jack_port_register( data->client, portName.c_str(),
                                     JACK_DEFAULT_MIDI_TYPE, JackPortIsInput, 0 );

  if ( data->port == NULL ) {
    errorString_ = "MidiInJack::openVirtualPort: JACK error creating virtual port";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
  }
}

unsigned int MidiInJack :: getPortCount()
{
  int count = 0;
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);
  connect();
  if ( !data->client )
    return 0;

  // List of available ports
  const char **ports = jack_get_ports( data->client, NULL, JACK_DEFAULT_MIDI_TYPE, JackPortIsOutput );

  if ( ports == NULL ) return 0;
  while ( ports[count] != NULL )
    count++;

  free( ports );

  return count;
}

std::string MidiInJack :: getPortName( unsigned int portNumber )
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);
  std::string retStr("");

  connect();

  // List of available ports
  const char **ports = jack_get_ports( data->client, NULL,
                                       JACK_DEFAULT_MIDI_TYPE, JackPortIsOutput );

  // Check port validity
  if ( ports == NULL ) {
    errorString_ = "MidiInJack::getPortName: no ports available!";
    error( RtMidiError::WARNING, errorString_ );
    return retStr;
  }

  if ( ports[portNumber] == NULL ) {
    std::ostringstream ost;
    ost << "MidiInJack::getPortName: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::WARNING, errorString_ );
  }
  else retStr.assign( ports[portNumber] );

  free( ports );
  return retStr;
}

void MidiInJack :: closePort()
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);

  if ( data->port == NULL ) return;
  jack_port_unregister( data->client, data->port );
  data->port = NULL;
}

//*********************************************************************//
//  API: JACK
//  Class Definitions: MidiOutJack
//*********************************************************************//

// Jack process callback
static int jackProcessOut( jack_nframes_t nframes, void *arg )
{
  JackMidiData *data = (JackMidiData *) arg;
  jack_midi_data_t *midiData;
  int space;

  // Is port created?
  if ( data->port == NULL ) return 0;

  void *buff = jack_port_get_buffer( data->port, nframes );
  jack_midi_clear_buffer( buff );

  while ( jack_ringbuffer_read_space( data->buffSize ) > 0 ) {
    jack_ringbuffer_read( data->buffSize, (char *) &space, (size_t) sizeof(space) );
    midiData = jack_midi_event_reserve( buff, 0, space );

    jack_ringbuffer_read( data->buffMessage, (char *) midiData, (size_t) space );
  }

#ifdef HAVE_SEMAPHORE
  if (!sem_trywait(&data->sem_needpost))
    sem_post(&data->sem_cleanup);
#endif

  return 0;
}

MidiOutJack :: MidiOutJack( const std::string &clientName ) : MidiOutApi()
{
  initialize( clientName );
}

void MidiOutJack :: initialize( const std::string& clientName )
{
  JackMidiData *data = new JackMidiData;
  apiData_ = (void *) data;

  data->port = NULL;
  data->client = NULL;
#ifdef HAVE_SEMAPHORE
  sem_init(&data->sem_cleanup, 0, 0);
  sem_init(&data->sem_needpost, 0, 0);
#endif
  this->clientName = clientName;

  connect();
}

void MidiOutJack :: connect()
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);
  if ( data->client )
    return;
  
  // Initialize output ringbuffers  
  data->buffSize = jack_ringbuffer_create( JACK_RINGBUFFER_SIZE );
  data->buffMessage = jack_ringbuffer_create( JACK_RINGBUFFER_SIZE );

  // Initialize JACK client
  if (( data->client = jack_client_open( clientName.c_str(), JackNoStartServer, NULL )) == 0) {
    errorString_ = "MidiOutJack::initialize: JACK server not running?";
    error( RtMidiError::WARNING, errorString_ );
    return;
  }

  jack_set_process_callback( data->client, jackProcessOut, data );
  jack_activate( data->client );
}

MidiOutJack :: ~MidiOutJack()
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);
  closePort();
  
  // Cleanup
  jack_ringbuffer_free( data->buffSize );
  jack_ringbuffer_free( data->buffMessage );
  if ( data->client ) {
    jack_client_close( data->client );
  }

#ifdef HAVE_SEMAPHORE
  sem_destroy(&data->sem_cleanup);
  sem_destroy(&data->sem_needpost);
#endif

  delete data;
}

void MidiOutJack :: openPort( unsigned int portNumber, const std::string &portName )
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);

  connect();

  // Creating new port
  if ( data->port == NULL )
    data->port = jack_port_register( data->client, portName.c_str(),
      JACK_DEFAULT_MIDI_TYPE, JackPortIsOutput, 0 );

  if ( data->port == NULL ) {
    errorString_ = "MidiOutJack::openPort: JACK error creating port";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
    return;
  }

  // Connecting to the output
  std::string name = getPortName( portNumber );
  jack_connect( data->client, jack_port_name( data->port ), name.c_str() );
}

void MidiOutJack :: openVirtualPort( const std::string &portName )
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);

  connect();
  if ( data->port == NULL )
    data->port = jack_port_register( data->client, portName.c_str(),
      JACK_DEFAULT_MIDI_TYPE, JackPortIsOutput, 0 );

  if ( data->port == NULL ) {
    errorString_ = "MidiOutJack::openVirtualPort: JACK error creating virtual port";
    error( RtMidiError::DRIVER_ERROR, errorString_ );
  }
}

unsigned int MidiOutJack :: getPortCount()
{
  int count = 0;
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);
  connect();
  if ( !data->client )
    return 0;

  // List of available ports
  const char **ports = jack_get_ports( data->client, NULL,
    JACK_DEFAULT_MIDI_TYPE, JackPortIsInput );

  if ( ports == NULL ) return 0;
  while ( ports[count] != NULL )
    count++;

  free( ports );

  return count;
}

std::string MidiOutJack :: getPortName( unsigned int portNumber )
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);
  std::string retStr("");

  connect();

  // List of available ports
  const char **ports = jack_get_ports( data->client, NULL,
    JACK_DEFAULT_MIDI_TYPE, JackPortIsInput );

  // Check port validity
  if ( ports == NULL) {
    errorString_ = "MidiOutJack::getPortName: no ports available!";
    error( RtMidiError::WARNING, errorString_ );
    return retStr;
  }

  if ( ports[portNumber] == NULL) {
    std::ostringstream ost;
    ost << "MidiOutJack::getPortName: the 'portNumber' argument (" << portNumber << ") is invalid.";
    errorString_ = ost.str();
    error( RtMidiError::WARNING, errorString_ );
  }
  else retStr.assign( ports[portNumber] );

  free( ports );
  return retStr;
}

void MidiOutJack :: closePort()
{
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);

  if ( data->port == NULL ) return;

#ifdef HAVE_SEMAPHORE
  struct timespec ts;
  if (clock_gettime(CLOCK_REALTIME, &ts) != -1)
  {
    ts.tv_sec += 1; // wait max one second
    sem_post(&data->sem_needpost);
    sem_timedwait(&data->sem_cleanup, &ts);
  }
#endif

  jack_port_unregister( data->client, data->port );
  data->port = NULL;
}

void MidiOutJack :: sendMessage( const unsigned char *message, size_t size )
{
  int nBytes = static_cast<int>(size);
  JackMidiData *data = static_cast<JackMidiData *> (apiData_);

  // Write full message to buffer
  jack_ringbuffer_write( data->buffMessage, ( const char * ) message,
                         nBytes );
  jack_ringbuffer_write( data->buffSize, ( char * ) &nBytes, sizeof( nBytes ) );
}

#endif  // __UNIX_JACK__
#endif
#endif

#if OSCCTRL
#if JUCE_DRIVER
/************************** BEGIN JuceOSCUI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/
 
#ifndef __juce_osc__
#define __juce_osc__
 
#include "../JuceLibraryCode/JuceHeader.h"


class oscItem : public uiItem {
    
    protected:
        
        OSCSender* fSender;
        String fPath;
        
    public:
        
        oscItem(OSCSender* sender, GUI* ui, const String& path, FAUSTFLOAT* zone)
        :uiItem(ui, zone), fSender(sender), fPath(path) {}
        virtual ~oscItem()
        {}
        
        virtual void reflectZone()
        {
            FAUSTFLOAT v = *fZone;
            fCache = v;
            fSender->send(fPath, float(v));
        }
    
};

class JuceOSCUI : private OSCReceiver, private OSCReceiver::Listener<OSCReceiver::RealtimeCallback>, public GUI {
    
    private:
        
        OSCSender fSender;
        String fIP;
        int fInputPort, fOutputPort;
        APIUI fAPIUI;
        Array<oscItem*> fOSCItems;  // Pointers are kept and desallocated by the GUI class
        
    public:
        
        JuceOSCUI(const std::string& ip, int in_port, int out_port)
        :fIP(ip), fInputPort(in_port), fOutputPort(out_port)
        {}
        
        virtual ~JuceOSCUI()
        {}
        
        void oscMessageReceived(const OSCMessage& message) override
        {
            String address = message.getAddressPattern().toString();
            
            for (int i = 0; i < message.size(); ++i) {
                if (message[i].isFloat32()) {
                    fAPIUI.setParamValue(fAPIUI.getParamIndex(address.toStdString().c_str()), FAUSTFLOAT(message[i].getFloat32()));
                    // "get" message with correct address
                } else if (message[i].isString()
                           && message[i].getString().equalsIgnoreCase("get")
                           && String(fAPIUI.getParamAddress(0)).startsWith(address)) {
                    for (int p = 0; p < fAPIUI.getParamsCount(); ++p) {
                        fSender.send(fAPIUI.getParamAddress(p), float(fAPIUI.getParamValue(p)), float(fAPIUI.getParamMin(p)), float(fAPIUI.getParamMax(p)));
                    }
                    // "hello" message
                } else if (message[i].isString()
                           && address.equalsIgnoreCase("/*")
                           && message[i].getString().equalsIgnoreCase("hello")) {
                    String path = fAPIUI.getParamAddress(0);
                    int pos1 = path.indexOfChar('/');
                    int pos2 = path.indexOfChar(pos1 + 1, '/');
                    fSender.send(path.substring(pos1, pos2), fIP, fInputPort, fOutputPort);
                }
            }
        }
        
        bool run() override
        {
            // Keep all zones for update when OSC messages are received
            if (fOSCItems.size() == 0) {
                for (int p = 0; p < fAPIUI.getParamsCount(); ++p) {
                    fOSCItems.add(new oscItem(&fSender, this, fAPIUI.getParamAddress(p), fAPIUI.getParamZone(p)));
                }
            }
            
            if (!fSender.connect(fIP, fOutputPort)) {
                std::cerr << "Error: could not connect to UDP port " << fInputPort << std::endl;
                return false;
            }
            
            if (!connect(fInputPort)) {
                std::cerr << "Error: could not connect to UDP port " << fOutputPort << std::endl;
                return false;
            }
            addListener(this);
            return true;
        }
        
        void stop() override
        {
            fSender.disconnect();
            disconnect();
            removeListener(this);
        }
        
        // -- widget's layouts
        
        void openTabBox(const char* label) override { fAPIUI.openTabBox(label); }
        void openHorizontalBox(const char* label) override { fAPIUI.openHorizontalBox(label); }
        void openVerticalBox(const char* label) override { fAPIUI.openVerticalBox(label); }
        void closeBox() override { fAPIUI.closeBox(); }
        
        // -- active widgets
        
        void addButton(const char* label, FAUSTFLOAT* zone) override { fAPIUI.addButton(label, zone); }
        void addCheckButton(const char* label, FAUSTFLOAT* zone) override { fAPIUI.addCheckButton(label, zone); }
        void addVerticalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) override
        { fAPIUI.addVerticalSlider(label, zone, init, min, max, step); }
        void addHorizontalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) override
        { fAPIUI.addHorizontalSlider(label, zone, init, min, max, step); }
        void addNumEntry(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step) override
        { fAPIUI.addNumEntry(label, zone, init, min, max, step); }
        
        // -- passive widgets
        
        void addHorizontalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max) override
        { fAPIUI.addHorizontalBargraph(label, zone, min, max); }
        void addVerticalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max) override
        { fAPIUI.addVerticalBargraph(label, zone, min, max); }
        
        // -- metadata declarations
        
        void declare(FAUSTFLOAT* zone, const char* key, const char* val) override { fAPIUI.declare(zone, key, val); }
    
};

#endif // __juce_osc__

/**************************  END  JuceOSCUI.h **************************/
#else
/************************** BEGIN OSCUI.h **************************/
/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 ************************************************************************/

#ifndef __OSCUI__
#define __OSCUI__

#include <vector>
#include <string>

/*

  Faust Project

  Copyright (C) 2011 Grame

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

  Grame Research Laboratory, 9 rue du Garet, 69001 Lyon - France
  research@grame.fr

*/

#ifndef __OSCControler__
#define __OSCControler__

#include <string>
/*

  Copyright (C) 2011 Grame

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

  Grame Research Laboratory, 9 rue du Garet, 69001 Lyon - France
  research@grame.fr

*/

#ifndef __FaustFactory__
#define __FaustFactory__

#include <stack>
#include <string>
#include <sstream>

/*

  Copyright (C) 2011 Grame

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

  Grame Research Laboratory, 9 rue du Garet, 69001 Lyon - France
  research@grame.fr

*/

#ifndef __FaustNode__
#define __FaustNode__

#include <string>
#include <vector>

/*

  Copyright (C) 2011 Grame

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

  Grame Research Laboratory, 9 rue du Garet, 69001 Lyon - France
  research@grame.fr

*/

#ifndef __MessageDriven__
#define __MessageDriven__

#include <string>
#include <vector>

/*

  Copyright (C) 2010  Grame

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

  Grame Research Laboratory, 9 rue du Garet, 69001 Lyon - France
  research@grame.fr

*/

#ifndef __MessageProcessor__
#define __MessageProcessor__

namespace oscfaust
{

class Message;
//--------------------------------------------------------------------------
/*!
	\brief an abstract class for objects able to process OSC messages	
*/
class MessageProcessor
{
	public:
		virtual		~MessageProcessor() {}
		virtual void processMessage( const Message* msg ) = 0;
};

} // end namespoace

#endif
/*

  Copyright (C) 2011 Grame

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

  Grame Research Laboratory, 9 rue du Garet, 69001 Lyon - France
  research@grame.fr

*/

#ifndef __smartpointer__
#define __smartpointer__

#include <cassert>

namespace oscfaust
{

/*!
\brief the base class for smart pointers implementation

	Any object that want to support smart pointers should
	inherit from the smartable class which provides reference counting
	and automatic delete when the reference count drops to zero.
*/
class smartable {
	private:
		unsigned 	refCount;		
	public:
		//! gives the reference count of the object
		unsigned refs() const         { return refCount; }
		//! addReference increments the ref count and checks for refCount overflow
		void addReference()           { refCount++; assert(refCount != 0); }
		//! removeReference delete the object when refCount is zero		
		void removeReference()		  { if (--refCount == 0) delete this; }
		
	protected:
		smartable() : refCount(0) {}
		smartable(const smartable&): refCount(0) {}
		//! destructor checks for non-zero refCount
		virtual ~smartable()    
        { 
            /* 
                See "Static SFaustNode create (const char* name, C* zone, C init, C min, C max, const char* prefix, GUI* ui)" comment.
                assert (refCount == 0); 
            */
        }
		smartable& operator=(const smartable&) { return *this; }
};

/*!
\brief the smart pointer implementation

	A smart pointer is in charge of maintaining the objects reference count 
	by the way of pointers operators overloading. It supports class 
	inheritance and conversion whenever possible.
\n	Instances of the SMARTP class are supposed to use \e smartable types (or at least
	objects that implements the \e addReference and \e removeReference
	methods in a consistent way).
*/
template<class T> class SMARTP {
	private:
		//! the actual pointer to the class
		T* fSmartPtr;

	public:
		//! an empty constructor - points to null
		SMARTP()	: fSmartPtr(0) {}
		//! build a smart pointer from a class pointer
		SMARTP(T* rawptr) : fSmartPtr(rawptr)              { if (fSmartPtr) fSmartPtr->addReference(); }
		//! build a smart pointer from an convertible class reference
		template<class T2> 
		SMARTP(const SMARTP<T2>& ptr) : fSmartPtr((T*)ptr) { if (fSmartPtr) fSmartPtr->addReference(); }
		//! build a smart pointer from another smart pointer reference
		SMARTP(const SMARTP& ptr) : fSmartPtr((T*)ptr)     { if (fSmartPtr) fSmartPtr->addReference(); }

		//! the smart pointer destructor: simply removes one reference count
		~SMARTP()  { if (fSmartPtr) fSmartPtr->removeReference(); }
		
		//! cast operator to retrieve the actual class pointer
		operator T*() const  { return fSmartPtr;	}

		//! '*' operator to access the actual class pointer
		T& operator*() const {
			// checks for null dereference
			assert (fSmartPtr != 0);
			return *fSmartPtr;
		}

		//! operator -> overloading to access the actual class pointer
		T* operator->() const	{ 
			// checks for null dereference
			assert (fSmartPtr != 0);
			return fSmartPtr;
		}

		//! operator = that moves the actual class pointer
		template <class T2>
		SMARTP& operator=(T2 p1_)	{ *this=(T*)p1_; return *this; }

		//! operator = that moves the actual class pointer
		SMARTP& operator=(T* p_)	{
			// check first that pointers differ
			if (fSmartPtr != p_) {
				// increments the ref count of the new pointer if not null
				if (p_ != 0) p_->addReference();
				// decrements the ref count of the old pointer if not null
				if (fSmartPtr != 0) fSmartPtr->removeReference();
				// and finally stores the new actual pointer
				fSmartPtr = p_;
			}
			return *this;
		}
		//! operator < to support SMARTP map with Visual C++
		bool operator<(const SMARTP<T>& p_)	const			  { return fSmartPtr < ((T *) p_); }
		//! operator = to support inherited class reference
		SMARTP& operator=(const SMARTP<T>& p_)                { return operator=((T *) p_); }
		//! dynamic cast support
		template<class T2> SMARTP& cast(T2* p_)               { return operator=(dynamic_cast<T*>(p_)); }
		//! dynamic cast support
		template<class T2> SMARTP& cast(const SMARTP<T2>& p_) { return operator=(dynamic_cast<T*>(p_)); }
};

}

#endif

namespace oscfaust
{

class Message;
class OSCRegexp;
class MessageDriven;
typedef class SMARTP<MessageDriven>	SMessageDriven;

//--------------------------------------------------------------------------
/*!
	\brief a base class for objects accepting OSC messages
	
	Message driven objects are hierarchically organized in a tree.
	They provides the necessary to dispatch an OSC message to its destination
	node, according to the message OSC address. 
	
	The principle of the dispatch is the following:
	- first the processMessage() method should be called on the top level node
	- next processMessage call propose 
*/
class MessageDriven : public MessageProcessor, public smartable
{
	std::string						fName;			///< the node name
	std::string						fOSCPrefix;		///< the node OSC address prefix (OSCAddress = fOSCPrefix + '/' + fName)
	std::vector<SMessageDriven>		fSubNodes;		///< the subnodes of the current node

	protected:
				 MessageDriven(const char *name, const char *oscprefix) : fName (name), fOSCPrefix(oscprefix) {}
		virtual ~MessageDriven() {}

	public:
		static SMessageDriven create(const char* name, const char *oscprefix)	{ return new MessageDriven(name, oscprefix); }

		/*!
			\brief OSC message processing method.
			\param msg the osc message to be processed
			The method should be called on the top level node.
		*/
		virtual void	processMessage(const Message* msg);

		/*!
			\brief propose an OSc message at a given hierarchy level.
			\param msg the osc message currently processed
			\param regexp a regular expression based on the osc address head
			\param addrTail the osc address tail
			
			The method first tries to match the regular expression with the object name. 
			When it matches:
			- it calls \c accept when \c addrTail is empty 
			- or it \c propose the message to its subnodes when \c addrTail is not empty. 
			  In this case a new \c regexp is computed with the head of \c addrTail and a new \c addrTail as well.
		*/
		virtual void	propose(const Message* msg, const OSCRegexp* regexp, const std::string& addrTail);

		/*!
			\brief accept an OSC message. 
			\param msg the osc message currently processed
			\return true when the message is processed by the node
			
			The method is called only for the destination nodes. The real message acceptance is the node 
			responsability and may depend on the message content.
		*/
		virtual bool	accept(const Message* msg);

		/*!
			\brief handler for the \c 'get' message
			\param ipdest the output message destination IP
			
			The \c 'get' message is supported by every node:
			- it is propagated to the subnodes until it reaches terminal nodes
			- a terminal node send its state on \c 'get' request to the IP address given as parameter.
			The \c get method is basically called by the accept method.
		*/
		virtual void	get(unsigned long ipdest) const;

		/*!
			\brief handler for the \c 'get' 'attribute' message
			\param ipdest the output message destination IP
			\param what the requested attribute
			
			The \c 'get' message is supported by every node:
			- it is propagated to the subnodes until it reaches terminal nodes
			- a terminal node send its state on \c 'get' request to the IP address given as parameter.
			The \c get method is basically called by the accept method.
		*/
		virtual void	get(unsigned long ipdest, const std::string& what) const {}

		void			add(SMessageDriven node)	{ fSubNodes.push_back (node); }
		const char*		getName() const				{ return fName.c_str(); }
		std::string		getOSCAddress() const;
		int				size() const				{ return (int)fSubNodes.size (); }
		
		const std::string&	name() const			{ return fName; }
		SMessageDriven	subnode(int i)              { return fSubNodes[i]; }
};

} // end namespoace

#endif
/*

  Copyright (C) 2011  Grame

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

  Grame Research Laboratory, 9 rue du Garet, 69001 Lyon - France
  research@grame.fr

*/


#ifndef __Message__
#define __Message__

#include <string>
#include <vector>

namespace oscfaust
{

class OSCStream;
template <typename T> class MsgParam;
class baseparam;
typedef SMARTP<baseparam>	Sbaseparam;

//--------------------------------------------------------------------------
/*!
	\brief base class of a message parameters
*/
class baseparam : public smartable
{
	public:
		virtual ~baseparam() {}

		/*!
		 \brief utility for parameter type checking
		*/
		template<typename X> bool isType() const { return dynamic_cast<const MsgParam<X>*> (this) != 0; }
		/*!
		 \brief utility for parameter convertion
		 \param errvalue the returned value when no conversion applies
		 \return the parameter value when the type matches
		*/
		template<typename X> X	value(X errvalue) const 
			{ const MsgParam<X>* o = dynamic_cast<const MsgParam<X>*> (this); return o ? o->getValue() : errvalue; }
		/*!
		 \brief utility for parameter comparison
		*/
		template<typename X> bool	equal(const baseparam& p) const 
			{ 
				const MsgParam<X>* a = dynamic_cast<const MsgParam<X>*> (this); 
				const MsgParam<X>* b = dynamic_cast<const MsgParam<X>*> (&p);
				return a && b && (a->getValue() == b->getValue());
			}
		/*!
		 \brief utility for parameter comparison
		*/
		bool operator==(const baseparam& p) const 
			{ 
				return equal<float>(p) || equal<int>(p) || equal<std::string>(p);
			}
		bool operator!=(const baseparam& p) const
			{ 
				return !equal<float>(p) && !equal<int>(p) && !equal<std::string>(p);
			}
			
		virtual SMARTP<baseparam> copy() const = 0;
};

//--------------------------------------------------------------------------
/*!
	\brief template for a message parameter
*/
template <typename T> class MsgParam : public baseparam
{
	T fParam;
	public:
				 MsgParam(T val) : fParam(val)	{}
		virtual ~MsgParam() {}
		
		T getValue() const { return fParam; }
		
		virtual Sbaseparam copy() const { return new MsgParam<T>(fParam); }
};

//--------------------------------------------------------------------------
/*!
	\brief a message description
	
	A message is composed of an address (actually an OSC address),
	a message string that may be viewed as a method name
	and a list of message parameters.
*/
class Message
{
    public:
        typedef SMARTP<baseparam>		argPtr;		///< a message argument ptr type
        typedef std::vector<argPtr>		argslist;	///< args list type

    private:
        unsigned long	fSrcIP;			///< the message source IP number
        std::string	fAddress;			///< the message osc destination address
        std::string	fAlias;             ///< the message alias osc destination address
        argslist	fArguments;			///< the message arguments

    public:
            /*!
                \brief an empty message constructor
            */
             Message() {}
            /*!
                \brief a message constructor
                \param address the message destination address
            */
            Message(const std::string& address) : fAddress(address), fAlias("") {}
             
            Message(const std::string& address, const std::string& alias) : fAddress(address), fAlias(alias) {}
            /*!
                \brief a message constructor
                \param address the message destination address
                \param args the message parameters
            */
            Message(const std::string& address, const argslist& args) 
                : fAddress(address), fArguments(args) {}
            /*!
                \brief a message constructor
                \param msg a message
            */
             Message(const Message& msg);
    virtual ~Message() {} //{ freed++; std::cout << "running messages: " << (allocated - freed) << std::endl; }

    /*!
        \brief adds a parameter to the message
        \param val the parameter
    */
    template <typename T> void add(T val)	{ fArguments.push_back(new MsgParam<T>(val)); }
    /*!
        \brief adds a float parameter to the message
        \param val the parameter value
    */
    void	add(float val)					{ add<float>(val); }
    
    /*!
     \brief adds a double parameter to the message
     \param val the parameter value
     */
    void	add(double val)					{ add<double>(val); }
    
    /*!
        \brief adds an int parameter to the message
        \param val the parameter value
    */
    void	add(int val)					{ add<int>(val); }
    
    /*!
        \brief adds a string parameter to the message
        \param val the parameter value
    */
    void	add(const std::string& val)		{ add<std::string>(val); }

    /*!
        \brief adds a parameter to the message
        \param val the parameter
    */
    void	add(argPtr val)                 { fArguments.push_back( val ); }

    /*!
        \brief sets the message address
        \param addr the address
    */
    void				setSrcIP(unsigned long addr)		{ fSrcIP = addr; }

    /*!
        \brief sets the message address
        \param addr the address
    */
    void				setAddress(const std::string& addr)		{ fAddress = addr; }
    /*!
        \brief print the message
        \param out the output stream
    */
    void				print(std::ostream& out) const;
    /*!
        \brief send the message to OSC
        \param out the OSC output stream
    */
    void				print(OSCStream& out) const;
    /*!
        \brief print message arguments
        \param out the OSC output stream
    */
    void				printArgs(OSCStream& out) const;

    /// \brief gives the message address
    const std::string&	address() const		{ return fAddress; }
    /// \brief gives the message alias
    const std::string&	alias() const		{ return fAlias; }
    /// \brief gives the message parameters list
    const argslist&		params() const		{ return fArguments; }
    /// \brief gives the message parameters list
    argslist&			params()			{ return fArguments; }
    /// \brief gives the message source IP 
    unsigned long		src() const			{ return fSrcIP; }
    /// \brief gives the message parameters count
    int					size() const		{ return (int)fArguments.size(); }

    bool operator == (const Message& other) const;	

    /*!
        \brief gives a message float parameter
        \param i the parameter index (0 <= i < size())
        \param val on output: the parameter value when the parameter type matches
        \return false when types don't match
    */
    bool	param(int i, float& val) const		{ val = params()[i]->value<float>(val); return params()[i]->isType<float>(); }
    
    /*!
     \brief gives a message double parameter
     \param i the parameter index (0 <= i < size())
     \param val on output: the parameter value when the parameter type matches
     \return false when types don't match
     */
    bool	param(int i, double& val) const		{ val = params()[i]->value<double>(val); return params()[i]->isType<double>(); }
    
    /*!
        \brief gives a message int parameter
        \param i the parameter index (0 <= i < size())
        \param val on output: the parameter value when the parameter type matches
        \return false when types don't match
    */
    bool	param(int i, int& val) const		{ val = params()[i]->value<int>(val); return params()[i]->isType<int>(); }
    /*!
        \brief gives a message int parameter
        \param i the parameter index (0 <= i < size())
        \param val on output: the parameter value when the parameter type matches
        \return false when types don't match
    */
    bool	param(int i, unsigned int& val) const		{ val = params()[i]->value<int>(val); return params()[i]->isType<int>(); }
    /*!
        \brief gives a message int parameter
        \param i the parameter index (0 <= i < size())
        \param val on output: the parameter value when the parameter type matches
        \return false when types don't match
        \note a boolean value is handled as integer
    */
    bool	param(int i, bool& val) const		{ int ival = 0; ival = params()[i]->value<int>(ival); val = ival!=0; return params()[i]->isType<int>(); }
    /*!
        \brief gives a message int parameter
        \param i the parameter index (0 <= i < size())
        \param val on output: the parameter value when the parameter type matches
        \return false when types don't match
    */
    bool	param(int i, long int& val) const	{ val = long(params()[i]->value<int>(val)); return params()[i]->isType<int>(); }
    /*!
        \brief gives a message string parameter
        \param i the parameter index (0 <= i < size())
        \param val on output: the parameter value when the parameter type matches
        \return false when types don't match
    */
    bool	param(int i, std::string& val) const { val = params()[i]->value<std::string>(val); return params()[i]->isType<std::string>(); }
};


} // end namespoace

#endif
/*

  Copyright (C) 2011 Grame

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

  Grame Research Laboratory, 9 rue du Garet, 69001 Lyon - France
  research@grame.fr

*/

#ifndef __RootNode__
#define __RootNode__

#include <map>
#include <string>
#include <vector>


namespace oscfaust
{

class OSCIO;
class RootNode;
typedef class SMARTP<RootNode> SRootNode;

/**
 * an alias target includes a map to rescale input values to output values
 * and a target osc address. The input values can be given in reversed order
 * to reverse the control
 */
struct aliastarget
{
	double      fMinIn;
	double      fMaxIn;
	double      fMinOut;
	double      fMaxOut;
	std::string fTarget;	// the real osc address

	aliastarget(const char* address, double imin, double imax, double omin, double omax)
		: fMinIn(imin), fMaxIn(imax), fMinOut(omin), fMaxOut(omax), fTarget(address) {}

	aliastarget(const aliastarget& t)
		: fMinIn(t.fMinIn), fMaxIn(t.fMaxIn), fMinOut(t.fMinOut), fMaxOut(t.fMaxOut), fTarget(t.fTarget) {}

	double scale(double x) const 
    {
        if (fMinIn < fMaxIn) {
            // increasing control
            double z = (x < fMinIn) ? fMinIn : (x > fMaxIn) ? fMaxIn : x;
            return fMinOut + (z-fMinIn)*(fMaxOut-fMinOut)/(fMaxIn-fMinIn);
            
        } else if (fMinIn > fMaxIn) {
            // reversed control
            double z = (x < fMaxIn) ? fMaxIn : (x > fMinIn) ? fMinIn : x;
            return fMinOut + (fMinIn-z)*(fMaxOut-fMinOut)/(fMinIn-fMaxIn);
            
        } else {
            // no control !
            return (fMinOut+fMaxOut)/2.0f;
        }
    }
    
    double invscale(double x) const
    {
        if (fMinOut < fMaxOut) {
            // increasing control
            double z = (x < fMinOut) ? fMinOut : (x > fMaxOut) ? fMaxOut : x;
            return fMinIn + (z-fMinOut)*(fMaxIn-fMinIn)/(fMaxOut-fMinOut);
            
        } else if (fMinOut > fMaxOut) {
            // reversed control
            double z = (x < fMaxOut) ? fMaxOut : (x > fMinOut) ? fMinOut : x;
            return fMinIn + (fMinOut-z)*(fMaxIn-fMinIn)/(fMinOut-fMaxOut);
            
        } else {
            // no control !
            return (fMinIn+fMaxIn)/2.0f;
        }
    }
};

//--------------------------------------------------------------------------
/*!
	\brief a faust root node

	A Faust root node handles the \c 'hello' message and provides support
	for incoming osc signal data. 
*/
class RootNode : public MessageDriven
{

    private:
        int *fUPDIn, *fUDPOut, *fUDPErr;    // the osc port numbers (required by the hello method)
        OSCIO* fIO;                         // an OSC IO controler
        JSONUI* fJSON;

        typedef std::map<std::string, std::vector<aliastarget> > TAliasMap;
        TAliasMap fAliases;

        template <typename T>
        void processAliasAux(const std::string& address, T val);
        void processAlias(const std::string& address, float val);
        void processAlias(const std::string& address, double val);
    
        void eraseAliases(const std::string& target);
        void eraseAlias(const std::string& target, const std::string& alias);
        bool aliasError(const Message* msg);

    protected:
        RootNode(const char *name, JSONUI* json, OSCIO* io = NULL) : MessageDriven(name, ""), fUPDIn(0), fUDPOut(0), fUDPErr(0), fIO(io), fJSON(json) {}
        virtual ~RootNode() {}

    public:
        static SRootNode create(const char* name, JSONUI* json, OSCIO* io = NULL) { return new RootNode(name, json, io); }

        virtual void processMessage(const Message* msg);
        virtual bool accept(const Message* msg);
        virtual void get(unsigned long ipdest) const;
        virtual void get(unsigned long ipdest, const std::string& what) const;

        template <typename T>
        bool aliasMsgAux(const Message* msg, T omin, T omax);
        bool aliasMsg(const Message* msg, double omin, double omax);
        bool aliasMsg(const Message* msg, float omin, float omax);
    
        template <typename T>
        void addAliasAux(const char* alias, const char* address, T imin, T imax, T omin, T omax);
        void addAlias(const char* alias, const char* address, float imin, float imax, float omin, float omax);
        void addAlias(const char* alias, const char* address, double imin, double imax, double omin, double omax);
    
        bool acceptSignal(const Message* msg);      ///< handler for signal data
        void hello(unsigned long ipdest) const;     ///< handler for the 'hello' message
        void setPorts(int* in, int* out, int* err);

        std::vector<std::pair<std::string, double> > getAliases(const std::string& address, double value);
};

} // end namespoace

#endif

namespace oscfaust
{

/**
 * map (rescale) input values to output values
 */
template <typename C> struct mapping
{
	const C fMinOut;
	const C fMaxOut;
	mapping(C omin, C omax) : fMinOut(omin), fMaxOut(omax) {}
	C clip (C x) { return (x < fMinOut) ? fMinOut : (x > fMaxOut) ? fMaxOut : x; }
};

//--------------------------------------------------------------------------
/*!
	\brief a faust node is a terminal node and represents a faust parameter controler
*/
template <typename C> class FaustNode : public MessageDriven, public uiTypedItem<C>
{
	mapping<C>	fMapping;
    RootNode*   fRoot;
    bool        fInput;  // true for input nodes (slider, button...)
	
	//---------------------------------------------------------------------
	// Warning !!!
	// The cast (C*)fZone is necessary because the real size allocated is
	// only known at execution time. When the library is compiled, fZone is
	// uniquely defined by FAUSTFLOAT.
	//---------------------------------------------------------------------
	bool store(C val) { *(C*)this->fZone = fMapping.clip(val); return true; }
	void sendOSC() const;

	protected:
		FaustNode(RootNode* root, const char *name, C* zone, C init, C min, C max, const char* prefix, GUI* ui, bool initZone, bool input) 
			: MessageDriven(name, prefix), uiTypedItem<C>(ui, zone), fMapping(min, max), fRoot(root), fInput(input)
			{
                if (initZone) {
                    *zone = init; 
                }
            }
			
		virtual ~FaustNode() {}

	public:
		typedef SMARTP<FaustNode<C> > SFaustNode;
		static SFaustNode create(RootNode* root, const char* name, C* zone, C init, C min, C max, const char* prefix, GUI* ui, bool initZone, bool input)	
        { 
            SFaustNode node = new FaustNode(root, name, zone, init, min, max, prefix, ui, initZone, input); 
            /*
                Since FaustNode is a subclass of uiItem, the pointer will also be kept in the GUI class, and it's desallocation will be done there.
                So we don't want to have smartpointer logic desallocate it and we increment the refcount.
            */
            node->addReference();
            return node; 
        }
    
		bool accept(const Message* msg);
		void get(unsigned long ipdest) const;		///< handler for the 'get' message
		virtual void reflectZone() { sendOSC(); this->fCache = *this->fZone; }
};

} // end namespace

#endif

class GUI;
namespace oscfaust
{

class OSCIO;
class RootNode;
typedef class SMARTP<RootNode> SRootNode;
class MessageDriven;
typedef class SMARTP<MessageDriven>	SMessageDriven;

//--------------------------------------------------------------------------
/*!
	\brief a factory to build a OSC UI hierarchy
	
	Actually, makes use of a stack to build the UI hierarchy.
	It includes a pointer to a OSCIO controler, but just to give it to the root node.
*/
class FaustFactory
{
    std::stack<SMessageDriven>  fNodes;		///< maintains the current hierarchy level
    SRootNode  fRoot;   ///< keep track of the root node
    OSCIO*     fIO;     ///< hack to support audio IO via OSC, actually the field is given to the root node
    GUI*       fGUI;    ///< a GUI pointer to support updateAllGuis(), required for bi-directionnal OSC
    JSONUI*    fJSON;
    
    private:
        std::string addressFirst(const std::string& address) const;
        std::string addressTail(const std::string& address) const;
        
    public:
        FaustFactory(GUI* ui, JSONUI* json, OSCIO * io = NULL);
        virtual ~FaustFactory();
        
        template <typename C> void addnode(const char* label, C* zone, C init, C min, C max, bool initZone, bool input);
        template <typename C> void addAlias(const std::string& fullpath, C* zone, C imin, C imax, C init, C min, C max, const char* label);
        
        void addAlias(const char* alias, const char* address, float imin, float imax, float omin, float omax);
        void addAlias(const char* alias, const char* address, double imin, double imax, double omin, double omax);
        void opengroup(const char* label);
        void closegroup();
        
        SRootNode root() const; 
};

/**
 * Add a node to the OSC UI tree in the current group at the top of the stack 
 */
template <typename C> void FaustFactory::addnode(const char* label, C* zone, C init, C min, C max, bool initZone, bool input) 
{
	SMessageDriven top;
	if (fNodes.size()) top = fNodes.top();
	if (top) {
		std::string prefix = top->getOSCAddress();
		top->add(FaustNode<C>::create(root(), label, zone, init, min, max, prefix.c_str(), fGUI, initZone, input));
	}
}

/**
 * Add an alias (actually stored and handled at root node level
 */
template <typename C> void FaustFactory::addAlias(const std::string& fullpath, C* zone, C imin, C imax, C init, C min, C max, const char* label)
{
	std::istringstream 	ss(fullpath);
	std::string 		realpath; 
 
	ss >> realpath >> imin >> imax;
	SMessageDriven top = fNodes.top();
	if (top) {
		std::string target = top->getOSCAddress() + "/" + label;
		addAlias(realpath.c_str(), target.c_str(), C(imin), C(imax), C(min), C(max));
	}
}

} // end namespoace

#endif

class GUI;

typedef void (*ErrorCallback)(void*);  

namespace oscfaust
{

class OSCIO;
class OSCSetup;
class OSCRegexp;
    
//--------------------------------------------------------------------------
/*!
	\brief the main Faust OSC Lib API
	
	The OSCControler is essentially a glue between the memory representation (in charge of the FaustFactory),
	and the network services (in charge of OSCSetup).
*/
class OSCControler
{
	int fUDPPort,   fUDPOut, fUPDErr;	// the udp ports numbers
	std::string     fDestAddress;		// the osc messages destination address, used at initialization only
										// to collect the address from the command line
	std::string     fBindAddress;		// when non empty, the address used to bind the socket for listening
	OSCSetup*		fOsc;				// the network manager (handles the udp sockets)
	OSCIO*			fIO;				// hack for OSC IO support (actually only relayed to the factory)
	FaustFactory*	fFactory;			// a factory to build the memory representation

    bool            fInit;
    
	public:
		/*
			base udp port is chosen in an unassigned range from IANA PORT NUMBERS (last updated 2011-01-24)
			see at http://www.iana.org/assignments/port-numbers
			5507-5552  Unassigned
		*/
		enum { kUDPBasePort = 5510 };
            
        OSCControler(int argc, char* argv[], GUI* ui, JSONUI* json, OSCIO* io = NULL, ErrorCallback errCallback = NULL, void* arg = NULL, bool init = true);

        virtual ~OSCControler();
	
		//--------------------------------------------------------------------------
		// addnode, opengroup and closegroup are simply relayed to the factory
		//--------------------------------------------------------------------------
		// Add a node in the current group (top of the group stack)
		template <typename T> void addnode(const char* label, T* zone, T init, T min, T max, bool input = true)
							{ fFactory->addnode(label, zone, init, min, max, fInit, input); }
		
		//--------------------------------------------------------------------------
		// This method is used for alias messages. The arguments imin and imax allow
		// to map incomming values from the alias input range to the actual range 
		template <typename T> void addAlias(const std::string& fullpath, T* zone, T imin, T imax, T init, T min, T max, const char* label)
							{ fFactory->addAlias(fullpath, zone, imin, imax, init, min, max, label); }

		void opengroup(const char* label)		{ fFactory->opengroup(label); }
		void closegroup()						{ fFactory->closegroup(); }
	   
		//--------------------------------------------------------------------------
		void run();				// starts the network services
		void endBundle();		// when bundle mode is on, close and send the current bundle (if any)
		void stop();			// stop the network services
		std::string getInfos() const; // gives information about the current environment (version, port numbers,...)

		int	getUDPPort() const			{ return fUDPPort; }
		int	getUDPOut()	const			{ return fUDPOut; }
		int	getUDPErr()	const			{ return fUPDErr; }
		const char*	getDestAddress() const { return fDestAddress.c_str(); }
		const char*	getRootName() const;	// probably useless, introduced for UI extension experiments
    
        void setUDPPort(int port) { fUDPPort = port; }
        void setUDPOut(int port) { fUDPOut = port; }
        void setUDPErr(int port) { fUPDErr = port; }
        void setDestAddress(const char* address) { fDestAddress = address; }

        // By default, an osc interface emits all parameters. You can filter specific params dynamically.
        static std::vector<OSCRegexp*>     fFilteredPaths; // filtered paths will not be emitted
        static void addFilteredPath(std::string path);
        static bool isPathFiltered(std::string path);
        static void resetFilteredPaths();
    
		static float version();				// the Faust OSC library version number
		static const char* versionstr();	// the Faust OSC library version number as a string
		static int gXmit;                   // a static variable to control the transmission of values
                                            // i.e. the use of the interface as a controler
		static int gBundle;                 // a static variable to control the osc bundle mode
};

#define kNoXmit     0
#define kAll        1
#define kAlias      2

}

#endif

#ifdef _WIN32
#define strcasecmp _stricmp
#endif

/******************************************************************************
 *******************************************************************************
 
 OSC (Open Sound Control) USER INTERFACE
 
 *******************************************************************************
 *******************************************************************************/
/*
 
 Note about the OSC addresses and the Faust UI names:
 ----------------------------------------------------
 There are potential conflicts between the Faust UI objects naming scheme and
 the OSC address space. An OSC symbolic names is an ASCII string consisting of
 printable characters other than the following:
	space
 #	number sign
 *	asterisk
 ,	comma
 /	forward
 ?	question mark
 [	open bracket
 ]	close bracket
 {	open curly brace
 }	close curly brace
 
 a simple solution to address the problem consists in replacing
 space or tabulation with '_' (underscore)
 all the other osc excluded characters with '-' (hyphen)
 
 This solution is implemented in the proposed OSC UI;
 */

class OSCUI : public GUI
{
    
    private:
        
        oscfaust::OSCControler*	fCtrl;
        std::vector<const char*> fAlias;
        JSONUI fJSON;
        
        const char* tr(const char* label) const
        {
            static char buffer[1024];
            char * ptr = buffer; int n=1;
            while (*label && (n++ < 1024)) {
                switch (*label) {
                    case ' ': case '	':
                        *ptr++ = '_';
                        break;
                    case '#': case '*': case ',': case '/': case '?':
                    case '[': case ']': case '{': case '}': case '(': case ')':
                        *ptr++ = '_';
                        break;
                    default:
                        *ptr++ = *label;
                }
                label++;
            }
            *ptr = 0;
            return buffer;
        }
        
        // add all accumulated alias
        void addalias(FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, const char* label)
        {
            for (unsigned int i = 0; i < fAlias.size(); i++) {
                fCtrl->addAlias(fAlias[i], zone, FAUSTFLOAT(0), FAUSTFLOAT(1), init, min, max, label);
            }
            fAlias.clear();
        }
        
    public:
        
        OSCUI(const char* /*applicationname*/, int argc, char* argv[], oscfaust::OSCIO* io = NULL, ErrorCallback errCallback = NULL, void* arg = NULL, bool init = true) : GUI()
        {
            fCtrl = new oscfaust::OSCControler(argc, argv, this, &fJSON, io, errCallback, arg, init);
            //		fCtrl->opengroup(applicationname);
        }
        
        virtual ~OSCUI() { delete fCtrl; }
        
        // -- widget's layouts
        
        virtual void openTabBox(const char* label)          { fCtrl->opengroup(tr(label)); fJSON.openTabBox(label); }
        virtual void openHorizontalBox(const char* label)   { fCtrl->opengroup(tr(label)); fJSON.openHorizontalBox(label); }
        virtual void openVerticalBox(const char* label)     { fCtrl->opengroup(tr(label)); fJSON.openVerticalBox(label); }
        virtual void closeBox()                             { fCtrl->closegroup(); fJSON.closeBox(); }
        
        // -- active widgets
        virtual void addButton(const char* label, FAUSTFLOAT* zone)
        {
            const char* l = tr(label);
            addalias(zone, 0, 0, 1, l);
            fCtrl->addnode(l, zone, FAUSTFLOAT(0), FAUSTFLOAT(0), FAUSTFLOAT(1));
            fJSON.addButton(label, zone);
        }
        virtual void addCheckButton(const char* label, FAUSTFLOAT* zone)
        {
            const char* l = tr(label);
            addalias(zone, 0, 0, 1, l);
            fCtrl->addnode(l, zone, FAUSTFLOAT(0), FAUSTFLOAT(0), FAUSTFLOAT(1));
            fJSON.addCheckButton(label, zone);
        }
        virtual void addVerticalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        {
            const char* l = tr(label);
            addalias(zone, init, min, max, l);
            fCtrl->addnode(l, zone, init, min, max);
            fJSON.addVerticalSlider(label, zone, init, min, max, step);
        }
        virtual void addHorizontalSlider(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        {
            const char* l = tr(label);
            addalias(zone, init, min, max, l);
            fCtrl->addnode(l, zone, init, min, max);
            fJSON.addHorizontalSlider(label, zone, init, min, max, step);
        }
        virtual void addNumEntry(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
        {
            const char* l = tr(label);
            addalias(zone, init, min, max, l);
            fCtrl->addnode(l, zone, init, min, max);
            fJSON.addNumEntry(label, zone, init, min, max, step);
        }
        
        // -- passive widgets
        
        virtual void addHorizontalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max)
        {
            const char* l = tr(label);
            addalias(zone, 0, min, max, l);
            fCtrl->addnode(l, zone, FAUSTFLOAT(0), min, max, false);
            fJSON.addHorizontalBargraph(label, zone, min, max);
        }
        virtual void addVerticalBargraph(const char* label, FAUSTFLOAT* zone, FAUSTFLOAT min, FAUSTFLOAT max)
        {
            const char* l = tr(label);
            addalias(zone, 0, min, max, l);
            fCtrl->addnode(l, zone, FAUSTFLOAT(0), min, max, false);
            fJSON.addVerticalBargraph(label, zone, min, max);
        }
            
        // -- metadata declarations
        
        virtual void declare(FAUSTFLOAT* zone, const char* key, const char* alias)
        {
            if (strcasecmp(key, "OSC") == 0) fAlias.push_back(alias);
            fJSON.declare(zone, key, alias);
        }
        
        virtual void show() {}
        
        bool run()
        {
            fCtrl->run();
            return true;
        }
        
        void stop()			{ fCtrl->stop(); }
        void endBundle() 	{ fCtrl->endBundle(); }
        
        std::string getInfos()          { return fCtrl->getInfos(); }
        
        const char* getRootName()		{ return fCtrl->getRootName(); }
        int getUDPPort()                { return fCtrl->getUDPPort(); }
        int getUDPOut()                 { return fCtrl->getUDPOut(); }
        int getUDPErr()                 { return fCtrl->getUDPErr(); }
        const char* getDestAddress()    { return fCtrl->getDestAddress(); }
        
        void setUDPPort(int port)       { fCtrl->setUDPPort(port); }
        void setUDPOut(int port)        { fCtrl->setUDPOut(port); }
        void setUDPErr(int port)        { fCtrl->setUDPErr(port); }
        void setDestAddress(const char* address)    { return fCtrl->setDestAddress(address); }
    
};

#endif // __OSCUI__
/**************************  END  OSCUI.h **************************/
#endif
static void osc_compute_callback(void* arg)
{
    static_cast<OSCUI*>(arg)->endBundle();
}
#endif

#if DYNAMIC_DSP
/************************** BEGIN llvm-dsp.h **************************/
/************************************************************************
 ************************************************************************
 Copyright (C) 2003-2017 GRAME, Centre National de Creation Musicale
 
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation; either version 2.1 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ************************************************************************
 ************************************************************************/

#ifndef LLVM_DSP_H
#define LLVM_DSP_H

#ifdef _WIN32
#define DEPRECATED(fun) __declspec(deprecated) fun
#else
#define DEPRECATED(fun) fun __attribute__ ((deprecated));
#endif

#include <string>
#include <vector>


/*!
 \addtogroup llvmcpp C++ interface for compiling Faust code. Note that the API is not thread safe : use 'startMTDSPFactories/stopMTDSPFactories' to use it in a multi-thread context.
 @{
 */
 
/**
 * Get the library version.
 * 
 * @return the library version as a static string.
 */
extern "C" const char* getCLibFaustVersion();

/**
 * DSP instance class with methods.
 */
class llvm_dsp : public dsp {
    
    private:
    
        // llvm_dsp objects are allocated using llvm_dsp_factory::createDSPInstance();
        llvm_dsp() {}
    
    public:
        
        int getNumInputs();
       
        int getNumOutputs();
        
        void buildUserInterface(UI* ui_interface);
       
        int getSampleRate();
        
        void init(int sample_rate);
       
        void instanceInit(int sample_rate);
    
        void instanceConstants(int sample_rate);
    
        void instanceResetUserInterface();
        
        void instanceClear();
        
        llvm_dsp* clone();
        
        void metadata(Meta* m);
        
        void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs);
    
};

/**
 * DSP factory class.
 */

class llvm_dsp_factory : public dsp_factory {

     public:
    
        virtual ~llvm_dsp_factory();
        
        /**
         *  Return factory name:
         *  either the name declared in DSP with [declare name "foo"] syntax
         *  or 'filename' (if createDSPFactoryFromFile is used)
         *  or 'name_app' (if createDSPFactoryFromString is used)
        */
        std::string getName();
    
        /* Return factory LLVM target (like 'i386-apple-macosx10.6.0:opteron')*/
        std::string getTarget();
        
        /* Return factory SHA key */
        std::string getSHAKey();
        
        /* Return factory expanded DSP code */
        std::string getDSPCode();
        
        /* Return factory compile options */
        std::string getCompileOptions();
        
        /* Get the Faust DSP factory list of library dependancies */
        std::vector<std::string> getLibraryList();
        
        /* Get the list of all used includes */
        std::vector<std::string> getIncludePathnames();
        
        /* Create a new DSP instance, to be deleted with C++ 'delete' */
        llvm_dsp* createDSPInstance();
        
        /* Set a custom memory manager to be used when creating instances */
        void setMemoryManager(dsp_memory_manager* manager);
        
        /* Return the currently set custom memory manager */
        dsp_memory_manager* getMemoryManager();

};

/**
 * Get the target (triple + CPU) of the machine.
 *
 * @return the target as a string.
 */
std::string getDSPMachineTarget();

/**
 * Get the Faust DSP factory associated with a given SHA key (created from the 'expanded' DSP source), 
 * if already allocated in the factories cache and increment it's reference counter. You will have to explicitly
 * use deleteDSPFactory to properly decrement reference counter when the factory is no more needed.
 *
 * @param sha_key - the SHA key for an already created factory, kept in the factory cache
 *
 * @return a DSP factory if one is associated with the SHA key, otherwise a null pointer.
 */
llvm_dsp_factory* getDSPFactoryFromSHAKey(const std::string& sha_key);

/**
 * Create a Faust DSP factory from a DSP source code as a file. Note that the library keeps an internal cache of all 
 * allocated factories so that the compilation of the same DSP code (that is same source code and 
 * same set of 'normalized' compilations options) will return the same (reference counted) factory pointer. You will have to explicitly
 * use deleteDSPFactory to properly decrement the reference counter when the factory is no more needed.
 * 
 * @param filename - the DSP filename
 * @param argc - the number of parameters in argv array 
 * @param argv - the array of parameters (Warning : aux files generation options will be filtered (-svg, ...) --> use generateAuxFiles)
 * @param target - the LLVM machine target: like 'i386-apple-macosx10.6.0:opteron',
 *                 using an empty string takes the current machine settings,
 *                 and i386-apple-macosx10.6.0:generic kind of syntax for a generic processor
 * @param error_msg - the error string to be filled
 * @param opt_level - LLVM IR to IR optimization level (from -1 to 4, -1 means 'maximum possible value' 
 * since the maximum value may change with new LLVM versions)
 *
 * @return a DSP factory on success, otherwise a null pointer.
 */ 
llvm_dsp_factory* createDSPFactoryFromFile(const std::string& filename, 
                                           int argc, const char* argv[], 
                                           const std::string& target, 
                                           std::string& error_msg,
                                           int opt_level = -1);

/**
 * Create a Faust DSP factory from a DSP source code as a string. Note that the library keeps an internal cache of all 
 * allocated factories so that the compilation of the same DSP code (that is same source code and 
 * same set of 'normalized' compilations options) will return the same (reference counted) factory pointer. You will have to explicitly
 * use deleteDSPFactory to properly decrement reference counter when the factory is no more needed.
 * 
 * @param name_app - the name of the Faust program
 * @param dsp_content - the Faust program as a string
 * @param argc - the number of parameters in argv array
 * @param argv - the array of parameters (Warning : aux files generation options will be filtered (-svg, ...) --> use generateAuxFiles)
 * @param target - the LLVM machine target: like 'i386-apple-macosx10.6.0:opteron',
 *                 using an empty string takes the current machine settings,
 *                 and i386-apple-macosx10.6.0:generic kind of syntax for a generic processor
 * @param error_msg - the error string to be filled
 * @param opt_level - LLVM IR to IR optimization level (from -1 to 4, -1 means 'maximum possible value' 
 * since the maximum value may change with new LLVM versions)
 *
 * @return a DSP factory on success, otherwise a null pointer.
 */ 
llvm_dsp_factory* createDSPFactoryFromString(const std::string& name_app,
                                             const std::string& dsp_content,
                                             int argc, const char* argv[], 
                                             const std::string& target, 
                                             std::string& error_msg,
                                             int opt_level = -1);

/**
 * Delete a Faust DSP factory, that is decrements it's reference counter, possibly really deleting the internal pointer. 
 * Possibly also delete DSP pointers associated with this factory, if they were not explicitly deleted with C++ delete.
 * Beware : all kept factories and DSP pointers (in local variables...) thus become invalid.
 * 
 * @param factory - the DSP factory
 *
 * @return true if the factory internal pointer was really deleted, and false if only 'decremented'.
 */                                 
bool deleteDSPFactory(llvm_dsp_factory* factory);

/**
 * Get the Faust DSP factory list of library dependancies.
 *
 * @deprecated : use factory getDSPFactoryLibraryList method.
 *
 * @param factory - the DSP factory
 * 
 * @return the list as a vector of strings.
 */
DEPRECATED(std::vector<std::string> getDSPFactoryLibraryList(llvm_dsp_factory* factory));

/**
 * Delete all Faust DSP factories kept in the library cache. Beware : all kept factory and DSP pointers (in local variables...) thus become invalid.
 * 
 */                                 
void deleteAllDSPFactories();

/**
 * Return Faust DSP factories of the library cache as a vector of their SHA keys.
 * 
 * @return the Faust DSP factories.
 */                                 
std::vector<std::string> getAllDSPFactories();

/**
 * Start multi-thread access mode (since by default the library is not 'multi-thread' safe).
 * 
 * @return true if 'multi-thread' safe access is started.
 */ 
extern "C" bool startMTDSPFactories();

/**
 * Stop multi-thread access mode.
 * 
 */ 
extern "C" void stopMTDSPFactories();

/**
 * Create a Faust DSP factory from a base64 encoded LLVM bitcode string. Note that the library keeps an internal cache of all 
 * allocated factories so that the compilation of the same DSP code (that is the same LLVM bitcode string) will return 
 * the same (reference counted) factory pointer. You will have to explicitly use deleteDSPFactory to properly 
 * decrement reference counter when the factory is no more needed.
 * 
 * @param bit_code - the LLVM bitcode string
 * @param target - the LLVM machine target: like 'i386-apple-macosx10.6.0:opteron',
 *                 using an empty string takes the current machine settings,
 *                 and i386-apple-macosx10.6.0:generic kind of syntax for a generic processor
 * @param error_msg - the error string to be filled
 * @param opt_level - LLVM IR to IR optimization level (from -1 to 4, -1 means 'maximum possible value'
 * since the maximum value may change with new LLVM versions). A higher value than the one used when calling createDSPFactory can possibly be used.
 *
 * @return the DSP factory on success, otherwise a null pointer.
 */
llvm_dsp_factory* readDSPFactoryFromBitcode(const std::string& bit_code, const std::string& target, std::string& error_msg, int opt_level = -1);

/**
 * Write a Faust DSP factory into a base64 encoded LLVM bitcode string.
 * 
 * @param factory - the DSP factory
 *
 * @return the LLVM bitcode as a string.
 */
std::string writeDSPFactoryToBitcode(llvm_dsp_factory* factory);

/**
 * Create a Faust DSP factory from a LLVM bitcode file. Note that the library keeps an internal cache of all 
 * allocated factories so that the compilation of the same DSP code (that is the same LLVM bitcode file) will return 
 * the same (reference counted) factory pointer. You will have to explicitly use deleteDSPFactory to properly 
 * decrement reference counter when the factory is no more needed.
 * 
 * @param bit_code_path - the LLVM bitcode file pathname
 * @param target - the LLVM machine target: like 'i386-apple-macosx10.6.0:opteron',
 *                 using an empty string takes the current machine settings,
 *                 and i386-apple-macosx10.6.0:generic kind of syntax for a generic processor
 * @param error_msg - the error string to be filled
 * @param opt_level - LLVM IR to IR optimization level (from -1 to 4, -1 means 'maximum possible value'
 * since the maximum value may change with new LLVM versions). A higher value than the one used when calling 
 * createDSPFactory can possibly be used.
 * 
 * @return the DSP factory on success, otherwise a null pointer.
 */
llvm_dsp_factory* readDSPFactoryFromBitcodeFile(const std::string& bit_code_path, const std::string& target, std::string& error_msg, int opt_level = -1);

/**
 * Write a Faust DSP factory into a LLVM bitcode file.
 * 
 * @param factory - the DSP factory
 * @param bit_code_path - the LLVM bitcode file pathname.
 *
 * @return true on success, false on failure.
 */
bool writeDSPFactoryToBitcodeFile(llvm_dsp_factory* factory, const std::string& bit_code_path);

/**
 * Create a Faust DSP factory from a LLVM IR (textual) string. Note that the library keeps an internal cache of all 
 * allocated factories so that the compilation of the same DSP code (that is the same LLVM IR string) will return 
 * the same (reference counted) factory pointer. You will have to explicitly use deleteDSPFactory to properly 
 * decrement reference counter when the factory is no more needed.
 * 
 * @param ir_code - the LLVM IR (textual) string
 * @param target - the LLVM machine target: like 'i386-apple-macosx10.6.0:opteron',
 *                 using an empty string takes the current machine settings,
 *                 and i386-apple-macosx10.6.0:generic kind of syntax for a generic processor
 * @param error_msg - the error string to be filled
 * @param opt_level - LLVM IR to IR optimization level (from -1 to 4, -1 means 'maximum possible value'
 * since the maximum value may change with new LLVM versions). A higher value than the one used when calling 
 * createDSPFactory can possibly be used.
 *
 * @return the DSP factory on success, otherwise a null pointer.
 */
llvm_dsp_factory* readDSPFactoryFromIR(const std::string& ir_code, const std::string& target, std::string& error_msg, int opt_level = -1);

/**
 * Write a Faust DSP factory into a LLVM IR (textual) string.
 * 
 * @param factory - the DSP factory
 *
 * @return the LLVM IR (textual) as a string.
 */
std::string writeDSPFactoryToIR(llvm_dsp_factory* factory);

/**
 * Create a Faust DSP factory from a LLVM IR (textual) file. Note that the library keeps an internal cache of all 
 * allocated factories so that the compilation of the same DSP code (that is the same LLVM IR file) will return 
 * the same (reference counted) factory pointer. You will have to explicitly use deleteDSPFactory to properly 
 * decrement reference counter when the factory is no more needed.
 * 
 * @param ir_code_path - the LLVM IR (textual) file pathname
 * @param target - the LLVM machine target: like 'i386-apple-macosx10.6.0:opteron',
 *                 using an empty string takes the current machine settings,
 *                 and i386-apple-macosx10.6.0:generic kind of syntax for a generic processor
 * @param error_msg - the error string to be filled
 * @param opt_level - LLVM IR to IR optimization level (from -1 to 4, -1 means 'maximum possible value'
 * since the maximum value may change with new LLVM versions), a higher value 
 * than the one used when calling createDSPFactory can possibly be used.
 *
 * @return the DSP factory on success, otherwise a null pointer.
 */
llvm_dsp_factory* readDSPFactoryFromIRFile(const std::string& ir_code_path, const std::string& target, std::string& error_msg, int opt_level = -1);

/**
 * Write a Faust DSP factory into a LLVM IR (textual) file.
 * 
 * @param factory - the DSP factory
 * @param ir_code_path - the LLVM bitcode file pathname.
 *
 * @return true on success, false on failure.
 */
bool writeDSPFactoryToIRFile(llvm_dsp_factory* factory, const std::string& ir_code_path);

/**
 * Create a Faust DSP factory from a base64 encoded machine code string. Note that the library keeps an internal cache of all 
 * allocated factories so that the compilation of the same DSP code (that is the same machine code string) will return 
 * the same (reference counted) factory pointer. You will have to explicitly use deleteDSPFactory to properly 
 * decrement reference counter when the factory is no more needed.
 * 
 * @param machine_code - the machine code string
 * @param target - the LLVM machine target: like 'i386-apple-macosx10.6.0:opteron',
 *                 using an empty string takes the current machine settings,
 *                 and i386-apple-macosx10.6.0:generic kind of syntax for a generic processor
 * @param error_msg - the error string to be filled
 *
 * @return the DSP factory on success, otherwise a null pointer.
 */
llvm_dsp_factory* readDSPFactoryFromMachine(const std::string& machine_code, const std::string& target, std::string& error_msg);

/**
 * Write a Faust DSP factory into a base64 encoded machine code string.
 * 
 * @param factory - the DSP factory
 * @param target - the LLVM machine target: like 'i386-apple-macosx10.6.0:opteron',
 *                 using an empty string takes the current machine settings,
 *                 and i386-apple-macosx10.6.0:generic kind of syntax for a generic processor
 *
 * @return the machine code as a string.
 */
std::string writeDSPFactoryToMachine(llvm_dsp_factory* factory, const std::string& target);

/**
 * Create a Faust DSP factory from a machine code file. Note that the library keeps an internal cache of all 
 * allocated factories so that the compilation of the same DSP code (that is the same machine code file) will return 
 * the same (reference counted) factory pointer. You will have to explicitly use deleteDSPFactory to properly 
 * decrement reference counter when the factory is no more needed.
 * 
 * @param machine_code_path - the machine code file pathname
 * @param target - the LLVM machine target: like 'i386-apple-macosx10.6.0:opteron',
 *                 using an empty string takes the current machine settings,
 *                 and i386-apple-macosx10.6.0:generic kind of syntax for a generic processor
 * @param error_msg - the error string to be filled
 *
 * @return the DSP factory on success, otherwise a null pointer.
 */
llvm_dsp_factory* readDSPFactoryFromMachineFile(const std::string& machine_code_path, const std::string& target, std::string& error_msg);

/**
 * Write a Faust DSP factory into a machine code file.
 * 
 * @param factory - the DSP factory
 * @param machine_code_path - the machine code file pathname
 * @param target - the LLVM machine target: like 'i386-apple-macosx10.6.0:opteron',
 *                 using an empty string takes the current machine settings,
 *                 and i386-apple-macosx10.6.0:generic kind of syntax for a generic processor
 *
 * @return true on success, false on failure.
 */
bool writeDSPFactoryToMachineFile(llvm_dsp_factory* factory, const std::string& machine_code_path, const std::string& target);

/**
 * Write a Faust DSP factory into a object code file.
 *
 * @param factory - the DSP factory
 * @param target - the LLVM machine target: like 'i386-apple-macosx10.6.0:opteron',
 *                 using an empty string takes the current machine settings,
 *                 and i386-apple-macosx10.6.0:generic kind of syntax for a generic processor
 *
 * @return true on success, false on failure.
 */
bool writeDSPFactoryToObjectcodeFile(llvm_dsp_factory* factory, const std::string& object_code_path, const std::string& target);

/**
 * Call global declarations with the given meta object.
 * 
 * @deprecated : use DSP instance metadata method.
 * @param factory - the DSP factory
 * @param meta - the meta object to be used.
 *
 */
DEPRECATED(void metadataDSPFactory(llvm_dsp_factory* factory, Meta* meta));

/**
 * Create a Faust DSP instance.
 * 
 * @deprecated : use factory createDSPInstance method.
 * @param factory - the DSP factory
 * 
 * @return the DSP instance on success, otherwise a null pointer.
 */
DEPRECATED(llvm_dsp* createDSPInstance(llvm_dsp_factory* factory));

/**
 * Delete a Faust DSP instance. You can also simply use C++ 'delete'. 
 * 
 * @deprecated : simply use C++ delete.
 * @param dsp - the DSP instance to be deleted.
 */ 
DEPRECATED(void deleteDSPInstance(llvm_dsp* dsp));

/*!
 @}
 */

#endif
/**************************  END  llvm-dsp.h **************************/
#endif

#include "DspFaust.h"

std::list<GUI*> GUI::fGuiList;
ztimedmap GUI::gTimedZoneMap;

DspFaust::DspFaust(bool auto_connect)
{
    audio* driver = NULL;
#if JACK_DRIVER
    // JACK has its own sample rate and buffer size
#if MIDICTRL
    driver = new jackaudio_midi(auto_connect);
#else
    driver = new jackaudio(auto_connect);
#endif
#elif JUCE_DRIVER
    // JUCE audio device has its own sample rate and buffer size
    driver = new juceaudio();
#else
    std::cerr << "You are not setting 'sample_rate' and 'buffer_size', but the audio driver needs it !\n";
    throw std::bad_alloc();
#endif
    init(NULL, driver);
}

DspFaust::DspFaust(int sample_rate, int buffer_size, bool auto_connect)
{
    init(NULL, createDriver(sample_rate, buffer_size, auto_connect));
}

#if DYNAMIC_DSP
DspFaust::DspFaust(const string& dsp_content, int sample_rate, int buffer_size, bool auto_connect)
{
    string error_msg;

    // Is dsp_content a filename ?
    fFactory = createDSPFactoryFromFile(dsp_content, 0, NULL, "", error_msg, -1);
    if (!fFactory) {
        std::cerr << error_msg;
        // Is dsp_content a string ?
        fFactory = createDSPFactoryFromString("FaustDSP", dsp_content, 0, NULL, "", error_msg);
        if (!fFactory) {
            std::cerr << error_msg;
            throw bad_alloc();
        }
    }

    dsp* dsp = fFactory->createDSPInstance();
    if (!dsp) {
        std::cerr << "Cannot allocate DSP instance\n";
        throw bad_alloc();
    }
    init(dsp, createDriver(sample_rate, buffer_size, auto_connect));
}
#endif

audio* DspFaust::createDriver(int sample_rate, int buffer_size, bool auto_connect)
{
#if COREAUDIO_DRIVER
    audio* driver = new coreaudio(sample_rate, buffer_size);
#elif IOS_DRIVER
    audio* driver = new iosaudio(sample_rate, buffer_size);
#elif ANDROID_DRIVER
    // OBOE has its own and buffer size
    std::cerr << "You are setting 'buffer_size' with a driver that does not need it !\n";
    audio* driver = new oboeaudio(-1);
#elif ALSA_DRIVER
    audio* driver = new alsaaudio(sample_rate, buffer_size);
#elif JACK_DRIVER
    // JACK has its own sample rate and buffer size
    std::cerr << "You are setting 'sample_rate' and 'buffer_size' with a driver that does not need it !\n";
#if MIDICTRL
    audio* driver = new jackaudio_midi(auto_connect);
#else
    audio* driver = new jackaudio(auto_connect);
#endif
#elif PORTAUDIO_DRIVER
    audio* driver = new portaudio(sample_rate, buffer_size);
#elif RTAUDIO_DRIVER
    audio* driver = new rtaudio(sample_rate, buffer_size);
#elif OPEN_FRAMEWORK_DRIVER
    audio* driver = new ofaudio(sample_rate, buffer_size);
#elif JUCE_DRIVER
    // JUCE audio device has its own sample rate and buffer size
    std::cerr << "You are setting 'sample_rate' and 'buffer_size' with a driver that does not need it !\n";
    audio* driver = new juceaudio();
#elif DUMMY_DRIVER
    audio* driver = new dummyaudio(sample_rate, buffer_size);
#endif
    return driver;
}

void DspFaust::init(dsp* mono_dsp, audio* driver)
{
#if MIDICTRL
    midi_handler* midi;
#if JACK_DRIVER
    midi = static_cast<jackaudio_midi*>(driver);
    fMidiInterface = new MidiUI(midi);
#elif JUCE_DRIVER
    midi = new juce_midi();
    fMidiInterface = new MidiUI(midi, true);
#else
    midi = new rt_midi();
    fMidiInterface = new MidiUI(midi, true);
#endif
    fPolyEngine = new FaustPolyEngine(mono_dsp, driver, midi);
    fPolyEngine->buildUserInterface(fMidiInterface);
#else
    fPolyEngine = new FaustPolyEngine(mono_dsp, driver);
#endif

#if OSCCTRL
#if JUCE_DRIVER
    fOSCInterface = new JuceOSCUI(OSC_IP_ADDRESS, atoi(OSC_IN_PORT), atoi(OSC_OUT_PORT));
#else
    const char* argv[9];
    argv[0] = "Faust";  // TODO may be should retrieve the actual name
    argv[1] = "-xmit";
    argv[2] = "1";      // TODO retrieve that from command line or somewhere
    argv[3] = "-desthost";
    argv[4] = OSC_IP_ADDRESS;   // TODO same
    argv[5] = "-port";
    argv[6] = OSC_IN_PORT;      // TODO same
    argv[7] = "-outport";
    argv[8] = OSC_OUT_PORT;     // TODO same
    /*
    // Deactivated for now (sometimes crashing)
    argv[9] = "-bundle";
    argv[10] = "1";             // TODO same
    */
    fOSCInterface = new OSCUI("Faust", 9, (char**)argv); // TODO fix name
    driver->addControlCallback(osc_compute_callback, fOSCInterface);
#endif
    fPolyEngine->buildUserInterface(fOSCInterface);
#endif

#if SOUNDFILE
#if JUCE_DRIVER
    auto file = File::getSpecialLocation(File::currentExecutableFile)
        .getParentDirectory().getParentDirectory().getChildFile("Resources");
    fSoundInterface = new SoundUI(file.getFullPathName().toStdString());
#else
    // Use bundle path
    fSoundInterface = new SoundUI(SoundUI::getBinaryPath());
#endif
    // SoundUI has to be dispatched on all internal voices
    fPolyEngine->setGroup(false);
    fPolyEngine->buildUserInterface(fSoundInterface);
    fPolyEngine->setGroup(true);
#endif
}

DspFaust::~DspFaust()
{
#if OSCCTRL
    delete fOSCInterface;
#endif
#if MIDICTRL
    delete fMidiInterface;
#endif
#if SOUNDFILE
    delete fSoundInterface;
#endif
    delete fPolyEngine;
#if DYNAMIC_DSP
    deleteDSPFactory(static_cast<llvm_dsp_factory*>(fFactory));
#endif
}

bool DspFaust::start()
{
#if OSCCTRL
    fOSCInterface->run();
#endif
#if MIDICTRL
    if (!fMidiInterface->run()) {
        std::cerr << "MIDI run error...\n";
    }
#endif
	return fPolyEngine->start();
}

void DspFaust::stop()
{
#if OSCCTRL
    fOSCInterface->stop();
#endif
#if MIDICTRL
    fMidiInterface->stop();
#endif
	fPolyEngine->stop();
}

bool DspFaust::configureOSC(int xmit, int inport, int outport, int errport, const char* address)
{
#if OSCCTRL
#if JUCE_DRIVER
    // Nothing for now
    return false;
#else
    if (isRunning()) {
        return false;
    } else {
        oscfaust::OSCControler::gXmit = xmit;
        fOSCInterface->setUDPPort(inport);
        fOSCInterface->setUDPOut(outport);
        fOSCInterface->setUDPErr(errport);
        fOSCInterface->setDestAddress(address);
        return true;
    }
#endif
#else
    return false;
#endif
}

bool DspFaust::isOSCOn()
{
#if OSCCTRL
	return true;
#else
  return false;
#endif
}

bool DspFaust::isRunning()
{
	return fPolyEngine->isRunning();
}

uintptr_t DspFaust::keyOn(int pitch, int velocity)
{
	return (uintptr_t)fPolyEngine->keyOn(pitch, velocity);
}

int DspFaust::keyOff(int pitch)
{
	return fPolyEngine->keyOff(pitch);
}

uintptr_t DspFaust::newVoice()
{
	return (uintptr_t)fPolyEngine->newVoice();
}

int DspFaust::deleteVoice(uintptr_t voice)
{
	return fPolyEngine->deleteVoice(voice);
}

void DspFaust::allNotesOff(bool hard)
{
    fPolyEngine->allNotesOff(hard);
}

void DspFaust::propagateMidi(int count, double time, int type, int channel, int data1, int data2)
{
    fPolyEngine->propagateMidi(count, time, type, channel, data1, data2);
}

const char* DspFaust::getJSONUI()
{
	return fPolyEngine->getJSONUI();
}

const char* DspFaust::getJSONMeta()
{
	return fPolyEngine->getJSONMeta();
}

int DspFaust::getParamsCount()
{
	return fPolyEngine->getParamsCount();
}

void DspFaust::setParamValue(const char* address, float value)
{
	fPolyEngine->setParamValue(address, value);
}

void DspFaust::setParamValue(int id, float value)
{
	fPolyEngine->setParamValue(id, value);
}

float DspFaust::getParamValue(const char* address)
{
	return fPolyEngine->getParamValue(address);
}

float DspFaust::getParamValue(int id)
{
	return fPolyEngine->getParamValue(id);
}

void DspFaust::setVoiceParamValue(const char* address, uintptr_t voice, float value)
{
	fPolyEngine->setVoiceParamValue(address, voice, value);
}

void DspFaust::setVoiceParamValue(int id, uintptr_t voice, float value)
{
	fPolyEngine->setVoiceParamValue(id, voice, value);
}

float DspFaust::getVoiceParamValue(const char* address, uintptr_t voice)
{
	return fPolyEngine->getVoiceParamValue(address, voice);
}

float DspFaust::getVoiceParamValue(int id, uintptr_t voice)
{
	return fPolyEngine->getVoiceParamValue(id, voice);
}

const char* DspFaust::getParamAddress(int id)
{
	return fPolyEngine->getParamAddress(id);
}

const char* DspFaust::getVoiceParamAddress(int id, uintptr_t voice)
{
	return fPolyEngine->getVoiceParamAddress(id, voice);
}

float DspFaust::getParamMin(const char* address)
{
    return fPolyEngine->getParamMin(address);
}

float DspFaust::getParamMin(int id)
{
    return fPolyEngine->getParamMin(id);
}

float DspFaust::getParamMax(const char* address)
{
    return fPolyEngine->getParamMax(address);
}

float DspFaust::getParamMax(int id)
{
    return fPolyEngine->getParamMax(id);
}

float DspFaust::getParamInit(const char* address)
{
    return fPolyEngine->getParamInit(address);
}

float DspFaust::getParamInit(int id)
{
    return fPolyEngine->getParamInit(id);
}

const char* DspFaust::getMetadata(const char* address, const char* key)
{
    return fPolyEngine->getMetadata(address, key);
}

const char* DspFaust::getMetadata(int id, const char* key)
{
    return fPolyEngine->getMetadata(id, key);
}

void DspFaust::propagateAcc(int acc, float v)
{
	fPolyEngine->propagateAcc(acc, v);
}

void DspFaust::setAccConverter(int p, int acc, int curve, float amin, float amid, float amax)
{
	fPolyEngine->setAccConverter(p, acc, curve, amin, amid, amax);
}

void DspFaust::propagateGyr(int acc, float v)
{
	fPolyEngine->propagateGyr(acc, v);
}

void DspFaust::setGyrConverter(int p, int gyr, int curve, float amin, float amid, float amax)
{
	fPolyEngine->setGyrConverter(p, gyr, curve, amin, amid, amax);
}

float DspFaust::getCPULoad()
{
	return fPolyEngine->getCPULoad();
}

int DspFaust::getScreenColor()
{
	return fPolyEngine->getScreenColor();
}

#ifdef BUILD
#include <unistd.h>

int main(int argc, char* argv[])
{
#ifdef DYNAMIC_DSP
    DspFaust* dsp = new DspFaust(argv[1], 44100, 512);
#else
    DspFaust* dsp = new DspFaust(44100, 512);
#endif
    dsp->start();
    std::cout << "Type 'q' to quit\n";
    char c;
    while ((c = getchar()) && (c != 'q')) { usleep(100000); }
    dsp->stop();
    delete dsp;
}

#endif

#endif
